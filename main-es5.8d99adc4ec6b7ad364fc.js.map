{"version":3,"sources":["webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-dropdown/form-dropdown.component.html","webpack:///src/app/components/side-bar/select-image/select-image.component.html","webpack:///src/app/components/modal-file-browser/modal-file-browser.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component.html","webpack:///src/app/components/notfound/notfound.component.scss","webpack:///src/app/components/modal-download-selector/modal-download-selector.component.html","webpack:///src/app/components/main/main.component.scss","webpack:///src/app/components/main/main.component.html","webpack:///src/app/components/notfound/notfound.component.html","webpack:///src/app/components/modal-download-selector/modal-download-selector.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component.scss","webpack:///src/app/components/side-bar/select-group/select-group.component.scss","webpack:///src/app/components/side-bar/side-bar.component.scss","webpack:///src/app/components/side-bar/tag-generator/tag-generator.component.html","webpack:///src/app/components/image-gallery/image-gallery.component.scss","webpack:///src/app/components/modal-share-project/modal-share-project.component.html","webpack:///src/app/components/image-gallery/image-gallery.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-fields.component.html","webpack:///src/app/components/side-bar/select-image/select-image.component.scss","webpack:///src/app/app.component.html","webpack:///src/app/components/callback/callback.component.html","webpack:///src/app/components/image-box/image-box.component.html","webpack:///src/app/components/side-bar/side-bar.component.html","webpack:///src/$_lazy_route_resource lazy namespace object","webpack:///src/app/components/side-bar/tag-generator/tag-generator.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-textbox/form-textbox.component.html","webpack:///src/app/components/modal-share-project/modal-share-project.component.scss","webpack:///src/app/components/map/map.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-radio/form-radio.component.html","webpack:///src/app/components/modal-create-project/modal-create-project.component.scss","webpack:///src/app/components/image-box/image-box.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-generator.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component.html","webpack:///src/app/components/modal-current-project/modal-current-project.component.html","webpack:///src/app/components/modal-create-project/modal-create-project.component.html","webpack:///src/app/components/map/map.component.scss","webpack:///src/app/components/side-bar/tag-images/tag-images.component.scss","webpack:///src/app/components/side-bar/select-group/select-group.component.html","webpack:///src/app/components/modal-current-project/modal-current-project.component.scss","webpack:///src/app/components/callback/callback.component.scss","webpack:///src/app/components/modal-file-browser/modal-file-browser.component.scss","webpack:///src/app/components/control-bar/control-bar.component.scss","webpack:///src/app/components/control-bar/control-bar.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-checkbox/form-checkbox.component.html","webpack:///src/app/app.component.scss","webpack:///src/app/components/notfound/notfound.component.ts","webpack:///src/environments/environmentType.ts","webpack:///src/app/models/models.ts","webpack:///src/environments/environment.ts","webpack:///src/app/services/authentication.service.ts","webpack:///src/app/services/notifications.service.ts","webpack:///src/app/services/scroll.service.ts","webpack:///src/app/services/geo-data.service.ts","webpack:///src/app/utils/randomColor.ts","webpack:///src/app/components/main/main.component.ts","webpack:///src/app/components/callback/callback.component.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/utils/leafletUtils.ts","webpack:///src/app/components/map/map.component.ts","webpack:///src/app/services/projects.service.ts","webpack:///src/app/services/agave-systems.service.ts","webpack:///src/app/services/tapis-files.service.ts","webpack:///src/app/components/modal-file-browser/modal-file-browser.component.ts","webpack:///src/app/components/modal-download-selector/modal-download-selector.component.ts","webpack:///src/app/components/modal-create-project/modal-create-project.component.ts","webpack:///src/app/components/modal-share-project/modal-share-project.component.ts","webpack:///src/app/services/groups.service.ts","webpack:///src/app/services/forms.service.ts","webpack:///src/app/components/modal-current-project/modal-current-project.component.ts","webpack:///src/app/services/feature.service.ts","webpack:///src/app/components/control-bar/control-bar.component.ts","webpack:///src/app/app.interceptors.ts","webpack:///src/app/components/image-gallery/image-gallery.component.ts","webpack:///src/app/components/image-box/image-box.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-generator.component.ts","webpack:///src/app/components/side-bar/side-bar.component.ts","webpack:///src/app/utils/groups.ts","webpack:///src/app/components/side-bar/select-group/select-group.component.ts","webpack:///src/app/components/side-bar/select-image/select-image.component.ts","webpack:///src/app/components/side-bar/tag-generator/tag-generator.component.ts","webpack:///src/app/components/side-bar/tag-images/tag-images.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-fields.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-checkbox/form-checkbox.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-dropdown/form-dropdown.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-radio/form-radio.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-textbox/form-textbox.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component.ts","webpack:///src/app/app.module.ts","webpack:///src/main.ts","webpack:///src/app/components/side-bar/tag-images/tag-images.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-generator.component.html"],"names":["__webpack_require__","r","__webpack_exports__","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","NotFoundComponent","_classCallCheck","this","_createClass","key","value","tslib_es6","a","Object","core","n","selector","template","EnvironmentType","GroupForm","AssetFilters","bbox","assetType","Set","has","add","Project","ProjectRequest","AuthToken","token","expires","Date","getTime","expires_in","Feature","f","geometry","properties","type","assets","styles","project_id","length","initialAsset","asset_type","display_path","path","toString","_slicedToArray","exec","slice","Production","Staging","Local","environment","production","apiUrl","clientId","baseHref","backend","AuthenticatedUser","username","email","authentication_service_AuthService","http","router","_currentUser","ReplaySubject","currentUser","asObservable","LS_TOKEN_KEY","LS_USER_KEY","tokenStr","localStorage","getItem","JSON","parse","userToken","isExpired","logout","redirectToauthenticaor","getUserInfo","AUTH_URL","location","origin","Math","random","window","href","removeItem","fromExpiresIn","setItem","stringify","navigate","_this","userStr","user","next","get","subscribe","resp","u","name","fesm2015_http","b","fesm2015_router","C","providedIn","notifications_service_NotificationsService","toastr","authService","TIMEOUT","_notifications","notifications","isLoggedIn","interval","getRecent","_this3","baseUrl","now","toISOString","notes","forEach","note","status","showSuccessToast","message","showErrorToast","success","error","ngx_toastr","ScrollService","scrollRestored","scrollPosition","change","document","documentElement","scrollTop","scroll","top","geo_data_service_GeoDataService","notificationsService","scrollService","_pointClouds","BehaviorSubject","pointClouds","_loaded","loaded","_activeGroupId","activeGroupId","_activeGroup","activeGroup","_activeGroupFeature","activeGroupFeature","_groups","groups","_groupsFeatures","groupsFeatures","_features","features","features$","_activeFeature","_mapMouseLocation","_basemap","_overlays","_activeOverlay","projectId","feature","_this4","query","arguments","undefined","restoreScroll","qstring","querystring","toJson","fc","map","feat","getGroups","setScrollRestored","getFeatures","group","groupFeatures","some","gf","setActiveGroupFeature","pipe","take","current","push","title","conversionParams","payload","description","conversion_parameters","post","getPointClouds","featureId","groupData","pc","file","form","FormData","append","console","log","files","tmp","system","fileList","showImportErrorToast","remoteFile","system_id","response","importImage","downloadLink","createElement","blob","Blob","URL","createObjectURL","setAttribute","body","appendChild","click","removeChild","feats","addFeature","getValue","activeFeature","ovs","label","minLat","maxLat","minLon","maxLon","toFixed","getOverlays","featureList","Map","filter","set","setActiveGroup","groupName","grp","groupProp","getGroupFeatures","v4","color","i","floor","icon","createGroupFeatures","createGroup","updateFeatureProperty","deleteGroup","updateGroup","renamedGroup","assign","updateGroupFeatures","reiconedGroup","forms","ov","loc","bmap","MainComponent","geoDataService","bsModalService","ngx_foundation","c","CallbackComponent","route","auth","frag","snapshot","fragment","params","URLSearchParams","setToken","Activate","authSvc","state","login","routes","component","canActivate","AppRoutingModule","K","imports","forRoot","onSameUrlNavigation","providers","AppComponent","createMarker","latlng","featureType","ico","leaflet_src","divIcon","className","html","marker","circleMarker","radius","fillColor","weight","opacity","fillOpacity","map_component_MapComponent","GeoDataService","mapType","FeatureGroup","featureClickHandler","bind","mouseEventHandler","_this22","overlays","center","zoom","baseOSM","tileLayer","maxZoom","attribution","satellite","addLayer","loadFeatures","on","ev","activeOverlay","skip","addRemoveOverlay","turf_min","fitBounds","basemap","removeLayer","overlay","imageOverlay","getBounds","mapMouseLocation","_this23","geojsonOptions","pointToLayer","collection","clearLayers","markers","markerClusterGroup","iconCreateFunction","cluster","getChildCount","d","geoJSON","layer","projects_service_ProjectsService","_projects","projects","_activeProject","activeProject","_projectUsers","projectUsers$","_deletingProjects","deletingProjects","_this24","_this25","myProjs","p","find","dp","_this26","updateProjectsList","data","prom","proj","setActiveProject","put","project","deleting","getProjects","deletingFailed","tap","users","uname","getProjectUsers","agave_systems_service_AgaveSystemsService","tapis","_systems","systems","_this33","systemsList","result","sys","startsWith","ng_tapis","tapis_files_service_TapisFilesService","popup","_listing","listing","IMPORTABLE_TYPES","ext","getFileExtension","includes","split","pop","toLowerCase","offset","limit","filesList","systemId","filePath","arr","replace","join","systemID","fileName","extension","snackbarConfig","duration","horizontalPosition","verticalPosition","fullURL","date","File","lastModified","valueOf","msg","open","sysStr","lastSystem","fileStr","lastFile","noPreviousSelections","snack_bar","modal_file_browser_component_ModalFileBrowserComponent","_ModalFileBrowserComponent_","ModalFileBrowserComponent_1","tapisFilesService","dialogRef","dialog","agaveSystemsService","currentPath","w","allowedExtensions","inProgress","retrievalError","selectedFiles","onClose","Subject","_this35","list","combineLatest","_ref","myDataSystem","communityDataSystem","publishedDataSystem","selectedSystem","currentDirectory","init","browse","pth","selectedPath","getFiles","_this36","hasMoreFiles","listFiles","shift","getParentPath","unshift","newFile","allowedExt","index","concat","event","shiftKey","selectFilesShiftClick","checkIfSelectable","addSelectedFile","selectShift","firstFileIndex","saveState","Array","from","values","close","_step","count","_iterator","_createForOfIteratorHelper","s","done","select","err","clear","addRangeFiles","lastFileIndex","again","maxIndex","max","min","esm2015_dialog","R","modal_download_selector_component_ModalDownloadSelectorComponent","_ModalDownloadSelectorComponent_","ModalDownloadSelectorComponent_1","passbackData","fileExtension","_this37","downloadSelectForm","fesm2015_forms","Name","Extension","_ref3","_this38","dirty","modal_create_project_component_ModalCreateProjectComponent","projectsService","projCreateForm","projRqst","create","modal_share_project_component_ModalShareProjectComponent","_this39","projShareForm","activeProj","projectUsers","onlyOne","addUserToProject","deleteUserFromProject","groups_service_GroupsService","_selectedImages","selectedImages","_showTagger","showTagger","_showTagGenerator","showTagGenerator","currentFeatures","newFeatures","imageSelected","forms_service_FormsService","featureGroups","taggedGroup","t","targetForm","newName","selectedColor","checkDefault","style","faIcon","updateFeatureStyle","tagValue","tagProp","tags","tag","formList","newValues","tagValueObj","featTag","modal_current_project_component_ModalCurrentProjectComponent","projData","_this40","confirm","uuid","update","B","args","feature_service_FeatureService","featureCollection","featListfeat","deleteFeature","delFeats","featListFeature","Number","featProp","saveFeature","control_bar_component_ControlBarComponent","groupsService","formsService","cdr","filesService","featureService","LatLng","invalidNameError","existingNameError","foundFilePaths","_this43","getState","groupsExist","size","_ref5","grpFts","activeGroupFeatures","activeGroupFeaturesRotate","hasSuccessNotification","hasFailureNotification","selectedProject","item","substring","uploadNewFeature","createBlankFeature","lastProj","getDataForProject","hazmapperLink","detectChanges","unselectAllImages","_this44","afterClosed","importFileFromTapis","coordinates","saveFile","height","width","createNewGroup","closeAll","setScrollPosition","initialGroupName","setShowTagGenerator","toggleTagger","featureShortPath","dir","isJSON","content","forExport","CSVHolder","JSONHolder","projID","tagsPresent","headerComplete","headerTagOptions","element","featureSource","_a","_b","_c","tempTagOptionNum","options","option","compileJSON","tempCSV","extra","download","featureID","transferJSON","compiledJSON","longitude","latitude","src","groupColor","icon color","tag name","tag type","tag selection","url","filename","navigator","userAgent","indexOf","visibility","k","app_interceptors_AuthInterceptor","request","handle","catchError","reload","statusText","throwError","app_interceptors_TokenInterceptor","clone","setHeaders","Authorization","X-JWT-Assertion-designsafe","jwt","image_gallery_component_ImageGalleryComponent","renderer","spinner","scrolling","scrollSum","_this49","projectsExist","imagesExist","featureListScroll","scrollStatus","_this50","hide","setTimeout","show","appendSum","Z","ngx_spinner","image_box_component_ImageBoxComponent","modalService","hasGroup","colors","_this51","featurePath","toggleImageSelect","deleteGroupFeatures","ngx_foundation_modal","F","form_generator_component_FormGeneratorComponent","newValue","checked","colorArray","generateColors","itemCount","isOdd","incrementVal","temp","baseNum","formValue","emit","SideBarComponent","_this52","groupIcons","unicode","select_group_component_SelectGroupComponent","iconList","selectedIcon","showSubitem","_this53","groups$","activeGroup$","selectedGroup","reiconGroup","renameGroup","unsubscribe","SelectImageComponent","_this54","nextGroup","TagGeneratorComponent","formOptions","optionColorFilter","openOption","enabledControls","_this55","formType","formName","formLabel","formRequired","target","formColor","opt","optionFilter","labelFilter","clearLabel","clearOptionColor","clearOption","formItem","_step2","myOpts","_iterator2","createForm","tag_images_component_TagImagesComponent","tagName","tagValues","_this56","_ref7","grps","deleteForm","renameForm","updateTagValues","FormFieldsComponent","form_checkbox_component_FormCheckBoxComponent","_this57","getTagValue","val","form_dropdown_component_FormDropDownComponent","field","_this58","FormFileComponent","form_radio_component_FormRadioComponent","_this59","String","form_textbox_component_FormTextBoxComponent","_this60","form_color_component_FormColorComponent","chosenColor","_this61","chosenTag","_this62","AppModule","declarations","progress_bar","rootUrl","platform_browser","animations","ngx_infinite_scroll","ngx_masonry","menu","toolbar","esm2015_button","tooltip","input","esm2015_checkbox","esm2015_select","esm2015_radio","j","dist","common","progress_spinner","tree","card","provide","multi","useClass","useValue","bootstrap","entryComponents","sb","platform_browser_dynamic","bootstrapModule"],"mappings":"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","file":"main-es5.8d99adc4ec6b7ad364fc.js","sourcesContent":["export default \"<div>\\n  <select class=\\\"form-control\\\" [(ngModel)]=\\\"value\\\" id=\\\"field.name\\\" name=\\\"field.name\\\" (change)=\\\"updateCheckedTag()\\\">\\n    <option *ngFor=\\\"let opt of field\\\" [value]=\\\"opt.label\\\">{{opt.label}}</option>\\n  </select>\\n</div>\\n\"","export default \"<div class=\\\"asset-list\\\">\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">Image List</div>\\n\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem asset-subitem\\\">\\n\\n\\t<div *ngFor=\\\"let feature of getActiveFeatures()\\\" \\n      (click)=\\\"jumpToImage(feature)\\\" \\n      class=\\\"asset-container\\\" \\n      [ngClass]=\\\"{'highlight': isActiveFeature(feature)}\\\">\\n\\n\\t  <div class=\\\"name-group\\\">\\n\\t\\t{{ getFeaturePath(feature) }}\\n\\t  </div>\\n\\n\\t  <div class=\\\"button-group\\\">\\n\\t\\t<div (click)=\\\"deleteFeature(feature)\\\">\\n\\t\\t  <i class=\\\"fas fa-minus\\\"\\n\\t\\t\\t matTooltip=\\\"Delete\\\"\\n\\t\\t\\t matTooltipPosition=\\\"above\\\">\\n\\t\\t  </i>\\n\\t\\t</div>\\n\\t  </div>\\n\\t</div>\\n  </div>\\n</div>\\n\"","export default \"<h4> Select Files </h4>\\n<small><em> Note: Only files are selectable, not folders. Double click on a folder to navigate into it. </em></small>\\n<hr>\\n<select (ngModelChange)=\\\"selectSystem($event)\\\" [(ngModel)]=\\\"selectedSystem\\\">\\n\\t<option [ngValue]=\\\"myDataSystem\\\"> My Data </option>\\n\\t<option [ngValue]=\\\"communityDataSystem\\\"> Community Data</option>\\n\\t<option [ngValue]=\\\"publishedDataSystem\\\"> Published Data</option>\\n\\t<optgroup label=\\\"My Projects\\\">\\n\\t\\t<option *ngFor=\\\"let project of projects\\\" [ngValue]=\\\"project\\\">{{project.description}}</option>\\n\\t</optgroup>\\n</select>\\n\\n<div class=\\\"fileslisting\\\"  infiniteScroll [infiniteScrollDistance]=\\\"2\\\" [infiniteScrollThrottle]=\\\"100\\\" [scrollWindow]=\\\"false\\\" (scrolled)=\\\"getFiles()\\\">\\n\\t<div class=\\\"clickable\\\" class=\\\"grid-x file-row\\\" (dblclick)=\\\"toRoot()\\\">\\n\\t\\t<i class=\\\"fas fa-folder\\\"></i>\\n\\t\\t<span > Home </span>\\n\\t</div>\\n\\t<div class=\\\"clickable\\\" class=\\\"grid-x file-row\\\">\\n\\t\\t<i class=\\\"fas fa-folder-open\\\"></i>\\n\\t\\t<span class=\\\"lineBreak\\\"> {{selectedPath}} </span>\\n\\t</div>\\n\\t<div *ngIf=\\\"retrievalError\\\" class=\\\"grid-x file-row\\\" class=\\\"error\\\">\\n\\t\\tError retrieving files\\n\\t</div>\\n\\t<div class=\\\"grid-x file-row\\\" *ngFor=\\\"let file of filesList; let fileIndex = index\\\" [ngClass]=\\\"{'selected':selectedFiles.has(file.path)}\\\">\\n\\t\\t<div class=\\\"clickable\\\" (click)=\\\"select($event, file, fileIndex)\\\"  (dblclick)=\\\"browse(file)\\\">\\n\\n\\t\\t\\t<i class=\\\"fas fa-folder\\\" *ngIf=\\\"file.type === 'dir'\\\" ></i>\\n\\t\\t\\t<i class=\\\"far fa-file\\\" *ngIf=\\\"file.type !== 'dir'\\\"></i>\\n\\t\\t\\t<span > {{ file.name }} </span>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"size\\\">\\n\\t\\t\\t{{file.length | filesize }}\\n\\t\\t</div>\\n\\t</div>\\n\\t<div class=\\\"grid-x\\\" *ngIf=\\\"inProgress\\\">\\n\\t\\t<div class=\\\"cell medium-12\\\">\\n\\t\\t  <i class=\\\"fas fa-spin fa-atom\\\"></i>\\n\\t\\t</div>\\n\\t  </div>\\n</div>\\n\\n<div class=\\\"button-group\\\">\\n\\t<button mat-raised-button color=\\\"basic\\\" (click)=\\\"selectAll()\\\">Select all</button>\\n\\t<button mat-raised-button color=\\\"warn\\\" class=\\\"button warning\\\" (click)=\\\"cancel()\\\">Done</button>\\n\\t<button mat-raised-button color=\\\"primary\\\" class=\\\"button\\\" [disabled]=\\\"!selectedFiles.size\\\" (click)=\\\"chooseFiles()\\\">Import</button>\\n</div>\\n\"","export default \":host .drop-container {\\n  background: #fff;\\n  border-radius: 6px;\\n  height: 150px;\\n  width: 100%;\\n  box-shadow: 1px 2px 20px rgba(10, 10, 10, 0.1);\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  border: 2px dashed #c0c4c7;\\n}\\n:host p {\\n  font-size: 16px;\\n  font-weight: 400;\\n  color: #c0c4c7;\\n}\\n:host .upload-button {\\n  display: inline-block;\\n  border: none;\\n  outline: none;\\n  cursor: pointer;\\n  color: #5754a3;\\n}\\n:host .upload-button input {\\n  display: none;\\n}\\n:host .dropzone {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  flex-direction: column;\\n  border-radius: 5px;\\n  background: white;\\n  margin: 10px 0;\\n}\\n:host .dropzone.hovering {\\n  border: 2px solid #f16624;\\n  color: #dadada !important;\\n}\\n:host progress::-webkit-progress-value {\\n  transition: width 0.1s ease;\\n}\"","export default \"<div [formGroup]=\\\"form\\\">\\n  <div *ngIf=\\\"!field.value\\\" class=\\\"drop-container dropzone\\\" dropZone (hovered)=\\\"toggleHover($event)\\\"\\n       (dropped)=\\\"field.onUpload($event)\\\" [class.hovering]=\\\"isHovering\\\">\\n    <p class=\\\"m-0\\\">\\n      Drag a file here or\\n      <label class=\\\"upload-button\\\">\\n\\t<input type=\\\"file\\\" multiple=\\\"\\\" (change)=\\\"field.onUpload($event.target.files)\\\"> browse\\n      </label>\\n      to upload.\\n    </p>\\n  </div>\\n  <div *ngIf=\\\"field.value\\\">\\n    <!-- <button type=\\\"button\\\" class=\\\"btn btn-primary\\\">Change</button> -->\\n    <div class=\\\"card\\\">\\n      <img class=\\\"card-img-top\\\" [src]=\\\"field.value\\\">\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"\"","export default \"<h4> Select Files </h4>\\n<small><em> If no folder is selected, the file will be saved in the root of your selected system. </em></small>\\n<hr>\\n<select (ngModelChange)=\\\"selectSystem($event)\\\" [(ngModel)]=\\\"selectedSystem\\\">\\n\\t<option [ngValue]=\\\"myDataSystem\\\"> My Data </option>\\n\\t<option [ngValue]=\\\"communityDataSystem\\\"> Community Data</option>\\n\\t<option [ngValue]=\\\"publishedDataSystem\\\"> Published Data</option>\\n\\t<optgroup label=\\\"My Galleries\\\">\\n\\t\\t<option *ngFor=\\\"let project of projects\\\" [ngValue]=\\\"project\\\">{{project.description}}</option>\\n\\t</optgroup>\\n</select>\\n<div class=\\\"fileslisting\\\"  infiniteScroll [infiniteScrollDistance]=\\\"2\\\" [infiniteScrollThrottle]=\\\"100\\\" [scrollWindow]=\\\"false\\\" (scrolled)=\\\"getFiles()\\\">\\n\\t<div class=\\\"grid-x file-row\\\" *ngFor=\\\"let file of filesList\\\" [ngClass]=\\\"{'selected':selectedFiles.has(file.path)}\\\">\\n\\t\\t<div class=\\\"clickable\\\" (dblclick)=\\\"browse(file)\\\">\\n\\t\\t\\t<i class=\\\"fas fa-folder\\\" *ngIf=\\\"file.type === 'dir'\\\" ></i>\\n\\t\\t\\t<i class=\\\"far fa-file\\\" *ngIf=\\\"file.type !== 'dir'\\\"></i>\\n\\t\\t\\t<span > {{ file.name }} </span>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"size\\\">\\n\\t\\t\\t{{file.length | filesize }}\\n\\t\\t</div>\\n\\t</div>\\n\\t<div class=\\\"grid-x\\\" *ngIf=\\\"inProgress\\\">\\n\\t\\t<div class=\\\"cell medium-12\\\">\\n\\t\\t  <i class=\\\"fas fa-spin fa-atom\\\"></i>\\n\\t\\t</div>\\n\\t  </div>\\n\\n</div>\\n\\n<form [formGroup]=\\\"downloadSelectForm\\\" (ngSubmit)=\\\"update()\\\" id=\\\"current-project-form\\\">\\n    <div>\\n        <small><em> If no filename is specified, it will default to the Gallery ID number. </em></small>\\n    </div>\\n\\n    <mat-form-field>\\n        <input matInput type=\\\"text\\\" formControlName=\\\"Name\\\" appearance=\\\"filled\\\"  required=\\\"false\\\">\\n    </mat-form-field>\\n</form>\\n<span class=\\\"radio-box\\\">\\n<mat-radio-group [(ngModel)]=\\\"fileExtension\\\">\\n    <mat-radio-button value=\\\".csv\\\">.csv</mat-radio-button>\\n    <mat-radio-button value=\\\".json\\\">.json</mat-radio-button>\\n</mat-radio-group>\\n</span>\\n\\n<div class=\\\"button-group\\\">\\n\\t<button mat-raised-button color=\\\"warn\\\" class=\\\"button warning\\\" (click)=\\\"cancel()\\\">Cancel</button>\\n\\t<button mat-raised-button color=\\\"primary\\\" class=\\\"button\\\" (click)=\\\"chooseFiles()\\\">Save</button>\\n</div>\\n\"","export default \":host .top-bar {\\n  height: 40px;\\n  padding: 5px;\\n  padding-left: 0.5em;\\n  flex-wrap: nowrap;\\n  position: fixed;\\n  overflow: hidden;\\n  width: 100%;\\n  z-index: 999;\\n}\\n:host .top-bar-right .top-bar-left {\\n  -webkit-box-flex: 0;\\n  flex-wrap: nowrap;\\n  flex: 0 1 auto;\\n  max-width: 100%;\\n}\\n@media print, screen and (min-width: 40em) {\\n  :host .top-bar {\\n    flex-wrap: nowrap;\\n    flex: 0 1 auto;\\n  }\\n}\"","export default \"<!-- <div class=\\\"grid-x\\\"> -->\\n\\n<!--   <div class=\\\"top-bar\\\" style=\\\"background-color: black\\\" id=\\\"navbar\\\"> -->\\n\\n<!--\\t<div class=\\\"top-bar-left\\\"> -->\\n<!--\\t  <img src=\\\"assets/logo.svg\\\" width=\\\"30PX\\\"> -->\\n<!--\\t  <span style=\\\"color: white\\\">Taggit</span> -->\\n<!--\\t</div> -->\\n\\n\\n<!--\\t<div class=\\\"top-bar-right\\\"> -->\\n<!--\\t  <div class=\\\"light-blue\\\" *ngIf=\\\"currentUser\\\">{{ currentUser.username }}</div> -->\\n<!--\\t</div> -->\\n\\n<!--   </div> -->\\n\\n<!--   <\\\\!-- <div class=\\\"cell control-bar\\\"> -\\\\-> -->\\n<!--   <\\\\!--\\t<app-control-bar></app-control-bar> -\\\\-> -->\\n<!--   <\\\\!-- </div> -\\\\-> -->\\n<!-- </div> -->\\n\\n<app-control-bar></app-control-bar>\\n<!-- NOTE Router Outlet was here -->\\n<app-image-gallery></app-image-gallery>\\n\\n<!-- NOTE Leaflet was here -->\\n\"","export default \"<p>\\n  notfound works!\\n</p>\\n\"","export default \":host {\\n  min-height: 20em;\\n}\\n:host .fileslisting {\\n  height: 20em;\\n  overflow-y: scroll;\\n  padding: 0px 20px;\\n}\\n:host .file-row {\\n  display: flex;\\n  background: #f9f9f9;\\n  border: 1px solid transparent;\\n  user-select: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n}\\n:host .clickable {\\n  flex: 1;\\n  max-width: 20em;\\n}\\n:host .size {\\n  align-items: flex-end;\\n}\\n:host .file-row:hover {\\n  border: 1px solid;\\n}\\n:host .file-row.selected {\\n  background: #d3d3d3;\\n}\\n:host .mat-radio-button ~ .mat-radio-button {\\n  margin-left: 16px;\\n}\\n:host .radio-box {\\n  position: relative;\\n  bottom: 45px;\\n  left: 45%;\\n}\"","export default \"\"","export default \":host {\\n  overflow-y: scroll;\\n}\\n:host .select-group {\\n  overflow: hidden;\\n  max-height: 20%;\\n}\\n:host .subitem-title {\\n  text-align: left;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #F1F1F1;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #F1F1F1;\\n  border-style: solid;\\n  overflow-y: scroll;\\n  background-color: #FFFFFF;\\n  height: 100%;\\n}\\n:host .group-subitem {\\n  height: 100px;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .boxed input[type=radio] {\\n  display: none;\\n}\\n:host .boxed label {\\n  background-color: #fff;\\n  transition: all 0.3s;\\n}\\n:host .boxed input[type=radio]:checked + label {\\n  background-color: #B3E5FF;\\n}\\n:host .group-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .name-group {\\n  display: inline-block;\\n  padding: 3px;\\n}\\n:host .button-group {\\n  margin: 0;\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n}\\n:host .fa {\\n  font-weight: 900;\\n  display: inline-block;\\n  font-style: normal;\\n  font-variant: normal;\\n  text-rendering: auto;\\n  font-family: \\\"FontAwesome\\\";\\n  line-height: 1;\\n}\\n:host .fa option {\\n  font-weight: 900;\\n}\"","export default \":host {\\n  background-color: #F1F1F1;\\n}\"","export default \"<div class=\\\"create-prompt\\\">\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">\\n\\t<span>\\n\\t  Create Tag\\n\\t</span>\\n  </div> <!-- subitem-title -->\\n\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem\\\">\\n\\t<form class=\\\"form-type-form\\\">\\n\\t  <div *ngFor=\\\"let control of enabledControls; let idx = index\\\" class=\\\"box form\\\">\\n\\t\\t<input type=\\\"radio\\\" [id]=\\\"control\\\" value=\\\"control.toLowerCase()\\\" name=\\\"form-type\\\" [checked]=\\\"(idx === 0)\\\" (change)=\\\"selectInputForm(control.toLowerCase())\\\">\\n\\t\\t<label style=\\\"cursor: pointer; margin: 3px; padding: 3px; font-size: 10px\\\" [for]=\\\"control\\\">{{ control }}</label>\\n\\t  </div> <!-- form-type-form -->\\n    </form>\\n\\n    <div class=\\\"form-name\\\">\\n      <mat-form-field class=\\\"input-label-group\\\">\\n        <mat-label>Label</mat-label>\\n        <input matInput placeholder=\\\"Label\\\" #labelValue [(ngModel)]=\\\"labelFilter\\\" (keyup)=\\\"inputFormLabel($event)\\\" name=\\\"labelFilter\\\" class=\\\"tiny\\\" type=\\\"text\\\">\\n      </mat-form-field>\\n\\n      <ng-container *ngIf=\\\"formType != 'text'\\\">\\n        <ng-container *ngIf=\\\"formType == 'color'\\\">\\n          <mat-form-field class=\\\"input-label-group\\\">\\n            <mat-label>Option Color</mat-label>\\n            <input matInput #optionColorValue placeholder=\\\"Option Color\\\" #labelValue [(ngModel)]=\\\"optionColorFilter\\\" (change)=\\\"inputFormColor($event)\\\" name=\\\"optionColorilter\\\" class=\\\"tiny\\\" type=\\\"color\\\">\\n          </mat-form-field>\\n        </ng-container>\\n\\n        <mat-form-field class=\\\"input-label-group\\\">\\n          <mat-label>Options</mat-label>\\n          <div class=\\\"input-group\\\">\\n            <input matInput #optionValue class=\\\"input-group-field\\\" placeholder=\\\"Option\\\" type=\\\"text\\\" [(ngModel)]=\\\"optionFilter\\\" name=\\\"optionFilter\\\" (keyup.enter)=\\\"addOptionItem(optionValue.value); optionValue.value = ''; optionColorValue.value = ''; clearOption(); clearOptionColor()\\\">\\n          </div> <!-- input-group -->\\n        </mat-form-field>\\n\\n\\n        <div class=\\\"input-group-button\\\">\\n          <button mat-button color=\\\"accent\\\" class=\\\"button\\\" (click)=\\\"addOptionItem(optionValue.value); optionValue.value = ''; clearOption()\\\">\\n            <i class=\\\"fas fa-plus\\\"></i>\\n          </button>\\n        </div> <!-- input-group-button -->\\n\\n        <ul class=\\\"form-option-container\\\">\\n          <li *ngFor=\\\"let opt of formOptions\\\" class=\\\"list-group\\\">\\n            <div>\\n              {{opt.label}}\\n              <ng-container *ngIf=\\\"formType == 'color'\\\">\\n                <svg class=\\\"box\\\" width=\\\"10px\\\" height=\\\"10px\\\">\\n                  <rect width=\\\"10px\\\" height=\\\"10px\\\" style=\\\"fill: #ffffff\\\"/>\\n                  <rect width=\\\"8px\\\" height=\\\"8px\\\" x=\\\"1px\\\" y=\\\"1px\\\" [style.fill]=\\\"opt.color\\\"/>\\n                </svg>\\n              </ng-container>\\n            </div> <!-- showopt -->\\n            <div class=\\\"button-group\\\">\\n              <div (click)=\\\"deleteOption(opt)\\\">\\n                <i class=\\\"fas fa-minus\\\"\\n                   matTooltip=\\\"Delete\\\"\\n                   matTooltipPosition=\\\"above\\\"\\n                   style=\\\"cursor: pointer\\\">\\n                </i>\\n              </div> <!-- delete opt -->\\n\\n              <div (click)=\\\"openRenameOptionModal(renameOptionModal)\\\">\\n                <i class=\\\"fas fa-edit\\\"\\n                   style=\\\"cursor: pointer\\\"\\n                   matTooltip=\\\"Rename\\\"\\n                   matTooltipPosition=\\\"above\\\">\\n                </i>\\n              </div>\\n\\n              <ng-template #renameOptionModal>\\n                <input matInput #optionRename\\n                       placeholder=\\\"Rename Option\\\">\\n                <br/>\\n                <br/>\\n                <div class=\\\"button-group\\\">\\n                  <button matDialogClose\\n                          mat-raised-button\\n                          color=\\\"primary\\\"\\n                          (click)=\\\"renameOption(opt, optionRename.value)\\\">Rename</button>\\n                  <button matDialogClose\\n                          mat-button>Cancel</button>\\n                </div>\\n              </ng-template>\\n            </div> <!-- button group -->\\n          </li>\\n        </ul>\\n      </ng-container>\\n    </div> <!-- form-name -->\\n\\n\\t<button mat-raised-button color=\\\"primary\\\" (click)=\\\"addFormItem()\\\">Save</button>\\n\\t<button mat-button color=\\\"primary\\\" (click)=\\\"cancelCreate()\\\">Cancel</button>\\n\\n  </div> <!-- subitem -->\\n</div> <!-- create-group -->\\n\"","export default \":host .img-list-container {\\n  display: grid;\\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\\n  grid-gap: 1em;\\n  height: 100%;\\n  padding: 1em;\\n}\\n:host #no-img {\\n  font-size: 32px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 70vh;\\n}\\n:host #no-proj {\\n  font-size: 32px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 70vh;\\n}\\n:host #new-proj {\\n  font-size: 32px;\\n  display: flex;\\n  height: 100vh;\\n  justify-content: center;\\n  align-items: center;\\n}\\n:host app-image-box {\\n  height: 100%;\\n}\\n:host .masonry-item {\\n  width: 200px;\\n}\\n:host img-spin {\\n  position: relative;\\n  bottom: 0px;\\n  left: 0px;\\n  width: 100%;\\n  height: 100px;\\n  background: #fff;\\n}\\n:host load-spin {\\n  position: relative;\\n  width: 100%;\\n  height: 100px;\\n  background: #fff;\\n}\\n:host .side-bar-container {\\n  background-color: #F1F1F1;\\n  position: fixed;\\n  width: 25%;\\n  margin-right: 0px;\\n  height: calc(100vh - 50px);\\n  right: 0;\\n}\\n:host .success {\\n  margin-right: 20%;\\n}\\n:host .danger {\\n  margin-right: 0%;\\n}\\n:host #gallery-container-container {\\n  position: relative;\\n  width: 100%;\\n  height: auto;\\n  text-align: center;\\n  display: flex;\\n  flex-direction: column;\\n  margin-top: 0px;\\n}\\n:host #loading-load {\\n  position: relative;\\n  width: 100%;\\n  height: auto;\\n  text-align: center;\\n  flex-direction: column;\\n  margin-top: 50px;\\n}\\n:host #gallery-container {\\n  position: relative;\\n  width: 100%;\\n  height: auto;\\n  text-align: center;\\n  display: flex;\\n  flex-direction: column;\\n}\\n:host #gallery-container .gallery-image {\\n  height: 100%;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n:host #gallery-container .gallery-image img {\\n  max-width: 100%;\\n  max-height: 100%;\\n  margin: 0 auto;\\n}\\n:host .imager {\\n  width: 75%;\\n  height: calc(100vh - 50px);\\n  background-color: #fefefe;\\n}\\n:host .view-image {\\n  max-width: 100%;\\n  height: auto;\\n}\\n:host .gallery-btn {\\n  width: 35px;\\n  height: 35px;\\n  background: #000;\\n  color: #fff;\\n  text-align: center;\\n  line-height: 35px;\\n  cursor: pointer;\\n  transition: all 0.4s ease;\\n  font-size: 20px;\\n  box-sizing: border-box;\\n  padding-left: 2px;\\n  position: fixed;\\n  bottom: 10px;\\n}\\n:host .gallery-btn:hover {\\n  background: #222;\\n}\\n:host .gallery-close {\\n  top: 10px;\\n}\\n:host .gallery-close .gallery-next {\\n  right: 10px;\\n}\\n:host .gallery-prev {\\n  right: 50px;\\n}\\n:host .gallery-prev .gallery-next {\\n  bottom: 10px;\\n}\\n@media (min-width: 478px) {\\n  :host .img-list-container img:nth-child(3n):not(last-of-type) {\\n    grid-row-end: span 2;\\n  }\\n}\\n@media (max-width: 768px) {\\n  :host .img-list-container {\\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\\n  }\\n}\\n@media (max-width: 450px) {\\n  :host .img-list-container {\\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\\n  }\\n}\"","export default \"<h4>Share this project</h4>\\n<small><em> People you share your project with will have full ability to edit and delete this project on Taggit and on HazMapper. </em></small>\\n\\n<form [formGroup]=\\\"projShareForm\\\" (ngSubmit)=\\\"submit()\\\" id=\\\"share-project-form\\\">\\n    <mat-form-field>\\n        <mat-label>Username:</mat-label>\\n        <input matInput type=\\\"text\\\" formControlName=\\\"name\\\" required=\\\"true\\\">\\n    </mat-form-field>\\n\\n<div class=\\\"button-group small\\\">\\n    <button mat-raised-button color=\\\"warn\\\" class=\\\"button small warning\\\" type=\\\"button\\\" (click)=\\\"close()\\\">Close</button>\\n    <button mat-raised-button color=\\\"primary\\\" class=\\\"button small align-right\\\" type=\\\"submit\\\" [disabled]=\\\"!projShareForm.valid\\\">Add Member</button>\\n</div>\\n\\n<br>\\n<h5>Current Users</h5>\\n<div *ngFor=\\\"let user of projectUsers\\\">\\n    <br>\\n    <mat-card class=\\\"card-container\\\">\\n        <span class=\\\"card-item\\\">\\n            {{user.username}}\\n        </span>\\n        <span class=\\\"card-buttons\\\">\\n            <button mat-raised-button color=\\\"warn\\\" class=\\\"button small warning\\\" type=\\\"button\\\" [disabled]=\\\"onlyOne\\\" (click)=\\\"delete(user.username)\\\">\\n                <i class=\\\"fas fa-trash\\\"></i>\\n            </button>\\n        </span>\\n    </mat-card>\\n</div>\\n</form>\"","export default \"<div *ngIf=\\\"loaded; else loader\\\" id=\\\"loading-load\\\">\\n  <div *ngIf=\\\"projectsExist; else noProjWarn\\\" id=\\\"gallery-container\\\">\\n    <div *ngIf=\\\"imagesExist; else noImgWarn\\\" id=\\\"gallery-container-container\\\">\\n      <div [ngClass]=\\\"scrollStatus\\\"\\n        infiniteScroll\\n        [infiniteScrollDistance]=\\\"1\\\"\\n        [infiniteScrollThrottle]=\\\"1500\\\"\\n        (scrolled)=\\\"onScroll()\\\"\\n        class=\\\"img-list-container\\\"\\n        *ngIf=\\\"!showTagger; else tagger\\\">\\n        <app-image-box\\n          *ngFor=\\\"let feat of featureListScroll\\\"\\n          [feature]=\\\"feat\\\">\\n        </app-image-box>\\n      </div>\\n\\n      <ngx-spinner\\n        bdOpacity = 0.9\\n        bdColor = \\\"\\\"\\n        size = \\\"default\\\"\\n        color = \\\"#3ADB76\\\"\\n        type = \\\"line-scale-pulse-out\\\"\\n        id = \\\"img-spin\\\"\\n        [fullScreen] = \\\"false\\\">\\n      </ngx-spinner>\\n      <ng-template #tagger>\\n        <div>\\n          <div class=\\\"imager\\\">\\n            <img class=\\\"view-image\\\" [src]=\\\"getPath()\\\">\\n          </div>\\n        </div>\\n      </ng-template>\\n      <div *ngIf=\\\"showTagger\\\" class=\\\"side-bar-container\\\">\\n        <app-side-bar></app-side-bar>\\n      </div>\\n    </div>\\n    <ng-template #noImgWarn>\\n      <div id=\\\"no-img\\\">\\n        No images have been imported!<br>Please import images through the menu.\\n      </div>\\n    </ng-template>\\n  </div>\\n\\n  <ng-template #noProjWarn>\\n    <div id=\\\"no-proj\\\">\\n      No project has been created!<br>Please create a project through the menu.\\n    </div>\\n  </ng-template>\\n\\n</div>\\n\\n<ng-template #loader>\\n  <div *ngIf=\\\"projectsExist; else createProj\\\" id=\\\"loader\\\">\\n    Loading...\\n  </div>\\n\\n  <ng-template #createProj> \\n    <div id=\\\"new-proj\\\" (click)=\\\"openCreateProjectModal()\\\">\\n      Start a new project\\n    </div>\\n  </ng-template>\\n\\n</ng-template>\\n\"","export default \"<div class=\\\"form-group row\\\" *ngFor=\\\"let tag of field\\\">\\n  <label class=\\\"col-md-3 form-control-label\\\" [attr.for]=\\\"tag.label\\\">\\n    {{field.label}}\\n    <strong class=\\\"text-danger\\\" *ngIf=\\\"tag.required\\\">*</strong>\\n  </label>\\n  <div class=\\\"col-md-9\\\" [ngSwitch]=\\\"tag.type\\\">\\n    <app-form-color *ngSwitchCase=\\\"'color'\\\" [field]=\\\"field\\\" [form]=\\\"form\\\"></app-form-color>\\n    <app-form-textbox *ngSwitchCase=\\\"'text'\\\" [field]=\\\"field\\\" [form]=\\\"form\\\"></app-form-textbox>\\n    <app-form-dropdown *ngSwitchCase=\\\"'dropdown'\\\" [field]=\\\"field\\\" [form]=\\\"form\\\"></app-form-dropdown>\\n    <app-form-checkbox *ngSwitchCase=\\\"'checkbox'\\\" [field]=\\\"field\\\" [form]=\\\"form\\\"></app-form-checkbox>\\n    <app-form-radio *ngSwitchCase=\\\"'radio'\\\" [field]=\\\"field\\\" [form]=\\\"form\\\"></app-form-radio>\\n  </div>\\n</div>\\n\"","export default \":host .subitem-title {\\n  text-align: left;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #F1F1F1;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #F1F1F1;\\n  border-style: solid;\\n  overflow-y: scroll;\\n  background-color: #FFFFFF;\\n  height: 100%;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .asset-list {\\n  max-height: 20%;\\n  overflow: hidden;\\n}\\n:host .asset-subitem {\\n  height: 100px;\\n}\\n:host .asset-container {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  cursor: pointer;\\n}\\n:host .highlight {\\n  background-color: #B3E5FF;\\n}\\n:host .name-group {\\n  display: inline-block;\\n  padding: 3px;\\n}\\n:host .button-group {\\n  margin: 0;\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n  padding-right: 5px;\\n}\"","export default \"<!--The content below is only a placeholder and can be replaced.-->\\n<router-outlet></router-outlet>\\n\"","export default \"<div id=\\\"callback\\\">\\n    <div>\\n\\t<i class=\\\"fas fa-spinner\\\"></i>\\n    </div>\\n</div>\\n\"","export default \"<div class=\\\"img-container\\\">\\n  <img [ngClass]=\\\"imageSelected\\\"\\n       [src]=\\\"featureSource\\\"\\n       (click)=\\\"imageSelect()\\\"\\n       class=\\\"img-responsive img-target\\\"\\n       title={{featurePath}}>\\n  <div class=\\\"top-overlay\\\">\\n    <div class=\\\"image-option\\\"\\n         matTooltip=\\\"Zoom\\\"\\n         matTooltipPosition=\\\"below\\\"\\n         (click)=\\\"imageZoom(diffSizes)\\\">\\n      <i class=\\\"fas fa-search-plus\\\"></i>\\n    </div>\\n\\n    <ng-template #diffSizes>\\n      <div class=\\\"zoom-content\\\">\\n        <div class=\\\"img-container\\\">\\n          <img [src]=\\\"featureSource\\\" title={{featurePath}}>\\n        </div>\\n        <div class=\\\"img-details\\\">\\n          <div class=\\\"detail-container\\\">\\n            <div class=\\\"title\\\">\\n              Coordinates\\n            </div>\\n            <div class=\\\"detail-contents\\\">\\n              <div class=\\\"detail-item\\\">\\n                {{coordinates[0]}},\\n              </div>\\n              <div class=\\\"detail-item\\\">\\n                {{coordinates[1]}}\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"detail-container\\\">\\n            <div class=\\\"title\\\">\\n              Image Source\\n            </div>\\n            <div class=\\\"detail-contents\\\">\\n              <div class=\\\"detail-item\\\">\\n                {{featurePath}}\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <button mat-button class=\\\"close-button\\\" matDialogClose aria-label=\\\"Close modal\\\" type=\\\"button\\\">\\n          <span aria-hidden=\\\"true\\\">&times;</span>\\n        </button>\\n      </div>\\n    </ng-template>\\n\\n    <div class=\\\"image-option\\\"\\n         matTooltip=\\\"Remove\\\"\\n         matTooltipPosition=\\\"below\\\"\\n         (click)=\\\"openImageDeleteModal(deleteImage)\\\">\\n      <i class=\\\"fas fa-trash\\\"></i>\\n    </div>\\n\\n    <ng-template #deleteImage>\\n      <div *ngIf=\\\"selectedImages.length === 1\\\">\\n        This image will be deleted from the current project. It will not be deleted from the Data Depot.\\n      </div>\\n\\n      <div *ngIf=\\\"selectedImages.length > 1\\\">\\n        {{selectedImages.length}} images will be deleted from the current project. They will not be deleted from the Data Depot.\\n      </div>\\n\\n      <button mat-raised-button color=\\\"primary\\\" matDialogClose (click)=\\\"imageDelete()\\\">Delete Image</button>\\n      <button mat-button matDialogClose>Cancel</button>\\n    </ng-template>\\n\\n    <div class=\\\"image-option\\\"\\n         matTooltip=\\\"Add To Group\\\"\\n         matTooltipPosition=\\\"below\\\"\\n         (click)=\\\"openImageAddModal(addMoreToGroup)\\\">\\n      <i class=\\\"fas fa-plus\\\"></i>\\n    </div>\\n\\n    <ng-template #addMoreToGroup>\\n\\n      <mat-form-field appearance=\\\"fill\\\">\\n        <mat-label>Groups</mat-label>\\n        <mat-select matNativeControl required [(value)]=\\\"groupToAdd\\\">\\n          <mat-option *ngFor=\\\"let group of groups | keyvalue\\\" [value]=\\\"group.value\\\">\\n            {{ group.key }}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <p>\\n        <button mat-raised-button color=\\\"primary\\\" matDialogClose (click)=\\\"addGroup(groupToAdd)\\\" [disabled]=\\\"!groupToAdd\\\">Add To Group</button>\\n        <button mat-button color=\\\"secondary\\\" matDialogClose>Cancel</button>\\n      </p>\\n\\n    </ng-template>\\n  </div>\\n\\n  <div class=\\\"bottom-overlay\\\">\\n\\n    <div *ngIf=\\\"feature.properties.group && feature.properties.group.length > 0\\\">\\n\\n      <div *ngIf=\\\"feature.properties.group.length < 5; else dotdot\\\" class=\\\"group-tags\\\">\\n        <div *ngFor=\\\"let group of feature.properties.group\\\"\\n             class=\\\"center\\\"\\n             (mouseover)=\\\"group.name\\\"\\n             [matTooltip]=\\\"group.name\\\"\\n             matTooltipPosition=\\\"above\\\">\\n          <svg class=\\\"box\\\" width=\\\"25px\\\" height=\\\"75px\\\" (click)=\\\"deleteFromGroup(feature, group)\\\">\\n            <rect width=\\\"15px\\\" height=\\\"15px\\\" x=\\\"5\\\" y=\\\"30\\\" [style.fill]=\\\"group.color\\\"/>\\n            <rect class=\\\"inner-del\\\" width=\\\"25px\\\" height=\\\"15px\\\" rx=\\\"3\\\" x=\\\"0\\\" y=\\\"0\\\" style=\\\"fill: #ffffff\\\"/>\\n            <rect  class=\\\"inner-del\\\" width=\\\"15px\\\" height=\\\"5px\\\" x=\\\"5\\\" y=\\\"5\\\" style=\\\"fill: #DE6363\\\"/>\\n          </svg>\\n        </div>\\n      </div>\\n\\n      <ng-template #dotdot class=\\\"text\\\">\\n        <div class=\\\"image-option\\\"\\n             (click)=\\\"openMoreGroupsModal(moreGroupsModal)\\\">\\n          <i class=\\\"fas fa-ellipsis-h\\\"></i>\\n        </div>\\n      </ng-template>\\n\\n      <!-- TODO Should close modal once zero groups -->\\n      <ng-template #moreGroupsModal>\\n        <div style=\\\"display: flex; justify-content: center; align-items: center\\\">\\n          <div *ngFor=\\\"let group of feature.properties.group\\\"\\n               class=\\\"center-temp\\\"\\n               style=\\\"display: flex\\\"\\n               (mouseover)=\\\"group.name\\\"\\n               [matTooltip]=\\\"group.name\\\"\\n               matTooltipPosition=\\\"right\\\">\\n            <svg style=\\\"padding: 1\\\" (click)=\\\"deleteFromGroup(feature, group)\\\" width=\\\"15px\\\" height=\\\"15px\\\">\\n              <rect width=\\\"15px\\\" height=\\\"15px\\\" [style.fill]=\\\"group.color\\\"/>\\n              <rect class=\\\"inner-del-temp\\\" width=\\\"8px\\\" height=\\\"4px\\\" x=\\\"3.3\\\" y=\\\"5.5\\\" style=\\\"fill: #000\\\"/>\\n            </svg>\\n          </div>\\n        </div>\\n      </ng-template>\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"<app-select-group></app-select-group>\\n<app-select-image></app-select-image>\\n\\n<app-tag-generator *ngIf=\\\"showTagGenerator; else tagImages\\\"></app-tag-generator>\\n<ng-template #tagImages>\\n  <app-tag-images></app-tag-images>\\n</ng-template>\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"crnd\";","export default \":host {\\n  display: block;\\n  font-size: 0.8em;\\n  height: calc(100vh - 50px);\\n}\\n:host .lat-lon-label {\\n  font-size: 0.8em;\\n  color: #4d4d4d;\\n}\\n:host .active-project {\\n  background-color: #1aff8c;\\n}\\n:host .menu button.dropdown.button {\\n  padding: 0.85em 1em;\\n}\\n:host .switch {\\n  margin: 0;\\n}\\n:host .button.tiny {\\n  margin: 0;\\n}\\n:host .create-prompt {\\n  max-height: 500px;\\n  height: 500px;\\n}\\n:host .select-group {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .subitem-title {\\n  text-align: left;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #F1F1F1;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n:host .input-label-group {\\n  padding: 10px;\\n  display: block;\\n}\\n:host .input-group {\\n  display: inline-block;\\n}\\n:host .form-name {\\n  text-align: center;\\n}\\n:host .input-group-button {\\n  display: inline-block;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #F1F1F1;\\n  border-style: solid;\\n  overflow-y: auto;\\n  background-color: #FFFFFF;\\n  height: 40vh;\\n  padding: 20px;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .preset-descriptions {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .boxed input[type=radio] {\\n  display: none;\\n}\\n:host .boxed label {\\n  background-color: #fff;\\n  transition: all 0.3s;\\n}\\n:host .boxed input[type=radio]:checked + label {\\n  background-color: #B3E5FF;\\n}\\n:host .group-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .button-group {\\n  margin: 0;\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .form-option-container {\\n  padding: 0px;\\n}\\n:host .list-group {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .list-suboptions {\\n  background-color: #F0F0F0;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n}\\n:host .name-group {\\n  display: inline-block;\\n  padding: 3px;\\n}\\n:host .form-item-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .form-type-form {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  margin: 5px;\\n  margin-bottom: 15px;\\n}\\n:host .form-type-form input[type=radio] {\\n  display: none;\\n}\\n:host .form-type-form label {\\n  border-style: solid;\\n  border-width: 1px;\\n  border-color: #ddd;\\n  transition: all 0.3s;\\n}\\n:host .form-type-form input[type=radio]:checked + label {\\n  border-style: solid;\\n  border-width: 1px;\\n  border-color: #000;\\n}\\n:host .changed {\\n  color: #F07575;\\n}\\n:host .unchanged {\\n  color: #555555;\\n}\\n:host .asset-list {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .asset-container {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  cursor: pointer;\\n}\\n:host .highlight {\\n  background-color: #B3E5FF;\\n}\"","export default \"<div>\\n  <textarea  [id]=\\\"field.name\\\"\\n\\t\\trows=\\\"9\\\" class=\\\"form-control\\\" [placeholder]=\\\"'notes'\\\" [(ngModel)]=\\\"value\\\" (keyup)=\\\"updateValue()\\\"></textarea>\\n</div>\\n\"","export default \":host #share-project-form {\\n  display: flex;\\n  flex-direction: column;\\n  text-align: center;\\n  padding: 5em;\\n}\\n\\n.card-container {\\n  display: flex;\\n  justify-content: space-between;\\n  width: 99%;\\n}\\n\\n.card-item {\\n  text-align: center;\\n  align-items: center;\\n}\\n\\n.card-buttons {\\n  align-items: flex-end;\\n}\"","export default \"<div id=\\\"map\\\" style=\\\"min-height: calc(100vh - 67px)\\\"></div>\\n\"","export default \"<div *ngFor=\\\"let opt of form.options\\\" [id]=\\\"form.label\\\" class=\\\"input-group\\\">\\t\\n  <div  class=\\\"form-check form-check\\\">\\n    <label class=\\\"form-check-label\\\">\\n      <input class=\\\"form-check-input\\\" [(ngModel)]=\\\"value\\\" type=\\\"radio\\\" id=\\\"inlineCheckbox2\\\" name={{label}} value={{opt.label}} (change)=\\\"updateCheckedTag()\\\" /> \\n      {{opt.label}}\\n    </label>\\n  </div>\\n</div>\\n\"","export default \":host #create-project-form {\\n  display: flex;\\n  flex-direction: column;\\n  text-align: center;\\n  padding: 5em;\\n}\"","export default \":host .img-container {\\n  position: relative;\\n}\\n:host .img-container img {\\n  -o-object-fit: cover;\\n     object-fit: cover;\\n  cursor: default;\\n  width: 100%;\\n  height: 100%;\\n  transition: opacity 0.3s ease;\\n  backface-visibility: hidden;\\n  max-width: 100%;\\n  max-height: 100%;\\n  margin: 0 auto;\\n}\\n:host .top-overlay {\\n  display: flex;\\n  flex-direction: row;\\n  transition: 0.3s ease;\\n  opacity: 0;\\n  position: absolute;\\n  right: 10px;\\n  top: 10px;\\n  cursor: pointer;\\n  text-align: center;\\n}\\n:host .bottom-overlay {\\n  display: flex;\\n  flex-direction: row;\\n  transition: 0.3s ease;\\n  opacity: 1;\\n  position: absolute;\\n  right: 10px;\\n  bottom: 10px;\\n  text-align: center;\\n}\\n:host .img-container:hover img {\\n  opacity: 0.9;\\n}\\n:host .img-container:hover .top-overlay {\\n  opacity: 0.9;\\n}\\n:host .img-container:hover .top-overlay:hover {\\n  opacity: 1;\\n}\\n:host .image-option {\\n  opacity: 0.9;\\n  background-color: white;\\n  display: flex;\\n  color: black;\\n  width: 40px;\\n  height: 30px;\\n  border-radius: 5px;\\n  font-size: 16px;\\n  margin: 3px;\\n  justify-content: center;\\n  align-items: center;\\n}\\n:host .image-option:hover {\\n  opacity: 1;\\n}\\n:host .image-option .fas {\\n  top: 5px;\\n}\\n:host .img-selected {\\n  border: solid #0191FF;\\n  border-width: 5px;\\n}\\n:host .img-unselected {\\n  border: solid #fff;\\n  border-width: 5px;\\n}\\n:host .group-tags {\\n  opacity: 0.9;\\n  background-color: white;\\n  display: flex;\\n  flex-direction: row;\\n  width: auto;\\n  height: 30px;\\n  border-radius: 5px;\\n  padding: 5px;\\n  justify-content: center;\\n  align-items: center;\\n  z-index: 999;\\n}\\n:host .center {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: center;\\n  transition: 0.3s ease;\\n  align-items: center;\\n}\\n:host .center .inner-del {\\n  opacity: 0;\\n  transition: 0.3s ease;\\n  cursor: pointer;\\n}\\n:host .center:hover .inner-del {\\n  opacity: 1;\\n}\\n:host .box {\\n  padding: 1px;\\n}\\n.center-temp {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.center-temp .inner-del-temp {\\n  opacity: 0;\\n  transition: 0.3s ease;\\n  cursor: pointer;\\n}\\n.center-temp:hover .inner-del-temp {\\n  opacity: 0.5;\\n}\\n.zoom-content {\\n  display: flex;\\n  flex-direction: column;\\n  max-height: 700px;\\n}\\n.zoom-content .img-container {\\n  overflow-y: scroll;\\n  width: 100%;\\n  height: 100%;\\n  background-color: #e7e7e7;\\n}\\n.zoom-content .img-details {\\n  display: flex;\\n  flex-direction: row;\\n  margin-top: 24px;\\n  background-color: #e7e7e7;\\n  align-items: center;\\n  text-align: center;\\n}\\n.zoom-content .title {\\n  background-color: #ccc;\\n  padding: 5px;\\n}\\n.zoom-content .detail-container {\\n  display: flex;\\n  flex-grow: 1;\\n  flex-direction: column;\\n  padding: 5px;\\n}\\n.zoom-content .detail-contents {\\n  display: flex;\\n  flex-direction: row;\\n  padding: 5px;\\n  background-color: #fff;\\n}\\n.zoom-content .detail-item {\\n  padding: 5px;\\n}\"","export default \":host {\\n  text-align: left;\\n}\\n:host .mat-form-field {\\n  width: 100%;\\n  text-align: left;\\n}\\n:host .input-group {\\n  padding: 5px;\\n}\\n:host label {\\n  padding: 5px;\\n}\\n:host input {\\n  padding: 5px;\\n  vertical-align: middle;\\n}\\n:host .radio-group {\\n  display: flex;\\n  flex-direction: column;\\n}\\n:host .form-controls {\\n  padding: 20px;\\n}\"","export default \"<div *ngFor=\\\"let opt of form.options\\\" [id]=\\\"form.label\\\" class=\\\"input-group\\\">\\n  <div  class=\\\"form-check form-check\\\">\\n    <label class=\\\"form-check-label\\\">\\n      <input class=\\\"form-check-input\\\" [(ngModel)]=\\\"chosenTag\\\" type=\\\"radio\\\" id=\\\"inlineCheckbox3\\\" name={{label}} value={{opt.label}} (change)=\\\"updateCheckedTag()\\\" /> \\n      {{opt.label}}\\n\\n\\t  <svg class=\\\"box\\\" width=\\\"10px\\\" height=\\\"10px\\\">\\n        <rect width=\\\"10px\\\" height=\\\"10px\\\" style=\\\"fill: #ffffff\\\"/>\\n        <rect width=\\\"8px\\\" height=\\\"8px\\\" x=\\\"1px\\\" y=\\\"1px\\\" [style.fill]=\\\"opt.color\\\"/>\\n      </svg>\\n    </label>\\n  </div>\\n</div>\\n\"","export default \"<h4> Current Gallery </h4>\\n<form [formGroup]=\\\"projCreateForm\\\" (ngSubmit)=\\\"update()\\\" id=\\\"current-project-form\\\">\\n  <mat-form-field>\\n\\t<mat-label>Name:</mat-label>\\n\\t<input matInput type=\\\"text\\\" formControlName=\\\"name\\\" appearance=\\\"filled\\\"  required=\\\"true\\\">\\n\\n  </mat-form-field>\\n\\n  <mat-form-field>\\n    <mat-label>Description</mat-label>\\n    <textarea matInput formControlName=\\\"description\\\" required=\\\"true\\\"></textarea>\\n  </mat-form-field>\\n\\n  <div class=\\\"button-group small\\\">\\n    <button mat-raised-button color=\\\"basic\\\" class=\\\"button small warning\\\" type=\\\"button\\\" (click)=\\\"close()\\\">Close</button>\\n    <button *ngIf=\\\"activeProject.deletable\\\" mat-raised-button color=\\\"warn\\\" class=\\\"button small warning\\\" type=\\\"delete\\\" (click)=\\\"delete()\\\">Delete</button>\\n    <button mat-raised-button color=\\\"primary\\\" class=\\\"button small align-right\\\" type=\\\"submit\\\" [disabled]=\\\"!projCreateForm.valid\\\">Update</button>\\n  </div>\\n</form>\\n\"","export default \"<h4> Create a new Gallery </h4>\\n<form [formGroup]=\\\"projCreateForm\\\" (ngSubmit)=\\\"submit()\\\" id=\\\"create-project-form\\\">\\n  <mat-form-field>\\n\\t<mat-label>Name:</mat-label>\\n\\t<input matInput type=\\\"text\\\" formControlName=\\\"name\\\" required=\\\"true\\\">\\n  </mat-form-field>\\n\\n  <mat-form-field>\\n\\t<mat-label>Description</mat-label>\\n\\t<textarea matInput formControlName=\\\"description\\\" required=\\\"true\\\"></textarea>\\n  </mat-form-field>\\n\\n  <div class=\\\"button-group small\\\">\\n\\t<button mat-raised-button color=\\\"warn\\\" class=\\\"button small warning\\\" type=\\\"button\\\" (click)=\\\"close()\\\">Close</button>\\n\\t<button mat-raised-button color=\\\"primary\\\" class=\\\"button small align-right\\\" type=\\\"submit\\\" [disabled]=\\\"!projCreateForm.valid\\\">Submit</button>\\n  </div>\\n</form>\\n\"","export default \"\"","export default \":host {\\n  font-size: 0.8em;\\n  display: block;\\n}\\n:host .subitem-title {\\n  text-align: left;\\n  display: flex;\\n  justify-content: space-between;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #F1F1F1;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #F1F1F1;\\n  border-style: solid;\\n  padding: 10px;\\n  overflow-y: auto;\\n  background-color: #FFFFFF;\\n  height: 40vh;\\n}\\n:host .main-form-container {\\n  padding: 10px;\\n}\\n:host .subitem-scroll {\\n  padding: 10px;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .highlight {\\n  background-color: #B3E5FF;\\n}\\n:host .boxed input[type=radio] {\\n  display: none;\\n}\\n:host .boxed label {\\n  background-color: #fff;\\n  transition: all 0.3s;\\n}\\n:host .boxed input[type=radio]:checked + label {\\n  background-color: #B3E5FF;\\n}\\n:host .group-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .select-group {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .tag-forms {\\n  height: 500px;\\n}\\n:host .asset-list {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .asset-container {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  cursor: pointer;\\n}\\n:host .preset-descriptions {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .form-item-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .button-group {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n}\\n:host .name-group {\\n  padding: 3px;\\n  font-size: 17px;\\n  font-weight: bold;\\n}\\n:host .list-group {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .list-suboptions {\\n  background-color: #F0F0F0;\\n}\"","export default \"<div class=\\\"select-group\\\">\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">Groups</div>\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem group-subitem\\\">\\n\\t<!-- TODO redundant functionality radio is just for style -->\\n\\t<form class=\\\"boxed\\\">\\n\\t  <div *ngFor=\\\"let group of groups | keyvalue\\\" (click)=\\\"selectGroupForm(group.value)\\\" class=\\\"box form\\\">\\n\\t\\t<input type=\\\"radio\\\" [id]=\\\"group.key\\\" [value]=\\\"group.key\\\" name=\\\"skills\\\" [checked]=\\\"isChecked(group.key)\\\">\\n\\t\\t<label class=\\\"group-container\\\" style=\\\"cursor: pointer\\\" [for]=\\\"group.key\\\">\\n\\t\\t  <div class=\\\"name-group\\\">\\n\\t\\t\\t{{group.key}}\\n\\t\\t\\t<svg class=\\\"box\\\" width=\\\"10px\\\" height=\\\"10px\\\">\\n\\t\\t\\t  <rect width=\\\"10px\\\" height=\\\"10px\\\" style=\\\"fill: #ffffff\\\"/>\\n\\t\\t\\t  <rect width=\\\"8px\\\" height=\\\"8px\\\" x=\\\"1px\\\" y=\\\"1px\\\" [style.fill]=\\\"group.value.color\\\"/>\\n\\t\\t\\t</svg>\\n\\t\\t  </div>\\n\\t\\t  <div class=\\\"button-group\\\">\\n\\t\\t\\t<div (click)=\\\"deleteGroup(group.value)\\\">\\n\\t\\t\\t  <i class=\\\"fas fa-minus\\\"\\n\\t\\t\\t\\t matTooltip=\\\"Delete\\\"\\n\\t\\t\\t\\t matTooltipPosition=\\\"below\\\">\\n\\t\\t\\t  </i>\\n\\t\\t\\t</div>\\n\\t\\t\\t<div (click)=\\\"openRenameModal(renameModal, group.value)\\\">\\n\\t\\t\\t  <i class=\\\"fas fa-edit\\\"\\n\\t\\t\\t\\t matTooltip=\\\"Rename\\\"\\n\\t\\t\\t\\t matTooltipPosition=\\\"below\\\">\\n\\t\\t\\t  </i>\\n\\t\\t\\t</div>\\n\\t\\t\\t\\t<div (click)=\\\"openIconSelection(iconModal, group.value)\\\">\\n\\t\\t\\t\\t\\t<span class=\\\"fa {{group.value.icon}}\\\"\\n\\t\\t\\t\\t\\tmatTooltip=\\\"icons\\\"\\n\\t\\t\\t\\t\\tmatTooltipPosition=\\\"below\\\"></span>\\n\\t\\t\\t\\t</div>\\n\\t\\t  \\t</div>\\n\\t\\t</label>\\n\\t  </div>\\n\\t</form>\\n\\n\\t<ng-template #renameModal>\\n\\t  <input matInput #groupRename\\n\\t\\t\\t placeholder=\\\"Rename Group\\\"\\n\\t\\t\\t (keyup.enter)=\\\"renameGroup(groupRename.value)\\\">\\n\\t  <br/>\\n\\t  <br/>\\n\\t  <div class=\\\"button-group\\\">\\n\\t\\t<button matDialogClose color=\\\"primary\\\" mat-raised-button (click)=\\\"renameGroup(groupRename.value)\\\">Rename</button>\\n\\t\\t<button matDialogClose mat-button>Cancel</button>\\n\\t  </div>\\n\\t</ng-template>\\n\\n\\t<ng-template #iconModal>\\n\\t\\t<div class=\\\"iconDropdown\\\">\\n\\t\\t<select class=\\\"fa\\\" [(ngModel)]=\\\"selectedIcon\\\">\\n\\t\\t  <option class=\\\"fa\\\" *ngFor=\\\"let icon of iconList\\\" value={{icon.id}} [innerHTML]=\\\"icon.unicode\\\">\\n          </option>\\n\\t\\t</select>\\n\\t\\t<br/>\\n\\t  \\t<br/>\\n\\t\\t<div class=\\\"button-group\\\">\\n\\t\\t\\t<button matDialogClose color=\\\"primary\\\" mat-raised-button (click)=\\\"saveIcon(selectedIcon)\\\">Save</button>\\n\\t\\t\\t<button matDialogClose mat-button>Cancel</button>\\n\\t\\t  </div>\\n\\t</div>\\n\\t</ng-template>\\n\\n  </div> <!-- subitem -->\\n</div> <!-- select-group -->\\n\"","export default \":host #current-project-form {\\n  display: flex;\\n  flex-direction: column;\\n  text-align: center;\\n  padding: 5em;\\n}\"","export default \"\"","export default \":host {\\n  min-height: 20em;\\n}\\n:host .fileslisting {\\n  height: 20em;\\n  overflow-y: scroll;\\n  padding: 0px 20px;\\n}\\n:host .file-row {\\n  display: flex;\\n  background: #f9f9f9;\\n  border: 1px solid transparent;\\n  user-select: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n}\\n:host .clickable {\\n  flex: 1;\\n  max-width: 20em;\\n}\\n:host .size {\\n  align-items: flex-end;\\n}\\n:host .file-row:hover {\\n  border: 1px solid;\\n}\\n:host .file-row.selected {\\n  background: #d3d3d3;\\n}\\n.error {\\n  background-color: red;\\n  color: white;\\n}\\n.lineBreak {\\n  max-width: 350px;\\n  word-break: break-word;\\n}\"","export default \":host .active-project {\\n  background-color: #1aff8c;\\n}\\n:host .menu button.dropdown.button {\\n  padding: 0.85em 1em;\\n}\\n:host .button.tiny {\\n  margin: 0;\\n}\\n:host .current-project {\\n  padding: 30px;\\n  font-size: 14px;\\n}\\n:host .goods {\\n  height: 27px;\\n  margin: 0px;\\n  padding: 0px;\\n}\\n:host .toggler {\\n  margin-left: 10px;\\n}\\n:host .picker {\\n  display: inline-block;\\n}\\n:host .group-bar {\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .path-buttons {\\n  text-align: center;\\n}\\n:host .project-menu {\\n  margin-left: 10px;\\n}\\n:host .top-bar {\\n  position: fixed;\\n  margin-top: -50px;\\n  height: 50px;\\n  z-index: 999;\\n}\\n:host .top-bar-right .top-bar-left {\\n  -webkit-box-flex: 0;\\n  flex-wrap: nowrap;\\n  flex: 0 1 auto;\\n  max-width: 100%;\\n}\\n:host .my-button {\\n  border-radius: 5px;\\n  padding: 5px;\\n}\\n:host .button-spacing {\\n  margin-right: 15px;\\n}\\n@media print, screen and (min-width: 40em) {\\n  :host .top-bar {\\n    flex-wrap: nowrap;\\n    flex: 0 1 auto;\\n  }\\n}\\n:host .example-spacer {\\n  flex: 1 1 auto;\\n}\"","export default \"<mat-toolbar class=\\\"top-bar\\\" color=\\\"primary\\\">\\n  <img src=\\\"assets/logo.svg\\\" width=\\\"40PX\\\">\\n  <span style=\\\"color: white\\\">Taggit</span>\\n\\n  <button mat-icon-button [matMenuTriggerFor]=\\\"project\\\" color=\\\"foreground\\\" class=\\\"project-menu\\\">\\n    <mat-icon>menu</mat-icon>\\n  </button>\\n\\n\\n  <mat-menu #project=\\\"matMenu\\\">\\n    <span mat-menu-item *ngIf=\\\"selectedProject\\\" (click)=\\\"openProjectModal(selectedProject)\\\">\\n      Current Gallery : {{selectedProject.name}}\\n    </span>\\n    <button mat-menu-item (click)=\\\"openCreateProjectModal()\\\">Create Gallery</button>\\n    <button mat-menu-item [matMenuTriggerFor]=\\\"projectList\\\">Select Gallery</button>\\n    <button mat-menu-item (click)=\\\"openFilePicker(test)\\\">File Browser</button>\\n    <button mat-menu-item [matMenuTriggerFor]=\\\"saveOptions\\\">Save as</button>\\n  </mat-menu>\\n\\n  <mat-menu #projectList=\\\"matMenu\\\">\\n    <button mat-menu-item class=\\\"clickable\\\" *ngFor=\\\"let p of projects\\\" (click)=\\\"selectProject(p)\\\" [ngClass]=\\\"{'active-project': p === selectedProject}\\\">\\n      {{ p.name }}\\n    </button>\\n  </mat-menu>\\n\\n  <mat-menu #saveOptions=\\\"matMenu\\\">\\n    <button mat-menu-item (click)=saveFile(0)>CSV file</button>\\n    <button mat-menu-item (click)=saveFile(1)>JSON file</button>\\n    <button mat-menu-item (click)=openDownloadSelector()>Export to DesignSafe</button>\\n  </mat-menu>\\n\\n  <span class=\\\"example-spacer\\\"></span>\\n\\n  <div *ngIf=\\\"showTagger\\\" class=\\\"path-buttons\\\">\\n    <div class=\\\"slides\\\" style=\\\"line-height: 1; font-size: 12px\\\">\\n      {{getAssetDisplay()}}\\n      <div class=\\\"lr-buttons\\\" style=\\\"margin-top: 5px\\\">\\n        <i (click)=\\\"otherPath(false)\\\" style=\\\"margin-right: 10px; cursor: pointer\\\" class=\\\"fas fa-angle-left\\\"></i>\\n        <i (click)=\\\"otherPath(true)\\\" style=\\\"margin-left: 10px; cursor: pointer\\\" class=\\\"fas fa-angle-right\\\"></i>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <span class=\\\"example-spacer\\\"></span>\\n\\n  <div class=\\\"group-bar grid-x align-right\\\">\\n\\n    <button mat-raised-button class=\\\"button-spacing\\\" [disabled]=\\\"selectedImages.length === 0\\\" (click)=\\\"clearAll()\\\">Clear Selected</button>\\n\\n    <!-- A link that looks like a button, links to Hazmapper-->\\n    <a class=\\\"button-spacing\\\" mat-raised-button href={{hazMapperLink}} title=\\\"Open your gallery in HazMapper\\\" target=\\\"_blank\\\">\\n      <img src=\\\"assets/hazmapper-header-logo.png\\\" width=\\\"100PX\\\">\\n    </a>\\n\\n    <button mat-raised-button\\n      (click)=\\\"openAddGroupModal(addGroupModal)\\\" *ngIf=\\\"selectedImages.length > 0 && !showTagger\\\">Add Group</button>\\n\\n    <ng-template #addGroupModal>\\n      <mat-form-field>\\n        <mat-label>Group Name</mat-label>\\n        <input matInput placeholder=\\\"Group Name\\\" (keyup.enter)=\\\"addGroup(groupInput.value)\\\" #groupInput>\\n      </mat-form-field>\\n\\n      <div style=\\\"color: #ff0000\\\" *ngIf=\\\"invalidNameError\\\">\\n        Invalid Name!\\n      </div>\\n      <div style=\\\"color: #ff0000\\\" *ngIf=\\\"existingNameError\\\">\\n        Existing Name!\\n      </div>\\n      <br/>\\n      <br/>\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"addGroup(groupInput.value)\\\">Add Group</button>\\n      <button mat-button matDialogClose color=\\\"secondary\\\">Cancel</button>\\n    </ng-template>\\n  </div>\\n\\n  <button *ngIf=\\\"groupsExist && !showTagger\\\"\\n    mat-raised-button\\n    style=\\\"margin-left: 15px\\\"\\n    (click)=\\\"toggleTagger()\\\">Taggit!</button>\\n\\n  <button *ngIf=\\\"showTagger\\\"\\n    mat-raised-button\\n    style=\\\"margin-left: 15px\\\"\\n    (click)=\\\"toggleTagger()\\\">Gallery</button>\\n\\n\\n</mat-toolbar>\\n\"","export default \"<div *ngFor=\\\"let opt of form.options\\\" [id]=\\\"form.label\\\" class=\\\"input-group\\\">\\n  <div  class=\\\"form-check form-check\\\">\\n    <label class=\\\"form-check-label\\\">\\n      <input class=\\\"form-check-input\\\" type=\\\"checkbox\\\" [checked]=\\\"isChecked(opt)\\\" id=\\\"inlineCheckbox1\\\" value={{opt.label}} (change)=\\\"selected($event, opt)\\\" /> \\n      {{opt.label}}\\n    </label>\\n  </div>\\n</div>\\n\\n\"","export default \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-notfound',\n  templateUrl: './notfound.component.html',\n  styleUrls: ['./notfound.component.scss']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export enum EnvironmentType {\n  Production = 'production',\n  Staging = 'staging',\n  Local = 'local',\n}\n","import {\n  Feature as GeoJSONFeature,\n  GeoJsonProperties,\n  Geometry,\n  FeatureCollection as IFeatureCollection,\n} from 'geojson';\n\n// TODO: break these out into their own files\n\nexport interface IPointCloud {\n  id: number;\n  description: string;\n  conversion_parameters: string;\n  feature_id?: number;\n  task_id?: string;\n  project_id: number;\n}\n\n// export interface Group {\n//   groupName: Array<string>;\n//   formList: Array<any>;\n//   // type: any;\n// }\n\n// export interface Group {\n//   groupName: Array<string>;\n//   formList: Array<any>;\n//   // type: any;\n// }\n\nexport interface Group {\n  groupName: string;\n  formList: Array<any>;\n  color: string;\n  // type: any;\n}\n\nexport class Group implements Group {}\n\nexport interface TagGroup {\n  name: string;\n  id?: number;\n  color?: string;\n  icon?: string;\n  forms?: GroupForm[];\n}\n\nexport class TagGroup implements TagGroup {}\n\nexport interface GroupForm {\n  id?: string;\n  groupName?: string;\n  label?: string;\n  color?: string;\n  type?: string;\n  options?: Array<any>;\n}\n\nexport class GroupForm implements GroupForm {}\n\nexport interface Tag {\n  id?: string;\n  value?: any;\n}\n\nexport class Tag implements Tag {}\n\n// NOTE: For geojson/tag\nexport interface TagValue {\n  id: number;\n  featureId?: number;\n  tagId?: number;\n  groupId?: string;\n  value?: Array<any> | string | number;\n}\n\nexport class TagValue implements TagValue {}\n\nexport class AssetFilters {\n  // bbox has the following format: [sw_lng, sw_lat, ne_lng, ne_lat], the same as leaflet\n  bbox: Array<number> = [];\n  assetType: Set<string> = new Set<string>();\n\n  updateAssetTypes(assetType: string) {\n    this.assetType.has(assetType)\n      ? this.assetType.delete(assetType)\n      : this.assetType.add(assetType);\n  }\n\n  updateBBox(bbox: Array<number>): void {\n    this.bbox = bbox;\n  }\n\n  toJson() {\n    return {\n      assetType: [...this.assetType],\n      bbox: this.bbox,\n    };\n  }\n}\n\nexport interface Project {\n  description: string;\n  id?: number;\n  name: string;\n  ds_id?: string;\n  title?: string;\n  uuid?: string;\n  public?: boolean;\n  system_file?: string;\n  system_id?: string;\n  system_path?: string;\n  deletable?: boolean;\n  deleting?: boolean;\n  deletingFailed?: boolean;\n}\n\nexport class Project implements Project {}\n\nexport interface ProjectRequest {\n  project: Project;\n  observable?: boolean;\n  watch_content?: boolean;\n}\n\nexport class ProjectRequest implements ProjectRequest {}\n\nexport class AuthToken {\n  token: string;\n  expires: Date;\n  /**\n   *\n   * @param token : String\n   * @param expires: Date\n   */\n  constructor(token: string, expires: Date) {\n    this.token = token;\n    this.expires = new Date(expires);\n  }\n\n  static fromExpiresIn(token: string, expires_in: number) {\n    const expires = new Date(new Date().getTime() + expires_in * 1000);\n    return new AuthToken(token, expires);\n  }\n\n  /**\n   * Checks if the token is expired or not\n   */\n  public isExpired(): boolean {\n    return new Date().getTime() > this.expires.getTime();\n  }\n}\n\nexport interface IFeatureAsset {\n  id?: number;\n  path?: string;\n  uuid?: string;\n  feature_id?: number;\n  asset_type?: string;\n  display_path?: string;\n}\n\nexport class FeatureAsset implements IFeatureAsset {\n  id: number;\n  path: string;\n  uuid: string;\n  feature_id: number;\n  asset_type: string;\n  display_path: string;\n\n  // TODO: Implenent this\n  get assetPath(): string {\n    return '';\n  }\n}\n\ninterface FeatureStyles {\n  [key: string]: string | number;\n}\n\nexport interface Overlay {\n  id: number;\n  path: string;\n  uuid: string;\n  minLon: number;\n  minLat: number;\n  maxLon: number;\n  maxLat: number;\n  project_id: number;\n  label: string;\n}\n\ninterface AppGeoJSONFeature extends GeoJSONFeature {\n  assets?: Array<IFeatureAsset>;\n  styles?: FeatureStyles;\n  project_id?: number;\n  // featureType?(): String\n}\n\nexport class FeatureCollection implements IFeatureCollection {\n  features: Feature[];\n  type: any;\n}\n\nexport class Feature implements AppGeoJSONFeature {\n  geometry: Geometry;\n  // Taggit specific:\n  // properties.tags: Tag[]\n  // properties.groups: Group[]\n  // properties.values: TagValue[]\n  properties: GeoJsonProperties;\n  id?: string | number;\n  type: any;\n  assets?: Array<IFeatureAsset>;\n  styles?: FeatureStyles;\n  project_id?: number;\n\n  constructor(f: AppGeoJSONFeature) {\n    this.geometry = f.geometry;\n    this.properties = f.properties;\n    this.id = f.id;\n    this.type = f.type;\n    this.assets = f.assets;\n    this.styles = f.styles;\n    this.project_id = f.project_id;\n  }\n\n  initialAsset?() {\n    return this.assets[0];\n  }\n\n  featureType?(): string {\n    if (this.assets && this.assets.length === 1) {\n      return this.initialAsset().asset_type;\n    }\n\n    if (this.assets && this.assets.length > 1) {\n      return 'collection';\n    }\n\n    if (!this.assets.length) {\n      return this.geometry.type;\n    }\n  }\n\n  featurePath?(): string {\n    const initialAsset = this.initialAsset();\n    if (initialAsset.display_path) {\n      return initialAsset.display_path;\n    } else if (initialAsset.path) {\n      return initialAsset.path;\n    } else {\n      return this.id.toString();\n    }\n  }\n\n  featureShortPath?(): string {\n    const [initialAsset] = this.assets;\n    if (initialAsset.display_path) {\n      return /[^/]*$/.exec(initialAsset.display_path)[0];\n    } else if (initialAsset.path) {\n      const path = /[^/]*$/.exec(initialAsset.path)[0];\n      return path.slice(0, 15) + '...';\n    } else {\n      return this.id.toString();\n    }\n  }\n}\n\nexport interface IProjectUser {\n  id: number;\n  username: string;\n}\n","import { EnvironmentType } from './environmentType';\n\nexport interface AppEnvironment {\n  production: boolean;\n  apiUrl: string;\n  jwt?: string;\n  clientId: string;\n  baseHref: string;\n  backend: EnvironmentType;\n}\n\nexport const environment: AppEnvironment = {\n  production: true,\n  apiUrl: 'https://agave.designsafe-ci.org/geo/v2/',\n  clientId: 'jHXnvsmQQcmP43qlrG7ATaxFXHQa',\n  baseHref: '/',\n  backend: EnvironmentType.Production\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { AuthToken } from '../models/models';\nimport {environment} from '../../environments/environment';\nimport {Observable, ReplaySubject} from 'rxjs';\nimport {Router} from '@angular/router';\n\nexport class AuthenticatedUser {\n  public readonly username: string;\n  public readonly email: string;\n  private _token: AuthToken;\n\n  constructor(username: string, email: string) {\n    this.username = username;\n    this.email = email;\n  }\n\n}\n\ninterface OpenIDUser {\n  name: string;\n  email: string;\n}\n\n\n@Injectable({providedIn: 'root'})\nexport class AuthService {\n\n  private _currentUser: ReplaySubject<AuthenticatedUser> = new ReplaySubject<AuthenticatedUser>(1);\n  public readonly currentUser: Observable<AuthenticatedUser> = this._currentUser.asObservable();\n  userToken: AuthToken;\n  private LS_TOKEN_KEY = 'hazmapperToken';\n  private LS_USER_KEY = 'hazmapperUser';\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  public login() {\n    // First, check if the user has a token in localStorage\n    const tokenStr = localStorage.getItem(this.LS_TOKEN_KEY);\n    if (!tokenStr) {\n      this.redirectToauthenticaor();\n    } else {\n      const token = JSON.parse(tokenStr);\n      this.userToken = new AuthToken(token.token, new Date(token.expires));\n      if (!this.userToken || this.userToken.isExpired()) {\n        this.logout();\n        this.redirectToauthenticaor();\n      }\n      this.getUserInfo();\n    }\n  }\n\n  private redirectToauthenticaor() {\n    const client_id = environment.clientId;\n    const callback = location.origin + environment.baseHref + 'callback';\n    const state = Math.random().toString(36);\n    const AUTH_URL = `https://agave.designsafe-ci.org/authorize?scope=openid&client_id=${client_id}&response_type=token&redirect_uri=${callback}&state=${state}`;\n    window.location.href = AUTH_URL;\n  }\n\n\n  /**\n   * Checks to make sure that the user has a token and the token is not expired;\n   */\n  public isLoggedIn(): boolean {\n    return this.userToken && !this.userToken.isExpired();\n  }\n\n  public logout(): void {\n    this.userToken = null;\n    localStorage.removeItem(this.LS_TOKEN_KEY);\n    localStorage.removeItem(this.LS_USER_KEY);\n  }\n\n  public setToken(token: string, expires: number): void {\n    this.userToken = AuthToken.fromExpiresIn(token, expires);\n    localStorage.setItem(this.LS_TOKEN_KEY, JSON.stringify(this.userToken));\n    // hit the wso2 api to retrieve the username etc\n    this.router.navigate(['/']);\n  }\n\n  public getUserInfo() {\n    const INFO_URL = `https://agave.designsafe-ci.org/oauth2/userinfo?schema=openid`;\n    const userStr = localStorage.getItem(this.LS_USER_KEY);\n    const user = JSON.parse(userStr);\n    if (user !== null) {\n      this._currentUser.next(\n        new AuthenticatedUser(user.username, user.email)\n      );\n    } else {\n      this.http.get<OpenIDUser>(INFO_URL).subscribe(resp => {\n        const u = new AuthenticatedUser(resp.name, resp.email);\n        localStorage.setItem(this.LS_USER_KEY, JSON.stringify(u));\n        this._currentUser.next(u);\n      });\n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { ToastrService } from 'ngx-toastr';\nimport { HttpClient } from '@angular/common/http';\nimport { INotification } from '../models/notification';\nimport { interval, Observable, ReplaySubject } from 'rxjs';\nimport { AuthService } from '../services/authentication.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationsService {\n  // Interval time to get notifications in millisecs\n  private TIMEOUT = 5000;\n  private _notifications: ReplaySubject<Array<INotification>> = new ReplaySubject<Array<INotification>>(1);\n  public readonly  notifications: Observable<Array<INotification>> = this._notifications.asObservable();\n\n  constructor(private toastr: ToastrService,\n              private http: HttpClient,\n              private authService: AuthService ) {\n      if (this.authService.isLoggedIn()) {\n      const timer = interval(this.TIMEOUT);\n      timer.subscribe((next) => {\n        this.getRecent();\n      });\n    }\n  }\n\n  // Sends a request to GeoAPI to retrieve recent notifications\n  getRecent(): void {\n    const baseUrl = environment.apiUrl + 'notifications/';\n    const now = new Date();\n    const then = new Date(now.getTime() - this.TIMEOUT);\n\n    this.http.get<Array<INotification>>(baseUrl + `?startDate=${then.toISOString()}`)\n      .subscribe( (notes) => {\n        this._notifications.next(notes);\n        notes.forEach( (note) => {\n          switch (note.status) {\n            case 'success':\n              this.showSuccessToast(note.message);\n              break;\n            case 'error':\n              this.showErrorToast(note.message);\n              break;\n            default:\n              break;\n          }\n        });\n      });\n  }\n\n  showSuccessToast(message: string): void {\n    this.toastr.success(message);\n  }\n\n  showImportErrorToast(message: string): void {\n    this.toastr.error(message + ', trying alternate method');\n  }\n\n  showErrorToast(message: string): void {\n    this.toastr.error(message);\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScrollService {\n\n  constructor() { }\n\n  public scrollRestored = true; // if true, the scroll was restored to the proper place\n  public scrollPosition = 0;\n\n  setScrollRestored(change: boolean) { this.scrollRestored = change; }\n\n  setScrollPosition() { this.scrollPosition = document.documentElement.scrollTop; }\n\n  scroll() {\n    // Attempts to scroll to the specified location\n\t\tdocument.documentElement.scroll({top: this.scrollPosition});\n\t\t// if it reaches there, marks the check as complete\n\t\tif (document.documentElement.scrollTop == this.scrollPosition) {\n\t\t\tthis.scrollRestored = false;\n\t\t}\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { LatLng } from 'leaflet';\nimport {\n  AssetFilters,\n  FeatureAsset,\n  IFeatureAsset,\n  IPointCloud,\n  Overlay,\n  TagGroup,\n  Tag,\n  TagValue,\n  GroupForm,\n} from '../models/models';\nimport { Feature, FeatureCollection } from '../models/models';\nimport { environment } from '../../environments/environment';\nimport { Form } from '@angular/forms';\nimport { take } from 'rxjs/operators';\nimport * as querystring from 'querystring';\nimport { RemoteFile } from 'ng-tapis';\nimport { NotificationsService } from './notifications.service';\nimport { ScrollService } from './scroll.service';\nimport { getRandomColor } from '../utils/randomColor';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GeoDataService {\n  // TODO: clean this up and put the observables up here. Also look into Replay/Behavior\n  // TODO: Go over this and remove all unused functions, a lot of this was copy/pasted over from Hazmapper without a second thought\n  private _features: BehaviorSubject<FeatureCollection>;\n  private features$: Observable<FeatureCollection>;\n  private _activeFeature: BehaviorSubject<any>;\n  private _mapMouseLocation: BehaviorSubject<any>;\n  private _basemap: BehaviorSubject<any>;\n  private _overlays: BehaviorSubject<any>;\n  private _activeOverlay: BehaviorSubject<any>;\n  private _pointClouds: BehaviorSubject<Array<IPointCloud>> =\n    new BehaviorSubject<Array<IPointCloud>>(null);\n  public readonly pointClouds: Observable<Array<IPointCloud>> =\n    this._pointClouds.asObservable();\n  private fileList: Array<RemoteFile>;\n\n  private _loaded: BehaviorSubject<boolean> = new BehaviorSubject(null);\n  public loaded: Observable<boolean> = this._loaded.asObservable();\n\n  private _activeGroupId: BehaviorSubject<number> = new BehaviorSubject(null);\n  public activeGroupId: Observable<number> = this._activeGroupId.asObservable();\n\n  private _activeGroup: BehaviorSubject<TagGroup> = new BehaviorSubject(null);\n  public activeGroup: Observable<TagGroup> = this._activeGroup.asObservable();\n\n  private _activeGroupFeature: BehaviorSubject<any> = new BehaviorSubject<any>(\n    null\n  );\n  public activeGroupFeature: Observable<any> =\n    this._activeGroupFeature.asObservable();\n\n  private _groups: BehaviorSubject<Map<string, TagGroup>> = new BehaviorSubject(\n    null\n  );\n  public groups: Observable<Map<string, TagGroup>> =\n    this._groups.asObservable();\n\n  private _groupsFeatures: BehaviorSubject<Map<string, Feature[]>> =\n    new BehaviorSubject(null);\n  public groupsFeatures: Observable<Map<string, Feature[]>> =\n    this._groupsFeatures.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private notificationsService: NotificationsService,\n    private scrollService: ScrollService\n  ) {\n    this._features = new BehaviorSubject<FeatureCollection>({\n      type: 'FeatureCollection',\n      features: [],\n    });\n    this.features$ = this._features.asObservable();\n    this._activeFeature = new BehaviorSubject<any>(null);\n    this._mapMouseLocation = new BehaviorSubject<any>(null);\n\n    // For the style of the basemap, defaults to OpenStreetmap\n    this._basemap = new BehaviorSubject<any>('roads');\n\n    // Holds all of the overlays on a project\n    this._overlays = new BehaviorSubject<any>(null);\n    this._activeOverlay = new BehaviorSubject<any>(null);\n  }\n\n  getFeature(\n    projectId: number,\n    feature: Feature\n  ): Observable<FeatureCollection> {\n    return this.http.get<FeatureCollection>(\n      environment.apiUrl + `/projects/${projectId}/features/${feature.id}/`\n    );\n  }\n\n  getFeatures(\n    projectId: number,\n    query: AssetFilters = new AssetFilters(),\n    restoreScroll = false\n  ): void {\n    const qstring: string = querystring.stringify(query.toJson());\n    this.http\n      .get<FeatureCollection>(\n        environment.apiUrl + `/projects/${projectId}/features/` + '?' + qstring\n      )\n      .subscribe((fc: FeatureCollection) => {\n        fc.features = fc.features.map((feat: Feature) => new Feature(feat));\n        this.getGroups(fc.features);\n        this._features.next(fc);\n        this._loaded.next(true);\n\n        if (restoreScroll) {\n          this.scrollService.setScrollRestored(true);\n        }\n      });\n  }\n\n  deleteFeature(feature: Feature) {\n    this.http\n      .delete(\n        environment.apiUrl +\n          `projects/${feature.project_id}/features/${feature.id}/`\n      )\n      .subscribe((resp) => {\n        this.getFeatures(feature.project_id, new AssetFilters(), true);\n      });\n  }\n\n  getPointClouds(projectId: number) {\n    this.http\n      .get<Array<IPointCloud>>(\n        environment.apiUrl + `/projects/${projectId}/point-cloud/`\n      )\n      .subscribe((resp) => {\n        this._pointClouds.next(resp);\n      });\n  }\n\n  setActiveGroup(group: TagGroup): void {\n    this._activeGroup.next(group);\n    if (group) {\n      const groupFeatures = this._groupsFeatures.value.get(group.name);\n      if (!this._activeGroupFeature.value || !groupFeatures.some(gf => this._activeGroupFeature.value.id === gf.id)) {\n        this.setActiveGroupFeature(groupFeatures[0]);\n      } \n    } else {\n      this.setActiveGroupFeature(null);\n    }\n  }\n\n  setActiveGroupFeature(feat: any): void {\n    this._activeGroupFeature.next(feat);\n  }\n\n  addFeature(feat: Feature): void {\n    this.features$.pipe(take(1)).subscribe((current: FeatureCollection) => {\n      current.features.push(feat);\n      this._features.next(current);\n    });\n  }\n\n  addPointCloud(\n    projectId: number,\n    title: string,\n    conversionParams: string\n  ): void {\n    const payload = {\n      description: title,\n      conversion_parameters: conversionParams,\n    };\n    this.http\n      .post(environment.apiUrl + `/projects/${projectId}/point-cloud/`, payload)\n      .subscribe(\n        (resp) => {\n          this.getPointClouds(projectId);\n        },\n        (error) => {\n          // TODO: notification\n        }\n      );\n  }\n\n  updateFeatureProperty(\n    projectId: number,\n    featureId: string | number,\n    groupData: any\n  ): void {\n    this.http\n      .post(\n        environment.apiUrl +\n          `projects/${projectId}/features/${featureId}/properties/`,\n        groupData\n      )\n      .subscribe(\n        // TODO: getFeatures() here\n        (resp) => {\n          this.getFeatures(projectId);\n        },\n        (error) => {}\n      );\n  }\n\n  updateFeatureStyle(\n    projectId: number,\n    featureId: string | number,\n    groupData: any\n  ): void {\n    this.http\n      .post(\n        environment.apiUrl +\n          `/projects/${projectId}/features/${featureId}/styles/`,\n        groupData\n      )\n      .subscribe(\n        (resp) => {},\n        (error) => {}\n      );\n  }\n\n  deletePointCloud(pc: IPointCloud): void {\n    this.http\n      .delete(\n        environment.apiUrl + `/projects/${pc.project_id}/point-cloud/${pc.id}/`\n      )\n      .subscribe((resp) => {\n        this.getPointClouds(pc.project_id);\n      });\n  }\n\n  addFileToPointCloud(pc: IPointCloud, file: File) {\n    const form = new FormData();\n    form.append('file', file);\n    this.http\n      .post(\n        environment.apiUrl + `/projects/${pc.project_id}/point-cloud/${pc.id}/`,\n        form\n      )\n      .subscribe((resp) => {\n        console.log(resp);\n      });\n  }\n\n  // This function updates the underlying observable, so changes naturally flow to feature service\n  importFileFromTapis(projectId: number, files: Array<RemoteFile>): void {\n    const tmp = files.map((f) => ({ system: f.system, path: f.path }));\n    const payload = {\n      files: tmp,\n    };\n    this.fileList = tmp;\n    this.http\n      .post(\n        environment.apiUrl + `projects/${projectId}/features/files/import/`,\n        payload\n      )\n\n      .subscribe(\n        (resp) => {\n          this.notificationsService.showSuccessToast('Import started!');\n        },\n        (error) => {\n          this.notificationsService.showImportErrorToast(\n            'Import failed! Try again?'\n          );\n        }\n      );\n  }\n\n  // An alternate function for importing images with no GPS data. A feature is created elsewhere, and the image is added to the feature\n  // Inputs:\n  // projectId: Id number of current project\n  // features: A pre-created feature with user-defined or zeroed out gps data\n  // file: A Tapis Remote File containing the image to be imported\n  importImage(projectId: number, feature: Feature, path: string): void {\n    const featureId = feature.id;\n    let file;\n    this.fileList.forEach((remoteFile) => {\n      if (remoteFile.path == path) {\n        file = remoteFile;\n      }\n    });\n    const payload = { system_id: file.system, path: file.path };\n    this.http\n      .post(\n        environment.apiUrl +\n          `projects/${projectId}/features/${featureId}/assets/`,\n        payload\n      )\n      .subscribe((resp) => {\n        this.notificationsService.showSuccessToast('Import started!');\n        // this.getFeatures(projectId)\n      });\n  }\n\n  // Creates a new feature from an uploaded locally created feature\n  uploadNewFeature(projectId: number, feature: Feature, path: string): void {\n    const payload = feature;\n    let response;\n    // Calls the addFeatureAsset route in GeoAPI, resp is a list of features\n    this.http\n      .post(environment.apiUrl + `projects/${projectId}/features/`, payload)\n      .subscribe((resp) => {\n        response = new Feature(resp[0]);\n        this.importImage(projectId, response, path);\n      });\n  }\n\n  downloadGeoJSON(projectId: number, query: AssetFilters = new AssetFilters()) {\n    const qstring: string = querystring.stringify(query.toJson());\n    const downloadLink = document.createElement('a');\n\n    this.http\n      .get<FeatureCollection>(\n        environment.apiUrl + `/projects/${projectId}/features/` + '?' + qstring\n      )\n      .subscribe((resp) => {\n        const blob = new Blob([JSON.stringify(resp)], {\n          type: 'application/json',\n        });\n        downloadLink.href = URL.createObjectURL(blob);\n        downloadLink.setAttribute('download', 'hazmapper.json');\n        document.body.appendChild(downloadLink);\n        downloadLink.click();\n        document.body.removeChild(downloadLink);\n      });\n  }\n\n  uploadFile(projectId: number, file: File): void {\n    const form: FormData = new FormData();\n    form.append('file', file, file.name);\n    this.http\n      .post<Array<Feature>>(\n        environment.apiUrl + `/projects/${projectId}/features/files/`,\n        form\n      )\n      .subscribe(\n        (feats) => {\n          feats.forEach((feat) => {\n            this.addFeature(new Feature(feat));\n          });\n        },\n        (error) => {\n          // TODO: Add notification\n        }\n      );\n  }\n\n  uploadAssetFile(projectId: number, featureId: number, file: File): void {\n    const form: FormData = new FormData();\n    form.append('file', file, file.name);\n    this.http\n      .post<Feature>(\n        environment.apiUrl +\n          `/api/projects/${projectId}/features/${featureId}/assets/`,\n        form\n      )\n      .subscribe(\n        (feature) => {\n          // TODO workaround to update activeFeature\n          const f = this._activeFeature.getValue();\n          if (f && f.id === featureId) {\n            this.activeFeature = new Feature(feature);\n            this.getFeatures(projectId);\n          }\n        },\n        (error) => {\n          // TODO: Add notification\n        }\n      );\n  }\n\n  getOverlays(projectId: number): void {\n    this.http\n      .get(environment.apiUrl + `/projects/${projectId}/overlays/`)\n      .subscribe((ovs: Array<Overlay>) => {\n        this._overlays.next(ovs);\n      });\n  }\n\n  addOverlay(\n    projectId: number,\n    file: File,\n    label: string,\n    minLat: number,\n    maxLat: number,\n    minLon: number,\n    maxLon: number\n  ) {\n    const payload = new FormData();\n    payload.append('file', file);\n    payload.append('label', label);\n    payload.append('minLat', minLat.toFixed(6));\n    payload.append('maxLat', maxLat.toFixed(6));\n    payload.append('minLon', minLon.toFixed(6));\n    payload.append('maxLon', maxLon.toFixed(6));\n\n    this.http\n      .post(environment.apiUrl + `/projects/${projectId}/overlays/`, payload)\n      .subscribe((resp) => {\n        this.getOverlays(projectId);\n      });\n  }\n\n  // Call on getFeatures (each time feature update)\n  getGroups(featureList: Feature[]): void {\n    const groups = new Map<string, TagGroup>();\n    const groupsFeatures = new Map<string, Feature[]>();\n    featureList\n      .filter(\n        (feat: Feature) =>\n          feat.properties.group && feat.properties.group.length > 0\n      )\n      .forEach((feat: Feature) => {\n        feat.properties.group.forEach((group: TagGroup) => {\n          groupsFeatures.set(\n            group.name,\n            groupsFeatures.has(group.name)\n              ? [...groupsFeatures.get(group.name), feat]\n              : [feat]\n          );\n          groups.set(group.name, group);\n        });\n      });\n    this._groups.next(groups);\n    this._groupsFeatures.next(groupsFeatures);\n    const activeGroup = this._activeGroup.value;\n    if (activeGroup) {\n      this.setActiveGroup(groups.get(activeGroup.name));\n    }\n  }\n\n  getGroup(groupName: string) {\n    return this._groups.value.get(groupName);\n  }\n\n  getGroupFeatures(featureList: Feature[], group: TagGroup) {\n    return featureList.filter(\n      (feat: Feature) =>\n        feat.properties.group &&\n        feat.properties.group.length &&\n        feat.properties.group.some((grp: TagGroup) => grp.id === group.id)\n    );\n  }\n\n  private createGroup(\n    featureList: Feature[],\n    group: TagGroup // TODO: Generate group with new uuid and not with name\n  ): Feature[] {\n    return featureList.map((feat: Feature) => {\n      let groupProp = feat.properties.group ? feat.properties.group : [];\n      groupProp = groupProp.filter((grp: TagGroup) => grp.id !== group.id);\n      groupProp.push(group);\n      feat.properties.group = groupProp;\n\n      return feat;\n    });\n  }\n\n  private createGroupInFeature(\n    feature: Feature,\n    group: TagGroup // TODO: Generate group with new uuid and not with name\n  ): Feature {\n    if (feature.properties.group) {\n      feature.properties.group\n        .filter((grp: TagGroup) => grp.name !== group.name)\n        .push(group);\n    }\n    return feature;\n  }\n\n  private updateGroup(featureList: Feature[], group: TagGroup): Feature[] {\n    return this.getGroupFeatures(featureList, group).map(\n      (feat: Feature) => {\n        const groupProp = feat.properties.group.filter(\n          (grp: TagGroup) => grp.id !== group.id\n        );\n        groupProp.push(group);\n        feat.properties.group = groupProp;\n\n        return feat;\n      }\n    );\n  }\n\n  private deleteGroup(featureList: Feature[], group: TagGroup): Feature[] {\n    return this.getGroupFeatures(featureList, group).map(\n      (feat: Feature) => {\n        feat.properties.group = feat.properties.group.filter(\n          (grp: TagGroup) => grp.id !== group.id\n        );\n        return feat;\n      }\n    );\n  }\n\n  createNewGroup(\n    projectId: number,\n    featureList: Feature[],\n    name: string\n  ) {\n    const id = uuidv4();\n    const myRandColor: string = getRandomColor();\n    const group: TagGroup = {\n      id,\n      name,\n      color: myRandColor,\n      icon: 'fa-house-damage'\n    };\n    this.createGroupFeatures(projectId, featureList, group);\n    return group;\n  }\n\n  createGroupFeatures(\n    projectId: number,\n    featureList: Feature[],\n    group: TagGroup\n  ) {\n    this.createGroup(featureList, group).forEach((feat: Feature) => {\n      this.updateFeatureProperty(projectId, feat.id, feat.properties);\n    });\n  }\n\n  deleteGroupFeatures(\n    projectId: number,\n    featureList: Feature[],\n    group: TagGroup\n  ) {\n    this.deleteGroup(featureList, group).forEach((feat: Feature) => {\n      this.updateFeatureProperty(projectId, feat.id, feat.properties);\n    });\n  }\n\n  updateGroupFeatures(\n    projectId: number,\n    featureList: Feature[],\n    group: TagGroup\n  ) {\n    this.updateGroup(featureList, group).forEach((feat: Feature) => {\n      this.updateFeatureProperty(projectId, feat.id, feat.properties);\n    });\n  }\n\n  renameGroup(projectId: number, featureList: Feature[], group: TagGroup, name: string): void {\n    const renamedGroup = {\n      ...group,\n      name\n    };\n\n    this.updateGroupFeatures(\n      projectId,\n      featureList,\n      renamedGroup\n    );\n  }\n\n  reiconGroup(projectId: number, featureList: Feature[], group: TagGroup, icon: string): void {\n    const reiconedGroup = {\n      ...group,\n      icon\n    };\n\n    this.updateGroupFeatures(\n      projectId,\n      featureList,\n      reiconedGroup\n    );\n  }\n\n\n  getForms(groupName: string): GroupForm[] {\n    return this._groups.value.get(groupName).forms;\n  }\n\n  public get overlays(): Observable<Array<Overlay>> {\n    return this._overlays.asObservable();\n  }\n\n  public get features(): Observable<FeatureCollection> {\n    return this._features.asObservable();\n  }\n\n  public get activeFeature() {\n    return this._activeFeature.asObservable();\n  }\n\n  // TODO: This is heinous\n  public set activeFeature(f: any) {\n    if (f) {\n      if (f === this._activeFeature.getValue()) {\n        this._activeFeature.next(null);\n      } else {\n        this._activeFeature.next(f);\n      }\n    } else {\n      this._activeFeature.next(null);\n    }\n  }\n\n  public get activeOverlay(): Observable<Overlay> {\n    return this._activeOverlay.asObservable();\n  }\n\n  public set activeOverlay(ov) {\n    this._activeOverlay.next(ov);\n  }\n\n  public get mapMouseLocation(): Observable<LatLng> {\n    return this._mapMouseLocation.asObservable();\n  }\n\n  public set mapMouseLocation(loc) {\n    this._mapMouseLocation.next(loc);\n  }\n\n  public set basemap(bmap) {\n    this._basemap.next(bmap);\n  }\n\n  public get basemap(): any {\n    return this._basemap.asObservable();\n  }\n}\n","export function getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n","import { Component, OnInit } from '@angular/core';\nimport {GeoDataService} from '../../services/geo-data.service';\nimport {Feature} from '../../models/models';\nimport {AuthenticatedUser, AuthService} from '../../services/authentication.service';\nimport {Observable} from 'rxjs';\nimport {BsModalRef, BsModalService} from 'ngx-foundation';\nimport {ModalFileBrowserComponent} from '../modal-file-browser/modal-file-browser.component';\nimport {RemoteFile} from 'ng-tapis';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class MainComponent implements OnInit {\n\n  // public activeFeature: Feature;\n  // public currentUser: AuthenticatedUser;\n\n  constructor(private geoDataService: GeoDataService, private authService: AuthService, private bsModalService: BsModalService, ) {}\n\n  ngOnInit() {\n\t// this.geoDataService.activeFeature.subscribe( next => {\n\t//   this.activeFeature = next;\n\t// });\n\t// this.authService.currentUser.subscribe(next => this.currentUser = next);\n  }\n\n\n\n}\n","import {Component, NgZone, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router, Route} from '@angular/router';\nimport {AuthService} from '../../services/authentication.service';\n\n@Component({\n  selector: 'app-callback',\n  templateUrl: './callback.component.html',\n  styleUrls: ['./callback.component.scss']\n})\nexport class CallbackComponent implements OnInit {\n\n  constructor(private route: ActivatedRoute, private auth: AuthService) { }\n\n  ngOnInit() {\n\t// TODO: For some reason wso2 is sending back a fragment like #access_token=qadad&expires_in=3600\n\tconst frag = this.route.snapshot.fragment;\n\tconst params = new URLSearchParams(frag);\n\tconst token = params.get('access_token');\n\tconst expires_in = +params.get('expires_in');\n\tthis.auth.setToken(token, expires_in);\n  }\n\n}\n","import {Injectable, NgModule} from '@angular/core';\nimport {Routes, RouterModule, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot} from '@angular/router';\nimport { NotFoundComponent} from './components/notfound/notfound.component';\nimport {AuthService} from './services/authentication.service';\nimport {MainComponent} from './components/main/main.component';\nimport { CallbackComponent } from './components/callback/callback.component';\nimport { ImageGalleryComponent } from './components/image-gallery/image-gallery.component';\n// import { TaggerComponent } from './components/tagger/tagger.component';\n// import { PresetGeneratorComponent } from './components/preset-generator/preset-generator.component';\nimport { TagGeneratorComponent } from './components/side-bar/tag-generator/tag-generator.component';\nimport { TagImagesComponent } from './components/side-bar/tag-images/tag-images.component';\n\n@Injectable()\nexport class Activate implements CanActivate {\n  constructor(private authSvc: AuthService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean  {\n\t if (this.authSvc.isLoggedIn()) {\n\t   return true;\n\t }\n\t this.authSvc.login();\n  }\n}\n\n\nconst routes: Routes = [\n  {path: '', component: MainComponent, canActivate: [Activate]\n  },\n\n  {path: 'callback', component: CallbackComponent},\n  {path: '404', component: NotFoundComponent }];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {onSameUrlNavigation: 'reload'})],\n  exports: [RouterModule],\n  providers: [Activate]\n})\nexport class AppRoutingModule { }\n","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from './services/authentication.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  title = 'viewer';\n\n  constructor(private authService: AuthService) {}\n\n  ngOnInit() {\n\tthis.authService.login();\n  }\n}\n","import {CircleMarker, circleMarker, divIcon, LatLng, Marker, marker} from 'leaflet';\nimport {Feature} from '../models/models';\n\nfunction createCircleMarker(feature: Feature, latlng: LatLng): CircleMarker {\n  const options = {\n    radius: 8,\n    fillColor: '#d3d3d3',\n    color: 'black',\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0.8\n  };\n  return circleMarker( latlng, options );\n}\n\nfunction createImageMarker(feature: Feature, latlng: LatLng): Marker {\n  const divHtml = '<i class=\\'fas fa-camera-retro fa-2x light-blue\\'></i>';\n  const ico = divIcon({className: 'leaflet-fa-marker-icon', html: divHtml});\n  return marker(latlng, {icon: ico});\n}\n\nfunction createCollectionMarker(feature: Feature, latlng: LatLng): Marker {\n  const divHtml = '<i class=\"fa fa-folder-open fa-2x light-blue\"></i>';\n  const ico = divIcon({className: 'icon-marker', html: divHtml});\n  return marker(latlng, {icon: ico});\n}\nfunction createVideoMarker(feature: Feature, latlng: LatLng): Marker {\n  const divHtml = '<i class=\\'fas fa-video fa-2x light-blue\\'></i>';\n  const ico = divIcon({className: 'leaflet-fa-marker-icon', html: divHtml});\n  return marker(latlng, {icon: ico});\n}\n\nexport function createMarker(feature: Feature, latlng: LatLng): Marker {\n  let marker;\n  if (feature.featureType() == 'image') {\n    marker = createImageMarker(feature, latlng);\n  } else if (feature.featureType() == 'collection') {\n    marker =  createCollectionMarker(feature, latlng);\n  } else if (feature.featureType() == 'video') {\n    marker = createVideoMarker(feature, latlng);\n  } else {\n    marker = createCircleMarker(feature, latlng);\n  }\n  return marker;\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport * as L from 'leaflet';\nimport 'leaflet.markercluster';\n\nimport { GeoDataService} from '../../services/geo-data.service';\nimport { createMarker } from '../../utils/leafletUtils';\nimport {Feature} from 'geojson';\nimport {FeatureGroup, ImageOverlay, LatLng, LeafletMouseEvent} from 'leaflet';\nimport * as turf from '@turf/turf';\nimport { AllGeoJSON } from '@turf/helpers';\nimport {filter, skip} from 'rxjs/operators';\nimport {Overlay} from '../../models/models';\nimport {AppEnvironment, environment} from '../../../environments/environment';\n\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.scss']\n})\nexport class MapComponent implements OnInit {\n\n  map: L.Map;\n  mapType = 'normal';\n  activeFeature: Feature;\n  activeOverlay: Overlay;\n  features: FeatureGroup = new FeatureGroup();\n  overlays: Map<number, ImageOverlay>;\n  environment: AppEnvironment;\n\n  constructor(private GeoDataService: GeoDataService,\n\t\t\t           private route: ActivatedRoute,\n\t\t\t  ) {\n\n\t// Have to bind these to keep this being this\n\tthis.featureClickHandler.bind(this);\n\tthis.mouseEventHandler.bind(this);\n  }\n\n  ngOnInit() {\n\t// const mapType: string = this.route.snapshot.queryParamMap.get('mapType');\n\t// this.projectId = +this.route.snapshot.paramMap.get(\"projectId\");\n\t// this.cluster = this.route.snapshot.queryParamMap.get('mapType');\n\tthis.environment = environment;\n\tthis.overlays = new Map();\n\tthis.map = new L.Map('map', {\n\t center: [40, -80],\n\t zoom: 9\n\t});\n\n\tconst baseOSM = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\t  maxZoom: 19,\n\t  attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n\t});\n\tconst satellite = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n\t  attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n\t});\n\t// default to streetmap view;\n\tthis.map.addLayer(baseOSM);\n\n\tthis.loadFeatures();\n\n\t// Publish the mouse location on the mapMouseLocation stream\n\tthis.map.on('mousemove', (ev: LeafletMouseEvent) => this.mouseEventHandler(ev));\n\tthis.GeoDataService.activeOverlay.pipe(skip(1)).subscribe((next) => {\n\t  this.addRemoveOverlay(next);\n\t});\n\n\n\t// Listen on the activeFeature stream and zoom map to that feature when it changes\n\tthis.GeoDataService.activeFeature.pipe(filter(n => n != null)).subscribe( (next) => {\n\t  this.activeFeature = next;\n\t  const bbox = turf.bbox(<AllGeoJSON> next);\n\t  this.map.fitBounds([[bbox[1], bbox[0]], [bbox[3], bbox[2]]]);\n\t});\n\n\t// Listen for changes to the basemap\n\tthis.GeoDataService.basemap.pipe(skip(1)).subscribe((next) => {\n\t  if (next == 'sat') {\n\t\tthis.map.removeLayer(baseOSM);\n\t\tthis.map.addLayer(satellite);\n\t  }\n\t  if (next == 'roads') {\n\t\tthis.map.removeLayer(satellite);\n\t\tthis.map.addLayer(baseOSM);\n\t  }\n\t});\n  }\n\n  addRemoveOverlay(ov: Overlay): void {\n\tif (this.overlays.has(ov.id)) {\n\t  this.features.removeLayer(this.overlays.get(ov.id));\n\t  this.overlays.delete(ov.id);\n\t} else {\n\t  const overlay = L.imageOverlay(environment.apiUrl + '/assets/' + ov.path, [[ov.minLat, ov.minLon], [ov.maxLat, ov.maxLon]]);\n\t  this.overlays.set(ov.id, overlay);\n\t  this.features.addLayer(overlay);\n\t}\n\tthis.map.fitBounds(this.features.getBounds());\n  }\n\n\n  mouseEventHandler(ev: any): void {\n\tthis.GeoDataService.mapMouseLocation = ev.latlng;\n  }\n\n\n  /**\n   * Load Features for a project.\n   */\n  loadFeatures() {\n\tconst geojsonOptions = {\n\t  pointToLayer: createMarker\n\t};\n\tthis.GeoDataService.features.subscribe(collection => {\n\t  this.features.clearLayers();\n\t  const markers = L.markerClusterGroup({\n\t\ticonCreateFunction: (cluster) => {\n\t\t  return L.divIcon({html: `<div><b>${cluster.getChildCount()}</b></div>`, className: 'marker-cluster'});\n\t\t}\n\t  });\n\t  collection.features.forEach( d => {\n\t\tconst feat = L.geoJSON(d, geojsonOptions);\n\t\tfeat.on('click', (ev) => { this.featureClickHandler(ev); } );\n\n\t\tif (d.geometry.type == 'Point') {\n\t\t  markers.addLayer(feat);\n\t\t} else {\n\t\t  this.features.addLayer(feat);\n\t\t}\n\t  });\n\t  this.features.addLayer(markers);\n\t  this.map.addLayer(this.features);\n\t  try {\n\t\tthis.map.fitBounds(this.features.getBounds());\n\t  } catch (e) {}\n\t});\n\n  }\n\n  /**\n   *\n   * @param ev\n   */\n  featureClickHandler(ev: any): void {\n\tconst f = ev.layer.feature;\n\tthis.GeoDataService.activeFeature = f;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Project, IProjectUser, ProjectRequest } from '../models/models';\nimport { environment } from '../../environments/environment';\nimport { AuthService } from './authentication.service';\nimport { validateBBox } from '@turf/helpers';\nimport { NotificationsService } from './notifications.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProjectsService {\n  private _projects: BehaviorSubject<Project[]> = new BehaviorSubject([]);\n  public readonly projects: Observable<Project[]> =\n    this._projects.asObservable();\n  private _activeProject: ReplaySubject<Project> = new ReplaySubject<Project>(\n    1\n  );\n  public readonly activeProject: Observable<Project> =\n    this._activeProject.asObservable();\n  private _projectUsers: ReplaySubject<Array<IProjectUser>> = new ReplaySubject<\n    Array<IProjectUser>\n  >(1);\n  public readonly projectUsers$: Observable<Array<IProjectUser>> =\n    this._projectUsers.asObservable();\n\n  private _deletingProjects: BehaviorSubject<Project[]> = new BehaviorSubject<\n    Project[]\n  >([]);\n  public deletingProjects: Observable<Project[]> =\n    this._deletingProjects.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService,\n    private notificationsService: NotificationsService\n  ) {}\n\n  testGeoApi(): void {\n    const data = {\n      name: 'Awesome Project',\n      description: 'Cool project',\n    };\n    const prom = this.http\n      .post<Project>(`http://localhost:8888/projects/`, data)\n      .subscribe((resp) => {\n        this._projects.next([...this._projects.value, resp]);\n        // Set the active project to the one just created?\n        this._activeProject.next(resp);\n      });\n\n    this.http\n      .get<Project[]>(`http://localhost:8888/projects/`)\n      .subscribe((resp) => {\n        this._projects.next(resp);\n      });\n  }\n\n  updateProjectsList(resp: Project[] = []) {\n    const myProjs = resp.length !== 0 ? resp : this._projects.value;\n\n    this._deletingProjects.value.length !== 0\n      ? this._projects.next(\n          myProjs.map((p) => {\n            const deletingProj = this._deletingProjects.value.find(\n              (dp) => dp.id === p.id\n            );\n            return deletingProj ? deletingProj : p;\n          })\n        )\n      : this._projects.next(myProjs);\n  }\n\n  // Queries database for all user projects.\n  getProjects(): void {\n    this.http.get<Project[]>(environment.apiUrl + `/projects/`).subscribe(\n      (resp) => {\n        this.updateProjectsList(resp);\n      },\n      (error) => {\n        this.notificationsService.showErrorToast(\n          'Error importing files Design Safe, GeoAPI might be down'\n        );\n      }\n    );\n  }\n\n  create(data: ProjectRequest): Observable<Project> {\n    const prom = this.http.post<Project>(\n      environment.apiUrl + `/projects/`,\n      data\n    );\n    prom.subscribe((proj) => {\n      this._projects.next([...this._projects.value, proj]);\n\n      // Awkward as hell, but this ensures we actually transition to the newly created project\n      // Without this, the screen flickers briefly to the new project, but ends up stuck on the old project\n      this.setActiveProject(proj);\n      this.setActiveProject(proj);\n    });\n    return prom;\n  }\n\n  setActiveProject(proj: Project): void {\n    // saves change as last visited project\n    window.localStorage.setItem('lastProj', JSON.stringify(proj));\n    try {\n      this._activeProject.next(proj);\n    } catch (error) {\n      return error;\n    }\n  }\n\n  update(data: ProjectRequest): void {\n    this.http\n      .put<Project>(environment.apiUrl + `/projects/${data.project.id}/`, data)\n      .subscribe((resp) => {\n        this._activeProject.next(resp);\n      });\n  }\n\n  // Note: This will delete the project for everyone, if the project is shared.\n  delete(data: Project): void {\n    this._deletingProjects.next([\n      ...this._deletingProjects.value,\n      { ...data, deleting: true },\n    ]);\n    this.updateProjectsList();\n\n    this.http.delete(environment.apiUrl + `projects/${data.id}/`).subscribe(\n      (resp) => {\n        window.localStorage.setItem('lastProj', JSON.stringify('none'));\n\n        this._deletingProjects.next(\n          this._deletingProjects.value.filter((p) => p.id !== data.id)\n        );\n        // These next two lines might be causing problems. Adding getProjects causes duplicates during project creation,\n        // So I'm thinking that calling these here might be the root of my delete woes, as they're restoring the project I just\n        // deleted...\n        this.updateProjectsList();\n        this.getProjects();\n        // As elegant as a brick to the face, but this solves the delete issues...\n        window.localStorage.setItem('lastProj', JSON.stringify('none'));\n      },\n      (error) => {\n        window.localStorage.setItem('lastProj', JSON.stringify('none'));\n\n        this._deletingProjects.next(\n          this._deletingProjects.value.map((p) => {\n            return p.id === data.id\n              ? { ...p, deleting: false, deletingFailed: true }\n              : p;\n          })\n        );\n        this.updateProjectsList();\n\n        this.getProjects();\n\n        this.notificationsService.showErrorToast('Could not delete project!');\n        console.error(error);\n      }\n    ); // end of error\n  }\n\n  getProjectUsers(proj: Project): Observable<Array<IProjectUser>> {\n    return this.http\n      .get<Array<IProjectUser>>(\n        environment.apiUrl + `/projects/${proj.id}/users/`\n      )\n      .pipe(\n        tap((users) => {\n          this._projectUsers.next(users);\n        })\n      );\n  }\n\n  addUserToProject(proj: Project, uname: string): void {\n    const payload = {\n      username: uname,\n    };\n    this.http\n      .post(environment.apiUrl + `/projects/${proj.id}/users/`, payload)\n      .subscribe((resp) => {\n        this.getProjectUsers(proj).subscribe();\n      });\n  }\n\n  deleteUserFromProject(proj: Project, user: string): void {\n    this.http\n      .delete(environment.apiUrl + `/projects/${proj.id}/users/${user}/`)\n      .subscribe(\n        (resp) => {\n          this.getProjectUsers(proj).subscribe();\n        },\n        (error) => {\n          // TODO: Create popup for an error message.\n          console.log(error);\n        }\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {SystemSummary} from 'ng-tapis';\nimport { ApiService } from 'ng-tapis';\nimport {Observable, ReplaySubject} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgaveSystemsService {\n\n  private baseUrl = 'https://agave.designsafe-ci.org/systems/v2/';\n  private _systems: ReplaySubject<SystemSummary[]> = new ReplaySubject<SystemSummary[]>(1);\n  public readonly systems: Observable<SystemSummary[]> = this._systems.asObservable();\n  private _projects: ReplaySubject<SystemSummary[]> = new ReplaySubject<SystemSummary[]>(1);\n  public readonly projects: Observable<SystemSummary[]> = this._projects.asObservable();\n  private systemsList: SystemSummary[];\n\n  constructor(private tapis: ApiService) { }\n\n  // list() runs when the file browser is opened, retrieves all files in TACC for given user\n  list() {\n    this.tapis.systemsList({type: 'STORAGE'})\n      .subscribe(resp => {\n        this._systems.next(resp.result);\n        this._projects.next(resp.result.filter(sys => sys.id.startsWith('project')));\n      }, error => {\n        this._systems.next(null);\n        this._projects.next(null);\n      });\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport { ApiService, FileOperationRequest} from 'ng-tapis';\nimport {RemoteFile} from 'ng-tapis';\nimport {Project} from '../models/models';\nimport {share} from 'rxjs/operators';\nimport {HttpClient} from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport {AuthService} from './authentication.service';\nimport {MatSnackBar, MatSnackBarConfig} from '@angular/material/snack-bar';\nimport { SystemSummary} from 'ng-tapis';\n// import { verify } from 'ts-mockito';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TapisFilesService {\n\n  private baseUrl = 'https://agave.designsafe-ci.org/files/v2/';\n  public currentListing: Array<RemoteFile>;\n  private _listing: BehaviorSubject<RemoteFile[]> = new BehaviorSubject<RemoteFile[]>([]);\n  public readonly listing: Observable<RemoteFile[]> = this._listing.asObservable();\n  public readonly IMPORTABLE_TYPES: Array<string> = ['jpg', 'jpeg', 'las', 'laz', 'json', 'geojson', 'geotiff', 'tiff', 'gpx'];\n  public lastSystem: SystemSummary; // The last filesystem the user was browsing\n  public lastFile: RemoteFile; // The last directory the user was browsing\n  public noPreviousSelections: boolean;\n\n  constructor(private tapis: ApiService,\n              private http: HttpClient,\n              private authService: AuthService,\n              private popup: MatSnackBar) { }\n\n  checkIfSelectable(file: RemoteFile): boolean {\n    if (file.type === 'dir') {return false; }\n    const ext = this.getFileExtension(file);\n    return this.IMPORTABLE_TYPES.includes(ext);\n  }\n\n  private getFileExtension(file: RemoteFile): string {\n    return file.name.split('.').pop().toLowerCase();\n  }\n\n  listFiles(system: string, path: string, offset: number, limit: number) {\n    return this.tapis.filesList({systemId: system, filePath: path, offset, limit});\n  }\n\n  public getParentPath(path: string): string {\n    const cleaned = path.replace('//', '/');\n    const arr = cleaned.split('/');\n    arr.pop();\n    const parentPath = arr.join('/');\n    return parentPath;\n  }\n\n  // saves project to a specified format in Design Safe's my Data section\n  public export(systemID: string, path: string, fileName: string, extension: string, data: any) {\n    // Constructs an object that configures the success/error pop-up\n    const snackbarConfig: MatSnackBarConfig = {duration: 3000, horizontalPosition: 'right', verticalPosition: 'top'};\n    // construct the full URL that points to where the data will be stored\n    const fullURL = `https://agave.designsafe-ci.org/files/v2/media/system/${systemID}${path}`;\n\n    // construct a file to submit\n    let fileType = 'plain/text';\n    ((extension == '.csv') ? (fileType = 'text/csv') : (fileType = 'application/json'));\n    const tmp = new Blob([data], {type: fileType});\n    const date = new Date();\n    const file = new File([tmp], fileName, {lastModified: date.valueOf()});\n\n    // Creates a form data object which holds the file to be uploaded\n    const form: FormData = new FormData;\n    form.append('fileToUpload', file);\n\n    // sends the packaged data to Designsafe. URL its being uploaded to handles authentication\n    this.http.post(fullURL, form).subscribe(resp => {\n      console.log(resp);\n      const msg = 'Successfully saved file to ' + systemID + path;\n      this.popup.open(msg, '', snackbarConfig);\n    }, error => {\n      console.log(error);\n      const msg = 'Faled to save file to ' + systemID + path;\n      this.popup.open(msg, '', snackbarConfig);\n    });\n  }\n\n  // Saves the current file directory and file system to Local Storage\n  saveState() {\n    const sysStr = JSON.stringify(this.lastSystem);\n    const fileStr = JSON.stringify(this.lastFile);\n    window.localStorage.setItem('system', sysStr);\n    window.localStorage.setItem('file', fileStr);\n  }\n\n  // Attempts to retrieve the last used state\n  getState() {\n    try {\n      this.lastSystem = JSON.parse(window.localStorage.getItem('system'));\n      this.lastFile = JSON.parse(window.localStorage.getItem('file'));\n      this.noPreviousSelections = this.lastFile == null;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n","import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\nimport {AgaveSystemsService} from '../../services/agave-systems.service';\nimport {AuthenticatedUser, AuthService} from '../../services/authentication.service';\nimport { RemoteFile} from 'ng-tapis/models/remote-file';\nimport { SystemSummary} from 'ng-tapis';\nimport { TapisFilesService } from '../../services/tapis-files.service';\nimport { BsModalRef } from 'ngx-foundation/modal/bs-modal-ref.service';\nimport { Subject, combineLatest} from 'rxjs';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { take } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-modal-file-browser',\n  templateUrl: './modal-file-browser.component.html',\n  styleUrls: ['./modal-file-browser.component.scss'],\n})\nexport class ModalFileBrowserComponent implements OnInit {\n\n  static limit = 200; // Limits maximum amount of files displayed\n\n  @Output() currentPath: EventEmitter<string> = new EventEmitter<string>();\n\n  public allowedExtensions: Array<string> = this.tapisFilesService.IMPORTABLE_TYPES;\n \n  private currentUser: AuthenticatedUser;\n  public selectedPath;\n  public filesList: Array<RemoteFile> = [];\n  public inProgress = true;\n  public retrievalError = false;\n  public selectedFiles: Map<string, RemoteFile> = new Map();\n  public onClose: Subject<Array<RemoteFile>> = new Subject<Array<RemoteFile>>();\n  public projects: Array<SystemSummary>;\n  private selectedSystem: SystemSummary;\n  public myDataSystem: SystemSummary;\n  public communityDataSystem: SystemSummary;\n  public publishedDataSystem: SystemSummary;\n  public currentDirectory: RemoteFile;\n  private offset: number;\n  public firstFileIndex: number;\n\n  constructor(private tapisFilesService: TapisFilesService,\n\t\t  // private modalRef: BsModalRef,\n\t\t            public dialogRef: MatDialogRef<ModalFileBrowserComponent>,\n\t\t            private dialog: MatDialog,\n\t\t            private authService: AuthService,\n\t\t            private agaveSystemsService: AgaveSystemsService) { }\n\n  ngOnInit() {\n\t// retrive state data\n\t// this.tapisFilesService.getState()\n\n\t// This finds all the projects, and file systems found from a user \n\tthis.agaveSystemsService.list();\n\n\t// TODO: change those hard coded systemIds to environment vars or some sort of config\n\t// wait on the currentUser and systems to resolve\n\tcombineLatest([this.authService.currentUser, this.agaveSystemsService.systems, this.agaveSystemsService.projects])\n\t\n\t// This little thing helped me fix the problem on calling ngOnInit several times\n\t.pipe(\n        take(1)\n      )\n\t  .subscribe( ([user, systems, projects]) => {\n\t\n\t\t// Uses systems to find the different directories that has the files in\n\tthis.myDataSystem = systems.find( (sys) => sys.id === 'designsafe.storage.default');\n\tthis.communityDataSystem = systems.find( (sys) => sys.id === 'designsafe.storage.community');\n\tthis.publishedDataSystem = systems.find( (sys) => sys.id === 'designsafe.storage.published');\n\t\n\t// This is where they choose which one they start with\n\tthis.selectedSystem = this.tapisFilesService.lastSystem;\n\n\tif (this.selectedSystem == null) {\n\t\tthis.selectedSystem = this.myDataSystem;\n\t\tthis.tapisFilesService.lastSystem = this.myDataSystem;\n\t}\n\n\t// If the user has already navigated to a folder, restore those options\n\tthis.currentDirectory = this.tapisFilesService.lastFile;\n\n\tthis.projects = projects;\n\tthis.currentUser = user;\n\tconst init = <RemoteFile> {\t\n\t\tsystem: this.myDataSystem.id,\n\t\ttype: 'dir',\n\t\tpath: this.currentUser.username\n\t};\n\t// If the user hasn't yet opened the file browser, set the last file to an init file.\n\tif ( this.tapisFilesService.noPreviousSelections) {\n\t\tthis.selectedSystem = this.myDataSystem;\n\t\tthis.tapisFilesService.lastFile = init;\n\t\tthis.tapisFilesService.noPreviousSelections = false;\n\t}\n\tthis.browse(this.tapisFilesService.lastFile);\n\t  });\n\n  }\n\n  selectSystem(system: SystemSummary): void {\n\tlet pth;\n\tsystem.id === this.myDataSystem.id ? pth = this.currentUser.username : pth = '/';\n\tconst init = <RemoteFile> {\n\t  system: system.id,\n\t  type: 'dir',\n\t  path: pth\n\t};\n\tthis.selectedSystem = system;\n\tthis.tapisFilesService.lastSystem = this.selectedSystem;\n\tthis.browse(init);\n  }\n\n\n  browse(file: RemoteFile) {\n\tthis.selectedPath = file.path;\n\tthis.selectedSystem = this.selectedSystem; // Self-assignment keeps the system name from disappearing while browsing subfolders\n\tif (file.type !== 'dir') { return; }\n\tthis.currentDirectory = file;\n\tthis.tapisFilesService.lastFile = file; // Updates the last directory visted\n\t// this.selectedFiles.clear();\n\tthis.filesList = [];\n\tthis.offset = 0;\n\tthis.inProgress = false;\n\tthis.getFiles();\n  }\n\n  toRoot() {\n\tlet pth;\n\tthis.selectedSystem.id === this.myDataSystem.id ? pth = this.currentUser.username : pth = '/';\n\tconst init = <RemoteFile> {\n\t  system: this.selectedSystem.id,\n\t  type: 'dir',\n\t  path: pth\n\t};\n\tthis.browse(init);\n  }\n\n  getFiles() {\n\tconst hasMoreFiles = (this.offset % ModalFileBrowserComponent.limit) === 0;\n\n\tif (this.inProgress || !hasMoreFiles) {\n\t\treturn;\n\t}\n\n\tthis.inProgress = true;\n\tthis.tapisFilesService.listFiles(this.currentDirectory.system, this.currentDirectory.path, this.offset, ModalFileBrowserComponent.limit)\n\t.subscribe(listing => {\n\t\tconst files = listing.result;\n\n\t\tif (files.length && files[0].name === '.') {\n\t\t\t// This removes the first item in the listing, which in Agave\n\t\t\t// is always a reference to self '.' and replaces with '..'\n\t\t\tconst current = files.shift();\n\t\t\tthis.currentPath.next(current.path);\n\t\t\tcurrent.path = this.tapisFilesService.getParentPath(current.path);\n\t\t\tcurrent.name = '..';\n\t\t\tfiles.unshift(current);\n\t\t  }\n\t\tconst newFile = [];\n\t\tconst allowedExt = this.allowedExtensions;\n\t\tfiles.forEach(function(value, index) {\n          if ((value.type == 'file' && allowedExt.includes(value.path.split('.').pop().toLowerCase()) ) || value.type == 'dir') {\n            newFile.push(value);\n          }});\n\n\t\tthis.inProgress = false;\n\t\tthis.retrievalError = false;\n\t\tthis.filesList = this.filesList.concat(newFile);\n\t\tthis.offset = this.offset + files.length;\n\t},\n\terror => {\n\t\t// If retrieving the files from DesignSafe bugs out due to the site being down, this is where it ends up\n\t\tthis.retrievalError = true;\n\t\tthis.inProgress = false;\n\t});\n  }\n\n  // TODO: Ian: Error message on incorrect file type?\n  select(event: any, file: RemoteFile, index: number) {\n    if (event.shiftKey) {\n      this.selectFilesShiftClick(index, file);\n    } else {\n      if (this.tapisFilesService.checkIfSelectable(file)) {\n        this.addSelectedFile(file, index);\n      } else {\n      }\n    }\n  }\n\n  selectFilesShiftClick(index: number, file: RemoteFile) {\n    // this.selectedFiles.clear();\n    this.selectShift(index, file);\n  }\n\n\n  addSelectedFile(file: RemoteFile, index: number) {\n\tif (index != -1) {\n\t\tthis.firstFileIndex = index;\n\t  }\n\n\tif (this.tapisFilesService.checkIfSelectable(file)) {\n\t\tif (this.selectedFiles.has(file.path)) {\n\t\t\tthis.selectedFiles.delete(file.path);\n\t\t} else {\n\t\t\tthis.selectedFiles.set(file.path, file);\n\t\t}\n\t}\n  }\n\n  chooseFiles() {\n\tthis.tapisFilesService.saveState();\n\tthis.tapisFilesService.lastSystem = this.selectedSystem;\n\tconst tmp = Array.from(this.selectedFiles.values());\n\tthis.dialogRef.close(tmp);\n  }\n\n  cancel() {\n\tthis.tapisFilesService.saveState();\n\tthis.tapisFilesService.lastSystem = this.selectedSystem;\n\tthis.dialogRef.close();\n  }\n\n  selectAll() {\n\t  const indexTmp = -1;\n\t  let count = 0;\n\t  for (const file of this.filesList) {\n\t\tif (! this.selectedFiles.has(file.path)) {\n\t\t\tthis.select('', file, indexTmp);\n\t\t\tcount += 1;\n\t\t}\n\t  }\n\t  if (count == 1) {\n\t\tthis.selectedFiles.clear();\n\t  }\n  }\n\n  selectShift(index: number, file: RemoteFile) {\n    if (this.firstFileIndex != undefined && this.firstFileIndex != index) {\n      this.addRangeFiles(this.firstFileIndex, index, true);\n    } else {\n      this.addSelectedFile(file, index);\n    }\n  }\n\n  addRangeFiles(firstFileIndex: number, lastFileIndex: number, again: boolean) {\n    const maxIndex = Math.max(firstFileIndex, lastFileIndex);\n    const minIndex = Math.min(firstFileIndex, lastFileIndex);\n\n    for (let i = minIndex; i < maxIndex + 1; ++i) {\n      this.addSelectedFile(this.filesList[i], -1);\n    }\n\n    if (again) {\n      this.addSelectedFile(this.filesList[firstFileIndex], -1);\n    }\n  }\n}\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport {AgaveSystemsService} from '../../services/agave-systems.service';\nimport {AuthenticatedUser, AuthService} from '../../services/authentication.service';\nimport { RemoteFile} from 'ng-tapis/models/remote-file';\nimport { SystemSummary} from 'ng-tapis';\nimport { TapisFilesService } from '../../services/tapis-files.service';\nimport { BsModalRef } from 'ngx-foundation/modal/bs-modal-ref.service';\nimport { Subject, combineLatest} from 'rxjs';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { take } from 'rxjs/operators';\nimport { FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-modal-download-selector',\n  templateUrl: './modal-download-selector.component.html',\n  styleUrls: ['./modal-download-selector.component.scss']\n})\nexport class ModalDownloadSelectorComponent implements OnInit {\n\t\n  static limit = 200; // Limits maximum amount of files displayed\n\n  @Output() currentPath: EventEmitter<string> = new EventEmitter<string>();\n\n  private downloadSelectForm: FormGroup;\n  private currentUser: AuthenticatedUser;\n  public filesList: Array<RemoteFile> = [];\n  public inProgress = true;\n  public selectedFiles: Map<string, RemoteFile> = new Map();\n  public onClose: Subject<Array<RemoteFile>> = new Subject<Array<RemoteFile>>();\n  public projects: Array<SystemSummary>;\n  private selectedSystem: SystemSummary;\n  public myDataSystem: SystemSummary;\n  public communityDataSystem: SystemSummary;\n  public publishedDataSystem: SystemSummary;\n  public currentDirectory: RemoteFile;\n  public passbackData: Array<string> = ['', '', '', ''];\n  public fileName = 'Custom File Name';\n  public fileExtension = '.csv';\n  private offset: number;\n\n  constructor(private tapisFilesService: TapisFilesService,\n\t\t  // private modalRef: BsModalRef,\n\t\t            public dialogRef: MatDialogRef<ModalDownloadSelectorComponent>,\n\t\t            private dialog: MatDialog,\n\t\t            private authService: AuthService,\n\t\t            private agaveSystemsService: AgaveSystemsService) { }\n\n  ngOnInit() {\n\n  this.downloadSelectForm = new FormGroup( {\n    Name: new FormControl(this.fileName),\n    Extension: new FormControl(this.fileExtension)\n  });\n\n\t  // This finds all the projects, and file systems found from a user \n\t this.agaveSystemsService.list();\n\n\t// TODO: change those hard coded systemIds to environment vars or some sort of config\n\t// wait on the currentUser and systems to resolve\n\t combineLatest([this.authService.currentUser, this.agaveSystemsService.systems, this.agaveSystemsService.projects])\n\t\n\t// This little thing helped me fix the problem on calling ngOnInit several times\n\t.pipe(\n        take(1)\n      )\n\t  .subscribe( ([user, systems, projects]) => {\n\t\n\t\t// Uses systems to find the different directories that has the files in\n\tthis.myDataSystem = systems.find( (sys) => sys.id === 'designsafe.storage.default');\n\tthis.communityDataSystem = systems.find( (sys) => sys.id === 'designsafe.storage.community');\n\tthis.publishedDataSystem = systems.find( (sys) => sys.id === 'designsafe.storage.published');\n\t\n\t// This is where they choose which one they start with\n\tthis.selectedSystem = this.myDataSystem;\n\n\tthis.projects = projects;\n\tthis.currentUser = user;\n\tconst init = <RemoteFile> {\t\n\t\tsystem: this.myDataSystem.id,\n\t\ttype: 'dir',\n\t\tpath: this.currentUser.username\n\t};\n\tthis.browse(init);\n\t  });\n\n  }\n\n  selectSystem(system: SystemSummary): void {\n\tlet pth;\n\tsystem.id === this.myDataSystem.id ? pth = this.currentUser.username : pth = '/';\n\tconst init = <RemoteFile> {\n\t  system: system.id,\n\t  type: 'dir',\n\t  path: pth\n\t};\n\tthis.browse(init);\n  }\n\n\n  browse(file: RemoteFile) {\n\tif (file.type !== 'dir') { return; }\n\tthis.currentDirectory = file;\n\t// this.selectedFiles.clear();\n\tthis.filesList = [];\n\tthis.offset = 0;\n\tthis.inProgress = false;\n\tthis.getFiles();\n  }\n\n  getFiles() {\n\tconst hasMoreFiles = (this.offset % ModalDownloadSelectorComponent.limit) === 0;\n\n\tif (this.inProgress || !hasMoreFiles) {\n\t\treturn;\n\t}\n\n\tthis.inProgress = true;\n\n\tthis.tapisFilesService.listFiles(this.currentDirectory.system, this.currentDirectory.path, this.offset, ModalDownloadSelectorComponent.limit)\n\t.subscribe(listing => {\n\t\tconst files = listing.result;\n\n\t\tif (files.length && files[0].name === '.') {\n\t\t\t// This removes the first item in the listing, which in Agave\n\t\t\t// is always a reference to self '.' and replaces with '..'\n\t\t\tconst current = files.shift();\n\t\t\tthis.currentPath.next(current.path);\n   this.passbackData[1] = current.path;\n\t\t\tcurrent.path = this.tapisFilesService.getParentPath(current.path);\n\t\t\tcurrent.name = '..';\n\t\t\tfiles.unshift(current);\n\t\t  }\n\t\tconst newFile = [];\n\t\tfiles.forEach(function(value, index) {\n          if (value.type == 'file' || value.type == 'dir') {\n            newFile.push(value);\n          }});\n\n\t\tthis.inProgress = false;\n\t\tthis.filesList = this.filesList.concat(newFile);\n\t\tthis.offset = this.offset + files.length;\n\t},\n\terror => {\n\t\tthis.inProgress = false;\n\t});\n  }\n\n  chooseFiles() {\n  this.passbackData[0] = this.selectedSystem.id;\n \n  // checks to see if the input was left unchanged\n  if ( this.downloadSelectForm.dirty ) {\n    // if changed, enter name as specified\n    this.passbackData[2] = this.downloadSelectForm.get('Name').value;\n  } else {\n    // if unchanged, enter filename as empty string\n    this.passbackData[2] = '';\n  }\n  this.passbackData[3] = this.fileExtension;\n\t this.dialogRef.close(this.passbackData);\n  }\n\n  cancel() {\n\tthis.dialogRef.close();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalService, BsModalRef } from 'ngx-foundation';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ProjectsService } from '../../services/projects.service';\nimport { Project, ProjectRequest } from '../../models/models';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-modal-create-project',\n  templateUrl: './modal-create-project.component.html',\n  styleUrls: ['./modal-create-project.component.scss']\n})\nexport class ModalCreateProjectComponent implements OnInit {\n\n  public readonly onClose: Subject<any> = new Subject<any>();\n\n  projCreateForm: FormGroup;\n\n  constructor(public dialogRef: MatDialogRef<ModalCreateProjectComponent>,\n\t\t\t           private dialog: MatDialog,\n\t\t\t           private projectsService: ProjectsService) { }\n\n  ngOnInit() {\n\tthis.projCreateForm = new FormGroup( {\n\t  name: new FormControl(''),\n\t  description: new FormControl('')\n\t});\n  }\n\n  close(project: Project) {\n\tthis.dialogRef.close();\n  }\n\n  submit() {\n\t// Watch content we can set to false, for our project, we don't need this yet.\n\t// Watch content refers to syncing files created in a folder with a hazmapper map\n\t// Set observable to true, Hazmapper doesn't let users define that value for some reason.\n\tconst proj = new Project();\n\tconst projRqst = new ProjectRequest();\n\n\t// Retrieve project name and description\n\tproj.description = this.projCreateForm.get('description').value;\n\tproj.name = this.projCreateForm.get('name').value;\n\n\tprojRqst.project = proj;\n\n\tthis.projectsService.create(projRqst);\n\tthis.dialogRef.close();\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ProjectsService } from '../../services/projects.service';\nimport { Project } from '../../models/models';\nimport { THIS_EXPR } from '@angular/compiler/src/output/output_ast';\n\n@Component({\n  selector: 'app-modal-share-project',\n  templateUrl: './modal-share-project.component.html',\n  styleUrls: ['./modal-share-project.component.scss']\n})\nexport class ModalShareProjectComponent implements OnInit {\n\n  projShareForm: FormGroup;\n  activeProj: Project;\n  projectUsers;\n  onlyOne: boolean; // if only one user is present == TRUE \n\n  constructor(public dialogRef: MatDialogRef<ModalShareProjectComponent>,\n              private dialog: MatDialog,\n              private projectsService: ProjectsService) { }\n\n  ngOnInit() {\n    // creates new form control group to access input value\n    this.projShareForm = new FormGroup({\n      name: new FormControl(''),\n    });\n\n    // retrieves active project, needed to add users to the project\n    this.projectsService.activeProject.subscribe((proj) => {\n      this.activeProj = proj;\n    });\n\n    // retrieves all users currently registered to the active project\n    this.projectsService.getProjectUsers(this.activeProj).subscribe((next) => {\n      this.projectUsers = next;\n      this.onlyOne = (this.projectUsers.length == 1);\n    });\n  }\n\n  // closes modal without submitting anything\n  close() {\n    this.dialogRef.close();\n    }\n\n  // shares project with specified user\n  submit() {\n    this.projectsService.addUserToProject(this.activeProj, this.projShareForm.get('name').value);\n    this.dialogRef.close();\n  }\n\n  // deletes user from project\n  delete(user) {\n    this.projectsService.deleteUserFromProject(this.activeProj, user);\n    this.dialogRef.close();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { ProjectsService } from './projects.service';\nimport { Feature } from '../models/models';\n\n// Will inject Projects and GeoData Service to get properties of Feature\n@Injectable({\n  providedIn: 'root',\n})\nexport class GroupsService {\n  private _selectedImages: BehaviorSubject<Array<any>> = new BehaviorSubject([]);\n  public selectedImages: Observable<Array<any>> = this._selectedImages.asObservable();\n\n  private _showTagger: BehaviorSubject<boolean> = new BehaviorSubject(false);\n  public showTagger: Observable<boolean> = this._showTagger.asObservable();\n\n  private _showTagGenerator: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(\n    false\n  );\n  public showTagGenerator: Observable<boolean> = this._showTagGenerator.asObservable();\n\n  constructor() {}\n\n  imageSelected(feature: Feature): boolean {\n    const currentFeatures = this._selectedImages.value;\n    return currentFeatures.some(feat => feat.id === feature.id);\n  }\n\n  unselectAllImages() {\n    this._selectedImages.next([]);\n  }\n\n  toggleImageSelect(feature: Feature): void {\n    const currentFeatures = this._selectedImages.value;\n    const newFeatures = this.imageSelected(feature)\n      ? currentFeatures.filter(feat => feat.id !== feature.id)\n      : [feature, ...currentFeatures];\n\n    this._selectedImages.next(newFeatures);\n  }\n\n  setSelectedImages(selectedImages: any): void {\n    this._selectedImages.next(selectedImages);\n  }\n\n  toggleTagger(): void {\n    this._showTagger.next(!this._showTagger.value);\n  }\n\n  setShowTagGenerator(value: boolean): void {\n    this._showTagGenerator.next(value);\n  }\n}\n","import { Component, Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { Group, TagGroup, GroupForm, Tag, Project } from '../models/models';\nimport { map, first } from 'rxjs/operators';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { GeoDataService } from './geo-data.service';\nimport { prepareSyntheticListenerFunctionName } from '@angular/compiler/src/render3/util';\nimport { fadeInItems } from '@angular/material';\nimport { Feature, FeatureCollection } from 'geojson';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FormsService {\n  constructor(\n    private geoDataService: GeoDataService\n  ) {}\n\n  deleteForm(\n    projectId: number,\n    form: GroupForm,\n    activeGroup: TagGroup,\n    featureGroups: Feature[]\n  ): void {\n    const taggedGroup: TagGroup = {\n      ...activeGroup,\n      forms: activeGroup.forms.filter((t: GroupForm) => t.id !== form.id),\n    };\n\n    this.geoDataService.updateGroupFeatures(\n      projectId,\n      featureGroups,\n      taggedGroup\n    );\n  }\n\n  renameForm(\n    projectId: number,\n    targetForm: GroupForm,\n    activeGroup: TagGroup,\n    featureGroups: Feature[],\n    newName: string\n  ): void {\n    const taggedGroup: TagGroup = {\n      ...activeGroup,\n      forms: [...activeGroup.forms.filter(form => form.id !== targetForm.id), { ...targetForm, label: newName }],\n    };\n\n    this.geoDataService.updateGroupFeatures(\n      projectId,\n      featureGroups,\n      taggedGroup\n    );\n  }\n\n  createForm(\n    projectId: number,\n    form: GroupForm,\n    activeGroup: TagGroup,\n    featureGroups: Feature[]\n  ): void {\n    const id = uuidv4();\n    form = { ...form, id };\n    const taggedGroup: TagGroup = {\n      ...activeGroup,\n      forms: activeGroup.forms ? [...activeGroup.forms, form] : [form],\n    };\n    this.geoDataService.updateGroupFeatures(\n      projectId,\n      featureGroups,\n      taggedGroup\n    );\n  }\n\n  checkDefault(selectedColor: string, feature: any) {\n    if (selectedColor === 'default') {\n      try {\n        selectedColor = feature.styles.color;\n      } catch (error) {\n        selectedColor = '#00C8FF';\n      }\n    }\n    return selectedColor;\n  }\n\n  // Inputs:\n  // color:string A 7 digit hexadecimal string (#RRGGBB) passed in from a color tag\n  // This method accesses group services to retrive the current group's icon as well\n  // REDO: because it doesn't utilize hazmapper's styles properly\n  saveStyles(\n    projectId: number,\n    selectedColor: string,\n    group: TagGroup,\n    feature: Feature\n  ) {\n    group.color = this.checkDefault(selectedColor, feature);\n\n    const style = {\n      faIcon: group.icon,\n      color: group.color,\n    };\n\n    this.geoDataService.updateGroupFeatures(projectId, [feature], group);\n    this.geoDataService.updateFeatureStyle(projectId, feature.id, style);\n  }\n\n  updateTagValue(\n    activeProject: Project,\n    feature: Feature,\n    form: GroupForm,\n    tagValue: any\n  ) {\n    let tagProp = feature.properties.tags ? feature.properties.tags : [];\n    tagProp = tagProp.filter((tag: Tag) => form.id !== tag.id);\n\n    const tag = {\n      id: form.id,\n      value: tagValue,\n    };\n\n    feature.properties.tags = [...tagProp, tag];\n\n    this.geoDataService.updateFeatureProperty(\n      activeProject.id,\n      feature.id,\n      feature.properties\n    );\n  }\n\n  updateTagValues(\n    activeProject: Project,\n    feature: Feature,\n    formList: GroupForm[],\n    newValues: any[]\n  ) {\n    feature.properties.tags = newValues;\n    this.geoDataService.updateFeatureProperty(\n      activeProject.id,\n      feature.id,\n      feature.properties\n    );\n  }\n\n  getTagValue(feature: Feature, form: GroupForm): any {\n    if (feature.properties.tags) {\n      const tagValueObj = feature.properties.tags.find(\n        (featTag: any) => featTag.id && featTag.id === form.id\n      );\n\n      if (tagValueObj) {\n        return tagValueObj.value;\n      }\n    }\n    if (form.type === 'checkbox') {\n      return [];\n    } else {\n      return '';\n    }\n  }\n}\n\n// TODO: put this in models so we can reference it like we do the Features type\nexport interface tags {\n  type: string;\n  groupName: string;\n  label: string;\n  options: Array<Group>;\n  feature: string | number;\n  extra: Array<Group>;\n  id?: string;\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { BsModalService, BsModalRef } from 'ngx-foundation';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ProjectsService } from '../../services/projects.service';\nimport { Project, ProjectRequest } from '../../models/models';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-modal-current-project',\n  templateUrl: './modal-current-project.component.html',\n  styleUrls: ['./modal-current-project.component.scss']\n})\nexport class ModalCurrentProjectComponent implements OnInit {\n  projCreateForm: FormGroup;\n  activeProject: Project;\n\n  constructor(public dialogRef: MatDialogRef<ModalCurrentProjectComponent>,\n\t\t\t           private dialog: MatDialog,\n\t\t\t           private projectsService: ProjectsService,\n\t\t\t           @Inject(MAT_DIALOG_DATA) public projData: any) { }\n\n  ngOnInit() {\n\n    \n    this.projectsService.activeProject.subscribe( (next) => {\n      this.activeProject = next;\n    });\n\n    this.projCreateForm = new FormGroup( {\n      name: new FormControl(this.activeProject.name),\n      description: new FormControl(this.activeProject.description)\n    });\n\n  }\n\n  close() {\n\tthis.dialogRef.close();\n  }\n\n  delete() {\n    if (confirm('Are you sure you want to delete this project? This will also delete it from HazMapper, and anyone this project was shared with.')) {\n      this.projectsService.delete(this.activeProject);\n    }\n    this.dialogRef.close();\n  }\n  \n  update() {\n    // The project is being properly assembled, but the problem is that the returned project isn't updating.\n    // Do I need more data in my projects?\n    /*\n      export interface Project {\n      description: string;\n      id?: number;\n      name: string;\n      ds_id?: string;\n      title?: string;\n      uuid?: string;\n      public?: boolean;\n      system_file?: string;\n      system_id?: string;\n      system_path?: string;\n      deleting?: boolean;\n      deletingFailed?: boolean;\n    }\n     */\n    const p = new Project();\n    const projRqst = new ProjectRequest();\n\n    p.description = this.projCreateForm.get('description').value;\n    p.name = this.projCreateForm.get('name').value;\n    p.id = this.activeProject.id;\n    p.uuid = this.activeProject.uuid;\n    \n    projRqst.project = p;\n\n    this.projectsService.update(projRqst);\n    this.dialogRef.close();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Feature,\n  FeatureCollection\n} from '../models/models';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { GeoDataService } from './geo-data.service';\nimport { feature } from '@turf/turf';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureService {\n  private featureCollection: FeatureCollection;\n  private _features: BehaviorSubject<FeatureCollection>;\n  public features$: Observable<FeatureCollection>;\n\n  constructor(\n    private geoDataService: GeoDataService,\n  ) {\n    this._features = new BehaviorSubject<FeatureCollection>({\n      type: 'FeatureCollection',\n      features: [],\n    });\n    this.features$ = this._features.asObservable();\n\n    this.geoDataService.features.subscribe((fc: FeatureCollection) => {\n      this._features.next(fc);\n      this.featureCollection = fc;\n    });\n  }\n\n  // Takes the feature to be deleted, and filters it out of the feature list\n  deleteFeature(feat: Feature): void {\n    this.featureCollection.features = this.featureCollection.features.filter(\n      (featListfeat) => featListfeat.id != feat.id\n    );\n    this._features.next(this.featureCollection); // Update the observable\n    this.geoDataService.deleteFeature(feat);\n  }\n\n  // Takes a list of features, and deletes them from the observable in a more efficient manner\n  bulkFeatureDelete(delFeats: Array<Feature>): void {\n    delFeats.forEach((feat) => {\n      // Filter out every feature in delFeats from the master list\n      this.featureCollection.features = this.featureCollection.features.filter(\n        (featListFeature) => featListFeature.id != feat.id\n      );\n      this.geoDataService.deleteFeature(feat);\n    });\n    this._features.next(this.featureCollection); // Update the observable with the filtered list\n  }\n\n  saveFeature(feat: Feature): void {\n    this.geoDataService.updateFeatureProperty(\n      feat.project_id,\n      Number(feat.id),\n      feat.properties\n    );\n  }\n\n  // Takes a feature, and optionally an updated property section\n  // If featprop is null, it assumes the passed in feature was already updated with the new properties\n  updateFeatureProperties(feature: Feature, featProp = null): void {\n    // If featprop has a value, update the feature's properties to the new section\n    if (featProp != null) {\n      feature.properties = featProp;\n    }\n    // Update and save the list\n    this.featureCollection.features.forEach((feat) => {\n      if (feat.id == feature.id) {\n        feat = feature;\n      }\n    });\n    this.saveFeature(feature);\n  }\n}\n","import { Component, OnInit, Output, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { ProjectsService } from '../../services/projects.service';\nimport { Feature, Project, TagGroup } from '../../models/models';\nimport { FeatureCollection } from 'geojson';\nimport { GeoDataService } from '../../services/geo-data.service';\nimport { LatLng } from 'leaflet';\nimport { skip, startWith } from 'rxjs/operators';\nimport { BsModalRef, BsModalService } from 'ngx-foundation';\nimport { ModalFileBrowserComponent } from '../modal-file-browser/modal-file-browser.component';\nimport { ModalDownloadSelectorComponent } from '../modal-download-selector/modal-download-selector.component';\nimport { ModalCreateProjectComponent } from '../modal-create-project/modal-create-project.component';\nimport { ModalShareProjectComponent } from '../modal-share-project/modal-share-project.component';\nimport { interval, Observable, Subscription, combineLatest } from 'rxjs';\nimport { RemoteFile } from 'ng-tapis';\nimport { GroupsService } from '../../services/groups.service';\nimport { FormsService } from '../../services/forms.service';\nimport {\n  AuthenticatedUser,\n  AuthService,\n} from '../../services/authentication.service';\nimport { Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ModalCurrentProjectComponent } from '../modal-current-project/modal-current-project.component';\nimport { AppEnvironment, environment } from '../../../environments/environment';\nimport { feature } from '@turf/helpers';\nimport { TapisFilesService } from '../../services/tapis-files.service';\nimport { element } from 'protractor';\nimport { consoleTestResultHandler } from 'tslint/lib/test';\nimport { ScrollService } from 'src/app/services/scroll.service';\nimport { NotificationsService } from 'src/app/services/notifications.service';\nimport { FeatureService } from 'src/app/services/feature.service';\n\n@Component({\n  selector: 'app-control-bar',\n  templateUrl: './control-bar.component.html',\n  styleUrls: ['./control-bar.component.scss'],\n})\nexport class ControlBarComponent implements OnInit {\n  public activeFeature: Feature;\n  features: FeatureCollection;\n  featureList: Array<any> = [];\n\n  public currentUser: AuthenticatedUser;\n  public projects: Project[];\n  public selectedProject: Project;\n  public mapMouseLocation: LatLng = new LatLng(0, 0);\n  imageName: string;\n  groupsExist: boolean;\n  groupName: string;\n  showTagger = false;\n  selectedImages: Array<any>;\n  modalRef: BsModalRef;\n  activeGroup: TagGroup;\n  groups: Map<string, TagGroup>;\n  groupsFeatures: Map<string, any>;\n  activeGroupFeatures: any;\n  activeGroupFeaturesRotate: any;\n  activeGroupFeature: any;\n  invalidNameError = false;\n  existingNameError = false;\n  hazmapperLink: string;\n  foundFilePaths = [];\n\n  constructor(\n    private projectsService: ProjectsService,\n    private geoDataService: GeoDataService,\n    private bsModalService: BsModalService,\n    private groupsService: GroupsService,\n    private formsService: FormsService,\n    private authService: AuthService,\n    private readonly cdr: ChangeDetectorRef,\n    private filesService: TapisFilesService,\n    private router: Router,\n    private dialog: MatDialog,\n    private scrollService: ScrollService,\n    private notificationsService: NotificationsService,\n    private featureService: FeatureService\n  ) {}\n\n  ngOnInit() {\n    this.filesService.getState();\n\n    this.featureService.features$.subscribe((fc: FeatureCollection) => {\n      this.features = fc;\n\n      if (this.features != undefined) {\n        this.featureList = fc.features.filter((feature: Feature) => {\n          try {\n            return (\n              feature.initialAsset() && feature.featureType() === 'image'\n            );\n          } catch (error) {\n            // If a feature has no asset, it ends up in this catch\n            console.error(error);\n            // After outputting the error, add an \"image not found\" placeholder,\n            // Allowing users to still select their errored import\n            // Note that this doesn't really work!\n            feature.assets.push({ path: '../../images/Image-not-found.png' });\n            return false;\n          }\n        });\n      }\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n      this.groupsExist = next && next.size ? true : false;\n    });\n\n    combineLatest(\n      this.geoDataService.activeGroup,\n      this.geoDataService.groupsFeatures\n    ).subscribe(([grp, grpFts]) => {\n      this.activeGroup = grp;\n      this.groupsFeatures = grpFts;\n      if (grp && grpFts) {\n        this.activeGroupFeatures = grpFts.get(grp.name);\n        if (this.activeGroupFeatures) {\n          this.activeGroupFeaturesRotate = [...this.activeGroupFeatures];\n        }\n      }\n    });\n\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n    });\n\n    this.geoDataService.activeFeature.subscribe((next) => {\n      this.activeFeature = next;\n    });\n\n    this.notificationsService.notifications.subscribe((next) => {\n      const hasSuccessNotification = next.some(\n        (note) => note.status === 'success'\n      );\n      const hasFailureNotification = next.some((note) => note.status === 'error');\n      if (hasSuccessNotification) {\n        this.geoDataService.getFeatures(this.selectedProject.id);\n      }\n      if (hasFailureNotification) {\n        next.forEach((item) => {\n          // Compiles a list of all necessary files to import via the alt method\n          // The substring from 0 to 16 contains the phrase \"Error importing\", everything after this is the file path\n          if (\n            item.message.substring(0, 16) == 'Error importing ' &&\n            !this.foundFilePaths.some(\n              (filePath) => filePath === item.message.substring(16)\n            )\n          ) {\n            const path = item.message.substring(16);\n            this.geoDataService.uploadNewFeature(\n              this.selectedProject.id,\n              this.createBlankFeature(),\n              path\n            );\n            this.foundFilePaths.push(path);\n          }\n        });\n        this.geoDataService.getFeatures(this.selectedProject.id);\n      }\n    });\n\n    this.authService.currentUser.subscribe((next) => (this.currentUser = next));\n\n    this.projectsService.getProjects();\n    this.projectsService.projects.subscribe((projects) => {\n      this.projects = projects;\n\n      if (this.projects.length) {\n        let lastProj;\n        // try {\n        //   //restores view to the last visited project from local storage\n        //   lastProj = JSON.parse(window.localStorage.getItem('lastProj'));\n        //   // console.log(lastProj);\n        // } catch (error) {\n        //   lastProj = this.projectsService.setActiveProject(this.projects[0]);\n        // }\n\n        lastProj = this.projectsService.setActiveProject(this.projects[0]);\n\n        // If lastProj is null, then there is no project saved, or can be found, default to the first project in the list\n        if (lastProj == 'none' || lastProj == null) {\n          lastProj = this.projects[0];\n        }\n\n        this.projectsService.setActiveProject(lastProj);\n      }\n\n      this.groupsService.selectedImages.subscribe((next) => {\n        this.selectedImages = next;\n      });\n\n      this.groupsService.showTagger.subscribe((next) => {\n        this.showTagger = next;\n      });\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.selectedProject = next;\n      this.getDataForProject(this.selectedProject);\n      // retrieves uuid for project, formats result into a link to that Hazmapper map\n      this.hazmapperLink =\n        'https://hazmapper.tacc.utexas.edu/hazmapper/project/' + next.uuid;\n    });\n\n    this.geoDataService.mapMouseLocation.pipe(skip(1)).subscribe((next) => {\n      this.mapMouseLocation = next;\n    });\n  }\n\n  ngAfterViewChecked() {\n    this.cdr.detectChanges();\n  }\n\n  clearAll() {\n    this.groupsService.unselectAllImages();\n  }\n\n  selectProject(p: Project): void {\n    this.projectsService.setActiveProject(p);\n    this.getDataForProject(p);\n  }\n\n  getDataForProject(p: Project): void {\n    this.geoDataService.getFeatures(p.id);\n    this.geoDataService.getOverlays(p.id);\n    this.geoDataService.getPointClouds(p.id);\n  }\n\n  openFilePicker() {\n    // Refreshes the list of found paths used in importing images without Geo tagging\n    this.foundFilePaths = [];\n    const modal = this.dialog.open(ModalFileBrowserComponent);\n    modal.afterClosed().subscribe((files: Array<RemoteFile>) => {\n      if (files != null) {\n        this.geoDataService.importFileFromTapis(this.selectedProject.id, files);\n      }\n    });\n  }\n\n  // Creates a feature with a long/lat value of 0,0 and no associated image. Used in alternate image inport\n  // I think if we want a placeholder image, we can add it here.\n  createBlankFeature() {\n    const blankFeature: Feature = {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [0, 0],\n      },\n      properties: {},\n    };\n    return blankFeature;\n  }\n\n  openDownloadSelector(fileName: string) {\n    const modal = this.dialog.open(ModalDownloadSelectorComponent);\n    let path: Array<string>;\n    modal.afterClosed().subscribe((passbackData: Array<string>) => {\n      path = passbackData;\n      this.saveFile(path[3] == '.json', true, path[0], path[1], path[2]);\n    });\n  }\n\n  openCreateProjectModal() {\n    this.dialog.open(ModalCreateProjectComponent, {\n      height: '400px',\n      width: '600px',\n    });\n  }\n\n  openShareProjectModal() {\n    this.dialog.open(ModalShareProjectComponent, {\n      height: '400px',\n      width: '600px',\n    });\n  }\n\n  openProjectModal(project) {\n    const modal = this.dialog.open(ModalCurrentProjectComponent, {\n      height: '400px',\n      width: '600px',\n      data: {\n        id: project.id,\n        name: project.name,\n        description: project.description,\n        uuid: project.uuid,\n      },\n    });\n\n    modal.afterClosed().subscribe((passbackData: Array<string>) => {\n      this.projectsService.setActiveProject(this.projects[0]);\n    });\n  }\n\n  addGroup(name: string) {\n    this.groupName = name;\n    if (!name || 0 === name.length) {\n      this.invalidNameError = true;\n      this.existingNameError = false;\n    } else if (this.groups.get(name)) {\n      this.invalidNameError = false;\n      this.existingNameError = true;\n    } else {\n      this.invalidNameError = false;\n      this.existingNameError = false;\n      const newGroup = this.geoDataService.createNewGroup(\n        this.selectedProject.id,\n        this.selectedImages,\n        name\n      );\n      this.dialog.closeAll();\n      this.groupsService.unselectAllImages();\n    }\n  }\n\n  openAddGroupModal(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  toggleTagger() {\n    if (!this.showTagger) {\n      this.scrollService.setScrollRestored(true);\n\n      const [initialGroupName] = this.groupsFeatures.keys();\n      const activeGroupFeatures = this.groupsFeatures.get(initialGroupName);\n      const activeGroup = this.groups.get(initialGroupName);\n      this.geoDataService.setActiveGroup(activeGroup);\n\n      this.groupsService.setShowTagGenerator(false);\n      this.groupsService.unselectAllImages();\n    } else {\n      this.scrollService.setScrollPosition();\n    }\n\n    this.groupsService.toggleTagger();\n  }\n\n  getAssetDisplay() {\n    return this.activeGroupFeature.featureShortPath();\n  }\n\n  otherPath(dir: boolean) {\n    if (dir) {\n      this.activeGroupFeaturesRotate.push(\n        this.activeGroupFeaturesRotate.shift()\n      );\n    } else {\n      this.activeGroupFeaturesRotate.unshift(\n        this.activeGroupFeaturesRotate.pop()\n      );\n    }\n    this.activeGroupFeature = this.activeGroupFeaturesRotate[0];\n    this.geoDataService.setActiveGroupFeature(this.activeGroupFeature);\n  }\n\n  // saves project as a CSV file by first organizing a JSON or a CSV and converting it. Saves to either MyData or local\n  // I apologize in advance for this mess of a function -Ben\n  // This really needs to be split into something like 3 separate functions\n  saveFile(\n    isJSON: Boolean,\n    forExport: Boolean = false,\n    systemID = '',\n    path = '',\n    fileName\n  ) {\n    let CSVHolder = 'FeatureID,longitude,latitude,src';\n    let JSONHolder: String = '';\n    let projID = '';\n    let tagsPresent = true;\n    let headerComplete = false; // If true, then the full csv header info has been compiled\n    let headerTagOptions = 0; // Controls how many tagOption columns are in the final CSV\n\n    this.featureList.forEach((element) => {\n      // Retrieves project ID for building a filename\n      projID = element.project_id;\n\n\n      // retrieves longitude and latitude values as an array\n      const coordinates = element.geometry.coordinates;\n\n      // creates image source URL from environment and cleans up URL to a usable link\n      let featureSource =\n        environment.apiUrl + '/assets/' + element.assets[0].path;\n      featureSource = featureSource.replace(/([^:])(\\/{2,})/g, '$1/');\n\n      // Grabs group data\n      // Group data can be accessed from the feature, through the properties element\n      // If the image doesn't have a group, a placeholder is given\n      // NOTE: future group properties can be accessed in the same way\n      let group, styles, tag;\n      try {\n        try {\n          group = element.properties.group;\n        } catch {\n          group = [\n            {\n              color: '#000000',\n              name: 'N/A',\n              icon: 'fa-house-damage',\n            },\n          ];\n        }\n\n        try {\n          styles = element.properties.style;\n        } catch {\n          styles = [];\n        }\n\n        try {\n          tag = element.properties.tag;\n        } catch {\n          tag = [];\n        }\n\n        // If groups are present on the data, add header data\n        if (group.length > 0 && !headerComplete) {\n          CSVHolder += ',groupName,groupColor,groupIcon';\n        }\n\n        // Check if the tag var has any data, if so, add new lines to the header\n        if (tag != undefined && tagsPresent && !headerComplete) {\n          // Add a few more lines to the holder to accomodate tags\n          CSVHolder += ',Icon,Color,tagType,tagSelection';\n          tag.forEach((tag) => {\n            let tempTagOptionNum = 0;\n            tag.options.forEach((option) => {\n              tempTagOptionNum++;\n              if (tempTagOptionNum > headerTagOptions) {\n                CSVHolder += ',tagOption';\n                headerTagOptions = tempTagOptionNum;\n              }\n            });\n          });\n          if (!headerComplete) {\n            CSVHolder += '\\r\\n';\n            tagsPresent = false;\n            headerComplete = true;\n          }\n        } else if (!headerComplete) {\n          // If not, indent the last line.\n          CSVHolder += '\\r\\n';\n          headerComplete = true;\n        }\n      } catch (error) {}\n\n      if (isJSON) {\n        // Compile the data it into a JSON\n        JSONHolder +=\n          this.compileJSON(\n            coordinates,\n            element.id,\n            featureSource,\n            group,\n            tag,\n            styles\n          ) + ', \\n';\n      } else {\n        // Compiles the attributes into a CSV format\n        // If there is no groups for the feature, output without group info\n        if (group == undefined) {\n          // Indents CSV header.\n          CSVHolder += '\\r\\n';\n          // Compiles data to a line of a CSV, and adds it to a growing full CSV file\n          // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n          const tempCSV =\n            element.id +\n            ',' +\n            coordinates[0] +\n            ',' +\n            coordinates[1] +\n            ',' +\n            featureSource +\n            '\\r\\n';\n          CSVHolder += tempCSV;\n        } else {\n          group.forEach((group) => {\n            // If tags exist, try to add each tag to the CSV\n            if (tag != undefined) {\n              try {\n                tag.forEach((tag) => {\n                  // If the tag is in the group, compile a row\n                  // TODO: If a group doesn't have a tag, it doesn't get printed at all\n                  if (true) {\n                    // (tag.groupName === group.name) {\n                    // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n                    let tempCSV =\n                      element.id +\n                      ',' +\n                      coordinates[0] +\n                      ',' +\n                      coordinates[1] +\n                      ',' +\n                      featureSource +\n                      ',' +\n                      // groupName\t\t\tgroupColor\t\t\tgroupIcon\t\t   Icon\t\t\t\t\t Color\n                      group.name +\n                      ',' +\n                      group.color +\n                      ',' +\n                      group.icon +\n                      ',' +\n                      styles.faIcon +\n                      ',' +\n                      styles.color +\n                      ',' +\n                      // tagType\t\t\ttagOption(This is repeated a lot)\n                      tag.type +\n                      ',' +\n                      tag.extra[0].option;\n                    tag.options.forEach((option) => {\n                      // Save each option in the tag to the CSV\n                      // Adds just the label to the CSV, we can reconstruct the key from that.\n                      tempCSV += ',' + option.label;\n                    });\n                    tempCSV += '\\r\\n';\n                    // And adds it to a growing full CSV file\n                    CSVHolder += tempCSV;\n                  }\n                });\n              } catch {\n                try {\n                  // If the above fails, attempt to construct a line with group data\n                  // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n                  const tempCSV =\n                    element.id +\n                    ',' +\n                    coordinates[0] +\n                    ',' +\n                    coordinates[1] +\n                    ',' +\n                    featureSource +\n                    ',' +\n                    // groupName\t\t\tgroupColor\t\t\tgroupIcon\n                    group.name +\n                    ',' +\n                    group.color +\n                    ',' +\n                    group.icon +\n                    '\\r\\n';\n                  CSVHolder += tempCSV;\n                } catch (error) {\n                  // If all else fails, It writes no data on an error, so output the groupless data\n                  // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n                  const tempCSV =\n                    element.id +\n                    ',' +\n                    coordinates[0] +\n                    ',' +\n                    coordinates[1] +\n                    ',' +\n                    featureSource +\n                    '\\r\\n';\n                  CSVHolder += tempCSV;\n                }\n              }\n            } else {\n              // Compiles data to a line of a CSV\n              // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n              const tempCSV =\n                element.id +\n                ',' +\n                coordinates[0] +\n                ',' +\n                coordinates[1] +\n                ',' +\n                featureSource +\n                ',' +\n                // groupName\t\t\tgroupColor\t\t\tgroupIcon\n                group.name +\n                ',' +\n                group.color +\n                ',' +\n                group.icon +\n                '\\r\\n';\n              // And adds it to a growing full CSV file\n              CSVHolder += tempCSV;\n            }\n          });\n        }\n      }\n    });\n    let content;\n    let extension;\n    // determine whether the file is wanted as a JSON or a CSV\n    if (isJSON) {\n      content = JSONHolder;\n      extension = '.json';\n    } else {\n      content = CSVHolder;\n      extension = '.csv';\n    }\n\n    // If the function is marked for export to Design Safe, route through export, otherwise, download the file\n    if (forExport) {\n      fileName == ''\n        ? (fileName = projID + extension)\n        : (fileName += extension);\n      this.filesService.export(systemID, path, fileName, extension, content);\n    } else {\n      this.download(content, extension, projID);\n    }\n  }\n\n  compileJSON(\n    coordinates,\n    featureID,\n    featureSource: string,\n    groups = [],\n    tags = [],\n    style\n  ) {\n    let compiledJSON = '';\n    let transferJSON;\n\n    // Add the most basic information to the compiled JSON\n    transferJSON = {\n      longitude: coordinates[0],\n      latitude: coordinates[1],\n      src: featureSource,\n    };\n    compiledJSON += JSON.stringify(transferJSON);\n\n    if (groups.length != 0) {\n      groups.forEach((group) => {\n        // At this point, group info should be added,\n        // If tags are set to a default value, there are none present, compile without tag information\n        transferJSON = {\n          groupName: group.name,\n          groupColor: group.color,\n        };\n        compiledJSON += JSON.stringify(transferJSON);\n        if (tags.length > 0) {\n          // Compile a JSON with full tag information\n          tags.forEach((tag) => {\n            if (tag.feature == featureID) {\n              transferJSON = {\n                icon: style.faIcon,\n                'icon color': style.color,\n                'tag name': tag.label,\n                'tag type': tag.type,\n                'tag selection': tag.extra[0].option,\n              };\n              compiledJSON += JSON.stringify(transferJSON);\n            }\n          });\n        }\n      });\n    }\n    // If the above failed, compile the minimum JSON\n    if (compiledJSON == '') {\n      transferJSON = {\n        longitude: coordinates[0],\n        latitude: coordinates[1],\n        src: featureSource,\n      };\n      compiledJSON += JSON.stringify(transferJSON);\n    }\n    return compiledJSON;\n  }\n\n  download(content, extension, projID) {\n    // Creates a download link in typescript through a blob\n    const blob = new Blob(['\\ufeff' + content], {\n      type: 'text/csv;charset=utf-8;',\n    });\n    const download = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    const filename = 'taggit-proj-' + projID;\n\n    // checks if the browser is Safari or otherwise, if so open download in new window\n    // Its a quirk of those browsers that they don't allow same-page downloads\n    if (\n      navigator.userAgent.indexOf('Safari') != -1 &&\n      navigator.userAgent.indexOf('Chrome') == -1\n    ) {\n      download.setAttribute('target', '_blank');\n    }\n    // Sets up the link, and simulates a click\n    download.setAttribute('href', url);\n    download.setAttribute('download', filename + extension);\n    download.style.visibility = 'hidden';\n    document.body.appendChild(download);\n    download.click();\n    document.body.removeChild(download);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport { AuthService} from './services/authentication.service';\nimport { environment } from '../environments/environment';\nimport {catchError} from 'rxjs/operators';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n    constructor(private authService: AuthService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        return next.handle(request).pipe(catchError(err => {\n            if (err.status === 401) {\n                // auto logout if 401 response returned from api\n                this.authService.logout();\n                location.reload();\n            }\n\n            const error = err.error.message || err.statusText;\n            return throwError(error);\n        }));\n    }\n}\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n    constructor(private authSvc: AuthService) {}\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n        if (request.url.indexOf('https://agave.designsafe-ci.org') > -1) {\n            if (this.authSvc.isLoggedIn()) {\n                request = request.clone({\n                    setHeaders: {\n                        Authorization: 'Bearer ' + this.authSvc.userToken.token\n                    }\n                });\n            }\n        }\n        // we put the JWT on the request to our geoapi API because it is not behind ws02 if in local dev\n        // and if user is logged in\n        if (\n          request.url.indexOf('http://localhost') > -1 &&\n          this.authSvc.isLoggedIn()\n        ) {\n            // add header\n            request = request.clone({\n                setHeaders: {\n                    'X-JWT-Assertion-designsafe': environment.jwt,\n                },\n            });\n        }\n\n        // we put the JWT on the request to our geoapi API because it is not behind ws02 if in local dev\n        // and if user is logged in\n        if (\n          request.url.indexOf('http://localhost') > -1 &&\n          this.authSvc.isLoggedIn()\n        ) {\n            // add header\n            request = request.clone({\n                setHeaders: {\n                    'X-JWT-Assertion-designsafe': environment.jwt,\n                },\n            });\n        }\n\n        return next.handle(request);\n    }\n}\n","import { AfterViewChecked, Component, OnInit, Renderer2, ChangeDetectorRef } from '@angular/core';\nimport { GeoDataService } from '../../services/geo-data.service';\nimport {\n  FeatureAsset,\n  Feature,\n  Project,\n  FeatureCollection,\n  TagGroup,\n} from '../../models/models';\nimport { AppEnvironment, environment } from '../../../environments/environment';\nimport { ProjectsService } from '../../services/projects.service';\nimport { ScrollService } from 'src/app/services/scroll.service';\nimport { GroupsService } from '../../services/groups.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { startWith } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ModalCreateProjectComponent } from '../modal-create-project/modal-create-project.component';\nimport { FeatureService } from 'src/app/services/feature.service';\n\n@Component({\n  selector: 'app-image-gallery',\n  templateUrl: './image-gallery.component.html',\n  styleUrls: ['./image-gallery.component.scss'],\n})\nexport class ImageGalleryComponent implements OnInit, AfterViewChecked {\n  environment: AppEnvironment;\n\n  public projects: Project[];\n  groupName: string;\n  showTagger = false;\n  scrolling = false;\n  scrollStatus: string;\n  imagesExist: boolean;\n  projectsExist: boolean;\n  featureList: Array<any> = [];\n  featureListScroll: Array<any>;\n  scrollSum = 15;\n  activeGroup: TagGroup;\n  activeFeature: Feature;\n  activeGroupFeature: Feature;\n  // activeFeatureNum: number;\n  featurePath: string;\n  loaded: boolean;\n  groupsFeatures: Map<string, any>;\n  groups: Map<string, any>;\n\n  constructor(\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService,\n    private groupsService: GroupsService,\n    private readonly cdr: ChangeDetectorRef,\n    private renderer: Renderer2,\n    private spinner: NgxSpinnerService,\n    private dialog: MatDialog,\n    private scrollService: ScrollService,\n    private featureService: FeatureService\n  ) {}\n\n  ngAfterViewChecked() {\n    if (this.scrollService.scrollRestored) {\n      this.scrollService.scroll();\n    }\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit() {\n    this.environment = environment;\n\n    this.geoDataService.loaded.subscribe(\n      (e) => {\n        this.loaded = e;\n      },\n      (error) => {\n        this.projectsExist = false;\n      }\n    );\n\n    this.featureService.features$.subscribe((fc: any) => {\n      if (fc) {\n        if (fc.features.length > 0) {\n          this.imagesExist = true;\n          this.featureList = fc.features.filter((feature) => {\n            try {\n              return (\n                feature.initialAsset() && feature.featureType() === 'image'\n              );\n            } catch (error) {\n              // If a feature has no asset, it ends up in this catch\n              console.error(error);\n              // After outputting the error, add an \"image not found\" placeholder,\n              // Allowing users to still select their errored import\n              // Note that this doesn't really work!\n              feature.assets.push({ path: '../../images/Image-not-found.png' });\n              return false;\n            }\n          });\n          this.featureListScroll = this.featureList.slice(0, this.scrollSum);\n        } else {\n          this.imagesExist = false;\n        }\n      }\n    });\n\n    this.projectsService.projects.subscribe((projects) => {\n      this.projects = projects;\n      if (this.projects.length) {\n        this.projectsExist = true;\n      } else {\n        this.projectsExist = false;\n      }\n    });\n\n    this.geoDataService.groupsFeatures.subscribe((next) => {\n      this.groupsFeatures = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.geoDataService.activeFeature.subscribe((next) => {\n      if (next) {\n        this.activeFeature = next;\n      }\n    });\n\n    this.geoDataService.activeGroup.subscribe((next: TagGroup) => {\n      this.activeGroup = next;\n    });\n\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.groupsService.showTagger.subscribe((next) => {\n      this.showTagger = next;\n      this.scrollStatus = next ? 'success' : 'danger';\n    });\n  }\n\n  getPath() {\n    return (\n      this.environment.apiUrl +\n      '/assets/' +\n      this.activeGroupFeature.assets[0].path.replace(/([^:])(\\/{2,})/g, '$1/')\n    );\n  }\n\n  appendSum() {\n    if (this.featureList.length != 0) {\n      if (this.scrollSum == this.featureList.length) {\n        this.spinner.hide();\n        this.scrolling = false;\n        return;\n      }\n      // If scrollSum is larger than the length of the feature list, curtail it to just be the length\n      if (this.scrollSum > this.featureList.length) {\n        this.scrollSum = this.featureList.length;\n      }\n    }\n    this.featureListScroll = this.featureList.slice(0, this.scrollSum);\n    setTimeout(() => {\n      this.spinner.hide();\n      this.scrolling = false;\n    }, 1300);\n  }\n\n  onScroll() {\n    if (!this.scrolling) {\n      this.spinner.show();\n      this.scrollSum += 10;\n      this.appendSum();\n      this.scrolling = true;\n    }\n  }\n\n  openCreateProjectModal() {\n    this.dialog.open(ModalCreateProjectComponent, {\n      height: '400px',\n      width: '600px',\n    });\n  }\n}\n","import {\n  Component,\n  OnInit,\n  EventEmitter,\n  Input,\n  TemplateRef,\n} from '@angular/core';\nimport { Feature, Project, TagGroup } from '../../models/models';\nimport { GeoDataService } from '../../services/geo-data.service';\nimport { AppEnvironment, environment } from '../../../environments/environment';\nimport { GroupsService } from '../../services/groups.service';\nimport { ProjectsService } from '../../services/projects.service';\nimport { BsModalService } from 'ngx-foundation/modal';\nimport { BsModalRef } from 'ngx-foundation/modal/bs-modal-ref.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { FormsService, tags } from 'src/app/services/forms.service';\nimport { ScrollService } from 'src/app/services/scroll.service';\nimport { FeatureService } from 'src/app/services/feature.service';\n\n@Component({\n  selector: 'app-image-box',\n  templateUrl: './image-box.component.html',\n  styleUrls: ['./image-box.component.scss'],\n})\nexport class ImageBoxComponent implements OnInit {\n  @Input() feature: any;\n  environment: AppEnvironment;\n  featureSource: string;\n  featurePath: string;\n  status = false; // Controls the whether or not an image box is selected or not\n  imageSelected = 'img-unselected'; // Controls the whether or not an image box is selected or not\n  hasGroup = false;\n  colors: Array<string> = [];\n  groups: Map<string, TagGroup>;\n  coordinates: Array<any>;\n  containingGroupList: Array<any>;\n  selectedImages: Array<any>;\n  modalRef: BsModalRef;\n  groupToAdd: TagGroup;\n\n  public activeProject: Project;\n\n  constructor(\n    private geoDataService: GeoDataService,\n    private groupsService: GroupsService,\n    private projectsService: ProjectsService,\n    private modalService: BsModalService,\n    private formsService: FormsService,\n    private dialog: MatDialog,\n    private scrollService: ScrollService,\n    private featureService: FeatureService\n  ) {}\n\n  ngOnInit() {\n    // TODO: put this in models\n    this.environment = environment;\n    let featureSource;\n    if (this.feature.assets[0].path != '../../images/Image-not-found.png') {\n      featureSource =\n        this.environment.apiUrl + '/assets/' + this.feature.assets[0].path;\n    } else {\n      featureSource = this.feature.assets[0].path;\n    }\n    featureSource = featureSource.replace(/([^:])(\\/{2,})/g, '$1/');\n    this.featureSource = featureSource;\n    this.coordinates = this.feature.geometry.coordinates;\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.groupsService.selectedImages.subscribe((next) => {\n      this.selectedImages = next;\n      this.imageSelected = this.groupsService.imageSelected(this.feature)\n        ? 'img-selected'\n        : 'img-unselected';\n    });\n\n    this.featurePath = this.feature.featurePath();\n  }\n\n  imageSelect() {\n    this.groupsService.toggleImageSelect(this.feature);\n  }\n\n  imageZoom(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  imageDelete() {\n    const featureService = this.featureService;\n    this.selectedImages.forEach(function(value) {\n      featureService.deleteFeature(value);\n    });\n    this.groupsService.unselectAllImages();\n    this.scrollService.setScrollRestored(true);\n  }\n\n  openMoreGroupsModal(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  openImageDeleteModal(template: TemplateRef<any>) {\n    this.scrollService.setScrollPosition();\n    this.dialog.open(template);\n  }\n\n  deleteFromGroup(feature: Feature, group: TagGroup) {\n    this.geoDataService.deleteGroupFeatures(\n      this.activeProject.id,\n      [feature],\n      group\n    );\n  }\n\n  openImageAddModal(template: TemplateRef<any>) {\n    this.scrollService.setScrollPosition();\n    this.dialog.open(template);\n  }\n\n  addGroup(group: TagGroup) {\n    this.geoDataService.createGroupFeatures(\n      this.activeProject.id,\n      this.selectedImages,\n      this.groups.get(group.name)\n    );\n    this.groupsService.unselectAllImages();\n    this.scrollService.setScrollRestored(true);\n  }\n}\n","import {\n  Component,\n  Input,\n  OnInit,\n  OnDestroy,\n  OnChanges,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { FormsService } from '../../../../services/forms.service';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { consoleTestResultHandler } from 'tslint/lib/test';\nimport { connectableObservableDescriptor } from 'rxjs/internal/observable/ConnectableObservable';\nimport { GroupForm } from 'src/app/models/models';\n\n@Component({\n  selector: 'app-form-generator',\n  templateUrl: './form-generator.component.html',\n  styleUrls: ['./form-generator.component.scss'],\n})\nexport class FormGeneratorComponent implements OnInit {\n\n  constructor(private formsService: FormsService) {}\n  @Input() form: GroupForm;\n  @Output() newValue = new EventEmitter();\n  checked = false;\n  colorArray: Array<string> = [];\n  values = [];\n\n  name = new FormControl('');\n\n  ngOnInit() {\n    this.generateColors();\n  }\n\n  // Generates a key:value list of colors ranging from green (#00FF00) to red (#FF0000) based on passed in info\n  generateColors() {\n    let itemCount = this.form.options.length;\n    let isOdd = false;\n    if (itemCount % 2 === 1) {\n      // if there are an odd number of items in the collection, mark it and decriment the counter\n      isOdd = true;\n      itemCount--;\n    }\n    // Subtract 2 from item count (first entry is always green, #00FF00, last entry is always red, #FF0000\n    // Then half the item count, and use it to divide 255, this gives the amount we have to increment the colors\n    itemCount = (itemCount - 2) / 2;\n    let incrementVal = Math.floor(255 / itemCount);\n    if (incrementVal === 255) {\n      incrementVal = Math.floor(incrementVal / 2);\n    }\n    this.colorArray.push('#00FF00');\n    let baseNum = 0;\n    let temp;\n    // First loop, counts up from zero towards 255\n    for (let index = 0; index < itemCount; index++) {\n      baseNum = baseNum + incrementVal;\n      temp = baseNum.toString(16);\n      this.colorArray.push(`#${temp}FF00`);\n    }\n    // if there is an odd number of selections, push full yellow as a midpoint in the gradient\n    if (isOdd) {\n      this.colorArray.push('#FFFF00');\n    }\n    baseNum = 255; // Resets baseNum to 255 for the count down\n    // Second loop, counts down from 255 towards zero\n    for (let index = 0; index < itemCount; index++) {\n      baseNum = baseNum - incrementVal;\n      temp = baseNum.toString(16);\n      if (temp.length != 2) {\n        temp = '0' + temp;\n      }\n      this.colorArray.push(`#FF${temp}00`);\n    }\n    // Finally, pushes the color code for red onto the stack for the last entry\n    this.colorArray.push('#FF0000');\n  }\n\n  setValue(formValue) {\n    this.newValue.emit(formValue);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { GroupsService } from '../../services/groups.service';\n\n@Component({\n  selector: 'app-side-bar',\n  templateUrl: './side-bar.component.html',\n  styleUrls: ['./side-bar.component.scss'],\n})\nexport class SideBarComponent implements OnInit {\n  showTagGenerator = false;\n\n  constructor(\n    private groupsService: GroupsService,\n  ) {}\n\n  ngOnInit() {\n    this.groupsService.showTagGenerator.subscribe((next) => {\n      this.showTagGenerator = next;\n    });\n  }\n}\n","export const groupIcons: Array<any> = [\n  { id: 'fa-house-damage', unicode: '&#xf6f1; house-damage' },\n  { id: 'fa-car', unicode: '&#xf1b9; car' },\n  { id: 'fa-tree', unicode: '&#xf1bb; tree' },\n\n  { id: 'fa-school', unicode: '&#xf549; school' },\n  { id: 'fa-archway', unicode: '&#xf557; archway' },\n  { id: 'fa-building', unicode: '&#xf1ad; building' },\n  { id: 'fa-bus', unicode: '&#xf207; bus' },\n  { id: 'fa-church', unicode: '&#xf51d; church' },\n\n  { id: 'fa-helicopter', unicode: '&#xf533; helicopter' },\n  { id: 'fa-hospital-alt', unicode: '&#xf47d; hospital' },\n  { id: 'fa-hotel', unicode: '&#xf594; hotel' },\n  { id: 'fa-igloo', unicode: '&#xf7ae; igloo' },\n  { id: 'fa-motorcycle', unicode: '&#xf21c; motorcycle' },\n  { id: 'fa-place-of-worship', unicode: '&#xf67f; place-of-worship' },\n  { id: 'fa-plane', unicode: '&#xf072; plane' },\n  { id: 'fa-school', unicode: '&#xf549; school' },\n\n  { id: 'fa-rocket', unicode: '&#xf135; rocket' },\n  { id: 'fa-ship', unicode: '&#xf21a; ship' },\n  { id: 'fa-shopping-cart', unicode: '&#xf07a; shopping-cart' },\n  { id: 'fa-shuttle-van', unicode: '&#xf5b6; shuttle-van' },\n  { id: 'fa-monument', unicode: '&#xf5a6; monument' },\n  { id: 'fa-store', unicode: '&#xf54e; store' },\n\n  { id: 'fa-subway', unicode: '&#xf239; subway' },\n  { id: 'fa-taxi', unicode: '&#xf1ba; taxi' },\n  { id: 'fa-train', unicode: '&#xf238; train' },\n  { id: 'fa-truck', unicode: '&#xf0d1; truck' },\n  { id: 'fa-truck-pickup', unicode: '&#xf63c; truck-pickup' },\n  { id: 'fa-university', unicode: '&#xf19c; university' },\n  { id: 'fa-warehouse', unicode: '&#xf494; warehouse' },\n  { id: 'fa-bolt', unicode: '&#xf0e7; bolt' },\n];\n","import { Component, OnInit, OnDestroy, TemplateRef } from '@angular/core';\nimport { FeatureCollection } from 'geojson';\nimport { Project, TagGroup } from '../../../models/models';\nimport { ProjectsService } from '../../../services/projects.service';\nimport { FormsService } from '../../../services/forms.service';\nimport { GroupsService } from '../../../services/groups.service';\nimport { GeoDataService } from '../../../services/geo-data.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Subscription } from 'rxjs';\nimport { templateJitUrl } from '@angular/compiler';\nimport { Feature, tag } from '@turf/turf';\nimport { group } from '@angular/animations';\nimport { FeatureService } from 'src/app/services/feature.service';\nimport { groupIcons } from 'src/app/utils/groups';\n\n@Component({\n  selector: 'app-select-group',\n  templateUrl: './select-group.component.html',\n  styleUrls: ['./select-group.component.scss'],\n})\nexport class SelectGroupComponent implements OnInit, OnDestroy {\n  groups$: Subscription;\n  activeGroup$: Subscription;\n\n  public selectedProject: Project;\n\n  iconList = groupIcons;\n  selectedIcon = 'fa-house-damage';\n\n  selectedGroup: TagGroup;\n\n  activeGroup: TagGroup;\n  groups: Map<string, TagGroup>;\n  groupsFeatures: Map<string, any>;\n\n  showTagger: boolean;\n  showSubitem = true;\n\n  constructor(\n    private formsService: FormsService,\n    private groupsService: GroupsService,\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService,\n    private dialog: MatDialog,\n    private featureService: FeatureService\n  ) {}\n\n  ngOnInit() {\n    this.projectsService.activeProject.subscribe((next) => {\n      this.selectedProject = next;\n    });\n\n    this.groups$ = this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.geoDataService.groupsFeatures.subscribe((next) => {\n      this.groupsFeatures = next;\n    });\n\n    this.activeGroup$ = this.geoDataService.activeGroup.subscribe((next) => {\n      this.activeGroup = next;\n      if (!next) {\n        this.groupsService.toggleTagger();\n      }\n    });\n  }\n\n  selectGroupForm(group: TagGroup) {\n    this.geoDataService.setActiveGroup(group);\n  }\n\n  openRenameOptionModal(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  // TODO: ensure ui is updated from getFeatures()\n  deleteGroup(group: TagGroup) {\n    const features = this.groupsFeatures.get(group.name);\n    this.geoDataService.deleteGroupFeatures(\n      this.selectedProject.id,\n      features,\n      group\n    );\n  }\n\n  openRenameModal(template: TemplateRef<any>, group: TagGroup) {\n    this.selectedGroup = group;\n    this.dialog.open(template);\n  }\n\n  openIconSelection(template: TemplateRef<any>, group: TagGroup) {\n    this.selectedGroup = group;\n    this.selectedIcon = group.icon;\n    this.dialog.open(template);\n  }\n\n  saveIcon(icon: string) {\n    this.geoDataService.reiconGroup(\n      this.selectedProject.id,\n      this.groupsFeatures.get(this.selectedGroup.name),\n      this.groups.get(this.selectedGroup.name),\n      icon\n    );\n\n    this.dialog.closeAll();\n    // TODO: Update save styles\n    // for (let feat of this.tempGroup) {\n    //   this.formsService.saveStyles('default', Number(feat.id));\n    // }\n  }\n\n  isChecked(name: string) {\n    if (this.activeGroup && this.activeGroup.name === name) {\n      return 'checked';\n    } else {\n      return '';\n    }\n  }\n\n  renameGroup(name: string) {\n    this.geoDataService.renameGroup(\n      this.selectedProject.id,\n      this.groupsFeatures.get(this.selectedGroup.name),\n      this.groups.get(this.selectedGroup.name),\n      name\n    );\n\n    this.dialog.closeAll();\n  }\n\n  expandPanel() {\n    this.showSubitem = !this.showSubitem;\n  }\n\n  ngOnDestroy() {\n    this.groups$.unsubscribe();\n    this.activeGroup$.unsubscribe();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FeatureCollection } from 'geojson';\nimport { Project, TagGroup } from '../../../models/models';\nimport { ProjectsService } from '../../../services/projects.service';\nimport { GeoDataService } from '../../../services/geo-data.service';\nimport { FormsService } from '../../../services/forms.service';\nimport { Subscription } from 'rxjs';\nimport { Feature } from '@turf/turf';\n\n@Component({\n  selector: 'app-select-image',\n  templateUrl: './select-image.component.html',\n  styleUrls: ['./select-image.component.scss'],\n})\nexport class SelectImageComponent implements OnInit {\n  public activeProject: Project;\n  private groups: Map<string, TagGroup>;\n  activeGroup: TagGroup;\n  activeGroupFeature: Feature;\n  showSubitem = true;\n  groupsFeatures: Map<string, any>;\n\n  constructor(\n    private formsService: FormsService,\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService\n  ) {}\n\n  ngOnInit() {\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.geoDataService.activeGroup.subscribe((next) => {\n      this.activeGroup = next;\n    });\n\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n    });\n\n    this.geoDataService.groupsFeatures.subscribe((next) => {\n      this.groupsFeatures = next;\n      if (next && this.activeGroup) {\n        const groupFeatures = this.groupsFeatures.get(this.activeGroup.name);\n        if (groupFeatures) {\n          if (!groupFeatures.some(f => f.id === this.activeGroupFeature.id)) {\n            this.geoDataService.setActiveGroupFeature(groupFeatures[0]);\n          }\n        } else {\n          const [nextGroup] = this.groups.values();\n          if (nextGroup) {\n            this.geoDataService.setActiveGroup(nextGroup);\n          } else {\n            this.geoDataService.setActiveGroup(null);\n          }\n        }\n      }\n    });\n  }\n\n  getActiveFeatures() {\n    if (this.activeGroup) {\n      const groupFeatures = this.groupsFeatures.get(this.activeGroup.name);\n      const group = this.groups.get(this.activeGroup.name);\n      if (group) {\n        return groupFeatures;\n      } else {\n        const [nextGroup] = this.groups.values();\n        if (nextGroup) {\n          this.geoDataService.setActiveGroup(nextGroup);\n          return this.groupsFeatures.get(nextGroup.name);\n        } else {\n          return [];\n        }\n      }\n    } else {\n      return [];\n    }\n  }\n\n  jumpToImage(feat: Feature) {\n    this.geoDataService.setActiveGroupFeature(feat);\n  }\n\n  isActiveFeature(feature: Feature) {\n    return this.activeGroupFeature.id === feature.id;\n  }\n\n  deleteFeature(feat: any) {\n    this.geoDataService.deleteGroupFeatures(\n      this.activeProject.id,\n      [feat],\n      this.groups.get(this.activeGroup.name)\n    );\n  }\n\n  getFeaturePath(feat: any) {\n    return feat.featureShortPath();\n  }\n\n  expandPanel() {\n    this.showSubitem = !this.showSubitem;\n  }\n}\n","import {\n  Component,\n  OnInit,\n  TemplateRef,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { FormsService, tags } from '../../../services/forms.service';\nimport { GroupsService } from '../../../services/groups.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { Feature, Project, TagGroup, GroupForm } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\nimport { ProjectsService } from 'src/app/services/projects.service';\n\n@Component({\n  selector: 'app-tag-generator',\n  templateUrl: './tag-generator.component.html',\n  styleUrls: ['./tag-generator.component.scss'],\n})\nexport class TagGeneratorComponent implements OnInit {\n  formLabel: string;\n  formColor: string;\n  formOptions: Array<any> = [];\n  selectedGroup: string;\n  formType: string;\n  labelFilter: string;\n  optionColorFilter = '#000000';\n  activeGroup: TagGroup;\n  optionFilter: string;\n  formName: string;\n  formValue: string;\n  formRequired: boolean;\n  openOption: any = {};\n  enabledControls: Array<string> = [];\n  showSubitem = true;\n  groups: Map<string, TagGroup>;\n  groupsFeatures: Map<string, any>;\n  groups$: Subscription;\n  private activeProject: Project;\n\n  constructor(\n    private formsService: FormsService,\n    private groupsService: GroupsService,\n    private dialog: MatDialog,\n    private router: Router,\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService,\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroup.subscribe((next) => {\n      this.activeGroup = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.geoDataService.groupsFeatures.subscribe((next) => {\n      this.groupsFeatures = next;\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n\n    this.formOptions = [];\n    this.formType = 'text';\n    this.formName = '';\n    this.formLabel = '';\n    this.formValue = '';\n    this.formRequired = false;\n    this.enabledControls = ['Text', 'Checkbox', 'Radio', 'Dropdown', 'Color'];\n  }\n\n  inputFormLabel(event: any) {\n    this.formLabel = event.target.value;\n  }\n\n  inputFormColor(event: any) {\n    this.formColor = event.target.value;\n  }\n\n  addOptionItem(value: string) {\n    if (value) {\n      const formWithValue = this.formOptions.filter((e) => e.label == value);\n      if (formWithValue.length == 0 && value.length != 0) {\n        this.formOptions.push({\n          label: value,\n          color: this.optionColorFilter,\n        });\n      }\n    }\n  }\n\n  deleteOption(opt: any) {\n    this.formOptions = this.formOptions.filter(\n      (option) => option.label != opt.label\n    );\n  }\n\n  openRenameModal(template: TemplateRef<any>, name: string) {\n    this.selectedGroup = name;\n    this.dialog.open(template);\n  }\n\n  openRenameOptionModal(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  renameOption(opt: any, label: string) {\n    label = label.toLowerCase();\n    this.formOptions.forEach((e) => {\n      if (e.label == opt.label) {\n        e.label = label;\n      }\n    });\n  }\n\n  selectInputForm(name: string) {\n    this.formType = name;\n    this.formLabel = '';\n    this.formOptions = [];\n  }\n\n  clearOption() {\n    this.optionFilter = '';\n  }\n\n  clearLabel() {\n    this.labelFilter = '';\n  }\n\n  clearOptionColor() {\n    this.optionColorFilter = '#000000';\n  }\n\n  clear() {\n    this.clearLabel();\n    this.clearOptionColor();\n    this.clearOption();\n  }\n\n  addFormItem() {\n    // Assemble the new tag\n    const formItem: GroupForm = {\n      type: this.formType,\n      groupName: this.activeGroup.name,\n      label: this.formLabel,\n      options: [],\n    };\n    this.openOption[this.formLabel] = false;\n    // Adds the options for drop down, checklist, and radio buttons\n    if (this.formType !== 'text' && this.formOptions.length != 0) {\n      const myOpts = [];\n      for (const opt of this.formOptions) {\n        myOpts.push({\n          label: opt,\n        });\n      }\n      formItem.options = this.formOptions;\n    }\n\n    this.formsService.createForm(\n      this.activeProject.id,\n      formItem,\n      this.groups.get(this.activeGroup.name),\n      this.groupsFeatures.get(this.activeGroup.name)\n    );\n\n    // Reset user-defined fields to blank options\n    this.formLabel = '';\n    this.formColor = '';\n    this.formOptions = [];\n    this.groupsService.setShowTagGenerator(false);\n    this.clear();\n  }\n\n  cancelCreate() {\n    this.groupsService.setShowTagGenerator(false);\n    this.clear();\n  }\n\n  expandPanel() {\n    this.showSubitem = !this.showSubitem;\n  }\n}\n","import { Component, OnInit, OnDestroy, TemplateRef } from '@angular/core';\nimport { GroupsService } from '../../../services/groups.service';\nimport { FormsService, tags } from '../../../services/forms.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\nimport { Feature, FeatureCollection } from 'geojson';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { FeatureService } from 'src/app/services/feature.service';\nimport { TagGroup, GroupForm } from 'src/app/models/models';\n\n@Component({\n  selector: 'app-tag-images',\n  templateUrl: './tag-images.component.html',\n  styleUrls: ['./tag-images.component.scss'],\n})\nexport class TagImagesComponent implements OnInit {\n  private activeProject;\n  payload: any;\n  selectedGroup: string;\n  activeGroup: TagGroup;\n  showSubitem = true;\n  formList: GroupForm[] = [];\n  tagName = '';\n  groups: Map<string, TagGroup>;\n  groupsFeatures: Map<string, Feature[]>;\n  activeGroupFeature: Feature;\n  tagValues = [];\n\n  constructor(\n    private groupsService: GroupsService,\n    private formsService: FormsService,\n    private dialog: MatDialog,\n    private router: Router,\n    private projectsService: ProjectsService,\n    private geoDataService: GeoDataService,\n    private featureService: FeatureService\n  ) {}\n\n  ngOnInit() {\n    combineLatest(\n      this.geoDataService.activeGroup,\n      this.geoDataService.groupsFeatures,\n      this.geoDataService.groups\n    ).subscribe(([grp, grpFts, grps]) => {\n      this.activeGroup = grp;\n      this.groupsFeatures = grpFts;\n      this.groups = grps;\n      if (grp) {\n        this.formList = grp.forms;\n      }\n    });\n\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n  }\n\n  openRenameModal(template: TemplateRef<any>, name: string) {\n    this.selectedGroup = name;\n    this.dialog.open(template);\n  }\n\n  // Takes the name of the tag's group, and the tag itself to delete\n  deleteForm(tag: GroupForm) {\n    this.formsService.deleteForm(\n      this.activeProject.id,\n      tag,\n      this.groups.get(this.activeGroup.name),\n      this.groupsFeatures.get(this.activeGroup.name)\n    );\n  }\n\n  // submits a tag's name change to geoAPI\n  renameForm(tag: GroupForm) {\n    this.formsService.renameForm(\n      this.activeProject.id,\n      tag,\n      this.groups.get(this.activeGroup.name),\n      this.groupsFeatures.get(this.activeGroup.name),\n      this.tagName\n    );\n    // Reset newTagValue for the next rename\n    this.tagName = '';\n    this.dialog.closeAll(); // Ensures the window closes when using enter-submission\n  }\n\n  showTagGenerator() {\n    this.groupsService.setShowTagGenerator(true);\n  }\n\n  saveTags() {\n    this.formsService.updateTagValues(\n      this.activeProject,\n      this.activeGroupFeature,\n      this.formList,\n      this.tagValues\n    );\n  }\n\n  setValue(formValue) {\n    this.tagValues = this.tagValues.filter((value) => value.id !== formValue.id);\n    this.tagValues.push(formValue);\n  }\n\n  expandPanel() {\n    this.showSubitem = !this.showSubitem;\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { GroupForm } from 'src/app/models/models';\n\n@Component({\n  selector: 'app-form-fields',\n  templateUrl: './form-fields.component.html',\n})\nexport class FormFieldsComponent implements OnInit {\n  field: any;\n  form: GroupForm;\n\n  constructor() {}\n\n  // This file and the HTML connected to this is useless so don't worry about it\n  ngOnInit() {}\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { FeatureService } from 'src/app/services/feature.service';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { GroupsService } from 'src/app/services/groups.service';\nimport { Feature, GroupForm, Project, TagGroup } from 'src/app/models/models';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\n\n@Component({\n  selector: 'app-form-checkbox',\n  templateUrl: 'form-checkbox.component.html',\n})\nexport class FormCheckBoxComponent {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any;\n  @Input() form: GroupForm;\n  value: any[] = [];\n  activeGroupFeature: Feature;\n  activeGroup: TagGroup;\n  private activeProject: Project;\n\n  constructor(\n    private formsService: FormsService,\n    private groupsService: GroupsService,\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService,\n    private featureService: FeatureService\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.formValue.emit({id: this.form.id, value: this.value});\n    });\n\n\n    this.geoDataService.activeGroup.subscribe((next) => {\n      this.activeGroup = next;\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n  }\n\n  isChecked(opt) {\n    return this.value.some(val => val.label === opt.label);\n  }\n\n  selected(e: any, option: any) {\n    this.value = this.value.filter((opt) => opt.label !== option.label);\n    if (e.target.checked) {\n      this.value.push(option);\n    }\n    this.formValue.emit({id: this.form.id, value: this.value});\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { GroupsService } from 'src/app/services/groups.service';\nimport { Feature, GroupForm } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\n\n@Component({\n  selector: 'app-form-dropdown',\n  templateUrl: './form-dropdown.component.html',\n})\nexport class FormDropDownComponent {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any = {};\n  @Input() form: GroupForm;\n  value: string;\n\n  constructor(\n    private formsService: FormsService,\n    private geoDataService: GeoDataService,\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.formValue.emit({id: this.form.id, value: this.value});\n    });\n  }\n\n  updateCheckedTag() {\n    this.formValue.emit({id: this.form.id, value: this.value});\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { GroupForm } from 'src/app/models/models';\n\n@Component({\n  selector: 'app-form-file',\n  templateUrl: './form-file.component.html',\n  styleUrls: ['./form-file.component.scss'],\n})\nexport class FormFileComponent {\n  field: any = {};\n  form: GroupForm;\n\n  constructor() {}\n\n  ngOnChange() {\n    console.log(this.field.value);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { Feature, GroupForm, Project, TagGroup } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\n\n@Component({\n  selector: 'app-form-radio',\n  templateUrl: './form-radio.component.html',\n})\nexport class FormRadioComponent {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any = {};\n  @Input() form: GroupForm;\n  @Input() label: String;\n  public value: string;\n\n  constructor(\n    private formsService: FormsService,\n    private geoDataService: GeoDataService,\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.formValue.emit({id: this.form.id, value: this.value});\n    });\n  }\n\n  updateCheckedTag() {\n    this.formValue.emit({id: this.form.id, value: this.value});\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { Feature, GroupForm, Project, TagGroup } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\n\n@Component({\n  selector: 'app-form-textbox',\n  templateUrl: './form-textbox.component.html',\n})\nexport class FormTextBoxComponent {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any = {};\n  @Input() form: GroupForm;\n  value = '';\n\n  constructor(\n    private formsService: FormsService,\n    private geoDataService: GeoDataService,\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.formValue.emit({id: this.form.id, value: this.value});\n    });\n  }\n\n  updateValue() {\n    this.formValue.emit({id: this.form.id, value: this.value});\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { Feature, Project, GroupForm, TagGroup } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\n\n@Component({\n  selector: 'app-form-color',\n  templateUrl: './form-color.component.html',\n  styleUrls: ['./form-color.component.scss'],\n})\nexport class FormColorComponent implements OnInit {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any = {};\n  @Input() form: GroupForm;\n  @Input() color: string;\n  @Input() label: String;\n\n  public chosenTag: string;\n  public chosenColor = '#ffffff';\n  value: any = {};\n\n  constructor(\n    private formsService: FormsService,\n    private geoDataService: GeoDataService,\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.chosenTag = this.value.label;\n      this.formValue.emit({id: this.form.id, value: this.value});\n    });\n  }\n\n  updateCheckedTag() {\n    this.value = this.form.options.find(opt => opt.label === this.chosenTag);\n    // TODO: Move this to somewhere else?\n    // Objective is to save both tag and color\n    // this.formsService.saveStyles(\n    //   this.activeProject.id,\n    //   this.value.color,\n    //   this.activeGroup,\n    //   this.activeGroupFeature\n    // );\n    this.formValue.emit({id: this.form.id, value: this.value});\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n// CommonModule for dynamic field\nimport {APP_BASE_HREF, CommonModule} from '@angular/common';\n\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { NgxSpinnerModule } from 'ngx-spinner';\nimport {ModalModule, BsDropdownModule, AccordionModule} from 'ngx-foundation';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport { NgxMasonryModule } from 'ngx-masonry';\nimport { ToastrModule } from 'ngx-toastr';\n\n\nimport { FileSizeModule } from 'ngx-filesize';\nimport { ApiModule} from 'ng-tapis';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { MapComponent} from './components/map/map.component';\nimport { MainComponent } from './components/main/main.component';\nimport { NotFoundComponent } from './components/notfound/notfound.component';\nimport { ControlBarComponent } from './components/control-bar/control-bar.component';\nimport { AuthService } from './services/authentication.service';\nimport { CallbackComponent } from './components/callback/callback.component';\nimport {AuthInterceptor, TokenInterceptor} from './app.interceptors';\nimport {ReactiveFormsModule, FormsModule} from '@angular/forms';\nimport { ModalFileBrowserComponent } from './components/modal-file-browser/modal-file-browser.component';\nimport {environment} from '../environments/environment';\nimport { ImageGalleryComponent } from './components/image-gallery/image-gallery.component';\n// import { TaggerComponent } from './components/tagger/tagger.component';\n// import { PresetGeneratorComponent } from './components/preset-generator/preset-generator.component';\nimport { ImageBoxComponent } from './components/image-box/image-box.component';\nimport { FormGeneratorComponent } from './components/side-bar/tag-images/form-generator/form-generator.component';\nimport { SideBarComponent } from './components/side-bar/side-bar.component';\n// import { ImageListComponent } from './components/image-list/image-list.component';\nimport { SelectGroupComponent } from './components/side-bar/select-group/select-group.component';\nimport { SelectImageComponent } from './components/side-bar/select-image/select-image.component';\nimport { TagGeneratorComponent } from './components/side-bar/tag-generator/tag-generator.component';\nimport { TagImagesComponent } from './components/side-bar/tag-images/tag-images.component';\nimport { ModalCreateProjectComponent } from './components/modal-create-project/modal-create-project.component';\nimport { ModalCurrentProjectComponent } from './components/modal-current-project/modal-current-project.component';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatTreeModule} from '@angular/material/tree';\nimport { MatProgressBar } from '@angular/material';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport { ModalDownloadSelectorComponent } from './components/modal-download-selector/modal-download-selector.component';\nimport { FormFieldsComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-fields.component';\nimport { FormCheckBoxComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-checkbox/form-checkbox.component';\nimport { FormDropDownComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-dropdown/form-dropdown.component';\nimport { FormFileComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component';\nimport { FormRadioComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-radio/form-radio.component';\nimport { FormTextBoxComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-textbox/form-textbox.component';\nimport { FormColorComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component';\nimport { ModalShareProjectComponent } from './components/modal-share-project/modal-share-project.component';\nimport {MatCardModule} from '@angular/material/card';\n\n@NgModule({\n  declarations: [\n\tAppComponent, MapComponent, NotFoundComponent, MainComponent,\n\tControlBarComponent,\n\tCallbackComponent,\n\tModalFileBrowserComponent,\n\tImageGalleryComponent,\n\t// TaggerComponent,\n\t// PresetGeneratorComponent,\n\tImageBoxComponent,\n\tFormGeneratorComponent,\n\tSideBarComponent,\n\t// ImageListComponent,\n\tSelectGroupComponent,\n\tSelectImageComponent,\n\tTagGeneratorComponent,\n\tTagImagesComponent,\n\tModalCreateProjectComponent,\n\tModalCurrentProjectComponent,\n\tMatProgressBar,\n\tModalDownloadSelectorComponent,\n\tFormFieldsComponent,\n\tFormCheckBoxComponent,\n\tFormDropDownComponent,\n\tFormFileComponent,\n\tFormRadioComponent,\n\tFormTextBoxComponent,\n\tModalShareProjectComponent,\n\tFormColorComponent\n\n  ],\n  imports: [\n\t// this is for the ng-tapis library\n\tApiModule.forRoot({rootUrl: 'https://agave.designsafe-ci.org/'}),\n\tBrowserModule,\n\tAppRoutingModule,\n\tHttpClientModule,\n\tBrowserAnimationsModule,\n\tInfiniteScrollModule,\n\tNgxSpinnerModule,\n\tNgxMasonryModule,\n\tToastrModule.forRoot(),\n\tModalModule.forRoot(),\n\tMatMenuModule,\n\tMatToolbarModule,\n\tMatButtonModule,\n\tMatDialogModule,\n\tMatTooltipModule,\n\tMatInputModule,\n\tMatCheckboxModule,\n\tMatSelectModule,\n\tMatRadioModule,\n\tMatIconModule,\n\tAccordionModule.forRoot(),\n\tReactiveFormsModule,\n\tFormsModule,\n\tFileSizeModule,\n\tBsDropdownModule.forRoot(),\n\tCommonModule,\n\tMatProgressSpinnerModule,\n\tScrollingModule,\n\tMatTreeModule,\n\tMatSnackBarModule,\n\tMatCardModule\n  ],\n  providers: [\n\tAuthService,\n\t{\n\t  provide: HTTP_INTERCEPTORS,\n\t  multi: true,\n\t  useClass: AuthInterceptor\n\t},\n\t{\n\t  provide: HTTP_INTERCEPTORS,\n\t  multi: true,\n\t  useClass: TokenInterceptor\n\t},\n\t{\n\t  provide: APP_BASE_HREF,\n\t  useValue: environment.baseHref\n\t}\n  ],\n  bootstrap: [AppComponent],\n  entryComponents: [ModalFileBrowserComponent, ModalDownloadSelectorComponent, ModalCreateProjectComponent, ModalCurrentProjectComponent, ModalShareProjectComponent]\n})\nexport class AppModule { }\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","export default \"<div class=\\\"tag-forms\\\">\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">\\n    <span>\\n      Tag Images\\n    </span>\\n    <span>\\n      <span style=\\\"cursor: pointer\\\"\\n            (click)=\\\"showTagGenerator()\\\"\\n            matTooltip=\\\"Add New Tag Form\\\"\\n            style=\\\"cursor: pointer; margin-right: 10px\\\"\\n            matTooltipPosition=\\\"above\\\">\\n        <i class=\\\"fas fa-plus\\\"></i>\\n      </span>\\n    </span>\\n  </div> <!-- subitem-title -->\\n\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem\\\">\\n    <div class=\\\"subitem-scroll\\\">\\n\\n      <div *ngFor = \\\"let form of formList\\\">\\n        <div class=\\\"form-item-container\\\">  \\n          <div class=\\\"name-group\\\"> {{form.label}} ({{form.type}})</div>\\n          <div class=\\\"button-group\\\">\\n            <div (click)=\\\"deleteForm(form)\\\">\\n              <i class=\\\"fas fa-minus\\\"\\n                 matTooltip=\\\"Delete\\\"\\n                 matTooltipPosition=\\\"above\\\"\\n                 style=\\\"cursor: pointer\\\">\\n              </i>\\n            </div> <!-- delete button -->\\n\\n            <div (click)=\\\"openRenameOptionModal(renameFormItemModal)\\\">\\n              <i class=\\\"fas fa-edit\\\"\\n                 matTooltip=\\\"Rename\\\"\\n                 matTooltipPosition=\\\"above\\\"\\n                 style=\\\"cursor: pointer\\\">\\n              </i>\\n            </div>\\n\\n            <ng-template #renameFormItemModal>\\n              <input matInput #formItemRename\\n                     [(ngModel)]=\\\"newTagValue\\\"\\n                     value={{form.label}}\\n                     placeholder=\\\"Rename Form Item\\\"\\n                     (keyup.enter)=\\\"renameForm(form)\\\">\\n              <br/>\\n              <br/>\\n              <div class=\\\"button-group\\\">\\n                <button matDialogClose\\n                        mat-raised-button\\n                        color=\\\"primary\\\" (click)=\\\"renameForm(form.label)\\\"\\n                        >Rename</button>\\n                <button matDialogClose\\n                        mat-button>Cancel</button>\\n              </div> \\n            </ng-template> <!-- rename modal -->\\n\\n          </div> <!-- button group -->\\n        </div> <!-- form-item-container -->\\n        <app-form-generator (newValue)=\\\"setValue($event)\\\" [form]=\\\"form\\\"></app-form-generator>\\n\\n      </div>\\n      <div *ngIf=\\\"formList && formList.length\\\"><button mat-raised-button color=\\\"primary\\\" (click)=\\\"saveTags()\\\">Save</button></div>\\n    </div> <!-- subitem scroll -->\\n  </div> <!--subitem -->\\n</div> <!-- tag-forms -->\\n\"","export default \"<div>\\n  <div [ngSwitch]=\\\"form.type\\\" class=\\\"form-controls\\\">\\n\\t<ng-container *ngSwitchCase=\\\"'text'\\\">\\n\\t  \\t<app-form-textbox (formValue)=\\\"setValue($event)\\\" [field]=\\\"form.options\\\" [form]=\\\"form\\\"></app-form-textbox>\\n\\t</ng-container>\\n\\n\\t<ng-container *ngSwitchCase=\\\"'dropdown'\\\">\\n\\t  \\t<app-form-dropdown (formValue)=\\\"setValue($event)\\\" [field]=\\\"form.options\\\" [form]=\\\"form\\\"></app-form-dropdown>\\n\\t</ng-container>\\n\\n\\t<ng-container *ngSwitchCase=\\\"'radio'\\\">\\n      <app-form-radio (formValue)=\\\"setValue($event)\\\" [field]=\\\"opt\\\" [form]=\\\"form\\\" label={{form.label}}></app-form-radio>\\n    </ng-container>\\n\\n    <ng-container *ngSwitchCase=\\\"'checkbox'\\\">\\n      <app-form-checkbox (formValue)=\\\"setValue($event)\\\" [form]=\\\"form\\\"></app-form-checkbox>\\n\\t</ng-container>\\n\\n    <ng-container *ngSwitchCase=\\\"'color'\\\">\\n      <app-form-color (formValue)=\\\"setValue($event)\\\" [field]=\\\"opt\\\" [form]=\\\"form\\\" label={{form.label}} [color]=\\\"colorArray[form.options.indexOf(opt)]\\\"></app-form-color>\\n    </ng-container>\\n\\n  </div>\\n</div>\\n\""]}