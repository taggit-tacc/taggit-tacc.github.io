{"version":3,"sources":["webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-dropdown/form-dropdown.component.html","webpack:///src/app/components/side-bar/select-image/select-image.component.html","webpack:///src/app/components/modal-file-browser/modal-file-browser.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component.html","webpack:///src/app/components/notfound/notfound.component.scss","webpack:///src/app/components/modal-download-selector/modal-download-selector.component.html","webpack:///src/app/components/main/main.component.scss","webpack:///src/app/components/main/main.component.html","webpack:///src/app/components/notfound/notfound.component.html","webpack:///src/app/components/modal-download-selector/modal-download-selector.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component.scss","webpack:///src/app/components/side-bar/select-group/select-group.component.scss","webpack:///src/app/components/side-bar/side-bar.component.scss","webpack:///src/app/components/side-bar/tag-generator/tag-generator.component.html","webpack:///src/app/components/image-gallery/image-gallery.component.scss","webpack:///src/app/components/modal-share-project/modal-share-project.component.html","webpack:///src/app/components/image-gallery/image-gallery.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-fields.component.html","webpack:///src/app/components/side-bar/select-image/select-image.component.scss","webpack:///src/app/app.component.html","webpack:///src/app/components/callback/callback.component.html","webpack:///src/app/components/image-box/image-box.component.html","webpack:///src/app/components/side-bar/side-bar.component.html","webpack:///src/$_lazy_route_resource lazy namespace object","webpack:///src/app/components/side-bar/tag-generator/tag-generator.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-textbox/form-textbox.component.html","webpack:///src/app/components/modal-share-project/modal-share-project.component.scss","webpack:///src/app/components/map/map.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-radio/form-radio.component.html","webpack:///src/app/components/modal-create-project/modal-create-project.component.scss","webpack:///src/app/components/image-box/image-box.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-generator.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component.html","webpack:///src/app/components/modal-current-project/modal-current-project.component.html","webpack:///src/app/components/modal-create-project/modal-create-project.component.html","webpack:///src/app/components/map/map.component.scss","webpack:///src/app/components/side-bar/tag-images/tag-images.component.scss","webpack:///src/app/components/side-bar/select-group/select-group.component.html","webpack:///src/app/components/modal-current-project/modal-current-project.component.scss","webpack:///src/app/components/callback/callback.component.scss","webpack:///src/app/components/modal-file-browser/modal-file-browser.component.scss","webpack:///src/app/components/control-bar/control-bar.component.scss","webpack:///src/app/components/control-bar/control-bar.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-checkbox/form-checkbox.component.html","webpack:///src/app/app.component.scss","webpack:///src/app/components/notfound/notfound.component.ts","webpack:///src/environments/environmentType.ts","webpack:///src/app/models/models.ts","webpack:///src/environments/environment.ts","webpack:///src/app/services/authentication.service.ts","webpack:///src/app/services/notifications.service.ts","webpack:///src/app/services/scroll.service.ts","webpack:///src/app/services/geo-data.service.ts","webpack:///src/app/utils/randomColor.ts","webpack:///src/app/components/main/main.component.ts","webpack:///src/app/components/callback/callback.component.ts","webpack:///src/app/services/forms.service.ts","webpack:///src/app/services/groups.service.ts","webpack:///src/app/services/projects.service.ts","webpack:///src/app/components/side-bar/tag-generator/tag-generator.component.ts","webpack:///src/app/components/side-bar/tag-images/tag-images.component.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/utils/leafletUtils.ts","webpack:///src/app/components/map/map.component.ts","webpack:///src/app/services/agave-systems.service.ts","webpack:///src/app/services/tapis-files.service.ts","webpack:///src/app/components/modal-file-browser/modal-file-browser.component.ts","webpack:///src/app/components/modal-download-selector/modal-download-selector.component.ts","webpack:///src/app/components/modal-create-project/modal-create-project.component.ts","webpack:///src/app/components/modal-share-project/modal-share-project.component.ts","webpack:///src/app/components/modal-current-project/modal-current-project.component.ts","webpack:///src/app/services/feature.service.ts","webpack:///src/app/components/control-bar/control-bar.component.ts","webpack:///src/app/app.interceptors.ts","webpack:///src/app/components/image-gallery/image-gallery.component.ts","webpack:///src/app/components/image-box/image-box.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-generator.component.ts","webpack:///src/app/components/side-bar/side-bar.component.ts","webpack:///src/app/utils/groups.ts","webpack:///src/app/components/side-bar/select-group/select-group.component.ts","webpack:///src/app/components/side-bar/select-image/select-image.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-fields.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-checkbox/form-checkbox.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-dropdown/form-dropdown.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-radio/form-radio.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-textbox/form-textbox.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component.ts","webpack:///src/app/app.module.ts","webpack:///src/main.ts","webpack:///src/app/components/side-bar/tag-images/tag-images.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-generator.component.html"],"names":["__webpack_require__","r","__webpack_exports__","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","NotFoundComponent","_classCallCheck","this","_createClass","key","value","tslib_es6","a","Object","core","n","selector","template","EnvironmentType","GroupForm","AssetFilters","bbox","assetType","Set","has","add","Project","ProjectRequest","AuthToken","token","expires","Date","getTime","expires_in","Feature","f","geometry","properties","type","assets","styles","project_id","length","initialAsset","asset_type","display_path","path","toString","_slicedToArray","exec","slice","Production","Staging","Local","environment","production","apiUrl","clientId","baseHref","backend","AuthenticatedUser","username","email","authentication_service_AuthService","http","router","_currentUser","ReplaySubject","currentUser","asObservable","LS_TOKEN_KEY","LS_USER_KEY","tokenStr","localStorage","getItem","JSON","parse","userToken","isExpired","logout","redirectToauthenticaor","getUserInfo","AUTH_URL","location","origin","Math","random","window","href","removeItem","fromExpiresIn","setItem","stringify","navigate","_this","userStr","user","next","get","subscribe","resp","u","name","fesm2015_http","b","fesm2015_router","C","providedIn","notifications_service_NotificationsService","toastr","authService","TIMEOUT","_notifications","notifications","isLoggedIn","interval","getRecent","_this3","baseUrl","now","toISOString","notes","forEach","note","status","showSuccessToast","message","showErrorToast","success","error","ngx_toastr","ScrollService","scrollRestored","scrollPosition","change","document","documentElement","scrollTop","scroll","top","geo_data_service_GeoDataService","notificationsService","scrollService","_pointClouds","BehaviorSubject","pointClouds","_loaded","loaded","_activeGroupId","activeGroupId","_activeGroup","activeGroup","_activeGroupFeature","activeGroupFeature","_groups","groups","_groupsFeatures","groupsFeatures","_features","features","features$","_activeFeature","_mapMouseLocation","_basemap","_overlays","_activeOverlay","projectId","feature","_this4","query","arguments","undefined","restoreScroll","qstring","querystring","toJson","fc","map","feat","getGroups","setScrollRestored","getFeatures","group","groupFeatures","some","gf","setActiveGroupFeature","pipe","take","current","push","title","conversionParams","payload","description","conversion_parameters","post","getPointClouds","featureId","groupData","pc","file","form","FormData","append","console","log","files","tmp","system","fileList","showImportErrorToast","remoteFile","system_id","response","importImage","downloadLink","createElement","blob","Blob","URL","createObjectURL","setAttribute","body","appendChild","click","removeChild","feats","addFeature","getValue","activeFeature","ovs","label","minLat","maxLat","minLon","maxLon","toFixed","getOverlays","featureList","Map","filter","set","setActiveGroup","groupName","grp","style","groupProp","getGroupFeatures","uuid","v4","myRandColor","color","i","floor","icon","faIcon","createGroupFeatures","createGroup","updateFeatureProperty","deleteGroup","updateGroup","renamedGroup","assign","updateGroupFeatures","reiconedGroup","reiconedStyle","ov","loc","bmap","MainComponent","geoDataService","bsModalService","ngx_foundation","c","CallbackComponent","route","auth","frag","snapshot","fragment","params","URLSearchParams","setToken","forms_service_FormsService","featureGroups","taggedGroup","forms","t","targetForm","newName","selectedColor","activeProject","tagValue","tagProp","tags","tag","formList","newValues","tagValueObj","find","featTag","groups_service_GroupsService","_selectedImages","selectedImages","_showTagger","showTagger","_showTagGenerator","showTagGenerator","currentFeatures","newFeatures","imageSelected","projects_service_ProjectsService","_projects","projects","_activeProject","_projectUsers","projectUsers$","_deletingProjects","deletingProjects","_this23","_this24","myProjs","p","dp","_this25","updateProjectsList","data","prom","proj","setActiveProject","put","project","deleting","getProjects","deletingFailed","tap","users","uname","getProjectUsers","TagGeneratorComponent","formsService","groupsService","dialog","projectsService","formOptions","optionColorFilter","openOption","enabledControls","showSubitem","_this32","formType","formName","formLabel","formValue","formRequired","event","target","formColor","opt","option","selectedGroup","open","toLowerCase","optionFilter","labelFilter","clearLabel","clearOptionColor","clearOption","formItem","options","_step","myOpts","_iterator","_createForOfIteratorHelper","s","done","err","createForm","setShowTagGenerator","clear","esm2015_dialog","tag_images_component_TagImagesComponent","tagName","tagValues","_this33","combineLatest","_ref","grps","grpFts","deleteForm","renameForm","closeAll","updateTagValues","Activate","authSvc","state","login","routes","component","canActivate","children","canActivateChild","AppRoutingModule","K","imports","forRoot","onSameUrlNavigation","providers","AppComponent","createMarker","latlng","featureType","ico","leaflet_src","divIcon","className","html","marker","circleMarker","radius","fillColor","weight","opacity","fillOpacity","map_component_MapComponent","GeoDataService","mapType","FeatureGroup","featureClickHandler","bind","mouseEventHandler","_this34","overlays","center","zoom","baseOSM","tileLayer","maxZoom","attribution","satellite","addLayer","loadFeatures","on","ev","activeOverlay","skip","addRemoveOverlay","turf_min","fitBounds","basemap","removeLayer","overlay","imageOverlay","getBounds","mapMouseLocation","_this35","geojsonOptions","pointToLayer","collection","clearLayers","markers","markerClusterGroup","iconCreateFunction","cluster","getChildCount","d","geoJSON","layer","agave_systems_service_AgaveSystemsService","tapis","_systems","systems","_this36","systemsList","result","sys","startsWith","ng_tapis","tapis_files_service_TapisFilesService","popup","_listing","listing","IMPORTABLE_TYPES","ext","getFileExtension","includes","split","pop","offset","limit","filesList","systemId","filePath","arr","replace","join","systemID","fileName","extension","snackbarConfig","duration","horizontalPosition","verticalPosition","fullURL","date","File","lastModified","valueOf","msg","sysStr","lastSystem","fileStr","lastFile","noPreviousSelections","snack_bar","modal_file_browser_component_ModalFileBrowserComponent","_ModalFileBrowserComponent_","ModalFileBrowserComponent_1","tapisFilesService","dialogRef","agaveSystemsService","currentPath","w","allowedExtensions","inProgress","retrievalError","selectedFiles","onClose","Subject","_this38","list","_ref3","myDataSystem","communityDataSystem","publishedDataSystem","selectedSystem","currentDirectory","init","browse","pth","selectedPath","getFiles","_this39","hasMoreFiles","listFiles","shift","getParentPath","unshift","newFile","allowedExt","index","concat","shiftKey","selectFilesShiftClick","checkIfSelectable","addSelectedFile","selectShift","firstFileIndex","saveState","Array","from","values","close","_step2","count","_iterator2","select","addRangeFiles","lastFileIndex","again","maxIndex","max","min","R","modal_download_selector_component_ModalDownloadSelectorComponent","_ModalDownloadSelectorComponent_","ModalDownloadSelectorComponent_1","passbackData","fileExtension","_this40","downloadSelectForm","fesm2015_forms","Name","Extension","_ref5","_this41","dirty","modal_create_project_component_ModalCreateProjectComponent","projCreateForm","projRqst","create","modal_share_project_component_ModalShareProjectComponent","_this42","projShareForm","activeProj","projectUsers","onlyOne","addUserToProject","deleteUserFromProject","modal_current_project_component_ModalCurrentProjectComponent","projData","_this43","confirm","update","B","args","feature_service_FeatureService","featureCollection","featListfeat","deleteFeature","delFeats","featListFeature","Number","featProp","saveFeature","control_bar_component_ControlBarComponent","cdr","filesService","featureService","LatLng","invalidNameError","existingNameError","foundFilePaths","_this46","getState","groupsExist","size","_ref7","activeGroupFeatures","activeGroupFeaturesRotate","hasSuccessNotification","hasFailureNotification","selectedProject","item","substring","uploadNewFeature","createBlankFeature","lastProj","getDataForProject","hazmapperLink","detectChanges","unselectAllImages","_this47","afterClosed","importFileFromTapis","coordinates","saveFile","height","width","createNewGroup","setScrollPosition","initialGroupName","toggleTagger","featureShortPath","dir","isJSON","content","forExport","CSVHolder","JSONHolder","projID","tagsPresent","headerComplete","headerTagOptions","element","featureSource","_a","_b","_c","tempTagOptionNum","compileJSON","tempCSV","extra","download","featureID","transferJSON","compiledJSON","longitude","latitude","src","groupColor","icon color","tag name","tag type","tag selection","url","filename","navigator","userAgent","indexOf","visibility","k","app_interceptors_AuthInterceptor","request","handle","catchError","reload","statusText","throwError","app_interceptors_TokenInterceptor","clone","setHeaders","Authorization","X-JWT-Assertion-designsafe","jwt","image_gallery_component_ImageGalleryComponent","renderer","spinner","scrolling","scrollSum","_this52","projectsExist","imagesExist","featureListScroll","scrollStatus","_this53","hide","setTimeout","show","appendSum","Z","ngx_spinner","image_box_component_ImageBoxComponent","hasGroup","colors","_this54","featurePath","toggleImageSelect","deleteGroupFeatures","F","form_generator_component_FormGeneratorComponent","newValue","checked","colorArray","generateColors","itemCount","isOdd","incrementVal","temp","baseNum","emit","SideBarComponent","_this55","groupIcons","unicode","select_group_component_SelectGroupComponent","iconList","selectedIcon","_this56","groups$","activeGroup$","reiconGroup","renameGroup","unsubscribe","SelectImageComponent","_this57","nextGroup","FormFieldsComponent","form_checkbox_component_FormCheckBoxComponent","_this58","getTagValue","val","form_dropdown_component_FormDropDownComponent","field","_this59","FormFileComponent","form_radio_component_FormRadioComponent","_this60","String","form_textbox_component_FormTextBoxComponent","_this61","form_color_component_FormColorComponent","chosenColor","_this62","chosenTag","_this63","saveStyles","AppModule","declarations","progress_bar","rootUrl","platform_browser","animations","ngx_infinite_scroll","ngx_masonry","menu","toolbar","esm2015_button","tooltip","input","esm2015_checkbox","esm2015_select","esm2015_radio","j","dist","common","progress_spinner","tree","card","provide","multi","useClass","useValue","bootstrap","entryComponents","sb","platform_browser_dynamic","bootstrapModule"],"mappings":"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","file":"main-es5.c0fed69fad79d47a4643.js","sourcesContent":["export default \"<div>\\n  <select\\n    class=\\\"form-control\\\"\\n    [(ngModel)]=\\\"value\\\"\\n    id=\\\"field.name\\\"\\n    name=\\\"field.name\\\"\\n    (change)=\\\"updateCheckedTag()\\\"\\n  >\\n    <option *ngFor=\\\"let opt of field\\\" [value]=\\\"opt.label\\\">\\n      {{ opt.label }}\\n    </option>\\n  </select>\\n</div>\\n\"","export default \"<div class=\\\"asset-list\\\">\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">Image List</div>\\n\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem asset-subitem\\\">\\n    <div\\n      *ngFor=\\\"let feature of getActiveFeatures()\\\"\\n      (click)=\\\"jumpToImage(feature)\\\"\\n      class=\\\"asset-container\\\"\\n      [ngClass]=\\\"{ highlight: isActiveFeature(feature) }\\\"\\n    >\\n      <div class=\\\"name-group\\\">\\n        {{ getFeaturePath(feature) }}\\n      </div>\\n\\n      <div class=\\\"button-group\\\">\\n        <div (click)=\\\"deleteFeature(feature)\\\">\\n          <i\\n            class=\\\"fas fa-minus\\\"\\n            matTooltip=\\\"Delete\\\"\\n            matTooltipPosition=\\\"above\\\"\\n          >\\n          </i>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"<h4>Select Files</h4>\\n<small\\n  ><em>\\n    Note: Only files are selectable, not folders. Double click on a folder to\\n    navigate into it.\\n  </em></small\\n>\\n<hr />\\n<select (ngModelChange)=\\\"selectSystem($event)\\\" [(ngModel)]=\\\"selectedSystem\\\">\\n  <option [ngValue]=\\\"myDataSystem\\\">My Data</option>\\n  <option [ngValue]=\\\"communityDataSystem\\\">Community Data</option>\\n  <option [ngValue]=\\\"publishedDataSystem\\\">Published Data</option>\\n  <optgroup label=\\\"My Projects\\\">\\n    <option *ngFor=\\\"let project of projects\\\" [ngValue]=\\\"project\\\">\\n      {{ project.description }}\\n    </option>\\n  </optgroup>\\n</select>\\n\\n<div\\n  class=\\\"fileslisting\\\"\\n  infiniteScroll\\n  [infiniteScrollDistance]=\\\"2\\\"\\n  [infiniteScrollThrottle]=\\\"100\\\"\\n  [scrollWindow]=\\\"false\\\"\\n  (scrolled)=\\\"getFiles()\\\"\\n>\\n  <div class=\\\"clickable\\\" class=\\\"grid-x file-row\\\" (dblclick)=\\\"toRoot()\\\">\\n    <i class=\\\"fas fa-folder\\\"></i>\\n    <span> Home </span>\\n  </div>\\n  <div class=\\\"clickable\\\" class=\\\"grid-x file-row\\\">\\n    <i class=\\\"fas fa-folder-open\\\"></i>\\n    <span class=\\\"lineBreak\\\"> {{ selectedPath }} </span>\\n  </div>\\n  <div *ngIf=\\\"retrievalError\\\" class=\\\"grid-x file-row\\\" class=\\\"error\\\">\\n    Error retrieving files\\n  </div>\\n  <div\\n    class=\\\"grid-x file-row\\\"\\n    *ngFor=\\\"let file of filesList; let fileIndex = index\\\"\\n    [ngClass]=\\\"{ selected: selectedFiles.has(file.path) }\\\"\\n  >\\n    <div\\n      class=\\\"clickable\\\"\\n      (click)=\\\"select($event, file, fileIndex)\\\"\\n      (dblclick)=\\\"browse(file)\\\"\\n    >\\n      <i class=\\\"fas fa-folder\\\" *ngIf=\\\"file.type === 'dir'\\\"></i>\\n      <i class=\\\"far fa-file\\\" *ngIf=\\\"file.type !== 'dir'\\\"></i>\\n      <span> {{ file.name }} </span>\\n    </div>\\n    <div class=\\\"size\\\">\\n      {{ file.length | filesize }}\\n    </div>\\n  </div>\\n  <div class=\\\"grid-x\\\" *ngIf=\\\"inProgress\\\">\\n    <div class=\\\"cell medium-12\\\">\\n      <i class=\\\"fas fa-spin fa-atom\\\"></i>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"button-group\\\">\\n  <button mat-raised-button color=\\\"basic\\\" (click)=\\\"selectAll()\\\">\\n    Select all\\n  </button>\\n  <button\\n    mat-raised-button\\n    color=\\\"warn\\\"\\n    class=\\\"button warning\\\"\\n    (click)=\\\"cancel()\\\"\\n  >\\n    Done\\n  </button>\\n  <button\\n    mat-raised-button\\n    color=\\\"primary\\\"\\n    class=\\\"button\\\"\\n    [disabled]=\\\"!selectedFiles.size\\\"\\n    (click)=\\\"chooseFiles()\\\"\\n  >\\n    Import\\n  </button>\\n</div>\\n\"","export default \":host .drop-container {\\n  background: #fff;\\n  border-radius: 6px;\\n  height: 150px;\\n  width: 100%;\\n  box-shadow: 1px 2px 20px rgba(10, 10, 10, 0.1);\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  border: 2px dashed #c0c4c7;\\n}\\n:host p {\\n  font-size: 16px;\\n  font-weight: 400;\\n  color: #c0c4c7;\\n}\\n:host .upload-button {\\n  display: inline-block;\\n  border: none;\\n  outline: none;\\n  cursor: pointer;\\n  color: #5754a3;\\n}\\n:host .upload-button input {\\n  display: none;\\n}\\n:host .dropzone {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  flex-direction: column;\\n  border-radius: 5px;\\n  background: white;\\n  margin: 10px 0;\\n}\\n:host .dropzone.hovering {\\n  border: 2px solid #f16624;\\n  color: #dadada !important;\\n}\\n:host progress::-webkit-progress-value {\\n  transition: width 0.1s ease;\\n}\"","export default \"<div [formGroup]=\\\"form\\\">\\n  <div\\n    *ngIf=\\\"!field.value\\\"\\n    class=\\\"drop-container dropzone\\\"\\n    dropZone\\n    (hovered)=\\\"toggleHover($event)\\\"\\n    (dropped)=\\\"field.onUpload($event)\\\"\\n    [class.hovering]=\\\"isHovering\\\"\\n  >\\n    <p class=\\\"m-0\\\">\\n      Drag a file here or\\n      <label class=\\\"upload-button\\\">\\n        <input\\n          type=\\\"file\\\"\\n          multiple=\\\"\\\"\\n          (change)=\\\"field.onUpload($event.target.files)\\\"\\n        />\\n        browse\\n      </label>\\n      to upload.\\n    </p>\\n  </div>\\n  <div *ngIf=\\\"field.value\\\">\\n    <!-- <button type=\\\"button\\\" class=\\\"btn btn-primary\\\">Change</button> -->\\n    <div class=\\\"card\\\">\\n      <img class=\\\"card-img-top\\\" [src]=\\\"field.value\\\" />\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"\"","export default \"<h4>Select Files</h4>\\n<small\\n  ><em>\\n    If no folder is selected, the file will be saved in the root of your\\n    selected system.\\n  </em></small\\n>\\n<hr />\\n<select (ngModelChange)=\\\"selectSystem($event)\\\" [(ngModel)]=\\\"selectedSystem\\\">\\n  <option [ngValue]=\\\"myDataSystem\\\">My Data</option>\\n  <option [ngValue]=\\\"communityDataSystem\\\">Community Data</option>\\n  <option [ngValue]=\\\"publishedDataSystem\\\">Published Data</option>\\n  <optgroup label=\\\"My Galleries\\\">\\n    <option *ngFor=\\\"let project of projects\\\" [ngValue]=\\\"project\\\">\\n      {{ project.description }}\\n    </option>\\n  </optgroup>\\n</select>\\n<div\\n  class=\\\"fileslisting\\\"\\n  infiniteScroll\\n  [infiniteScrollDistance]=\\\"2\\\"\\n  [infiniteScrollThrottle]=\\\"100\\\"\\n  [scrollWindow]=\\\"false\\\"\\n  (scrolled)=\\\"getFiles()\\\"\\n>\\n  <div\\n    class=\\\"grid-x file-row\\\"\\n    *ngFor=\\\"let file of filesList\\\"\\n    [ngClass]=\\\"{ selected: selectedFiles.has(file.path) }\\\"\\n  >\\n    <div class=\\\"clickable\\\" (dblclick)=\\\"browse(file)\\\">\\n      <i class=\\\"fas fa-folder\\\" *ngIf=\\\"file.type === 'dir'\\\"></i>\\n      <i class=\\\"far fa-file\\\" *ngIf=\\\"file.type !== 'dir'\\\"></i>\\n      <span> {{ file.name }} </span>\\n    </div>\\n    <div class=\\\"size\\\">\\n      {{ file.length | filesize }}\\n    </div>\\n  </div>\\n  <div class=\\\"grid-x\\\" *ngIf=\\\"inProgress\\\">\\n    <div class=\\\"cell medium-12\\\">\\n      <i class=\\\"fas fa-spin fa-atom\\\"></i>\\n    </div>\\n  </div>\\n</div>\\n\\n<form\\n  [formGroup]=\\\"downloadSelectForm\\\"\\n  (ngSubmit)=\\\"update()\\\"\\n  id=\\\"current-project-form\\\"\\n>\\n  <div>\\n    <small\\n      ><em>\\n        If no filename is specified, it will default to the Gallery ID number.\\n      </em></small\\n    >\\n  </div>\\n\\n  <mat-form-field>\\n    <input\\n      matInput\\n      type=\\\"text\\\"\\n      formControlName=\\\"Name\\\"\\n      appearance=\\\"filled\\\"\\n      required=\\\"false\\\"\\n    />\\n  </mat-form-field>\\n</form>\\n<span class=\\\"radio-box\\\">\\n  <mat-radio-group [(ngModel)]=\\\"fileExtension\\\">\\n    <mat-radio-button value=\\\".csv\\\">.csv</mat-radio-button>\\n    <mat-radio-button value=\\\".json\\\">.json</mat-radio-button>\\n  </mat-radio-group>\\n</span>\\n\\n<div class=\\\"button-group\\\">\\n  <button\\n    mat-raised-button\\n    color=\\\"warn\\\"\\n    class=\\\"button warning\\\"\\n    (click)=\\\"cancel()\\\"\\n  >\\n    Cancel\\n  </button>\\n  <button\\n    mat-raised-button\\n    color=\\\"primary\\\"\\n    class=\\\"button\\\"\\n    (click)=\\\"chooseFiles()\\\"\\n  >\\n    Save\\n  </button>\\n</div>\\n\"","export default \":host .top-bar {\\n  height: 40px;\\n  padding: 5px;\\n  padding-left: 0.5em;\\n  flex-wrap: nowrap;\\n  position: fixed;\\n  overflow: hidden;\\n  width: 100%;\\n  z-index: 999;\\n}\\n:host .top-bar-right .top-bar-left {\\n  -webkit-box-flex: 0;\\n  flex-wrap: nowrap;\\n  flex: 0 1 auto;\\n  max-width: 100%;\\n}\\n@media print, screen and (min-width: 40em) {\\n  :host .top-bar {\\n    flex-wrap: nowrap;\\n    flex: 0 1 auto;\\n  }\\n}\"","export default \"<!-- <div class=\\\"grid-x\\\"> -->\\n\\n<!--   <div class=\\\"top-bar\\\" style=\\\"background-color: black\\\" id=\\\"navbar\\\"> -->\\n\\n<!--\\t<div class=\\\"top-bar-left\\\"> -->\\n<!--\\t  <img src=\\\"assets/logo.svg\\\" width=\\\"30PX\\\"> -->\\n<!--\\t  <span style=\\\"color: white\\\">Taggit</span> -->\\n<!--\\t</div> -->\\n\\n<!--\\t<div class=\\\"top-bar-right\\\"> -->\\n<!--\\t  <div class=\\\"light-blue\\\" *ngIf=\\\"currentUser\\\">{{ currentUser.username }}</div> -->\\n<!--\\t</div> -->\\n\\n<!--   </div> -->\\n\\n<!--   <\\\\!-- <div class=\\\"cell control-bar\\\"> -\\\\-> -->\\n<!--   <\\\\!--\\t<app-control-bar></app-control-bar> -\\\\-> -->\\n<!--   <\\\\!-- </div> -\\\\-> -->\\n<!-- </div> -->\\n\\n<app-control-bar></app-control-bar>\\n<!-- NOTE Router Outlet was here -->\\n<app-image-gallery></app-image-gallery>\\n\\n<!-- NOTE Leaflet was here -->\\n\"","export default \"<p>notfound works!</p>\\n\"","export default \":host {\\n  min-height: 20em;\\n}\\n:host .fileslisting {\\n  height: 20em;\\n  overflow-y: scroll;\\n  padding: 0px 20px;\\n}\\n:host .file-row {\\n  display: flex;\\n  background: #f9f9f9;\\n  border: 1px solid transparent;\\n  user-select: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n}\\n:host .clickable {\\n  flex: 1;\\n  max-width: 20em;\\n}\\n:host .size {\\n  align-items: flex-end;\\n}\\n:host .file-row:hover {\\n  border: 1px solid;\\n}\\n:host .file-row.selected {\\n  background: #d3d3d3;\\n}\\n:host .mat-radio-button ~ .mat-radio-button {\\n  margin-left: 16px;\\n}\\n:host .radio-box {\\n  position: relative;\\n  bottom: 45px;\\n  left: 45%;\\n}\"","export default \"\"","export default \":host {\\n  overflow-y: scroll;\\n}\\n:host .select-group {\\n  overflow: hidden;\\n  max-height: 20%;\\n}\\n:host .subitem-title {\\n  text-align: left;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #f1f1f1;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #f1f1f1;\\n  border-style: solid;\\n  overflow-y: scroll;\\n  background-color: #ffffff;\\n  height: 100%;\\n}\\n:host .group-subitem {\\n  height: 100px;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .boxed input[type=radio] {\\n  display: none;\\n}\\n:host .boxed label {\\n  background-color: #fff;\\n  transition: all 0.3s;\\n}\\n:host .boxed input[type=radio]:checked + label {\\n  background-color: #b3e5ff;\\n}\\n:host .group-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .name-group {\\n  display: inline-block;\\n  padding: 3px;\\n}\\n:host .button-group {\\n  margin: 0;\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n}\\n:host .fa {\\n  font-weight: 900;\\n  display: inline-block;\\n  font-style: normal;\\n  font-variant: normal;\\n  text-rendering: auto;\\n  font-family: \\\"FontAwesome\\\";\\n  line-height: 1;\\n}\\n:host .fa option {\\n  font-weight: 900;\\n}\"","export default \":host {\\n  background-color: #f1f1f1;\\n}\"","export default \"<div class=\\\"create-prompt\\\">\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">\\n    <span> Create Tag </span>\\n  </div>\\n  <!-- subitem-title -->\\n\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem\\\">\\n    <form class=\\\"form-type-form\\\">\\n      <div\\n        *ngFor=\\\"let control of enabledControls; let idx = index\\\"\\n        class=\\\"box form\\\"\\n      >\\n        <input\\n          type=\\\"radio\\\"\\n          [id]=\\\"control\\\"\\n          value=\\\"control.toLowerCase()\\\"\\n          name=\\\"form-type\\\"\\n          [checked]=\\\"idx === 0\\\"\\n          (change)=\\\"selectInputForm(control.toLowerCase())\\\"\\n        />\\n        <label\\n          style=\\\"cursor: pointer; margin: 3px; padding: 3px; font-size: 10px\\\"\\n          [for]=\\\"control\\\"\\n          >{{ control }}</label\\n        >\\n      </div>\\n      <!-- form-type-form -->\\n    </form>\\n\\n    <div class=\\\"form-name\\\">\\n      <mat-form-field class=\\\"input-label-group\\\">\\n        <mat-label>Label</mat-label>\\n        <input\\n          matInput\\n          placeholder=\\\"Label\\\"\\n          #labelValue\\n          [(ngModel)]=\\\"labelFilter\\\"\\n          (keyup)=\\\"inputFormLabel($event)\\\"\\n          name=\\\"labelFilter\\\"\\n          class=\\\"tiny\\\"\\n          type=\\\"text\\\"\\n        />\\n      </mat-form-field>\\n\\n      <ng-container *ngIf=\\\"formType != 'text'\\\">\\n        <ng-container *ngIf=\\\"formType == 'color'\\\">\\n          <mat-form-field class=\\\"input-label-group\\\">\\n            <mat-label>Option Color</mat-label>\\n            <input\\n              matInput\\n              #optionColorValue\\n              placeholder=\\\"Option Color\\\"\\n              #labelValue\\n              [(ngModel)]=\\\"optionColorFilter\\\"\\n              (change)=\\\"inputFormColor($event)\\\"\\n              name=\\\"optionColorilter\\\"\\n              class=\\\"tiny\\\"\\n              type=\\\"color\\\"\\n            />\\n          </mat-form-field>\\n        </ng-container>\\n\\n        <mat-form-field class=\\\"input-label-group\\\">\\n          <mat-label>Options</mat-label>\\n          <div class=\\\"input-group\\\">\\n            <input\\n              matInput\\n              #optionValue\\n              class=\\\"input-group-field\\\"\\n              placeholder=\\\"Option\\\"\\n              type=\\\"text\\\"\\n              [(ngModel)]=\\\"optionFilter\\\"\\n              name=\\\"optionFilter\\\"\\n              (keyup.enter)=\\\"\\n                addOptionItem(optionValue.value);\\n                optionValue.value = '';\\n                optionColorValue.value = '';\\n                clearOption();\\n                clearOptionColor()\\n              \\\"\\n            />\\n          </div>\\n          <!-- input-group -->\\n        </mat-form-field>\\n\\n        <div class=\\\"input-group-button\\\">\\n          <button\\n            mat-button\\n            color=\\\"accent\\\"\\n            class=\\\"button\\\"\\n            (click)=\\\"\\n              addOptionItem(optionValue.value);\\n              optionValue.value = '';\\n              clearOption()\\n            \\\"\\n          >\\n            <i class=\\\"fas fa-plus\\\"></i>\\n          </button>\\n        </div>\\n        <!-- input-group-button -->\\n\\n        <ul class=\\\"form-option-container\\\">\\n          <li *ngFor=\\\"let opt of formOptions\\\" class=\\\"list-group\\\">\\n            <div>\\n              {{ opt.label }}\\n              <ng-container *ngIf=\\\"formType == 'color'\\\">\\n                <svg class=\\\"box\\\" width=\\\"10px\\\" height=\\\"10px\\\">\\n                  <rect width=\\\"10px\\\" height=\\\"10px\\\" style=\\\"fill: #ffffff\\\" />\\n                  <rect\\n                    width=\\\"8px\\\"\\n                    height=\\\"8px\\\"\\n                    x=\\\"1px\\\"\\n                    y=\\\"1px\\\"\\n                    [style.fill]=\\\"opt.color\\\"\\n                  />\\n                </svg>\\n              </ng-container>\\n            </div>\\n            <!-- showopt -->\\n            <div class=\\\"button-group\\\">\\n              <div (click)=\\\"deleteOption(opt)\\\">\\n                <i\\n                  class=\\\"fas fa-minus\\\"\\n                  matTooltip=\\\"Delete\\\"\\n                  matTooltipPosition=\\\"above\\\"\\n                  style=\\\"cursor: pointer\\\"\\n                >\\n                </i>\\n              </div>\\n              <!-- delete opt -->\\n\\n              <div (click)=\\\"openRenameOptionModal(renameOptionModal)\\\">\\n                <i\\n                  class=\\\"fas fa-edit\\\"\\n                  style=\\\"cursor: pointer\\\"\\n                  matTooltip=\\\"Rename\\\"\\n                  matTooltipPosition=\\\"above\\\"\\n                >\\n                </i>\\n              </div>\\n\\n              <ng-template #renameOptionModal>\\n                <input matInput #optionRename placeholder=\\\"Rename Option\\\" />\\n                <br />\\n                <br />\\n                <div class=\\\"button-group\\\">\\n                  <button\\n                    matDialogClose\\n                    mat-raised-button\\n                    color=\\\"primary\\\"\\n                    (click)=\\\"renameOption(opt, optionRename.value)\\\"\\n                  >\\n                    Rename\\n                  </button>\\n                  <button matDialogClose mat-button>Cancel</button>\\n                </div>\\n              </ng-template>\\n            </div>\\n            <!-- button group -->\\n          </li>\\n        </ul>\\n      </ng-container>\\n    </div>\\n    <!-- form-name -->\\n\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"addFormItem()\\\">\\n      Save\\n    </button>\\n    <button mat-button color=\\\"primary\\\" (click)=\\\"cancelCreate()\\\">Cancel</button>\\n  </div>\\n  <!-- subitem -->\\n</div>\\n<!-- create-group -->\\n\"","export default \":host .img-list-container {\\n  display: grid;\\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\\n  grid-gap: 1em;\\n  height: 100%;\\n  padding: 1em;\\n}\\n:host #no-img {\\n  font-size: 32px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 70vh;\\n}\\n:host #no-proj {\\n  font-size: 32px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 70vh;\\n}\\n:host #new-proj {\\n  font-size: 32px;\\n  display: flex;\\n  height: 100vh;\\n  justify-content: center;\\n  align-items: center;\\n}\\n:host app-image-box {\\n  height: 100%;\\n}\\n:host .masonry-item {\\n  width: 200px;\\n}\\n:host img-spin {\\n  position: relative;\\n  bottom: 0px;\\n  left: 0px;\\n  width: 100%;\\n  height: 100px;\\n  background: #fff;\\n}\\n:host load-spin {\\n  position: relative;\\n  width: 100%;\\n  height: 100px;\\n  background: #fff;\\n}\\n:host .side-bar-container {\\n  background-color: #f1f1f1;\\n  position: fixed;\\n  width: 25%;\\n  margin-right: 0px;\\n  height: calc(100vh - 50px);\\n  right: 0;\\n}\\n:host .success {\\n  margin-right: 20%;\\n}\\n:host .danger {\\n  margin-right: 0%;\\n}\\n:host #gallery-container-container {\\n  position: relative;\\n  width: 100%;\\n  height: auto;\\n  text-align: center;\\n  display: flex;\\n  flex-direction: column;\\n  margin-top: 0px;\\n}\\n:host #loading-load {\\n  position: relative;\\n  width: 100%;\\n  height: auto;\\n  text-align: center;\\n  flex-direction: column;\\n  margin-top: 50px;\\n}\\n:host #gallery-container {\\n  position: relative;\\n  width: 100%;\\n  height: auto;\\n  text-align: center;\\n  display: flex;\\n  flex-direction: column;\\n}\\n:host #gallery-container .gallery-image {\\n  height: 100%;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n:host #gallery-container .gallery-image img {\\n  max-width: 100%;\\n  max-height: 100%;\\n  margin: 0 auto;\\n}\\n:host .imager {\\n  width: 75%;\\n  height: calc(100vh - 50px);\\n  background-color: #fefefe;\\n}\\n:host .view-image {\\n  max-width: 100%;\\n  height: auto;\\n}\\n:host .gallery-btn {\\n  width: 35px;\\n  height: 35px;\\n  background: #000;\\n  color: #fff;\\n  text-align: center;\\n  line-height: 35px;\\n  cursor: pointer;\\n  transition: all 0.4s ease;\\n  font-size: 20px;\\n  box-sizing: border-box;\\n  padding-left: 2px;\\n  position: fixed;\\n  bottom: 10px;\\n}\\n:host .gallery-btn:hover {\\n  background: #222;\\n}\\n:host .gallery-close {\\n  top: 10px;\\n}\\n:host .gallery-close .gallery-next {\\n  right: 10px;\\n}\\n:host .gallery-prev {\\n  right: 50px;\\n}\\n:host .gallery-prev .gallery-next {\\n  bottom: 10px;\\n}\\n@media (min-width: 478px) {\\n  :host .img-list-container img:nth-child(3n):not(last-of-type) {\\n    grid-row-end: span 2;\\n  }\\n}\\n@media (max-width: 768px) {\\n  :host .img-list-container {\\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\\n  }\\n}\\n@media (max-width: 450px) {\\n  :host .img-list-container {\\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\\n  }\\n}\"","export default \"<h4>Share this project</h4>\\n<small\\n  ><em>\\n    People you share your project with will have full ability to edit and delete\\n    this project on Taggit and on HazMapper.\\n  </em></small\\n>\\n\\n<form [formGroup]=\\\"projShareForm\\\" (ngSubmit)=\\\"submit()\\\" id=\\\"share-project-form\\\">\\n  <mat-form-field>\\n    <mat-label>Username:</mat-label>\\n    <input matInput type=\\\"text\\\" formControlName=\\\"name\\\" required=\\\"true\\\" />\\n  </mat-form-field>\\n\\n  <div class=\\\"button-group small\\\">\\n    <button\\n      mat-raised-button\\n      color=\\\"warn\\\"\\n      class=\\\"button small warning\\\"\\n      type=\\\"button\\\"\\n      (click)=\\\"close()\\\"\\n    >\\n      Close\\n    </button>\\n    <button\\n      mat-raised-button\\n      color=\\\"primary\\\"\\n      class=\\\"button small align-right\\\"\\n      type=\\\"submit\\\"\\n      [disabled]=\\\"!projShareForm.valid\\\"\\n    >\\n      Add Member\\n    </button>\\n  </div>\\n\\n  <br />\\n  <h5>Current Users</h5>\\n  <div *ngFor=\\\"let user of projectUsers\\\">\\n    <br />\\n    <mat-card class=\\\"card-container\\\">\\n      <span class=\\\"card-item\\\">\\n        {{ user.username }}\\n      </span>\\n      <span class=\\\"card-buttons\\\">\\n        <button\\n          mat-raised-button\\n          color=\\\"warn\\\"\\n          class=\\\"button small warning\\\"\\n          type=\\\"button\\\"\\n          [disabled]=\\\"onlyOne\\\"\\n          (click)=\\\"delete(user.username)\\\"\\n        >\\n          <i class=\\\"fas fa-trash\\\"></i>\\n        </button>\\n      </span>\\n    </mat-card>\\n  </div>\\n</form>\\n\"","export default \"<div *ngIf=\\\"loaded; else loader\\\" id=\\\"loading-load\\\">\\n  <div *ngIf=\\\"projectsExist; else noProjWarn\\\" id=\\\"gallery-container\\\">\\n    <div *ngIf=\\\"imagesExist; else noImgWarn\\\" id=\\\"gallery-container-container\\\">\\n      <div\\n        [ngClass]=\\\"scrollStatus\\\"\\n        infiniteScroll\\n        [infiniteScrollDistance]=\\\"1\\\"\\n        [infiniteScrollThrottle]=\\\"1500\\\"\\n        (scrolled)=\\\"onScroll()\\\"\\n        class=\\\"img-list-container\\\"\\n        *ngIf=\\\"!showTagger; else tagger\\\"\\n      >\\n        <app-image-box *ngFor=\\\"let feat of featureListScroll\\\" [feature]=\\\"feat\\\">\\n        </app-image-box>\\n      </div>\\n\\n      <ngx-spinner\\n        bdOpacity=\\\"0.9\\\"\\n        bdColor=\\\"\\\"\\n        size=\\\"default\\\"\\n        color=\\\"#3ADB76\\\"\\n        type=\\\"line-scale-pulse-out\\\"\\n        id=\\\"img-spin\\\"\\n        [fullScreen]=\\\"false\\\"\\n      >\\n      </ngx-spinner>\\n      <ng-template #tagger>\\n        <div>\\n          <div class=\\\"imager\\\">\\n            <img class=\\\"view-image\\\" [src]=\\\"getPath()\\\" />\\n          </div>\\n        </div>\\n      </ng-template>\\n      <div *ngIf=\\\"showTagger\\\" class=\\\"side-bar-container\\\">\\n        <app-side-bar></app-side-bar>\\n      </div>\\n    </div>\\n    <ng-template #noImgWarn>\\n      <div id=\\\"no-img\\\">\\n        No images have been imported!<br />Please import images through the\\n        menu.\\n      </div>\\n    </ng-template>\\n  </div>\\n\\n  <ng-template #noProjWarn>\\n    <div id=\\\"no-proj\\\">\\n      No project has been created!<br />Please create a project through the\\n      menu.\\n    </div>\\n  </ng-template>\\n</div>\\n\\n<ng-template #loader>\\n  <div *ngIf=\\\"projectsExist; else createProj\\\" id=\\\"loader\\\">Loading...</div>\\n\\n  <ng-template #createProj>\\n    <div id=\\\"new-proj\\\" (click)=\\\"openCreateProjectModal()\\\">\\n      Start a new project\\n    </div>\\n  </ng-template>\\n</ng-template>\\n\"","export default \"<div class=\\\"form-group row\\\" *ngFor=\\\"let tag of field\\\">\\n  <label class=\\\"col-md-3 form-control-label\\\" [attr.for]=\\\"tag.label\\\">\\n    {{ field.label }}\\n    <strong class=\\\"text-danger\\\" *ngIf=\\\"tag.required\\\">*</strong>\\n  </label>\\n  <div class=\\\"col-md-9\\\" [ngSwitch]=\\\"tag.type\\\">\\n    <app-form-color\\n      *ngSwitchCase=\\\"'color'\\\"\\n      [field]=\\\"field\\\"\\n      [form]=\\\"form\\\"\\n    ></app-form-color>\\n    <app-form-textbox\\n      *ngSwitchCase=\\\"'text'\\\"\\n      [field]=\\\"field\\\"\\n      [form]=\\\"form\\\"\\n    ></app-form-textbox>\\n    <app-form-dropdown\\n      *ngSwitchCase=\\\"'dropdown'\\\"\\n      [field]=\\\"field\\\"\\n      [form]=\\\"form\\\"\\n    ></app-form-dropdown>\\n    <app-form-checkbox\\n      *ngSwitchCase=\\\"'checkbox'\\\"\\n      [field]=\\\"field\\\"\\n      [form]=\\\"form\\\"\\n    ></app-form-checkbox>\\n    <app-form-radio\\n      *ngSwitchCase=\\\"'radio'\\\"\\n      [field]=\\\"field\\\"\\n      [form]=\\\"form\\\"\\n    ></app-form-radio>\\n  </div>\\n</div>\\n\"","export default \":host .subitem-title {\\n  text-align: left;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #f1f1f1;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #f1f1f1;\\n  border-style: solid;\\n  overflow-y: scroll;\\n  background-color: #ffffff;\\n  height: 100%;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .asset-list {\\n  max-height: 20%;\\n  overflow: hidden;\\n}\\n:host .asset-subitem {\\n  height: 100px;\\n}\\n:host .asset-container {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  cursor: pointer;\\n}\\n:host .highlight {\\n  background-color: #b3e5ff;\\n}\\n:host .name-group {\\n  display: inline-block;\\n  padding: 3px;\\n}\\n:host .button-group {\\n  margin: 0;\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n  padding-right: 5px;\\n}\"","export default \"<!--The content below is only a placeholder and can be replaced.-->\\n<router-outlet></router-outlet>\\n\"","export default \"<div id=\\\"callback\\\">\\n  <div>\\n    <i class=\\\"fas fa-spinner\\\"></i>\\n  </div>\\n</div>\\n\"","export default \"<div class=\\\"img-container\\\">\\n  <img\\n    [ngClass]=\\\"imageSelected\\\"\\n    [src]=\\\"featureSource\\\"\\n    (click)=\\\"imageSelect()\\\"\\n    class=\\\"img-responsive img-target\\\"\\n    title=\\\"{{ featurePath }}\\\"\\n  />\\n  <div class=\\\"top-overlay\\\">\\n    <div\\n      class=\\\"image-option\\\"\\n      matTooltip=\\\"Zoom\\\"\\n      matTooltipPosition=\\\"below\\\"\\n      (click)=\\\"imageZoom(diffSizes)\\\"\\n    >\\n      <i class=\\\"fas fa-search-plus\\\"></i>\\n    </div>\\n\\n    <ng-template #diffSizes>\\n      <div class=\\\"zoom-content\\\">\\n        <div class=\\\"img-container\\\">\\n          <img [src]=\\\"featureSource\\\" title=\\\"{{ featurePath }}\\\" />\\n        </div>\\n        <div class=\\\"img-details\\\">\\n          <div class=\\\"detail-container\\\">\\n            <div class=\\\"title\\\">Coordinates</div>\\n            <div class=\\\"detail-contents\\\">\\n              <div class=\\\"detail-item\\\">{{ coordinates[0] }},</div>\\n              <div class=\\\"detail-item\\\">\\n                {{ coordinates[1] }}\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"detail-container\\\">\\n            <div class=\\\"title\\\">Image Source</div>\\n            <div class=\\\"detail-contents\\\">\\n              <div class=\\\"detail-item\\\">\\n                {{ featurePath }}\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <button\\n          mat-button\\n          class=\\\"close-button\\\"\\n          matDialogClose\\n          aria-label=\\\"Close modal\\\"\\n          type=\\\"button\\\"\\n        >\\n          <span aria-hidden=\\\"true\\\">&times;</span>\\n        </button>\\n      </div>\\n    </ng-template>\\n\\n    <div\\n      class=\\\"image-option\\\"\\n      matTooltip=\\\"Remove\\\"\\n      matTooltipPosition=\\\"below\\\"\\n      (click)=\\\"openImageDeleteModal(deleteImage)\\\"\\n    >\\n      <i class=\\\"fas fa-trash\\\"></i>\\n    </div>\\n\\n    <ng-template #deleteImage>\\n      <div *ngIf=\\\"selectedImages.length === 1\\\">\\n        This image will be deleted from the current project. It will not be\\n        deleted from the Data Depot.\\n      </div>\\n\\n      <div *ngIf=\\\"selectedImages.length > 1\\\">\\n        {{ selectedImages.length }} images will be deleted from the current\\n        project. They will not be deleted from the Data Depot.\\n      </div>\\n\\n      <button\\n        mat-raised-button\\n        color=\\\"primary\\\"\\n        matDialogClose\\n        (click)=\\\"imageDelete()\\\"\\n      >\\n        Delete Image\\n      </button>\\n      <button mat-button matDialogClose>Cancel</button>\\n    </ng-template>\\n\\n    <div\\n      class=\\\"image-option\\\"\\n      matTooltip=\\\"Add To Group\\\"\\n      matTooltipPosition=\\\"below\\\"\\n      (click)=\\\"openImageAddModal(addMoreToGroup)\\\"\\n    >\\n      <i class=\\\"fas fa-plus\\\"></i>\\n    </div>\\n\\n    <ng-template #addMoreToGroup>\\n      <mat-form-field appearance=\\\"fill\\\">\\n        <mat-label>Groups</mat-label>\\n        <mat-select matNativeControl required [(value)]=\\\"groupToAdd\\\">\\n          <mat-option\\n            *ngFor=\\\"let group of groups | keyvalue\\\"\\n            [value]=\\\"group.value\\\"\\n          >\\n            {{ group.key }}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <p>\\n        <button\\n          mat-raised-button\\n          color=\\\"primary\\\"\\n          matDialogClose\\n          (click)=\\\"addGroup(groupToAdd)\\\"\\n          [disabled]=\\\"!groupToAdd\\\"\\n        >\\n          Add To Group\\n        </button>\\n        <button mat-button color=\\\"secondary\\\" matDialogClose>Cancel</button>\\n      </p>\\n    </ng-template>\\n  </div>\\n\\n  <div class=\\\"bottom-overlay\\\">\\n    <div\\n      *ngIf=\\\"feature.properties.group && feature.properties.group.length > 0\\\"\\n    >\\n      <div\\n        *ngIf=\\\"feature.properties.group.length < 5; else dotdot\\\"\\n        class=\\\"group-tags\\\"\\n      >\\n        <div\\n          *ngFor=\\\"let group of feature.properties.group\\\"\\n          class=\\\"center\\\"\\n          (mouseover)=\\\"(group.name)\\\"\\n          [matTooltip]=\\\"group.name\\\"\\n          matTooltipPosition=\\\"above\\\"\\n        >\\n          <svg\\n            class=\\\"box\\\"\\n            width=\\\"25px\\\"\\n            height=\\\"75px\\\"\\n            (click)=\\\"deleteFromGroup(feature, group)\\\"\\n          >\\n            <rect\\n              width=\\\"15px\\\"\\n              height=\\\"15px\\\"\\n              x=\\\"5\\\"\\n              y=\\\"30\\\"\\n              [style.fill]=\\\"group.color\\\"\\n            />\\n            <rect\\n              class=\\\"inner-del\\\"\\n              width=\\\"25px\\\"\\n              height=\\\"15px\\\"\\n              rx=\\\"3\\\"\\n              x=\\\"0\\\"\\n              y=\\\"0\\\"\\n              style=\\\"fill: #ffffff\\\"\\n            />\\n            <rect\\n              class=\\\"inner-del\\\"\\n              width=\\\"15px\\\"\\n              height=\\\"5px\\\"\\n              x=\\\"5\\\"\\n              y=\\\"5\\\"\\n              style=\\\"fill: #de6363\\\"\\n            />\\n          </svg>\\n        </div>\\n      </div>\\n\\n      <ng-template #dotdot class=\\\"text\\\">\\n        <div\\n          class=\\\"image-option\\\"\\n          (click)=\\\"openMoreGroupsModal(moreGroupsModal)\\\"\\n        >\\n          <i class=\\\"fas fa-ellipsis-h\\\"></i>\\n        </div>\\n      </ng-template>\\n\\n      <!-- TODO Should close modal once zero groups -->\\n      <ng-template #moreGroupsModal>\\n        <div\\n          style=\\\"display: flex; justify-content: center; align-items: center\\\"\\n        >\\n          <div\\n            *ngFor=\\\"let group of feature.properties.group\\\"\\n            class=\\\"center-temp\\\"\\n            style=\\\"display: flex\\\"\\n            (mouseover)=\\\"(group.name)\\\"\\n            [matTooltip]=\\\"group.name\\\"\\n            matTooltipPosition=\\\"right\\\"\\n          >\\n            <svg\\n              style=\\\"padding: 1\\\"\\n              (click)=\\\"deleteFromGroup(feature, group)\\\"\\n              width=\\\"15px\\\"\\n              height=\\\"15px\\\"\\n            >\\n              <rect width=\\\"15px\\\" height=\\\"15px\\\" [style.fill]=\\\"group.color\\\" />\\n              <rect\\n                class=\\\"inner-del-temp\\\"\\n                width=\\\"8px\\\"\\n                height=\\\"4px\\\"\\n                x=\\\"3.3\\\"\\n                y=\\\"5.5\\\"\\n                style=\\\"fill: #000\\\"\\n              />\\n            </svg>\\n          </div>\\n        </div>\\n      </ng-template>\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"<app-select-group></app-select-group>\\n<app-select-image></app-select-image>\\n\\n<app-tag-generator *ngIf=\\\"showTagGenerator; else tagImages\\\"></app-tag-generator>\\n<ng-template #tagImages>\\n  <app-tag-images></app-tag-images>\\n</ng-template>\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"crnd\";","export default \":host {\\n  display: block;\\n  font-size: 0.8em;\\n  height: calc(100vh - 50px);\\n}\\n:host .lat-lon-label {\\n  font-size: 0.8em;\\n  color: #4d4d4d;\\n}\\n:host .active-project {\\n  background-color: #1aff8c;\\n}\\n:host .menu button.dropdown.button {\\n  padding: 0.85em 1em;\\n}\\n:host .switch {\\n  margin: 0;\\n}\\n:host .button.tiny {\\n  margin: 0;\\n}\\n:host .create-prompt {\\n  max-height: 500px;\\n  height: 500px;\\n}\\n:host .select-group {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .subitem-title {\\n  text-align: left;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #f1f1f1;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n:host .input-label-group {\\n  padding: 10px;\\n  display: block;\\n}\\n:host .input-group {\\n  display: inline-block;\\n}\\n:host .form-name {\\n  text-align: center;\\n}\\n:host .input-group-button {\\n  display: inline-block;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #f1f1f1;\\n  border-style: solid;\\n  overflow-y: auto;\\n  background-color: #ffffff;\\n  height: 40vh;\\n  padding: 20px;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .preset-descriptions {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .boxed input[type=radio] {\\n  display: none;\\n}\\n:host .boxed label {\\n  background-color: #fff;\\n  transition: all 0.3s;\\n}\\n:host .boxed input[type=radio]:checked + label {\\n  background-color: #b3e5ff;\\n}\\n:host .group-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .button-group {\\n  margin: 0;\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .form-option-container {\\n  padding: 0px;\\n}\\n:host .list-group {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .list-suboptions {\\n  background-color: #f0f0f0;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n}\\n:host .name-group {\\n  display: inline-block;\\n  padding: 3px;\\n}\\n:host .form-item-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .form-type-form {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  margin: 5px;\\n  margin-bottom: 15px;\\n}\\n:host .form-type-form input[type=radio] {\\n  display: none;\\n}\\n:host .form-type-form label {\\n  border-style: solid;\\n  border-width: 1px;\\n  border-color: #ddd;\\n  transition: all 0.3s;\\n}\\n:host .form-type-form input[type=radio]:checked + label {\\n  border-style: solid;\\n  border-width: 1px;\\n  border-color: #000;\\n}\\n:host .changed {\\n  color: #f07575;\\n}\\n:host .unchanged {\\n  color: #555555;\\n}\\n:host .asset-list {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .asset-container {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  cursor: pointer;\\n}\\n:host .highlight {\\n  background-color: #b3e5ff;\\n}\"","export default \"<div>\\n  <textarea\\n    [id]=\\\"field.name\\\"\\n    rows=\\\"9\\\"\\n    class=\\\"form-control\\\"\\n    [placeholder]=\\\"'notes'\\\"\\n    [(ngModel)]=\\\"value\\\"\\n    (keyup)=\\\"updateValue()\\\"\\n  ></textarea>\\n</div>\\n\"","export default \":host #share-project-form {\\n  display: flex;\\n  flex-direction: column;\\n  text-align: center;\\n  padding: 5em;\\n}\\n\\n.card-container {\\n  display: flex;\\n  justify-content: space-between;\\n  width: 99%;\\n}\\n\\n.card-item {\\n  text-align: center;\\n  align-items: center;\\n}\\n\\n.card-buttons {\\n  align-items: flex-end;\\n}\"","export default \"<div id=\\\"map\\\" style=\\\"min-height: calc(100vh - 67px)\\\"></div>\\n\"","export default \"<div *ngFor=\\\"let opt of form.options\\\" [id]=\\\"form.label\\\" class=\\\"input-group\\\">\\n  <div class=\\\"form-check form-check\\\">\\n    <label class=\\\"form-check-label\\\">\\n      <input\\n        class=\\\"form-check-input\\\"\\n        [(ngModel)]=\\\"value\\\"\\n        type=\\\"radio\\\"\\n        id=\\\"inlineCheckbox2\\\"\\n        name=\\\"{{ label }}\\\"\\n        value=\\\"{{ opt.label }}\\\"\\n        (change)=\\\"updateCheckedTag()\\\"\\n      />\\n      {{ opt.label }}\\n    </label>\\n  </div>\\n</div>\\n\"","export default \":host #create-project-form {\\n  display: flex;\\n  flex-direction: column;\\n  text-align: center;\\n  padding: 5em;\\n}\"","export default \":host .img-container {\\n  position: relative;\\n}\\n:host .img-container img {\\n  -o-object-fit: cover;\\n     object-fit: cover;\\n  cursor: default;\\n  width: 100%;\\n  height: 100%;\\n  transition: opacity 0.3s ease;\\n  backface-visibility: hidden;\\n  max-width: 100%;\\n  max-height: 100%;\\n  margin: 0 auto;\\n}\\n:host .top-overlay {\\n  display: flex;\\n  flex-direction: row;\\n  transition: 0.3s ease;\\n  opacity: 0;\\n  position: absolute;\\n  right: 10px;\\n  top: 10px;\\n  cursor: pointer;\\n  text-align: center;\\n}\\n:host .bottom-overlay {\\n  display: flex;\\n  flex-direction: row;\\n  transition: 0.3s ease;\\n  opacity: 1;\\n  position: absolute;\\n  right: 10px;\\n  bottom: 10px;\\n  text-align: center;\\n}\\n:host .img-container:hover img {\\n  opacity: 0.9;\\n}\\n:host .img-container:hover .top-overlay {\\n  opacity: 0.9;\\n}\\n:host .img-container:hover .top-overlay:hover {\\n  opacity: 1;\\n}\\n:host .image-option {\\n  opacity: 0.9;\\n  background-color: white;\\n  display: flex;\\n  color: black;\\n  width: 40px;\\n  height: 30px;\\n  border-radius: 5px;\\n  font-size: 16px;\\n  margin: 3px;\\n  justify-content: center;\\n  align-items: center;\\n}\\n:host .image-option:hover {\\n  opacity: 1;\\n}\\n:host .image-option .fas {\\n  top: 5px;\\n}\\n:host .img-selected {\\n  border: solid #0191ff;\\n  border-width: 5px;\\n}\\n:host .img-unselected {\\n  border: solid #fff;\\n  border-width: 5px;\\n}\\n:host .group-tags {\\n  opacity: 0.9;\\n  background-color: white;\\n  display: flex;\\n  flex-direction: row;\\n  width: auto;\\n  height: 30px;\\n  border-radius: 5px;\\n  padding: 5px;\\n  justify-content: center;\\n  align-items: center;\\n  z-index: 999;\\n}\\n:host .center {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: center;\\n  transition: 0.3s ease;\\n  align-items: center;\\n}\\n:host .center .inner-del {\\n  opacity: 0;\\n  transition: 0.3s ease;\\n  cursor: pointer;\\n}\\n:host .center:hover .inner-del {\\n  opacity: 1;\\n}\\n:host .box {\\n  padding: 1px;\\n}\\n.center-temp {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.center-temp .inner-del-temp {\\n  opacity: 0;\\n  transition: 0.3s ease;\\n  cursor: pointer;\\n}\\n.center-temp:hover .inner-del-temp {\\n  opacity: 0.5;\\n}\\n.zoom-content {\\n  display: flex;\\n  flex-direction: column;\\n  max-height: 700px;\\n}\\n.zoom-content .img-container {\\n  overflow-y: scroll;\\n  width: 100%;\\n  height: 100%;\\n  background-color: #e7e7e7;\\n}\\n.zoom-content .img-details {\\n  display: flex;\\n  flex-direction: row;\\n  margin-top: 24px;\\n  background-color: #e7e7e7;\\n  align-items: center;\\n  text-align: center;\\n}\\n.zoom-content .title {\\n  background-color: #ccc;\\n  padding: 5px;\\n}\\n.zoom-content .detail-container {\\n  display: flex;\\n  flex-grow: 1;\\n  flex-direction: column;\\n  padding: 5px;\\n}\\n.zoom-content .detail-contents {\\n  display: flex;\\n  flex-direction: row;\\n  padding: 5px;\\n  background-color: #fff;\\n}\\n.zoom-content .detail-item {\\n  padding: 5px;\\n}\"","export default \":host {\\n  text-align: left;\\n}\\n:host .mat-form-field {\\n  width: 100%;\\n  text-align: left;\\n}\\n:host .input-group {\\n  padding: 5px;\\n}\\n:host label {\\n  padding: 5px;\\n}\\n:host input {\\n  padding: 5px;\\n  vertical-align: middle;\\n}\\n:host .radio-group {\\n  display: flex;\\n  flex-direction: column;\\n}\\n:host .form-controls {\\n  padding: 20px;\\n}\"","export default \"<div *ngFor=\\\"let opt of form.options\\\" [id]=\\\"form.label\\\" class=\\\"input-group\\\">\\n  <div class=\\\"form-check form-check\\\">\\n    <label class=\\\"form-check-label\\\">\\n      <input\\n        class=\\\"form-check-input\\\"\\n        [(ngModel)]=\\\"chosenTag\\\"\\n        type=\\\"radio\\\"\\n        id=\\\"inlineCheckbox3\\\"\\n        name=\\\"{{ label }}\\\"\\n        value=\\\"{{ opt.label }}\\\"\\n        (change)=\\\"updateCheckedTag()\\\"\\n      />\\n      {{ opt.label }}\\n\\n      <svg class=\\\"box\\\" width=\\\"10px\\\" height=\\\"10px\\\">\\n        <rect width=\\\"10px\\\" height=\\\"10px\\\" style=\\\"fill: #ffffff\\\" />\\n        <rect\\n          width=\\\"8px\\\"\\n          height=\\\"8px\\\"\\n          x=\\\"1px\\\"\\n          y=\\\"1px\\\"\\n          [style.fill]=\\\"opt.color\\\"\\n        />\\n      </svg>\\n    </label>\\n  </div>\\n</div>\\n\"","export default \"<h4>Current Gallery</h4>\\n<form\\n  [formGroup]=\\\"projCreateForm\\\"\\n  (ngSubmit)=\\\"update()\\\"\\n  id=\\\"current-project-form\\\"\\n>\\n  <mat-form-field>\\n    <mat-label>Name:</mat-label>\\n    <input\\n      matInput\\n      type=\\\"text\\\"\\n      formControlName=\\\"name\\\"\\n      appearance=\\\"filled\\\"\\n      required=\\\"true\\\"\\n    />\\n  </mat-form-field>\\n\\n  <mat-form-field>\\n    <mat-label>Description</mat-label>\\n    <textarea matInput formControlName=\\\"description\\\" required=\\\"true\\\"></textarea>\\n  </mat-form-field>\\n\\n  <div class=\\\"button-group small\\\">\\n    <button\\n      mat-raised-button\\n      color=\\\"basic\\\"\\n      class=\\\"button small warning\\\"\\n      type=\\\"button\\\"\\n      (click)=\\\"close()\\\"\\n    >\\n      Close\\n    </button>\\n    <button\\n      *ngIf=\\\"activeProject.deletable\\\"\\n      mat-raised-button\\n      color=\\\"warn\\\"\\n      class=\\\"button small warning\\\"\\n      type=\\\"delete\\\"\\n      (click)=\\\"delete()\\\"\\n    >\\n      Delete\\n    </button>\\n    <button\\n      mat-raised-button\\n      color=\\\"primary\\\"\\n      class=\\\"button small align-right\\\"\\n      type=\\\"submit\\\"\\n      [disabled]=\\\"!projCreateForm.valid\\\"\\n    >\\n      Update\\n    </button>\\n  </div>\\n</form>\\n\"","export default \"<h4>Create a new Gallery</h4>\\n<form\\n  [formGroup]=\\\"projCreateForm\\\"\\n  (ngSubmit)=\\\"submit()\\\"\\n  id=\\\"create-project-form\\\"\\n>\\n  <mat-form-field>\\n    <mat-label>Name:</mat-label>\\n    <input matInput type=\\\"text\\\" formControlName=\\\"name\\\" required=\\\"true\\\" />\\n  </mat-form-field>\\n\\n  <mat-form-field>\\n    <mat-label>Description</mat-label>\\n    <textarea matInput formControlName=\\\"description\\\" required=\\\"true\\\"></textarea>\\n  </mat-form-field>\\n\\n  <div class=\\\"button-group small\\\">\\n    <button\\n      mat-raised-button\\n      color=\\\"warn\\\"\\n      class=\\\"button small warning\\\"\\n      type=\\\"button\\\"\\n      (click)=\\\"close()\\\"\\n    >\\n      Close\\n    </button>\\n    <button\\n      mat-raised-button\\n      color=\\\"primary\\\"\\n      class=\\\"button small align-right\\\"\\n      type=\\\"submit\\\"\\n      [disabled]=\\\"!projCreateForm.valid\\\"\\n    >\\n      Submit\\n    </button>\\n  </div>\\n</form>\\n\"","export default \"\"","export default \":host {\\n  font-size: 0.8em;\\n  display: block;\\n}\\n:host .subitem-title {\\n  text-align: left;\\n  display: flex;\\n  justify-content: space-between;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #f1f1f1;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #f1f1f1;\\n  border-style: solid;\\n  padding: 10px;\\n  overflow-y: auto;\\n  background-color: #ffffff;\\n  height: 40vh;\\n}\\n:host .main-form-container {\\n  padding: 10px;\\n}\\n:host .subitem-scroll {\\n  padding: 10px;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .highlight {\\n  background-color: #b3e5ff;\\n}\\n:host .boxed input[type=radio] {\\n  display: none;\\n}\\n:host .boxed label {\\n  background-color: #fff;\\n  transition: all 0.3s;\\n}\\n:host .boxed input[type=radio]:checked + label {\\n  background-color: #b3e5ff;\\n}\\n:host .group-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .select-group {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .tag-forms {\\n  height: 500px;\\n}\\n:host .asset-list {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .asset-container {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  cursor: pointer;\\n}\\n:host .preset-descriptions {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .form-item-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .button-group {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n}\\n:host .name-group {\\n  padding: 3px;\\n  font-size: 17px;\\n  font-weight: bold;\\n}\\n:host .list-group {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .list-suboptions {\\n  background-color: #f0f0f0;\\n}\"","export default \"<div class=\\\"select-group\\\">\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">Groups</div>\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem group-subitem\\\">\\n    <!-- TODO redundant functionality radio is just for style -->\\n    <form class=\\\"boxed\\\">\\n      <div\\n        *ngFor=\\\"let group of groups | keyvalue\\\"\\n        (click)=\\\"selectGroupForm(group.value)\\\"\\n        class=\\\"box form\\\"\\n      >\\n        <input\\n          type=\\\"radio\\\"\\n          [id]=\\\"group.key\\\"\\n          [value]=\\\"group.key\\\"\\n          name=\\\"skills\\\"\\n          [checked]=\\\"isChecked(group.key)\\\"\\n        />\\n        <label\\n          class=\\\"group-container\\\"\\n          style=\\\"cursor: pointer\\\"\\n          [for]=\\\"group.key\\\"\\n        >\\n          <div class=\\\"name-group\\\">\\n            {{ group.key }}\\n            <svg class=\\\"box\\\" width=\\\"10px\\\" height=\\\"10px\\\">\\n              <rect width=\\\"10px\\\" height=\\\"10px\\\" style=\\\"fill: #ffffff\\\" />\\n              <rect\\n                width=\\\"8px\\\"\\n                height=\\\"8px\\\"\\n                x=\\\"1px\\\"\\n                y=\\\"1px\\\"\\n                [style.fill]=\\\"group.value.color\\\"\\n              />\\n            </svg>\\n          </div>\\n          <div class=\\\"button-group\\\">\\n            <div (click)=\\\"deleteGroup(group.value)\\\">\\n              <i\\n                class=\\\"fas fa-minus\\\"\\n                matTooltip=\\\"Delete\\\"\\n                matTooltipPosition=\\\"below\\\"\\n              >\\n              </i>\\n            </div>\\n            <div (click)=\\\"openRenameModal(renameModal, group.value)\\\">\\n              <i\\n                class=\\\"fas fa-edit\\\"\\n                matTooltip=\\\"Rename\\\"\\n                matTooltipPosition=\\\"below\\\"\\n              >\\n              </i>\\n            </div>\\n            <div (click)=\\\"openIconSelection(iconModal, group.value)\\\">\\n              <span\\n                class=\\\"fa {{ group.value.icon }}\\\"\\n                matTooltip=\\\"icons\\\"\\n                matTooltipPosition=\\\"below\\\"\\n              ></span>\\n            </div>\\n          </div>\\n        </label>\\n      </div>\\n    </form>\\n\\n    <ng-template #renameModal>\\n      <input\\n        matInput\\n        #groupRename\\n        placeholder=\\\"Rename Group\\\"\\n        (keyup.enter)=\\\"renameGroup(groupRename.value)\\\"\\n      />\\n      <br />\\n      <br />\\n      <div class=\\\"button-group\\\">\\n        <button\\n          matDialogClose\\n          color=\\\"primary\\\"\\n          mat-raised-button\\n          (click)=\\\"renameGroup(groupRename.value)\\\"\\n        >\\n          Rename\\n        </button>\\n        <button matDialogClose mat-button>Cancel</button>\\n      </div>\\n    </ng-template>\\n\\n    <ng-template #iconModal>\\n      <div class=\\\"iconDropdown\\\">\\n        <select class=\\\"fa\\\" [(ngModel)]=\\\"selectedIcon\\\">\\n          <option\\n            class=\\\"fa\\\"\\n            *ngFor=\\\"let icon of iconList\\\"\\n            value=\\\"{{ icon.id }}\\\"\\n            [innerHTML]=\\\"icon.unicode\\\"\\n          ></option>\\n        </select>\\n        <br />\\n        <br />\\n        <div class=\\\"button-group\\\">\\n          <button\\n            matDialogClose\\n            color=\\\"primary\\\"\\n            mat-raised-button\\n            (click)=\\\"saveIcon(selectedIcon)\\\"\\n          >\\n            Save\\n          </button>\\n          <button matDialogClose mat-button>Cancel</button>\\n        </div>\\n      </div>\\n    </ng-template>\\n  </div>\\n  <!-- subitem -->\\n</div>\\n<!-- select-group -->\\n\"","export default \":host #current-project-form {\\n  display: flex;\\n  flex-direction: column;\\n  text-align: center;\\n  padding: 5em;\\n}\"","export default \"\"","export default \":host {\\n  min-height: 20em;\\n}\\n:host .fileslisting {\\n  height: 20em;\\n  overflow-y: scroll;\\n  padding: 0px 20px;\\n}\\n:host .file-row {\\n  display: flex;\\n  background: #f9f9f9;\\n  border: 1px solid transparent;\\n  user-select: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n}\\n:host .clickable {\\n  flex: 1;\\n  max-width: 20em;\\n}\\n:host .size {\\n  align-items: flex-end;\\n}\\n:host .file-row:hover {\\n  border: 1px solid;\\n}\\n:host .file-row.selected {\\n  background: #d3d3d3;\\n}\\n.error {\\n  background-color: red;\\n  color: white;\\n}\\n.lineBreak {\\n  max-width: 350px;\\n  word-break: break-word;\\n}\"","export default \":host .active-project {\\n  background-color: #1aff8c;\\n}\\n:host .menu button.dropdown.button {\\n  padding: 0.85em 1em;\\n}\\n:host .button.tiny {\\n  margin: 0;\\n}\\n:host .current-project {\\n  padding: 30px;\\n  font-size: 14px;\\n}\\n:host .goods {\\n  height: 27px;\\n  margin: 0px;\\n  padding: 0px;\\n}\\n:host .toggler {\\n  margin-left: 10px;\\n}\\n:host .picker {\\n  display: inline-block;\\n}\\n:host .group-bar {\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .path-buttons {\\n  text-align: center;\\n}\\n:host .project-menu {\\n  margin-left: 10px;\\n}\\n:host .top-bar {\\n  position: fixed;\\n  margin-top: -50px;\\n  height: 50px;\\n  z-index: 999;\\n}\\n:host .top-bar-right .top-bar-left {\\n  -webkit-box-flex: 0;\\n  flex-wrap: nowrap;\\n  flex: 0 1 auto;\\n  max-width: 100%;\\n}\\n:host .my-button {\\n  border-radius: 5px;\\n  padding: 5px;\\n}\\n:host .button-spacing {\\n  margin-right: 15px;\\n}\\n@media print, screen and (min-width: 40em) {\\n  :host .top-bar {\\n    flex-wrap: nowrap;\\n    flex: 0 1 auto;\\n  }\\n}\\n:host .example-spacer {\\n  flex: 1 1 auto;\\n}\"","export default \"<mat-toolbar class=\\\"top-bar\\\" color=\\\"primary\\\">\\n  <img src=\\\"assets/logo.svg\\\" width=\\\"40PX\\\" />\\n  <span style=\\\"color: white\\\">Taggit</span>\\n\\n  <button\\n    mat-icon-button\\n    [matMenuTriggerFor]=\\\"project\\\"\\n    color=\\\"foreground\\\"\\n    class=\\\"project-menu\\\"\\n  >\\n    <mat-icon>menu</mat-icon>\\n  </button>\\n\\n  <mat-menu #project=\\\"matMenu\\\">\\n    <span\\n      mat-menu-item\\n      *ngIf=\\\"selectedProject\\\"\\n      (click)=\\\"openProjectModal(selectedProject)\\\"\\n    >\\n      Current Gallery : {{ selectedProject.name }}\\n    </span>\\n    <button mat-menu-item (click)=\\\"openCreateProjectModal()\\\">\\n      Create Gallery\\n    </button>\\n    <button mat-menu-item [matMenuTriggerFor]=\\\"projectList\\\">\\n      Select Gallery\\n    </button>\\n    <button mat-menu-item (click)=\\\"openFilePicker(test)\\\">File Browser</button>\\n    <button mat-menu-item [matMenuTriggerFor]=\\\"saveOptions\\\">Save as</button>\\n  </mat-menu>\\n\\n  <mat-menu #projectList=\\\"matMenu\\\">\\n    <button\\n      mat-menu-item\\n      class=\\\"clickable\\\"\\n      *ngFor=\\\"let p of projects\\\"\\n      (click)=\\\"selectProject(p)\\\"\\n      [ngClass]=\\\"{ 'active-project': p === selectedProject }\\\"\\n    >\\n      {{ p.name }}\\n    </button>\\n  </mat-menu>\\n\\n  <mat-menu #saveOptions=\\\"matMenu\\\">\\n    <button mat-menu-item (click)=\\\"saveFile(0)\\\">CSV file</button>\\n    <button mat-menu-item (click)=\\\"saveFile(1)\\\">JSON file</button>\\n    <button mat-menu-item (click)=\\\"openDownloadSelector()\\\">\\n      Export to DesignSafe\\n    </button>\\n  </mat-menu>\\n\\n  <span class=\\\"example-spacer\\\"></span>\\n\\n  <div *ngIf=\\\"showTagger\\\" class=\\\"path-buttons\\\">\\n    <div class=\\\"slides\\\" style=\\\"line-height: 1; font-size: 12px\\\">\\n      {{ getAssetDisplay() }}\\n      <div class=\\\"lr-buttons\\\" style=\\\"margin-top: 5px\\\">\\n        <i\\n          (click)=\\\"otherPath(false)\\\"\\n          style=\\\"margin-right: 10px; cursor: pointer\\\"\\n          class=\\\"fas fa-angle-left\\\"\\n        ></i>\\n        <i\\n          (click)=\\\"otherPath(true)\\\"\\n          style=\\\"margin-left: 10px; cursor: pointer\\\"\\n          class=\\\"fas fa-angle-right\\\"\\n        ></i>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <span class=\\\"example-spacer\\\"></span>\\n\\n  <div class=\\\"group-bar grid-x align-right\\\">\\n    <button\\n      mat-raised-button\\n      class=\\\"button-spacing\\\"\\n      [disabled]=\\\"selectedImages.length === 0\\\"\\n      (click)=\\\"clearAll()\\\"\\n    >\\n      Clear Selected\\n    </button>\\n\\n    <!-- A link that looks like a button, links to Hazmapper-->\\n    <a\\n      class=\\\"button-spacing\\\"\\n      mat-raised-button\\n      href=\\\"{{ hazmapperLink }}\\\"\\n      title=\\\"Open your gallery in HazMapper\\\"\\n      target=\\\"_blank\\\"\\n    >\\n      <img src=\\\"assets/hazmapper-header-logo.png\\\" width=\\\"100PX\\\" />\\n    </a>\\n\\n    <button\\n      mat-raised-button\\n      (click)=\\\"openAddGroupModal(addGroupModal)\\\"\\n      *ngIf=\\\"selectedImages.length > 0 && !showTagger\\\"\\n    >\\n      Add Group\\n    </button>\\n\\n    <ng-template #addGroupModal>\\n      <mat-form-field>\\n        <mat-label>Group Name</mat-label>\\n        <input\\n          matInput\\n          placeholder=\\\"Group Name\\\"\\n          (keyup.enter)=\\\"addGroup(groupInput.value)\\\"\\n          #groupInput\\n        />\\n      </mat-form-field>\\n\\n      <div style=\\\"color: #ff0000\\\" *ngIf=\\\"invalidNameError\\\">Invalid Name!</div>\\n      <div style=\\\"color: #ff0000\\\" *ngIf=\\\"existingNameError\\\">Existing Name!</div>\\n      <br />\\n      <br />\\n      <button\\n        mat-raised-button\\n        color=\\\"primary\\\"\\n        (click)=\\\"addGroup(groupInput.value)\\\"\\n      >\\n        Add Group\\n      </button>\\n      <button mat-button matDialogClose color=\\\"secondary\\\">Cancel</button>\\n    </ng-template>\\n  </div>\\n\\n  <button\\n    *ngIf=\\\"groupsExist && !showTagger\\\"\\n    mat-raised-button\\n    style=\\\"margin-left: 15px\\\"\\n    (click)=\\\"toggleTagger()\\\"\\n  >\\n    Taggit!\\n  </button>\\n\\n  <button\\n    *ngIf=\\\"showTagger\\\"\\n    mat-raised-button\\n    style=\\\"margin-left: 15px\\\"\\n    (click)=\\\"toggleTagger()\\\"\\n  >\\n    Gallery\\n  </button>\\n</mat-toolbar>\\n\"","export default \"<div *ngFor=\\\"let opt of form.options\\\" [id]=\\\"form.label\\\" class=\\\"input-group\\\">\\n  <div class=\\\"form-check form-check\\\">\\n    <label class=\\\"form-check-label\\\">\\n      <input\\n        class=\\\"form-check-input\\\"\\n        type=\\\"checkbox\\\"\\n        [checked]=\\\"isChecked(opt)\\\"\\n        id=\\\"inlineCheckbox1\\\"\\n        value=\\\"{{ opt.label }}\\\"\\n        (change)=\\\"selected($event, opt)\\\"\\n      />\\n      {{ opt.label }}\\n    </label>\\n  </div>\\n</div>\\n\"","export default \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-notfound',\n  templateUrl: './notfound.component.html',\n  styleUrls: ['./notfound.component.scss'],\n})\nexport class NotFoundComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","export enum EnvironmentType {\n  Production = 'production',\n  Staging = 'staging',\n  Local = 'local',\n}\n","import {\n  Feature as GeoJSONFeature,\n  GeoJsonProperties,\n  Geometry,\n  FeatureCollection as IFeatureCollection,\n} from 'geojson';\n\n// TODO: break these out into their own files\n\nexport interface IPointCloud {\n  id: number;\n  description: string;\n  conversion_parameters: string;\n  feature_id?: number;\n  task_id?: string;\n  project_id: number;\n}\n\n// export interface Group {\n//   groupName: Array<string>;\n//   formList: Array<any>;\n//   // type: any;\n// }\n\n// export interface Group {\n//   groupName: Array<string>;\n//   formList: Array<any>;\n//   // type: any;\n// }\n\nexport interface Group {\n  groupName: string;\n  formList: Array<any>;\n  color: string;\n  // type: any;\n}\n\nexport class Group implements Group {}\n\nexport interface TagGroup {\n  name: string;\n  id?: number;\n  color?: string;\n  icon?: string;\n  forms?: GroupForm[];\n}\n\nexport class TagGroup implements TagGroup {}\n\nexport interface GroupForm {\n  id?: string;\n  groupName?: string;\n  label?: string;\n  color?: string;\n  type?: string;\n  options?: Array<any>;\n}\n\nexport class GroupForm implements GroupForm {}\n\nexport interface Tag {\n  id?: string;\n  value?: any;\n}\n\nexport class Tag implements Tag {}\n\n// NOTE: For geojson/tag\nexport interface TagValue {\n  id: number;\n  featureId?: number;\n  tagId?: number;\n  groupId?: string;\n  value?: Array<any> | string | number;\n}\n\nexport class TagValue implements TagValue {}\n\nexport class AssetFilters {\n  // bbox has the following format: [sw_lng, sw_lat, ne_lng, ne_lat], the same as leaflet\n  bbox: Array<number> = [];\n  assetType: Set<string> = new Set<string>();\n\n  updateAssetTypes(assetType: string) {\n    this.assetType.has(assetType)\n      ? this.assetType.delete(assetType)\n      : this.assetType.add(assetType);\n  }\n\n  updateBBox(bbox: Array<number>): void {\n    this.bbox = bbox;\n  }\n\n  toJson() {\n    return {\n      assetType: [...this.assetType],\n      bbox: this.bbox,\n    };\n  }\n}\n\nexport interface Project {\n  description: string;\n  id?: number;\n  name: string;\n  ds_id?: string;\n  title?: string;\n  uuid?: string;\n  public?: boolean;\n  system_file?: string;\n  system_id?: string;\n  system_path?: string;\n  deletable?: boolean;\n  deleting?: boolean;\n  deletingFailed?: boolean;\n}\n\nexport class Project implements Project {}\n\nexport interface ProjectRequest {\n  project: Project;\n  observable?: boolean;\n  watch_content?: boolean;\n}\n\nexport class ProjectRequest implements ProjectRequest {}\n\nexport class AuthToken {\n  token: string;\n  expires: Date;\n  /**\n   *\n   * @param token : String\n   * @param expires: Date\n   */\n  constructor(token: string, expires: Date) {\n    this.token = token;\n    this.expires = new Date(expires);\n  }\n\n  static fromExpiresIn(token: string, expires_in: number) {\n    const expires = new Date(new Date().getTime() + expires_in * 1000);\n    return new AuthToken(token, expires);\n  }\n\n  /**\n   * Checks if the token is expired or not\n   */\n  public isExpired(): boolean {\n    return new Date().getTime() > this.expires.getTime();\n  }\n}\n\nexport interface IFeatureAsset {\n  id?: number;\n  path?: string;\n  uuid?: string;\n  feature_id?: number;\n  asset_type?: string;\n  display_path?: string;\n}\n\nexport class FeatureAsset implements IFeatureAsset {\n  id: number;\n  path: string;\n  uuid: string;\n  feature_id: number;\n  asset_type: string;\n  display_path: string;\n\n  // TODO: Implenent this\n  get assetPath(): string {\n    return '';\n  }\n}\n\nexport interface FeatureStyles {\n  // [key: string]?: string | number;\n  faIcon?: string;\n  color?: string;\n}\n\nexport class FeatureStyles implements FeatureStyles {}\n\nexport interface Overlay {\n  id: number;\n  path: string;\n  uuid: string;\n  minLon: number;\n  minLat: number;\n  maxLon: number;\n  maxLat: number;\n  project_id: number;\n  label: string;\n}\n\ninterface AppGeoJSONFeature extends GeoJSONFeature {\n  assets?: Array<IFeatureAsset>;\n  styles?: FeatureStyles;\n  project_id?: number;\n  // featureType?(): String\n}\n\nexport class FeatureCollection implements IFeatureCollection {\n  features: Feature[];\n  type: any;\n}\n\nexport class Feature implements AppGeoJSONFeature {\n  geometry: Geometry;\n  // Taggit specific:\n  // properties.tags: Tag[]\n  // properties.groups: Group[]\n  // properties.values: TagValue[]\n  properties: GeoJsonProperties;\n  id?: string | number;\n  type: any;\n  assets?: Array<IFeatureAsset>;\n  styles?: FeatureStyles;\n  project_id?: number;\n\n  constructor(f: AppGeoJSONFeature) {\n    this.geometry = f.geometry;\n    this.properties = f.properties;\n    this.id = f.id;\n    this.type = f.type;\n    this.assets = f.assets;\n    this.styles = f.styles;\n    this.project_id = f.project_id;\n  }\n\n  initialAsset?() {\n    return this.assets[0];\n  }\n\n  featureType?(): string {\n    if (this.assets && this.assets.length === 1) {\n      return this.initialAsset().asset_type;\n    }\n\n    if (this.assets && this.assets.length > 1) {\n      return 'collection';\n    }\n\n    if (!this.assets.length) {\n      return this.geometry.type;\n    }\n  }\n\n  featurePath?(): string {\n    const initialAsset = this.initialAsset();\n    if (initialAsset.display_path) {\n      return initialAsset.display_path;\n    } else if (initialAsset.path) {\n      return initialAsset.path;\n    } else {\n      return this.id.toString();\n    }\n  }\n\n  featureShortPath?(): string {\n    const [initialAsset] = this.assets;\n    if (initialAsset.display_path) {\n      return /[^/]*$/.exec(initialAsset.display_path)[0];\n    } else if (initialAsset.path) {\n      const path = /[^/]*$/.exec(initialAsset.path)[0];\n      return path.slice(0, 15) + '...';\n    } else {\n      return this.id.toString();\n    }\n  }\n}\n\nexport interface IProjectUser {\n  id: number;\n  username: string;\n}\n","import { EnvironmentType } from './environmentType';\n\nexport interface AppEnvironment {\n  production: boolean;\n  apiUrl: string;\n  jwt?: string;\n  clientId: string;\n  baseHref: string;\n  backend: EnvironmentType;\n}\n\nexport const environment: AppEnvironment = {\n  production: true,\n  apiUrl: 'https://agave.designsafe-ci.org/geo/v2/',\n  clientId: 'jHXnvsmQQcmP43qlrG7ATaxFXHQa',\n  baseHref: '/',\n  backend: EnvironmentType.Production,\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { AuthToken } from '../models/models';\nimport { environment } from '../../environments/environment';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { Router } from '@angular/router';\n\nexport class AuthenticatedUser {\n  public readonly username: string;\n  public readonly email: string;\n  private _token: AuthToken;\n\n  constructor(username: string, email: string) {\n    this.username = username;\n    this.email = email;\n  }\n}\n\ninterface OpenIDUser {\n  name: string;\n  email: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private _currentUser: ReplaySubject<AuthenticatedUser> =\n    new ReplaySubject<AuthenticatedUser>(1);\n  public readonly currentUser: Observable<AuthenticatedUser> =\n    this._currentUser.asObservable();\n  userToken: AuthToken;\n  private LS_TOKEN_KEY = 'hazmapperToken';\n  private LS_USER_KEY = 'hazmapperUser';\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  public login() {\n    // First, check if the user has a token in localStorage\n    const tokenStr = localStorage.getItem(this.LS_TOKEN_KEY);\n    if (!tokenStr) {\n      this.redirectToauthenticaor();\n    } else {\n      const token = JSON.parse(tokenStr);\n      this.userToken = new AuthToken(token.token, new Date(token.expires));\n      if (!this.userToken || this.userToken.isExpired()) {\n        this.logout();\n        this.redirectToauthenticaor();\n      }\n      this.getUserInfo();\n    }\n  }\n\n  private redirectToauthenticaor() {\n    const client_id = environment.clientId;\n    const callback = location.origin + environment.baseHref + 'callback';\n    const state = Math.random().toString(36);\n    const AUTH_URL = `https://agave.designsafe-ci.org/authorize?scope=openid&client_id=${client_id}&response_type=token&redirect_uri=${callback}&state=${state}`;\n    window.location.href = AUTH_URL;\n  }\n\n  /**\n   * Checks to make sure that the user has a token and the token is not expired;\n   */\n  public isLoggedIn(): boolean {\n    return this.userToken && !this.userToken.isExpired();\n  }\n\n  public logout(): void {\n    this.userToken = null;\n    localStorage.removeItem(this.LS_TOKEN_KEY);\n    localStorage.removeItem(this.LS_USER_KEY);\n  }\n\n  public setToken(token: string, expires: number): void {\n    this.userToken = AuthToken.fromExpiresIn(token, expires);\n    localStorage.setItem(this.LS_TOKEN_KEY, JSON.stringify(this.userToken));\n    // hit the wso2 api to retrieve the username etc\n    this.router.navigate(['/']);\n  }\n\n  public getUserInfo() {\n    const INFO_URL = `https://agave.designsafe-ci.org/oauth2/userinfo?schema=openid`;\n    const userStr = localStorage.getItem(this.LS_USER_KEY);\n    const user = JSON.parse(userStr);\n    if (user !== null) {\n      this._currentUser.next(new AuthenticatedUser(user.username, user.email));\n    } else {\n      this.http.get<OpenIDUser>(INFO_URL).subscribe((resp) => {\n        const u = new AuthenticatedUser(resp.name, resp.email);\n        localStorage.setItem(this.LS_USER_KEY, JSON.stringify(u));\n        this._currentUser.next(u);\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { ToastrService } from 'ngx-toastr';\nimport { HttpClient } from '@angular/common/http';\nimport { INotification } from '../models/notification';\nimport { interval, Observable, ReplaySubject } from 'rxjs';\nimport { AuthService } from '../services/authentication.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationsService {\n  // Interval time to get notifications in millisecs\n  private TIMEOUT = 5000;\n  private _notifications: ReplaySubject<Array<INotification>> =\n    new ReplaySubject<Array<INotification>>(1);\n  public readonly notifications: Observable<Array<INotification>> =\n    this._notifications.asObservable();\n\n  constructor(\n    private toastr: ToastrService,\n    private http: HttpClient,\n    private authService: AuthService\n  ) {\n    if (this.authService.isLoggedIn()) {\n      const timer = interval(this.TIMEOUT);\n      timer.subscribe((next) => {\n        this.getRecent();\n      });\n    }\n  }\n\n  // Sends a request to GeoAPI to retrieve recent notifications\n  getRecent(): void {\n    const baseUrl = environment.apiUrl + 'notifications/';\n    const now = new Date();\n    const then = new Date(now.getTime() - this.TIMEOUT);\n\n    this.http\n      .get<Array<INotification>>(baseUrl + `?startDate=${then.toISOString()}`)\n      .subscribe((notes) => {\n        this._notifications.next(notes);\n        notes.forEach((note) => {\n          switch (note.status) {\n            case 'success':\n              this.showSuccessToast(note.message);\n              break;\n            case 'error':\n              this.showErrorToast(note.message);\n              break;\n            default:\n              break;\n          }\n        });\n      });\n  }\n\n  showSuccessToast(message: string): void {\n    this.toastr.success(message);\n  }\n\n  showImportErrorToast(message: string): void {\n    this.toastr.error(message + ', trying alternate method');\n  }\n\n  showErrorToast(message: string): void {\n    this.toastr.error(message);\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScrollService {\n  constructor() {}\n\n  public scrollRestored = true; // if true, the scroll was restored to the proper place\n  public scrollPosition = 0;\n\n  setScrollRestored(change: boolean) {\n    this.scrollRestored = change;\n  }\n\n  setScrollPosition() {\n    this.scrollPosition = document.documentElement.scrollTop;\n  }\n\n  scroll() {\n    // Attempts to scroll to the specified location\n    document.documentElement.scroll({ top: this.scrollPosition });\n    // if it reaches there, marks the check as complete\n    if (document.documentElement.scrollTop == this.scrollPosition) {\n      this.scrollRestored = false;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { LatLng } from 'leaflet';\nimport {\n  AssetFilters,\n  FeatureAsset,\n  FeatureStyles,\n  IFeatureAsset,\n  IPointCloud,\n  Overlay,\n  TagGroup,\n  Tag,\n  TagValue,\n  GroupForm,\n} from '../models/models';\nimport { Feature, FeatureCollection } from '../models/models';\nimport { environment } from '../../environments/environment';\nimport { Form } from '@angular/forms';\nimport { take } from 'rxjs/operators';\nimport * as querystring from 'querystring';\nimport { RemoteFile } from 'ng-tapis';\nimport { NotificationsService } from './notifications.service';\nimport { ScrollService } from './scroll.service';\nimport { getRandomColor } from '../utils/randomColor';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GeoDataService {\n  // TODO: clean this up and put the observables up here. Also look into Replay/Behavior\n  // TODO: Go over this and remove all unused functions, a lot of this was copy/pasted over from Hazmapper without a second thought\n  private _features: BehaviorSubject<FeatureCollection>;\n  private features$: Observable<FeatureCollection>;\n  private _activeFeature: BehaviorSubject<any>;\n  private _mapMouseLocation: BehaviorSubject<any>;\n  private _basemap: BehaviorSubject<any>;\n  private _overlays: BehaviorSubject<any>;\n  private _activeOverlay: BehaviorSubject<any>;\n  private _pointClouds: BehaviorSubject<Array<IPointCloud>> =\n    new BehaviorSubject<Array<IPointCloud>>(null);\n  public readonly pointClouds: Observable<Array<IPointCloud>> =\n    this._pointClouds.asObservable();\n  private fileList: Array<RemoteFile>;\n\n  private _loaded: BehaviorSubject<boolean> = new BehaviorSubject(null);\n  public loaded: Observable<boolean> = this._loaded.asObservable();\n\n  private _activeGroupId: BehaviorSubject<number> = new BehaviorSubject(null);\n  public activeGroupId: Observable<number> = this._activeGroupId.asObservable();\n\n  private _activeGroup: BehaviorSubject<TagGroup> = new BehaviorSubject(null);\n  public activeGroup: Observable<TagGroup> = this._activeGroup.asObservable();\n\n  private _activeGroupFeature: BehaviorSubject<any> = new BehaviorSubject<any>(\n    null\n  );\n  public activeGroupFeature: Observable<any> =\n    this._activeGroupFeature.asObservable();\n\n  private _groups: BehaviorSubject<Map<string, TagGroup>> = new BehaviorSubject(\n    null\n  );\n  public groups: Observable<Map<string, TagGroup>> =\n    this._groups.asObservable();\n\n  private _groupsFeatures: BehaviorSubject<Map<string, Feature[]>> =\n    new BehaviorSubject(null);\n  public groupsFeatures: Observable<Map<string, Feature[]>> =\n    this._groupsFeatures.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private notificationsService: NotificationsService,\n    private scrollService: ScrollService\n  ) {\n    this._features = new BehaviorSubject<FeatureCollection>({\n      type: 'FeatureCollection',\n      features: [],\n    });\n    this.features$ = this._features.asObservable();\n    this._activeFeature = new BehaviorSubject<any>(null);\n    this._mapMouseLocation = new BehaviorSubject<any>(null);\n\n    // For the style of the basemap, defaults to OpenStreetmap\n    this._basemap = new BehaviorSubject<any>('roads');\n\n    // Holds all of the overlays on a project\n    this._overlays = new BehaviorSubject<any>(null);\n    this._activeOverlay = new BehaviorSubject<any>(null);\n  }\n\n  getFeature(\n    projectId: number,\n    feature: Feature\n  ): Observable<FeatureCollection> {\n    return this.http.get<FeatureCollection>(\n      environment.apiUrl + `/projects/${projectId}/features/${feature.id}/`\n    );\n  }\n\n  getFeatures(\n    projectId: number,\n    query: AssetFilters = new AssetFilters(),\n    restoreScroll = false\n  ): void {\n    const qstring: string = querystring.stringify(query.toJson());\n    this.http\n      .get<FeatureCollection>(\n        environment.apiUrl + `/projects/${projectId}/features/` + '?' + qstring\n      )\n      .subscribe(\n        (fc: FeatureCollection) => {\n          fc.features = fc.features.map((feat: Feature) => new Feature(feat));\n          this.getGroups(fc.features);\n          this._features.next(fc);\n          this._loaded.next(true);\n\n          if (restoreScroll) {\n            this.scrollService.setScrollRestored(true);\n          }\n        },\n        (error) => {\n          this.notificationsService.showErrorToast(\n            'Failed to retrieve project data! Geoapi might be down.'\n          );\n        }\n      );\n  }\n\n  deleteFeature(feature: Feature) {\n    this.http\n      .delete(\n        environment.apiUrl +\n          `projects/${feature.project_id}/features/${feature.id}/`\n      )\n      .subscribe((resp) => {\n        this.getFeatures(feature.project_id, new AssetFilters(), true);\n      });\n  }\n\n  getPointClouds(projectId: number) {\n    this.http\n      .get<Array<IPointCloud>>(\n        environment.apiUrl + `/projects/${projectId}/point-cloud/`\n      )\n      .subscribe((resp) => {\n        this._pointClouds.next(resp);\n      });\n  }\n\n  setActiveGroup(group: TagGroup): void {\n    this._activeGroup.next(group);\n    if (group) {\n      const groupFeatures = this._groupsFeatures.value.get(group.name);\n      if (\n        !this._activeGroupFeature.value ||\n        !groupFeatures.some((gf) => this._activeGroupFeature.value.id === gf.id)\n      ) {\n        this.setActiveGroupFeature(groupFeatures[0]);\n      }\n    } else {\n      this.setActiveGroupFeature(null);\n    }\n  }\n\n  setActiveGroupFeature(feat: any): void {\n    this._activeGroupFeature.next(feat);\n  }\n\n  addFeature(feat: Feature): void {\n    this.features$.pipe(take(1)).subscribe((current: FeatureCollection) => {\n      current.features.push(feat);\n      this._features.next(current);\n    });\n  }\n\n  addPointCloud(\n    projectId: number,\n    title: string,\n    conversionParams: string\n  ): void {\n    const payload = {\n      description: title,\n      conversion_parameters: conversionParams,\n    };\n    this.http\n      .post(environment.apiUrl + `/projects/${projectId}/point-cloud/`, payload)\n      .subscribe(\n        (resp) => {\n          this.getPointClouds(projectId);\n        },\n        (error) => {\n          this.notificationsService.showErrorToast(\n            'Failed to update image property!'\n          );\n        }\n      );\n  }\n\n  updateFeatureProperty(\n    projectId: number,\n    featureId: string | number,\n    groupData: any\n  ): void {\n    this.http\n      .post(\n        environment.apiUrl +\n          `projects/${projectId}/features/${featureId}/properties/`,\n        groupData\n      )\n      .subscribe(\n        (resp) => {\n          this.getFeatures(projectId);\n        },\n        (error) => {\n          this.notificationsService.showErrorToast(\n            'Failed to save tag values!'\n          );\n        }\n      );\n  }\n\n  // NOTE: unused for now\n  updateFeatureStyles(\n    projectId: number,\n    featureId: string | number,\n    styles: FeatureStyles\n  ): void {\n    this.http\n      .post(\n        environment.apiUrl +\n          `/projects/${projectId}/features/${featureId}/styles/`,\n        styles\n      )\n      .subscribe(\n        (resp) => {\n          this.getFeatures(projectId);\n        },\n        (error) => {\n          this.notificationsService.showErrorToast(\n            'Failed to update image style!'\n          );\n        }\n      );\n  }\n\n  deletePointCloud(pc: IPointCloud): void {\n    this.http\n      .delete(\n        environment.apiUrl + `/projects/${pc.project_id}/point-cloud/${pc.id}/`\n      )\n      .subscribe((resp) => {\n        this.getPointClouds(pc.project_id);\n      });\n  }\n\n  addFileToPointCloud(pc: IPointCloud, file: File) {\n    const form = new FormData();\n    form.append('file', file);\n    this.http\n      .post(\n        environment.apiUrl + `/projects/${pc.project_id}/point-cloud/${pc.id}/`,\n        form\n      )\n      .subscribe((resp) => {\n        console.log(resp);\n      });\n  }\n\n  // This function updates the underlying observable, so changes naturally flow to feature service\n  importFileFromTapis(projectId: number, files: Array<RemoteFile>): void {\n    const tmp = files.map((f) => ({ system: f.system, path: f.path }));\n    const payload = {\n      files: tmp,\n    };\n    this.fileList = tmp;\n    this.http\n      .post(\n        environment.apiUrl + `projects/${projectId}/features/files/import/`,\n        payload\n      )\n\n      .subscribe(\n        (resp) => {\n          this.notificationsService.showSuccessToast('Import started!');\n        },\n        (error) => {\n          this.notificationsService.showImportErrorToast(\n            'Import failed! Try again?'\n          );\n        }\n      );\n  }\n\n  // An alternate function for importing images with no GPS data. A feature is created elsewhere, and the image is added to the feature\n  // Inputs:\n  // projectId: Id number of current project\n  // features: A pre-created feature with user-defined or zeroed out gps data\n  // file: A Tapis Remote File containing the image to be imported\n  importImage(projectId: number, feature: Feature, path: string): void {\n    const featureId = feature.id;\n    let file;\n    this.fileList.forEach((remoteFile) => {\n      if (remoteFile.path == path) {\n        file = remoteFile;\n      }\n    });\n    const payload = { system_id: file.system, path: file.path };\n    this.http\n      .post(\n        environment.apiUrl +\n          `projects/${projectId}/features/${featureId}/assets/`,\n        payload\n      )\n      .subscribe((resp) => {\n        this.notificationsService.showSuccessToast('Import started!');\n        // this.getFeatures(projectId)\n      });\n  }\n\n  // Creates a new feature from an uploaded locally created feature\n  uploadNewFeature(projectId: number, feature: Feature, path: string): void {\n    const payload = feature;\n    let response;\n    // Calls the addFeatureAsset route in GeoAPI, resp is a list of features\n    this.http\n      .post(environment.apiUrl + `projects/${projectId}/features/`, payload)\n      .subscribe((resp) => {\n        response = new Feature(resp[0]);\n        this.importImage(projectId, response, path);\n      });\n  }\n\n  downloadGeoJSON(projectId: number, query: AssetFilters = new AssetFilters()) {\n    const qstring: string = querystring.stringify(query.toJson());\n    const downloadLink = document.createElement('a');\n\n    this.http\n      .get<FeatureCollection>(\n        environment.apiUrl + `/projects/${projectId}/features/` + '?' + qstring\n      )\n      .subscribe((resp) => {\n        const blob = new Blob([JSON.stringify(resp)], {\n          type: 'application/json',\n        });\n        downloadLink.href = URL.createObjectURL(blob);\n        downloadLink.setAttribute('download', 'hazmapper.json');\n        document.body.appendChild(downloadLink);\n        downloadLink.click();\n        document.body.removeChild(downloadLink);\n      });\n  }\n\n  uploadFile(projectId: number, file: File): void {\n    const form: FormData = new FormData();\n    form.append('file', file, file.name);\n    this.http\n      .post<Array<Feature>>(\n        environment.apiUrl + `/projects/${projectId}/features/files/`,\n        form\n      )\n      .subscribe(\n        (feats) => {\n          feats.forEach((feat) => {\n            this.addFeature(new Feature(feat));\n          });\n        },\n        (error) => {\n          // TODO: Add notification\n        }\n      );\n  }\n\n  uploadAssetFile(projectId: number, featureId: number, file: File): void {\n    const form: FormData = new FormData();\n    form.append('file', file, file.name);\n    this.http\n      .post<Feature>(\n        environment.apiUrl +\n          `/api/projects/${projectId}/features/${featureId}/assets/`,\n        form\n      )\n      .subscribe(\n        (feature) => {\n          // TODO workaround to update activeFeature\n          const f = this._activeFeature.getValue();\n          if (f && f.id === featureId) {\n            this.activeFeature = new Feature(feature);\n            this.getFeatures(projectId);\n          }\n        },\n        (error) => {\n          // TODO: Add notification\n        }\n      );\n  }\n\n  getOverlays(projectId: number): void {\n    this.http\n      .get(environment.apiUrl + `/projects/${projectId}/overlays/`)\n      .subscribe((ovs: Array<Overlay>) => {\n        this._overlays.next(ovs);\n      });\n  }\n\n  addOverlay(\n    projectId: number,\n    file: File,\n    label: string,\n    minLat: number,\n    maxLat: number,\n    minLon: number,\n    maxLon: number\n  ) {\n    const payload = new FormData();\n    payload.append('file', file);\n    payload.append('label', label);\n    payload.append('minLat', minLat.toFixed(6));\n    payload.append('maxLat', maxLat.toFixed(6));\n    payload.append('minLon', minLon.toFixed(6));\n    payload.append('maxLon', maxLon.toFixed(6));\n\n    this.http\n      .post(environment.apiUrl + `/projects/${projectId}/overlays/`, payload)\n      .subscribe((resp) => {\n        this.getOverlays(projectId);\n      });\n  }\n\n  // Call on getFeatures (each time feature update)\n  getGroups(featureList: Feature[]): void {\n    const groups = new Map<string, TagGroup>();\n    const groupsFeatures = new Map<string, Feature[]>();\n    featureList\n      .filter(\n        (feat: Feature) =>\n          feat.properties.group && feat.properties.group.length > 0\n      )\n      .forEach((feat: Feature) => {\n        feat.properties.group.forEach((group: TagGroup) => {\n          groupsFeatures.set(\n            group.name,\n            groupsFeatures.has(group.name)\n              ? [...groupsFeatures.get(group.name), feat]\n              : [feat]\n          );\n          groups.set(group.name, group);\n        });\n      });\n    this._groups.next(groups);\n    this._groupsFeatures.next(groupsFeatures);\n    const activeGroup = this._activeGroup.value;\n    if (activeGroup) {\n      this.setActiveGroup(groups.get(activeGroup.name));\n    }\n  }\n\n  getGroup(groupName: string) {\n    return this._groups.value.get(groupName);\n  }\n\n  getGroupFeatures(featureList: Feature[], group: TagGroup) {\n    return featureList.filter(\n      (feat: Feature) =>\n        feat.properties.group &&\n        feat.properties.group.length &&\n        feat.properties.group.some((grp: TagGroup) => grp.id === group.id)\n    );\n  }\n\n  private createGroup(\n    featureList: Feature[],\n    group: TagGroup,\n    style?: FeatureStyles\n  ): Feature[] {\n    return featureList.map((feat: Feature) => {\n      let groupProp = feat.properties.group ? feat.properties.group : [];\n      groupProp = groupProp.filter((grp: TagGroup) => grp.id !== group.id);\n      groupProp.push(group);\n      feat.properties.group = groupProp;\n      feat.properties.style = style\n        ? style\n        : feat.properties.style\n        ? feat.properties.style\n        : {};\n\n      return feat;\n    });\n  }\n\n  private updateGroup(\n    featureList: Feature[],\n    group: TagGroup,\n    style?: FeatureStyles\n  ): Feature[] {\n    return this.getGroupFeatures(featureList, group).map((feat: Feature) => {\n      const groupProp = feat.properties.group.filter(\n        (grp: TagGroup) => grp.id !== group.id\n      );\n      groupProp.push(group);\n      feat.properties.group = groupProp;\n      feat.properties.style = style\n        ? style\n        : feat.properties.style\n        ? feat.properties.style\n        : {};\n\n      return feat;\n    });\n  }\n\n  private deleteGroup(featureList: Feature[], group: TagGroup): Feature[] {\n    return this.getGroupFeatures(featureList, group).map((feat: Feature) => {\n      feat.properties.group = feat.properties.group.filter(\n        (grp: TagGroup) => grp.id !== group.id\n      );\n      return feat;\n    });\n  }\n\n  createNewGroup(projectId: number, featureList: Feature[], name: string) {\n    const id = uuidv4();\n    const myRandColor: string = getRandomColor();\n    const group: TagGroup = {\n      id,\n      name,\n      color: myRandColor,\n      icon: 'fa-house-damage',\n    };\n    const style = {\n      color: myRandColor,\n      faIcon: 'fa-house-damage',\n    };\n    this.createGroupFeatures(projectId, featureList, group, style);\n    return group;\n  }\n\n  createGroupFeatures(\n    projectId: number,\n    featureList: Feature[],\n    group: TagGroup,\n    style?: FeatureStyles\n  ) {\n    if (style) {\n      this.createGroup(featureList, group, style).forEach((feat: Feature) => {\n        this.updateFeatureProperty(projectId, feat.id, feat.properties);\n      });\n    } else {\n      this.createGroup(featureList, group).forEach((feat: Feature) => {\n        this.updateFeatureProperty(projectId, feat.id, feat.properties);\n      });\n    }\n  }\n\n  deleteGroupFeatures(\n    projectId: number,\n    featureList: Feature[],\n    group: TagGroup\n  ) {\n    this.deleteGroup(featureList, group).forEach((feat: Feature) => {\n      this.updateFeatureProperty(projectId, feat.id, feat.properties);\n    });\n  }\n\n  updateGroupFeatures(\n    projectId: number,\n    featureList: Feature[],\n    group: TagGroup,\n    style?: FeatureStyles\n  ) {\n    if (style) {\n      this.updateGroup(featureList, group, style).forEach((feat: Feature) => {\n        this.updateFeatureProperty(projectId, feat.id, feat.properties);\n      });\n    } else {\n      this.updateGroup(featureList, group).forEach((feat: Feature) => {\n        this.updateFeatureProperty(projectId, feat.id, feat.properties);\n      });\n    }\n  }\n\n  renameGroup(\n    projectId: number,\n    featureList: Feature[],\n    group: TagGroup,\n    name: string\n  ): void {\n    const renamedGroup = {\n      ...group,\n      name,\n    };\n\n    this.updateGroupFeatures(projectId, featureList, renamedGroup);\n  }\n\n  reiconGroup(\n    projectId: number,\n    featureList: Feature[],\n    group: TagGroup,\n    icon: string\n  ): void {\n    const reiconedGroup = {\n      ...group,\n      icon,\n    };\n\n    const reiconedStyle = {\n      faIcon: icon,\n      color: group.color ? group.color : '#00C8FF',\n    };\n\n    this.updateGroupFeatures(\n      projectId,\n      featureList,\n      reiconedGroup,\n      reiconedStyle\n    );\n  }\n\n  public get overlays(): Observable<Array<Overlay>> {\n    return this._overlays.asObservable();\n  }\n\n  public get features(): Observable<FeatureCollection> {\n    return this._features.asObservable();\n  }\n\n  public get activeFeature() {\n    return this._activeFeature.asObservable();\n  }\n\n  // TODO: This is heinous\n  public set activeFeature(f: any) {\n    if (f) {\n      if (f === this._activeFeature.getValue()) {\n        this._activeFeature.next(null);\n      } else {\n        this._activeFeature.next(f);\n      }\n    } else {\n      this._activeFeature.next(null);\n    }\n  }\n\n  public get activeOverlay(): Observable<Overlay> {\n    return this._activeOverlay.asObservable();\n  }\n\n  public set activeOverlay(ov) {\n    this._activeOverlay.next(ov);\n  }\n\n  public get mapMouseLocation(): Observable<LatLng> {\n    return this._mapMouseLocation.asObservable();\n  }\n\n  public set mapMouseLocation(loc) {\n    this._mapMouseLocation.next(loc);\n  }\n\n  public set basemap(bmap) {\n    this._basemap.next(bmap);\n  }\n\n  public get basemap(): any {\n    return this._basemap.asObservable();\n  }\n}\n","export function getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n","import { Component, OnInit } from '@angular/core';\nimport { GeoDataService } from '../../services/geo-data.service';\nimport { Feature } from '../../models/models';\nimport {\n  AuthenticatedUser,\n  AuthService,\n} from '../../services/authentication.service';\nimport { Observable } from 'rxjs';\nimport { BsModalRef, BsModalService } from 'ngx-foundation';\nimport { ModalFileBrowserComponent } from '../modal-file-browser/modal-file-browser.component';\nimport { RemoteFile } from 'ng-tapis';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss'],\n})\nexport class MainComponent implements OnInit {\n  // public activeFeature: Feature;\n  // public currentUser: AuthenticatedUser;\n\n  constructor(\n    private geoDataService: GeoDataService,\n    private authService: AuthService,\n    private bsModalService: BsModalService\n  ) {}\n\n  ngOnInit() {\n    // this.geoDataService.activeFeature.subscribe( next => {\n    //   this.activeFeature = next;\n    // });\n    // this.authService.currentUser.subscribe(next => this.currentUser = next);\n  }\n}\n","import { Component, NgZone, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router, Route } from '@angular/router';\nimport { AuthService } from '../../services/authentication.service';\n\n@Component({\n  selector: 'app-callback',\n  templateUrl: './callback.component.html',\n  styleUrls: ['./callback.component.scss'],\n})\nexport class CallbackComponent implements OnInit {\n  constructor(private route: ActivatedRoute, private auth: AuthService) {}\n\n  ngOnInit() {\n    // TODO: For some reason wso2 is sending back a fragment like #access_token=qadad&expires_in=3600\n    const frag = this.route.snapshot.fragment;\n    const params = new URLSearchParams(frag);\n    const token = params.get('access_token');\n    const expires_in = +params.get('expires_in');\n    this.auth.setToken(token, expires_in);\n  }\n}\n","import { Component, Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { Group, TagGroup, GroupForm, Tag, Project } from '../models/models';\nimport { map, first } from 'rxjs/operators';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { GeoDataService } from './geo-data.service';\nimport { prepareSyntheticListenerFunctionName } from '@angular/compiler/src/render3/util';\nimport { fadeInItems } from '@angular/material';\nimport { Feature, FeatureCollection } from 'geojson';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FormsService {\n  constructor(private geoDataService: GeoDataService) {}\n\n  deleteForm(\n    projectId: number,\n    form: GroupForm,\n    activeGroup: TagGroup,\n    featureGroups: Feature[]\n  ): void {\n    const taggedGroup: TagGroup = {\n      ...activeGroup,\n      forms: activeGroup.forms.filter((t: GroupForm) => t.id !== form.id),\n    };\n\n    this.geoDataService.updateGroupFeatures(\n      projectId,\n      featureGroups,\n      taggedGroup\n    );\n  }\n\n  renameForm(\n    projectId: number,\n    targetForm: GroupForm,\n    activeGroup: TagGroup,\n    featureGroups: Feature[],\n    newName: string\n  ): void {\n    const taggedGroup: TagGroup = {\n      ...activeGroup,\n      forms: [\n        ...activeGroup.forms.filter((form) => form.id !== targetForm.id),\n        { ...targetForm, label: newName },\n      ],\n    };\n\n    this.geoDataService.updateGroupFeatures(\n      projectId,\n      featureGroups,\n      taggedGroup\n    );\n  }\n\n  createForm(\n    projectId: number,\n    form: GroupForm,\n    activeGroup: TagGroup,\n    featureGroups: Feature[]\n  ): void {\n    const id = uuidv4();\n    form = { ...form, id };\n    const taggedGroup: TagGroup = {\n      ...activeGroup,\n      forms: activeGroup.forms ? [...activeGroup.forms, form] : [form],\n    };\n    this.geoDataService.updateGroupFeatures(\n      projectId,\n      featureGroups,\n      taggedGroup\n    );\n  }\n\n  checkDefault(selectedColor: string, feature: any) {\n    if (selectedColor === 'default') {\n      try {\n        selectedColor = feature.styles.color;\n      } catch (error) {\n        selectedColor = '#00C8FF';\n      }\n    }\n    return selectedColor;\n  }\n\n  // Inputs:\n  // color:string A 7 digit hexadecimal string (#RRGGBB) passed in from a color tag\n  // This method accesses group services to retrive the current group's icon as well\n  saveStyles(\n    projectId: number,\n    featureList: Feature[],\n    group: TagGroup,\n    color?: string,\n    icon?: string\n  ) {\n    const style = {\n      color: color ? color : '#00C8FF',\n      faIcon: icon ? icon : group.icon,\n    };\n\n    this.geoDataService.updateGroupFeatures(\n      projectId,\n      featureList,\n      group,\n      style\n    );\n  }\n\n  updateTagValue(\n    activeProject: Project,\n    feature: Feature,\n    form: GroupForm,\n    tagValue: any\n  ) {\n    let tagProp = feature.properties.tags ? feature.properties.tags : [];\n    tagProp = tagProp.filter((tag: Tag) => form.id !== tag.id);\n\n    const tag = {\n      id: form.id,\n      value: tagValue,\n    };\n\n    feature.properties.tags = [...tagProp, tag];\n\n    this.geoDataService.updateFeatureProperty(\n      activeProject.id,\n      feature.id,\n      feature.properties\n    );\n  }\n\n  updateTagValues(\n    activeProject: Project,\n    feature: Feature,\n    formList: GroupForm[],\n    newValues: any[]\n  ) {\n    feature.properties.tags = newValues;\n    this.geoDataService.updateFeatureProperty(\n      activeProject.id,\n      feature.id,\n      feature.properties\n    );\n  }\n\n  getTagValue(feature: Feature, form: GroupForm): any {\n    if (feature.properties.tags) {\n      const tagValueObj = feature.properties.tags.find(\n        (featTag: any) => featTag.id && featTag.id === form.id\n      );\n\n      if (tagValueObj) {\n        return tagValueObj.value;\n      }\n    }\n    if (form.type === 'checkbox') {\n      return [];\n    } else {\n      return '';\n    }\n  }\n}\n\n// TODO: put this in models so we can reference it like we do the Features type\nexport interface tags {\n  type: string;\n  groupName: string;\n  label: string;\n  options: Array<Group>;\n  feature: string | number;\n  extra: Array<Group>;\n  id?: string;\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { ProjectsService } from './projects.service';\nimport { Feature } from '../models/models';\n\n// Will inject Projects and GeoData Service to get properties of Feature\n@Injectable({\n  providedIn: 'root',\n})\nexport class GroupsService {\n  private _selectedImages: BehaviorSubject<Array<any>> = new BehaviorSubject(\n    []\n  );\n  public selectedImages: Observable<Array<any>> =\n    this._selectedImages.asObservable();\n\n  private _showTagger: BehaviorSubject<boolean> = new BehaviorSubject(false);\n  public showTagger: Observable<boolean> = this._showTagger.asObservable();\n\n  private _showTagGenerator: BehaviorSubject<boolean> =\n    new BehaviorSubject<boolean>(false);\n  public showTagGenerator: Observable<boolean> =\n    this._showTagGenerator.asObservable();\n\n  constructor() {}\n\n  imageSelected(feature: Feature): boolean {\n    const currentFeatures = this._selectedImages.value;\n    return currentFeatures.some((feat) => feat.id === feature.id);\n  }\n\n  unselectAllImages() {\n    this._selectedImages.next([]);\n  }\n\n  toggleImageSelect(feature: Feature): void {\n    const currentFeatures = this._selectedImages.value;\n    const newFeatures = this.imageSelected(feature)\n      ? currentFeatures.filter((feat) => feat.id !== feature.id)\n      : [feature, ...currentFeatures];\n\n    this._selectedImages.next(newFeatures);\n  }\n\n  setSelectedImages(selectedImages: any): void {\n    this._selectedImages.next(selectedImages);\n  }\n\n  toggleTagger(): void {\n    this._showTagger.next(!this._showTagger.value);\n  }\n\n  setShowTagGenerator(value: boolean): void {\n    this._showTagGenerator.next(value);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Project, IProjectUser, ProjectRequest } from '../models/models';\nimport { environment } from '../../environments/environment';\nimport { AuthService } from './authentication.service';\nimport { validateBBox } from '@turf/helpers';\nimport { NotificationsService } from './notifications.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProjectsService {\n  private _projects: BehaviorSubject<Project[]> = new BehaviorSubject([]);\n  public readonly projects: Observable<Project[]> =\n    this._projects.asObservable();\n  private _activeProject: ReplaySubject<Project> = new ReplaySubject<Project>(\n    1\n  );\n  public readonly activeProject: Observable<Project> =\n    this._activeProject.asObservable();\n  private _projectUsers: ReplaySubject<Array<IProjectUser>> = new ReplaySubject<\n    Array<IProjectUser>\n  >(1);\n  public readonly projectUsers$: Observable<Array<IProjectUser>> =\n    this._projectUsers.asObservable();\n\n  private _deletingProjects: BehaviorSubject<Project[]> = new BehaviorSubject<\n    Project[]\n  >([]);\n  public deletingProjects: Observable<Project[]> =\n    this._deletingProjects.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService,\n    private notificationsService: NotificationsService\n  ) {}\n\n  testGeoApi(): void {\n    const data = {\n      name: 'Awesome Project',\n      description: 'Cool project',\n    };\n    const prom = this.http\n      .post<Project>(`http://localhost:8888/projects/`, data)\n      .subscribe((resp) => {\n        this._projects.next([...this._projects.value, resp]);\n        // Set the active project to the one just created?\n        this._activeProject.next(resp);\n      });\n\n    this.http\n      .get<Project[]>(`http://localhost:8888/projects/`)\n      .subscribe((resp) => {\n        this._projects.next(resp);\n      });\n  }\n\n  updateProjectsList(resp: Project[] = []) {\n    const myProjs = resp.length !== 0 ? resp : this._projects.value;\n\n    this._deletingProjects.value.length !== 0\n      ? this._projects.next(\n          myProjs.map((p) => {\n            const deletingProj = this._deletingProjects.value.find(\n              (dp) => dp.id === p.id\n            );\n            return deletingProj ? deletingProj : p;\n          })\n        )\n      : this._projects.next(myProjs);\n  }\n\n  // Queries database for all user projects.\n  getProjects(): void {\n    this.http.get<Project[]>(environment.apiUrl + `/projects/`).subscribe(\n      (resp) => {\n        this.updateProjectsList(resp);\n      },\n      (error) => {\n        this.notificationsService.showErrorToast(\n          'Error importing files Design Safe, GeoAPI might be down'\n        );\n      }\n    );\n  }\n\n  create(data: ProjectRequest): Observable<Project> {\n    const prom = this.http.post<Project>(\n      environment.apiUrl + `/projects/`,\n      data\n    );\n    prom.subscribe((proj) => {\n      this._projects.next([...this._projects.value, proj]);\n\n      // Awkward as hell, but this ensures we actually transition to the newly created project\n      // Without this, the screen flickers briefly to the new project, but ends up stuck on the old project\n      this.setActiveProject(proj);\n      this.setActiveProject(proj);\n    });\n    return prom;\n  }\n\n  setActiveProject(proj: Project): void {\n    // saves change as last visited project\n    window.localStorage.setItem('lastProj', JSON.stringify(proj));\n    try {\n      this._activeProject.next(proj);\n    } catch (error) {\n      return error;\n    }\n  }\n\n  update(data: ProjectRequest): void {\n    this.http\n      .put<Project>(environment.apiUrl + `/projects/${data.project.id}/`, data)\n      .subscribe((resp) => {\n        this._activeProject.next(resp);\n      });\n  }\n\n  // Note: This will delete the project for everyone, if the project is shared.\n  delete(data: Project): void {\n    this._deletingProjects.next([\n      ...this._deletingProjects.value,\n      { ...data, deleting: true },\n    ]);\n    this.updateProjectsList();\n\n    this.http.delete(environment.apiUrl + `projects/${data.id}/`).subscribe(\n      (resp) => {\n        window.localStorage.setItem('lastProj', JSON.stringify('none'));\n\n        this._deletingProjects.next(\n          this._deletingProjects.value.filter((p) => p.id !== data.id)\n        );\n        // These next two lines might be causing problems. Adding getProjects causes duplicates during project creation,\n        // So I'm thinking that calling these here might be the root of my delete woes, as they're restoring the project I just\n        // deleted...\n        this.updateProjectsList();\n        this.getProjects();\n        // As elegant as a brick to the face, but this solves the delete issues...\n        window.localStorage.setItem('lastProj', JSON.stringify('none'));\n      },\n      (error) => {\n        window.localStorage.setItem('lastProj', JSON.stringify('none'));\n\n        this._deletingProjects.next(\n          this._deletingProjects.value.map((p) => {\n            return p.id === data.id\n              ? { ...p, deleting: false, deletingFailed: true }\n              : p;\n          })\n        );\n        this.updateProjectsList();\n\n        this.getProjects();\n\n        this.notificationsService.showErrorToast('Could not delete project!');\n        console.error(error);\n      }\n    ); // end of error\n  }\n\n  getProjectUsers(proj: Project): Observable<Array<IProjectUser>> {\n    return this.http\n      .get<Array<IProjectUser>>(\n        environment.apiUrl + `/projects/${proj.id}/users/`\n      )\n      .pipe(\n        tap((users) => {\n          this._projectUsers.next(users);\n        })\n      );\n  }\n\n  addUserToProject(proj: Project, uname: string): void {\n    const payload = {\n      username: uname,\n    };\n    this.http\n      .post(environment.apiUrl + `/projects/${proj.id}/users/`, payload)\n      .subscribe((resp) => {\n        this.getProjectUsers(proj).subscribe();\n      });\n  }\n\n  deleteUserFromProject(proj: Project, user: string): void {\n    this.http\n      .delete(environment.apiUrl + `/projects/${proj.id}/users/${user}/`)\n      .subscribe(\n        (resp) => {\n          this.getProjectUsers(proj).subscribe();\n        },\n        (error) => {\n          // TODO: Create popup for an error message.\n          console.log(error);\n        }\n      );\n  }\n}\n","import {\n  Component,\n  OnInit,\n  TemplateRef,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { FormsService, tags } from '../../../services/forms.service';\nimport { GroupsService } from '../../../services/groups.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { Feature, Project, TagGroup, GroupForm } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\nimport { ProjectsService } from 'src/app/services/projects.service';\n\n@Component({\n  selector: 'app-tag-generator',\n  templateUrl: './tag-generator.component.html',\n  styleUrls: ['./tag-generator.component.scss'],\n})\nexport class TagGeneratorComponent implements OnInit {\n  formLabel: string;\n  formColor: string;\n  formOptions: Array<any> = [];\n  selectedGroup: string;\n  formType: string;\n  labelFilter: string;\n  optionColorFilter = '#000000';\n  activeGroup: TagGroup;\n  optionFilter: string;\n  formName: string;\n  formValue: string;\n  formRequired: boolean;\n  openOption: any = {};\n  enabledControls: Array<string> = [];\n  showSubitem = true;\n  groups: Map<string, TagGroup>;\n  groupsFeatures: Map<string, any>;\n  groups$: Subscription;\n  private activeProject: Project;\n\n  constructor(\n    private formsService: FormsService,\n    private groupsService: GroupsService,\n    private dialog: MatDialog,\n    private router: Router,\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroup.subscribe((next) => {\n      this.activeGroup = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.geoDataService.groupsFeatures.subscribe((next) => {\n      this.groupsFeatures = next;\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n\n    this.formOptions = [];\n    this.formType = 'text';\n    this.formName = '';\n    this.formLabel = '';\n    this.formValue = '';\n    this.formRequired = false;\n    this.enabledControls = ['Text', 'Checkbox', 'Radio', 'Dropdown', 'Color'];\n  }\n\n  inputFormLabel(event: any) {\n    this.formLabel = event.target.value;\n  }\n\n  inputFormColor(event: any) {\n    this.formColor = event.target.value;\n  }\n\n  addOptionItem(value: string) {\n    if (value) {\n      const formWithValue = this.formOptions.filter((e) => e.label == value);\n      if (formWithValue.length == 0 && value.length != 0) {\n        this.formOptions.push({\n          label: value,\n          color: this.optionColorFilter,\n        });\n      }\n    }\n  }\n\n  deleteOption(opt: any) {\n    this.formOptions = this.formOptions.filter(\n      (option) => option.label != opt.label\n    );\n  }\n\n  openRenameModal(template: TemplateRef<any>, name: string) {\n    this.selectedGroup = name;\n    this.dialog.open(template);\n  }\n\n  openRenameOptionModal(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  renameOption(opt: any, label: string) {\n    label = label.toLowerCase();\n    this.formOptions.forEach((e) => {\n      if (e.label == opt.label) {\n        e.label = label;\n      }\n    });\n  }\n\n  selectInputForm(name: string) {\n    this.formType = name;\n    this.formLabel = '';\n    this.formOptions = [];\n  }\n\n  clearOption() {\n    this.optionFilter = '';\n  }\n\n  clearLabel() {\n    this.labelFilter = '';\n  }\n\n  clearOptionColor() {\n    this.optionColorFilter = '#000000';\n  }\n\n  clear() {\n    this.clearLabel();\n    this.clearOptionColor();\n    this.clearOption();\n  }\n\n  addFormItem() {\n    // Assemble the new tag\n    const formItem: GroupForm = {\n      type: this.formType,\n      groupName: this.activeGroup.name,\n      label: this.formLabel,\n      options: [],\n    };\n    this.openOption[this.formLabel] = false;\n    // Adds the options for drop down, checklist, and radio buttons\n    if (this.formType !== 'text' && this.formOptions.length != 0) {\n      const myOpts = [];\n      for (const opt of this.formOptions) {\n        myOpts.push({\n          label: opt,\n        });\n      }\n      formItem.options = this.formOptions;\n    }\n\n    this.formsService.createForm(\n      this.activeProject.id,\n      formItem,\n      this.groups.get(this.activeGroup.name),\n      this.groupsFeatures.get(this.activeGroup.name)\n    );\n\n    // Reset user-defined fields to blank options\n    this.formLabel = '';\n    this.formColor = '';\n    this.formOptions = [];\n    this.groupsService.setShowTagGenerator(false);\n    this.clear();\n  }\n\n  cancelCreate() {\n    this.groupsService.setShowTagGenerator(false);\n    this.clear();\n  }\n\n  expandPanel() {\n    this.showSubitem = !this.showSubitem;\n  }\n}\n","import { Component, OnInit, TemplateRef } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Feature } from 'geojson';\nimport { combineLatest } from 'rxjs';\nimport { GroupForm, TagGroup } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { FormsService } from '../../../services/forms.service';\nimport { GroupsService } from '../../../services/groups.service';\n\n@Component({\n  selector: 'app-tag-images',\n  templateUrl: './tag-images.component.html',\n  styleUrls: ['./tag-images.component.scss'],\n})\nexport class TagImagesComponent implements OnInit {\n  private activeProject;\n  payload: any;\n  selectedGroup: string;\n  activeGroup: TagGroup;\n  showSubitem = true;\n  formList: GroupForm[] = [];\n  tagName = '';\n  groups: Map<string, TagGroup>;\n  groupsFeatures: Map<string, Feature[]>;\n  activeGroupFeature: Feature;\n  tagValues = [];\n\n  constructor(\n    private groupsService: GroupsService,\n    private formsService: FormsService,\n    private dialog: MatDialog,\n    private projectsService: ProjectsService,\n    private geoDataService: GeoDataService\n  ) {}\n\n  ngOnInit() {\n    combineLatest(\n      this.geoDataService.activeGroup,\n      this.geoDataService.groupsFeatures,\n      this.geoDataService.groups\n    ).subscribe(([grp, grpFts, grps]) => {\n      this.activeGroup = grp;\n      this.groupsFeatures = grpFts;\n      this.groups = grps;\n      if (grp) {\n        this.formList = grp.forms;\n      }\n    });\n\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n  }\n\n  openRenameModal(template: TemplateRef<any>, name: string) {\n    this.selectedGroup = name;\n    this.dialog.open(template);\n  }\n\n  // Takes the name of the tag's group, and the tag itself to delete\n  deleteForm(tag: GroupForm) {\n    this.formsService.deleteForm(\n      this.activeProject.id,\n      tag,\n      this.groups.get(this.activeGroup.name),\n      this.groupsFeatures.get(this.activeGroup.name)\n    );\n  }\n\n  // submits a tag's name change to geoAPI\n  renameForm(tag: GroupForm) {\n    this.formsService.renameForm(\n      this.activeProject.id,\n      tag,\n      this.groups.get(this.activeGroup.name),\n      this.groupsFeatures.get(this.activeGroup.name),\n      this.tagName\n    );\n    // Reset newTagValue for the next rename\n    this.tagName = '';\n    this.dialog.closeAll(); // Ensures the window closes when using enter-submission\n  }\n\n  showTagGenerator() {\n    this.groupsService.setShowTagGenerator(true);\n  }\n\n  saveTags() {\n    this.formsService.updateTagValues(\n      this.activeProject,\n      this.activeGroupFeature,\n      this.formList,\n      this.tagValues\n    );\n  }\n\n  setValue(formValue) {\n    this.tagValues = this.tagValues.filter(\n      (value) => value.id !== formValue.id\n    );\n    this.tagValues.push(formValue);\n  }\n\n  expandPanel() {\n    this.showSubitem = !this.showSubitem;\n  }\n}\n","import { Injectable, NgModule } from '@angular/core';\nimport {\n  Routes,\n  RouterModule,\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { NotFoundComponent } from './components/notfound/notfound.component';\nimport { AuthService } from './services/authentication.service';\nimport { MainComponent } from './components/main/main.component';\nimport { CallbackComponent } from './components/callback/callback.component';\nimport { TagGeneratorComponent } from './components/side-bar/tag-generator/tag-generator.component';\nimport { TagImagesComponent } from './components/side-bar/tag-images/tag-images.component';\n\n@Injectable()\nexport class Activate implements CanActivate {\n  constructor(private authSvc: AuthService) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (this.authSvc.isLoggedIn()) {\n      return true;\n    }\n    this.authSvc.login();\n  }\n}\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MainComponent,\n    canActivate: [Activate],\n    children: [\n      {\n        path: 'tagger',\n        component: TagImagesComponent,\n        canActivateChild: [Activate],\n      },\n      {\n        path: 'preset',\n        component: TagGeneratorComponent,\n        canActivateChild: [Activate],\n      },\n    ],\n  },\n  { path: 'callback', component: CallbackComponent },\n  { path: '404', component: NotFoundComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { onSameUrlNavigation: 'reload' })],\n  exports: [RouterModule],\n  providers: [Activate],\n})\nexport class AppRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './services/authentication.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  title = 'viewer';\n\n  constructor(private authService: AuthService) {}\n\n  ngOnInit() {\n    this.authService.login();\n  }\n}\n","import {\n  CircleMarker,\n  circleMarker,\n  divIcon,\n  LatLng,\n  Marker,\n  marker,\n} from 'leaflet';\nimport { Feature } from '../models/models';\n\nfunction createCircleMarker(feature: Feature, latlng: LatLng): CircleMarker {\n  const options = {\n    radius: 8,\n    fillColor: '#d3d3d3',\n    color: 'black',\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0.8,\n  };\n  return circleMarker(latlng, options);\n}\n\nfunction createImageMarker(feature: Feature, latlng: LatLng): Marker {\n  const divHtml = '<i class=\\'fas fa-camera-retro fa-2x light-blue\\'></i>';\n  const ico = divIcon({ className: 'leaflet-fa-marker-icon', html: divHtml });\n  return marker(latlng, { icon: ico });\n}\n\nfunction createCollectionMarker(feature: Feature, latlng: LatLng): Marker {\n  const divHtml = '<i class=\"fa fa-folder-open fa-2x light-blue\"></i>';\n  const ico = divIcon({ className: 'icon-marker', html: divHtml });\n  return marker(latlng, { icon: ico });\n}\nfunction createVideoMarker(feature: Feature, latlng: LatLng): Marker {\n  const divHtml = '<i class=\\'fas fa-video fa-2x light-blue\\'></i>';\n  const ico = divIcon({ className: 'leaflet-fa-marker-icon', html: divHtml });\n  return marker(latlng, { icon: ico });\n}\n\nexport function createMarker(feature: Feature, latlng: LatLng): Marker {\n  let marker;\n  if (feature.featureType() == 'image') {\n    marker = createImageMarker(feature, latlng);\n  } else if (feature.featureType() == 'collection') {\n    marker = createCollectionMarker(feature, latlng);\n  } else if (feature.featureType() == 'video') {\n    marker = createVideoMarker(feature, latlng);\n  } else {\n    marker = createCircleMarker(feature, latlng);\n  }\n  return marker;\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport * as L from 'leaflet';\nimport 'leaflet.markercluster';\n\nimport { GeoDataService } from '../../services/geo-data.service';\nimport { createMarker } from '../../utils/leafletUtils';\nimport { Feature } from 'geojson';\nimport { FeatureGroup, ImageOverlay, LatLng, LeafletMouseEvent } from 'leaflet';\nimport * as turf from '@turf/turf';\nimport { AllGeoJSON } from '@turf/helpers';\nimport { filter, skip } from 'rxjs/operators';\nimport { Overlay } from '../../models/models';\nimport { AppEnvironment, environment } from '../../../environments/environment';\n\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.scss'],\n})\nexport class MapComponent implements OnInit {\n  map: L.Map;\n  mapType = 'normal';\n  activeFeature: Feature;\n  activeOverlay: Overlay;\n  features: FeatureGroup = new FeatureGroup();\n  overlays: Map<number, ImageOverlay>;\n  environment: AppEnvironment;\n\n  constructor(\n    private GeoDataService: GeoDataService,\n    private route: ActivatedRoute\n  ) {\n    // Have to bind these to keep this being this\n    this.featureClickHandler.bind(this);\n    this.mouseEventHandler.bind(this);\n  }\n\n  ngOnInit() {\n    // const mapType: string = this.route.snapshot.queryParamMap.get('mapType');\n    // this.projectId = +this.route.snapshot.paramMap.get(\"projectId\");\n    // this.cluster = this.route.snapshot.queryParamMap.get('mapType');\n    this.environment = environment;\n    this.overlays = new Map();\n    this.map = new L.Map('map', {\n      center: [40, -80],\n      zoom: 9,\n    });\n\n    const baseOSM = L.tileLayer(\n      'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n      {\n        maxZoom: 19,\n        attribution:\n          '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n      }\n    );\n    const satellite = L.tileLayer(\n      'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n      {\n        attribution:\n          'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n      }\n    );\n    // default to streetmap view;\n    this.map.addLayer(baseOSM);\n\n    this.loadFeatures();\n\n    // Publish the mouse location on the mapMouseLocation stream\n    this.map.on('mousemove', (ev: LeafletMouseEvent) =>\n      this.mouseEventHandler(ev)\n    );\n    this.GeoDataService.activeOverlay.pipe(skip(1)).subscribe((next) => {\n      this.addRemoveOverlay(next);\n    });\n\n    // Listen on the activeFeature stream and zoom map to that feature when it changes\n    this.GeoDataService.activeFeature\n      .pipe(filter((n) => n != null))\n      .subscribe((next) => {\n        this.activeFeature = next;\n        const bbox = turf.bbox(<AllGeoJSON> next);\n        this.map.fitBounds([\n          [bbox[1], bbox[0]],\n          [bbox[3], bbox[2]],\n        ]);\n      });\n\n    // Listen for changes to the basemap\n    this.GeoDataService.basemap.pipe(skip(1)).subscribe((next) => {\n      if (next == 'sat') {\n        this.map.removeLayer(baseOSM);\n        this.map.addLayer(satellite);\n      }\n      if (next == 'roads') {\n        this.map.removeLayer(satellite);\n        this.map.addLayer(baseOSM);\n      }\n    });\n  }\n\n  addRemoveOverlay(ov: Overlay): void {\n    if (this.overlays.has(ov.id)) {\n      this.features.removeLayer(this.overlays.get(ov.id));\n      this.overlays.delete(ov.id);\n    } else {\n      const overlay = L.imageOverlay(\n        environment.apiUrl + '/assets/' + ov.path,\n        [\n          [ov.minLat, ov.minLon],\n          [ov.maxLat, ov.maxLon],\n        ]\n      );\n      this.overlays.set(ov.id, overlay);\n      this.features.addLayer(overlay);\n    }\n    this.map.fitBounds(this.features.getBounds());\n  }\n\n  mouseEventHandler(ev: any): void {\n    this.GeoDataService.mapMouseLocation = ev.latlng;\n  }\n\n  /**\n   * Load Features for a project.\n   */\n  loadFeatures() {\n    const geojsonOptions = {\n      pointToLayer: createMarker,\n    };\n    this.GeoDataService.features.subscribe((collection) => {\n      this.features.clearLayers();\n      const markers = L.markerClusterGroup({\n        iconCreateFunction: (cluster) => {\n          return L.divIcon({\n            html: `<div><b>${cluster.getChildCount()}</b></div>`,\n            className: 'marker-cluster',\n          });\n        },\n      });\n      collection.features.forEach((d) => {\n        const feat = L.geoJSON(d, geojsonOptions);\n        feat.on('click', (ev) => {\n          this.featureClickHandler(ev);\n        });\n\n        if (d.geometry.type == 'Point') {\n          markers.addLayer(feat);\n        } else {\n          this.features.addLayer(feat);\n        }\n      });\n      this.features.addLayer(markers);\n      this.map.addLayer(this.features);\n      try {\n        this.map.fitBounds(this.features.getBounds());\n      } catch (e) {}\n    });\n  }\n\n  /**\n   *\n   * @param ev\n   */\n  featureClickHandler(ev: any): void {\n    const f = ev.layer.feature;\n    this.GeoDataService.activeFeature = f;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { SystemSummary } from 'ng-tapis';\nimport { ApiService } from 'ng-tapis';\nimport { Observable, ReplaySubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AgaveSystemsService {\n  private baseUrl = 'https://agave.designsafe-ci.org/systems/v2/';\n  private _systems: ReplaySubject<SystemSummary[]> = new ReplaySubject<\n    SystemSummary[]\n  >(1);\n  public readonly systems: Observable<SystemSummary[]> =\n    this._systems.asObservable();\n  private _projects: ReplaySubject<SystemSummary[]> = new ReplaySubject<\n    SystemSummary[]\n  >(1);\n  public readonly projects: Observable<SystemSummary[]> =\n    this._projects.asObservable();\n  private systemsList: SystemSummary[];\n\n  constructor(private tapis: ApiService) {}\n\n  // list() runs when the file browser is opened, retrieves all files in TACC for given user\n  list() {\n    this.tapis.systemsList({ type: 'STORAGE' }).subscribe(\n      (resp) => {\n        this._systems.next(resp.result);\n        this._projects.next(\n          resp.result.filter((sys) => sys.id.startsWith('project'))\n        );\n      },\n      (error) => {\n        this._systems.next(null);\n        this._projects.next(null);\n      }\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ApiService, FileOperationRequest } from 'ng-tapis';\nimport { RemoteFile } from 'ng-tapis';\nimport { Project } from '../models/models';\nimport { share } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { AuthService } from './authentication.service';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\nimport { SystemSummary } from 'ng-tapis';\n// import { verify } from 'ts-mockito';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TapisFilesService {\n  private baseUrl = 'https://agave.designsafe-ci.org/files/v2/';\n  public currentListing: Array<RemoteFile>;\n  private _listing: BehaviorSubject<RemoteFile[]> = new BehaviorSubject<\n    RemoteFile[]\n  >([]);\n  public readonly listing: Observable<RemoteFile[]> =\n    this._listing.asObservable();\n  public readonly IMPORTABLE_TYPES: Array<string> = [\n    'jpg',\n    'jpeg',\n    'las',\n    'laz',\n    'json',\n    'geojson',\n    'geotiff',\n    'tiff',\n    'gpx',\n  ];\n  public lastSystem: SystemSummary; // The last filesystem the user was browsing\n  public lastFile: RemoteFile; // The last directory the user was browsing\n  public noPreviousSelections: boolean;\n\n  constructor(\n    private tapis: ApiService,\n    private http: HttpClient,\n    private authService: AuthService,\n    private popup: MatSnackBar\n  ) {}\n\n  checkIfSelectable(file: RemoteFile): boolean {\n    if (file.type === 'dir') {\n      return false;\n    }\n    const ext = this.getFileExtension(file);\n    return this.IMPORTABLE_TYPES.includes(ext);\n  }\n\n  private getFileExtension(file: RemoteFile): string {\n    return file.name.split('.').pop().toLowerCase();\n  }\n\n  listFiles(system: string, path: string, offset: number, limit: number) {\n    return this.tapis.filesList({\n      systemId: system,\n      filePath: path,\n      offset,\n      limit,\n    });\n  }\n\n  public getParentPath(path: string): string {\n    const cleaned = path.replace('//', '/');\n    const arr = cleaned.split('/');\n    arr.pop();\n    const parentPath = arr.join('/');\n    return parentPath;\n  }\n\n  // saves project to a specified format in Design Safe's my Data section\n  public export(\n    systemID: string,\n    path: string,\n    fileName: string,\n    extension: string,\n    data: any\n  ) {\n    // Constructs an object that configures the success/error pop-up\n    const snackbarConfig: MatSnackBarConfig = {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    };\n    // construct the full URL that points to where the data will be stored\n    const fullURL = `https://agave.designsafe-ci.org/files/v2/media/system/${systemID}${path}`;\n\n    // construct a file to submit\n    let fileType = 'plain/text';\n    extension == '.csv'\n      ? (fileType = 'text/csv')\n      : (fileType = 'application/json');\n    const tmp = new Blob([data], { type: fileType });\n    const date = new Date();\n    const file = new File([tmp], fileName, { lastModified: date.valueOf() });\n\n    // Creates a form data object which holds the file to be uploaded\n    const form: FormData = new FormData();\n    form.append('fileToUpload', file);\n\n    // sends the packaged data to Designsafe. URL its being uploaded to handles authentication\n    this.http.post(fullURL, form).subscribe(\n      (resp) => {\n        console.log(resp);\n        const msg = 'Successfully saved file to ' + systemID + path;\n        this.popup.open(msg, '', snackbarConfig);\n      },\n      (error) => {\n        console.log(error);\n        const msg = 'Faled to save file to ' + systemID + path;\n        this.popup.open(msg, '', snackbarConfig);\n      }\n    );\n  }\n\n  // Saves the current file directory and file system to Local Storage\n  saveState() {\n    const sysStr = JSON.stringify(this.lastSystem);\n    const fileStr = JSON.stringify(this.lastFile);\n    window.localStorage.setItem('system', sysStr);\n    window.localStorage.setItem('file', fileStr);\n  }\n\n  // Attempts to retrieve the last used state\n  getState() {\n    try {\n      this.lastSystem = JSON.parse(window.localStorage.getItem('system'));\n      this.lastFile = JSON.parse(window.localStorage.getItem('file'));\n      this.noPreviousSelections = this.lastFile == null;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n","import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\nimport { AgaveSystemsService } from '../../services/agave-systems.service';\nimport {\n  AuthenticatedUser,\n  AuthService,\n} from '../../services/authentication.service';\nimport { RemoteFile } from 'ng-tapis/models/remote-file';\nimport { SystemSummary } from 'ng-tapis';\nimport { TapisFilesService } from '../../services/tapis-files.service';\nimport { BsModalRef } from 'ngx-foundation/modal/bs-modal-ref.service';\nimport { Subject, combineLatest } from 'rxjs';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { take } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-modal-file-browser',\n  templateUrl: './modal-file-browser.component.html',\n  styleUrls: ['./modal-file-browser.component.scss'],\n})\nexport class ModalFileBrowserComponent implements OnInit {\n  static limit = 200; // Limits maximum amount of files displayed\n\n  @Output() currentPath: EventEmitter<string> = new EventEmitter<string>();\n\n  public allowedExtensions: Array<string> =\n    this.tapisFilesService.IMPORTABLE_TYPES;\n\n  private currentUser: AuthenticatedUser;\n  public selectedPath;\n  public filesList: Array<RemoteFile> = [];\n  public inProgress = true;\n  public retrievalError = false;\n  public selectedFiles: Map<string, RemoteFile> = new Map();\n  public onClose: Subject<Array<RemoteFile>> = new Subject<Array<RemoteFile>>();\n  public projects: Array<SystemSummary>;\n  private selectedSystem: SystemSummary;\n  public myDataSystem: SystemSummary;\n  public communityDataSystem: SystemSummary;\n  public publishedDataSystem: SystemSummary;\n  public currentDirectory: RemoteFile;\n  private offset: number;\n  public firstFileIndex: number;\n\n  constructor(\n    private tapisFilesService: TapisFilesService,\n    // private modalRef: BsModalRef,\n    public dialogRef: MatDialogRef<ModalFileBrowserComponent>,\n    private dialog: MatDialog,\n    private authService: AuthService,\n    private agaveSystemsService: AgaveSystemsService\n  ) {}\n\n  ngOnInit() {\n    // retrive state data\n    // this.tapisFilesService.getState()\n\n    // This finds all the projects, and file systems found from a user\n    this.agaveSystemsService.list();\n\n    // TODO: change those hard coded systemIds to environment vars or some sort of config\n    // wait on the currentUser and systems to resolve\n    combineLatest([\n      this.authService.currentUser,\n      this.agaveSystemsService.systems,\n      this.agaveSystemsService.projects,\n    ])\n      // This little thing helped me fix the problem on calling ngOnInit several times\n      .pipe(take(1))\n      .subscribe(([user, systems, projects]) => {\n        // Uses systems to find the different directories that has the files in\n        this.myDataSystem = systems.find(\n          (sys) => sys.id === 'designsafe.storage.default'\n        );\n        this.communityDataSystem = systems.find(\n          (sys) => sys.id === 'designsafe.storage.community'\n        );\n        this.publishedDataSystem = systems.find(\n          (sys) => sys.id === 'designsafe.storage.published'\n        );\n\n        // This is where they choose which one they start with\n        this.selectedSystem = this.tapisFilesService.lastSystem;\n\n        if (this.selectedSystem == null) {\n          this.selectedSystem = this.myDataSystem;\n          this.tapisFilesService.lastSystem = this.myDataSystem;\n        }\n\n        // If the user has already navigated to a folder, restore those options\n        this.currentDirectory = this.tapisFilesService.lastFile;\n\n        this.projects = projects;\n        this.currentUser = user;\n        const init = <RemoteFile> {\n          system: this.myDataSystem.id,\n          type: 'dir',\n          path: this.currentUser.username,\n        };\n        // If the user hasn't yet opened the file browser, set the last file to an init file.\n        if (this.tapisFilesService.noPreviousSelections) {\n          this.selectedSystem = this.myDataSystem;\n          this.tapisFilesService.lastFile = init;\n          this.tapisFilesService.noPreviousSelections = false;\n        }\n        this.browse(this.tapisFilesService.lastFile);\n      });\n  }\n\n  selectSystem(system: SystemSummary): void {\n    let pth;\n    system.id === this.myDataSystem.id\n      ? (pth = this.currentUser.username)\n      : (pth = '/');\n    const init = <RemoteFile> {\n      system: system.id,\n      type: 'dir',\n      path: pth,\n    };\n    this.selectedSystem = system;\n    this.tapisFilesService.lastSystem = this.selectedSystem;\n    this.browse(init);\n  }\n\n  browse(file: RemoteFile) {\n    this.selectedPath = file.path;\n    this.selectedSystem = this.selectedSystem; // Self-assignment keeps the system name from disappearing while browsing subfolders\n    if (file.type !== 'dir') {\n      return;\n    }\n    this.currentDirectory = file;\n    this.tapisFilesService.lastFile = file; // Updates the last directory visted\n    // this.selectedFiles.clear();\n    this.filesList = [];\n    this.offset = 0;\n    this.inProgress = false;\n    this.getFiles();\n  }\n\n  toRoot() {\n    let pth;\n    this.selectedSystem.id === this.myDataSystem.id\n      ? (pth = this.currentUser.username)\n      : (pth = '/');\n    const init = <RemoteFile> {\n      system: this.selectedSystem.id,\n      type: 'dir',\n      path: pth,\n    };\n    this.browse(init);\n  }\n\n  getFiles() {\n    const hasMoreFiles = this.offset % ModalFileBrowserComponent.limit === 0;\n\n    if (this.inProgress || !hasMoreFiles) {\n      return;\n    }\n\n    this.inProgress = true;\n    this.tapisFilesService\n      .listFiles(\n        this.currentDirectory.system,\n        this.currentDirectory.path,\n        this.offset,\n        ModalFileBrowserComponent.limit\n      )\n      .subscribe(\n        (listing) => {\n          const files = listing.result;\n\n          if (files.length && files[0].name === '.') {\n            // This removes the first item in the listing, which in Agave\n            // is always a reference to self '.' and replaces with '..'\n            const current = files.shift();\n            this.currentPath.next(current.path);\n            current.path = this.tapisFilesService.getParentPath(current.path);\n            current.name = '..';\n            files.unshift(current);\n          }\n          const newFile = [];\n          const allowedExt = this.allowedExtensions;\n          files.forEach(function(value, index) {\n            if (\n              (value.type == 'file' &&\n                allowedExt.includes(\n                  value.path.split('.').pop().toLowerCase()\n                )) ||\n              value.type == 'dir'\n            ) {\n              newFile.push(value);\n            }\n          });\n\n          this.inProgress = false;\n          this.retrievalError = false;\n          this.filesList = this.filesList.concat(newFile);\n          this.offset = this.offset + files.length;\n        },\n        (error) => {\n          // If retrieving the files from DesignSafe bugs out due to the site being down, this is where it ends up\n          this.retrievalError = true;\n          this.inProgress = false;\n        }\n      );\n  }\n\n  // TODO: Ian: Error message on incorrect file type?\n  select(event: any, file: RemoteFile, index: number) {\n    if (event.shiftKey) {\n      this.selectFilesShiftClick(index, file);\n    } else {\n      if (this.tapisFilesService.checkIfSelectable(file)) {\n        this.addSelectedFile(file, index);\n      } else {\n      }\n    }\n  }\n\n  selectFilesShiftClick(index: number, file: RemoteFile) {\n    // this.selectedFiles.clear();\n    this.selectShift(index, file);\n  }\n\n  addSelectedFile(file: RemoteFile, index: number) {\n    if (index != -1) {\n      this.firstFileIndex = index;\n    }\n\n    if (this.tapisFilesService.checkIfSelectable(file)) {\n      if (this.selectedFiles.has(file.path)) {\n        this.selectedFiles.delete(file.path);\n      } else {\n        this.selectedFiles.set(file.path, file);\n      }\n    }\n  }\n\n  chooseFiles() {\n    this.tapisFilesService.saveState();\n    this.tapisFilesService.lastSystem = this.selectedSystem;\n    const tmp = Array.from(this.selectedFiles.values());\n    this.dialogRef.close(tmp);\n  }\n\n  cancel() {\n    this.tapisFilesService.saveState();\n    this.tapisFilesService.lastSystem = this.selectedSystem;\n    this.dialogRef.close();\n  }\n\n  selectAll() {\n    const indexTmp = -1;\n    let count = 0;\n    for (const file of this.filesList) {\n      if (!this.selectedFiles.has(file.path)) {\n        this.select('', file, indexTmp);\n        count += 1;\n      }\n    }\n    if (count == 1) {\n      this.selectedFiles.clear();\n    }\n  }\n\n  selectShift(index: number, file: RemoteFile) {\n    if (this.firstFileIndex != undefined && this.firstFileIndex != index) {\n      this.addRangeFiles(this.firstFileIndex, index, true);\n    } else {\n      this.addSelectedFile(file, index);\n    }\n  }\n\n  addRangeFiles(firstFileIndex: number, lastFileIndex: number, again: boolean) {\n    const maxIndex = Math.max(firstFileIndex, lastFileIndex);\n    const minIndex = Math.min(firstFileIndex, lastFileIndex);\n\n    for (let i = minIndex; i < maxIndex + 1; ++i) {\n      this.addSelectedFile(this.filesList[i], -1);\n    }\n\n    if (again) {\n      this.addSelectedFile(this.filesList[firstFileIndex], -1);\n    }\n  }\n}\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { AgaveSystemsService } from '../../services/agave-systems.service';\nimport {\n  AuthenticatedUser,\n  AuthService,\n} from '../../services/authentication.service';\nimport { RemoteFile } from 'ng-tapis/models/remote-file';\nimport { SystemSummary } from 'ng-tapis';\nimport { TapisFilesService } from '../../services/tapis-files.service';\nimport { BsModalRef } from 'ngx-foundation/modal/bs-modal-ref.service';\nimport { Subject, combineLatest } from 'rxjs';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { take } from 'rxjs/operators';\nimport { FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-modal-download-selector',\n  templateUrl: './modal-download-selector.component.html',\n  styleUrls: ['./modal-download-selector.component.scss'],\n})\nexport class ModalDownloadSelectorComponent implements OnInit {\n  static limit = 200; // Limits maximum amount of files displayed\n\n  @Output() currentPath: EventEmitter<string> = new EventEmitter<string>();\n\n  private downloadSelectForm: FormGroup;\n  private currentUser: AuthenticatedUser;\n  public filesList: Array<RemoteFile> = [];\n  public inProgress = true;\n  public selectedFiles: Map<string, RemoteFile> = new Map();\n  public onClose: Subject<Array<RemoteFile>> = new Subject<Array<RemoteFile>>();\n  public projects: Array<SystemSummary>;\n  private selectedSystem: SystemSummary;\n  public myDataSystem: SystemSummary;\n  public communityDataSystem: SystemSummary;\n  public publishedDataSystem: SystemSummary;\n  public currentDirectory: RemoteFile;\n  public passbackData: Array<string> = ['', '', '', ''];\n  public fileName = 'Custom File Name';\n  public fileExtension = '.csv';\n  private offset: number;\n\n  constructor(\n    private tapisFilesService: TapisFilesService,\n    // private modalRef: BsModalRef,\n    public dialogRef: MatDialogRef<ModalDownloadSelectorComponent>,\n    private dialog: MatDialog,\n    private authService: AuthService,\n    private agaveSystemsService: AgaveSystemsService\n  ) {}\n\n  ngOnInit() {\n    this.downloadSelectForm = new FormGroup({\n      Name: new FormControl(this.fileName),\n      Extension: new FormControl(this.fileExtension),\n    });\n\n    // This finds all the projects, and file systems found from a user\n    this.agaveSystemsService.list();\n\n    // TODO: change those hard coded systemIds to environment vars or some sort of config\n    // wait on the currentUser and systems to resolve\n    combineLatest([\n      this.authService.currentUser,\n      this.agaveSystemsService.systems,\n      this.agaveSystemsService.projects,\n    ])\n      // This little thing helped me fix the problem on calling ngOnInit several times\n      .pipe(take(1))\n      .subscribe(([user, systems, projects]) => {\n        // Uses systems to find the different directories that has the files in\n        this.myDataSystem = systems.find(\n          (sys) => sys.id === 'designsafe.storage.default'\n        );\n        this.communityDataSystem = systems.find(\n          (sys) => sys.id === 'designsafe.storage.community'\n        );\n        this.publishedDataSystem = systems.find(\n          (sys) => sys.id === 'designsafe.storage.published'\n        );\n\n        // This is where they choose which one they start with\n        this.selectedSystem = this.myDataSystem;\n\n        this.projects = projects;\n        this.currentUser = user;\n        const init = <RemoteFile> {\n          system: this.myDataSystem.id,\n          type: 'dir',\n          path: this.currentUser.username,\n        };\n        this.browse(init);\n      });\n  }\n\n  selectSystem(system: SystemSummary): void {\n    let pth;\n    system.id === this.myDataSystem.id\n      ? (pth = this.currentUser.username)\n      : (pth = '/');\n    const init = <RemoteFile> {\n      system: system.id,\n      type: 'dir',\n      path: pth,\n    };\n    this.browse(init);\n  }\n\n  browse(file: RemoteFile) {\n    if (file.type !== 'dir') {\n      return;\n    }\n    this.currentDirectory = file;\n    // this.selectedFiles.clear();\n    this.filesList = [];\n    this.offset = 0;\n    this.inProgress = false;\n    this.getFiles();\n  }\n\n  getFiles() {\n    const hasMoreFiles =\n      this.offset % ModalDownloadSelectorComponent.limit === 0;\n\n    if (this.inProgress || !hasMoreFiles) {\n      return;\n    }\n\n    this.inProgress = true;\n\n    this.tapisFilesService\n      .listFiles(\n        this.currentDirectory.system,\n        this.currentDirectory.path,\n        this.offset,\n        ModalDownloadSelectorComponent.limit\n      )\n      .subscribe(\n        (listing) => {\n          const files = listing.result;\n\n          if (files.length && files[0].name === '.') {\n            // This removes the first item in the listing, which in Agave\n            // is always a reference to self '.' and replaces with '..'\n            const current = files.shift();\n            this.currentPath.next(current.path);\n            this.passbackData[1] = current.path;\n            current.path = this.tapisFilesService.getParentPath(current.path);\n            current.name = '..';\n            files.unshift(current);\n          }\n          const newFile = [];\n          files.forEach(function(value, index) {\n            if (value.type == 'file' || value.type == 'dir') {\n              newFile.push(value);\n            }\n          });\n\n          this.inProgress = false;\n          this.filesList = this.filesList.concat(newFile);\n          this.offset = this.offset + files.length;\n        },\n        (error) => {\n          this.inProgress = false;\n        }\n      );\n  }\n\n  chooseFiles() {\n    this.passbackData[0] = this.selectedSystem.id;\n\n    // checks to see if the input was left unchanged\n    if (this.downloadSelectForm.dirty) {\n      // if changed, enter name as specified\n      this.passbackData[2] = this.downloadSelectForm.get('Name').value;\n    } else {\n      // if unchanged, enter filename as empty string\n      this.passbackData[2] = '';\n    }\n    this.passbackData[3] = this.fileExtension;\n    this.dialogRef.close(this.passbackData);\n  }\n\n  cancel() {\n    this.dialogRef.close();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalService, BsModalRef } from 'ngx-foundation';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ProjectsService } from '../../services/projects.service';\nimport { Project, ProjectRequest } from '../../models/models';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-modal-create-project',\n  templateUrl: './modal-create-project.component.html',\n  styleUrls: ['./modal-create-project.component.scss'],\n})\nexport class ModalCreateProjectComponent implements OnInit {\n  public readonly onClose: Subject<any> = new Subject<any>();\n\n  projCreateForm: FormGroup;\n\n  constructor(\n    public dialogRef: MatDialogRef<ModalCreateProjectComponent>,\n    private dialog: MatDialog,\n    private projectsService: ProjectsService\n  ) {}\n\n  ngOnInit() {\n    this.projCreateForm = new FormGroup({\n      name: new FormControl(''),\n      description: new FormControl(''),\n    });\n  }\n\n  close(project: Project) {\n    this.dialogRef.close();\n  }\n\n  submit() {\n    // Watch content we can set to false, for our project, we don't need this yet.\n    // Watch content refers to syncing files created in a folder with a hazmapper map\n    // Set observable to true, Hazmapper doesn't let users define that value for some reason.\n    const proj = new Project();\n    const projRqst = new ProjectRequest();\n\n    // Retrieve project name and description\n    proj.description = this.projCreateForm.get('description').value;\n    proj.name = this.projCreateForm.get('name').value;\n\n    projRqst.project = proj;\n\n    this.projectsService.create(projRqst);\n    this.dialogRef.close();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ProjectsService } from '../../services/projects.service';\nimport { Project } from '../../models/models';\nimport { THIS_EXPR } from '@angular/compiler/src/output/output_ast';\n\n@Component({\n  selector: 'app-modal-share-project',\n  templateUrl: './modal-share-project.component.html',\n  styleUrls: ['./modal-share-project.component.scss'],\n})\nexport class ModalShareProjectComponent implements OnInit {\n  projShareForm: FormGroup;\n  activeProj: Project;\n  projectUsers;\n  onlyOne: boolean; // if only one user is present == TRUE\n\n  constructor(\n    public dialogRef: MatDialogRef<ModalShareProjectComponent>,\n    private dialog: MatDialog,\n    private projectsService: ProjectsService\n  ) {}\n\n  ngOnInit() {\n    // creates new form control group to access input value\n    this.projShareForm = new FormGroup({\n      name: new FormControl(''),\n    });\n\n    // retrieves active project, needed to add users to the project\n    this.projectsService.activeProject.subscribe((proj) => {\n      this.activeProj = proj;\n    });\n\n    // retrieves all users currently registered to the active project\n    this.projectsService.getProjectUsers(this.activeProj).subscribe((next) => {\n      this.projectUsers = next;\n      this.onlyOne = this.projectUsers.length == 1;\n    });\n  }\n\n  // closes modal without submitting anything\n  close() {\n    this.dialogRef.close();\n  }\n\n  // shares project with specified user\n  submit() {\n    this.projectsService.addUserToProject(\n      this.activeProj,\n      this.projShareForm.get('name').value\n    );\n    this.dialogRef.close();\n  }\n\n  // deletes user from project\n  delete(user) {\n    this.projectsService.deleteUserFromProject(this.activeProj, user);\n    this.dialogRef.close();\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { BsModalService, BsModalRef } from 'ngx-foundation';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ProjectsService } from '../../services/projects.service';\nimport { Project, ProjectRequest } from '../../models/models';\nimport {\n  MAT_DIALOG_DATA,\n  MatDialog,\n  MatDialogRef,\n} from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-modal-current-project',\n  templateUrl: './modal-current-project.component.html',\n  styleUrls: ['./modal-current-project.component.scss'],\n})\nexport class ModalCurrentProjectComponent implements OnInit {\n  projCreateForm: FormGroup;\n  activeProject: Project;\n\n  constructor(\n    public dialogRef: MatDialogRef<ModalCurrentProjectComponent>,\n    private dialog: MatDialog,\n    private projectsService: ProjectsService,\n    @Inject(MAT_DIALOG_DATA) public projData: any\n  ) {}\n\n  ngOnInit() {\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n\n    this.projCreateForm = new FormGroup({\n      name: new FormControl(this.activeProject.name),\n      description: new FormControl(this.activeProject.description),\n    });\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n\n  delete() {\n    if (\n      confirm(\n        'Are you sure you want to delete this project? This will also delete it from HazMapper, and anyone this project was shared with.'\n      )\n    ) {\n      this.projectsService.delete(this.activeProject);\n    }\n    this.dialogRef.close();\n  }\n\n  update() {\n    // The project is being properly assembled, but the problem is that the returned project isn't updating.\n    // Do I need more data in my projects?\n    /*\n      export interface Project {\n      description: string;\n      id?: number;\n      name: string;\n      ds_id?: string;\n      title?: string;\n      uuid?: string;\n      public?: boolean;\n      system_file?: string;\n      system_id?: string;\n      system_path?: string;\n      deleting?: boolean;\n      deletingFailed?: boolean;\n    }\n     */\n    const p = new Project();\n    const projRqst = new ProjectRequest();\n\n    p.description = this.projCreateForm.get('description').value;\n    p.name = this.projCreateForm.get('name').value;\n    p.id = this.activeProject.id;\n    p.uuid = this.activeProject.uuid;\n\n    projRqst.project = p;\n\n    this.projectsService.update(projRqst);\n    this.dialogRef.close();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Feature, FeatureCollection } from '../models/models';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { GeoDataService } from './geo-data.service';\nimport { feature } from '@turf/turf';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureService {\n  private featureCollection: FeatureCollection;\n  private _features: BehaviorSubject<FeatureCollection>;\n  public features$: Observable<FeatureCollection>;\n\n  constructor(private geoDataService: GeoDataService) {\n    this._features = new BehaviorSubject<FeatureCollection>({\n      type: 'FeatureCollection',\n      features: [],\n    });\n    this.features$ = this._features.asObservable();\n\n    this.geoDataService.features.subscribe((fc: FeatureCollection) => {\n      this._features.next(fc);\n      this.featureCollection = fc;\n    });\n  }\n\n  // Takes the feature to be deleted, and filters it out of the feature list\n  deleteFeature(feat: Feature): void {\n    this.featureCollection.features = this.featureCollection.features.filter(\n      (featListfeat) => featListfeat.id != feat.id\n    );\n    this._features.next(this.featureCollection); // Update the observable\n    this.geoDataService.deleteFeature(feat);\n  }\n\n  // Takes a list of features, and deletes them from the observable in a more efficient manner\n  bulkFeatureDelete(delFeats: Array<Feature>): void {\n    delFeats.forEach((feat) => {\n      // Filter out every feature in delFeats from the master list\n      this.featureCollection.features = this.featureCollection.features.filter(\n        (featListFeature) => featListFeature.id != feat.id\n      );\n      this.geoDataService.deleteFeature(feat);\n    });\n    this._features.next(this.featureCollection); // Update the observable with the filtered list\n  }\n\n  saveFeature(feat: Feature): void {\n    this.geoDataService.updateFeatureProperty(\n      feat.project_id,\n      Number(feat.id),\n      feat.properties\n    );\n  }\n\n  // Takes a feature, and optionally an updated property section\n  // If featprop is null, it assumes the passed in feature was already updated with the new properties\n  updateFeatureProperties(feature: Feature, featProp = null): void {\n    // If featprop has a value, update the feature's properties to the new section\n    if (featProp != null) {\n      feature.properties = featProp;\n    }\n    // Update and save the list\n    this.featureCollection.features.forEach((feat) => {\n      if (feat.id == feature.id) {\n        feat = feature;\n      }\n    });\n    this.saveFeature(feature);\n  }\n}\n","import {\n  Component,\n  OnInit,\n  Output,\n  TemplateRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { ProjectsService } from '../../services/projects.service';\nimport { Feature, Project, TagGroup } from '../../models/models';\nimport { FeatureCollection } from 'geojson';\nimport { GeoDataService } from '../../services/geo-data.service';\nimport { LatLng } from 'leaflet';\nimport { skip, startWith } from 'rxjs/operators';\nimport { BsModalRef, BsModalService } from 'ngx-foundation';\nimport { ModalFileBrowserComponent } from '../modal-file-browser/modal-file-browser.component';\nimport { ModalDownloadSelectorComponent } from '../modal-download-selector/modal-download-selector.component';\nimport { ModalCreateProjectComponent } from '../modal-create-project/modal-create-project.component';\nimport { ModalShareProjectComponent } from '../modal-share-project/modal-share-project.component';\nimport { interval, Observable, Subscription, combineLatest } from 'rxjs';\nimport { RemoteFile } from 'ng-tapis';\nimport { GroupsService } from '../../services/groups.service';\nimport { FormsService } from '../../services/forms.service';\nimport {\n  AuthenticatedUser,\n  AuthService,\n} from '../../services/authentication.service';\nimport { Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ModalCurrentProjectComponent } from '../modal-current-project/modal-current-project.component';\nimport { AppEnvironment, environment } from '../../../environments/environment';\nimport { feature } from '@turf/helpers';\nimport { TapisFilesService } from '../../services/tapis-files.service';\nimport { element } from 'protractor';\nimport { consoleTestResultHandler } from 'tslint/lib/test';\nimport { ScrollService } from 'src/app/services/scroll.service';\nimport { NotificationsService } from 'src/app/services/notifications.service';\nimport { FeatureService } from 'src/app/services/feature.service';\n\n@Component({\n  selector: 'app-control-bar',\n  templateUrl: './control-bar.component.html',\n  styleUrls: ['./control-bar.component.scss'],\n})\nexport class ControlBarComponent implements OnInit {\n  public activeFeature: Feature;\n  features: FeatureCollection;\n  featureList: Array<any> = [];\n\n  public currentUser: AuthenticatedUser;\n  public projects: Project[];\n  public selectedProject: Project;\n  public mapMouseLocation: LatLng = new LatLng(0, 0);\n  imageName: string;\n  groupsExist: boolean;\n  groupName: string;\n  showTagger = false;\n  selectedImages: Array<any>;\n  modalRef: BsModalRef;\n  activeGroup: TagGroup;\n  groups: Map<string, TagGroup>;\n  groupsFeatures: Map<string, any>;\n  activeGroupFeatures: any;\n  activeGroupFeaturesRotate: any;\n  activeGroupFeature: any;\n  invalidNameError = false;\n  existingNameError = false;\n  hazmapperLink: string;\n  foundFilePaths = [];\n\n  constructor(\n    private projectsService: ProjectsService,\n    private geoDataService: GeoDataService,\n    private bsModalService: BsModalService,\n    private groupsService: GroupsService,\n    private formsService: FormsService,\n    private authService: AuthService,\n    private readonly cdr: ChangeDetectorRef,\n    private filesService: TapisFilesService,\n    private router: Router,\n    private dialog: MatDialog,\n    private scrollService: ScrollService,\n    private notificationsService: NotificationsService,\n    private featureService: FeatureService\n  ) {}\n\n  ngOnInit() {\n    this.filesService.getState();\n\n    this.featureService.features$.subscribe((fc: FeatureCollection) => {\n      this.features = fc;\n\n      if (this.features != undefined) {\n        this.featureList = fc.features.filter(\n          (feature: Feature) =>\n            feature.assets.length &&\n            feature.initialAsset() &&\n            feature.featureType() === 'image'\n        );\n      }\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n      this.groupsExist = next && next.size ? true : false;\n    });\n\n    combineLatest(\n      this.geoDataService.activeGroup,\n      this.geoDataService.groupsFeatures\n    ).subscribe(([grp, grpFts]) => {\n      this.activeGroup = grp;\n      this.groupsFeatures = grpFts;\n      if (grp && grpFts) {\n        this.activeGroupFeatures = grpFts.get(grp.name);\n        if (this.activeGroupFeatures) {\n          this.activeGroupFeaturesRotate = [...this.activeGroupFeatures];\n        }\n      }\n    });\n\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n    });\n\n    this.geoDataService.activeFeature.subscribe((next) => {\n      this.activeFeature = next;\n    });\n\n    this.notificationsService.notifications.subscribe((next) => {\n      const hasSuccessNotification = next.some(\n        (note) => note.status === 'success'\n      );\n      const hasFailureNotification = next.some(\n        (note) => note.status === 'error'\n      );\n      if (hasSuccessNotification) {\n        this.geoDataService.getFeatures(this.selectedProject.id);\n      }\n      if (hasFailureNotification) {\n        next.forEach((item) => {\n          // Compiles a list of all necessary files to import via the alt method\n          // The substring from 0 to 16 contains the phrase \"Error importing\", everything after this is the file path\n          if (\n            item.message.substring(0, 16) == 'Error importing ' &&\n            !this.foundFilePaths.some(\n              (filePath) => filePath === item.message.substring(16)\n            )\n          ) {\n            const path = item.message.substring(16);\n            this.geoDataService.uploadNewFeature(\n              this.selectedProject.id,\n              this.createBlankFeature(),\n              path\n            );\n            this.foundFilePaths.push(path);\n          }\n        });\n        this.geoDataService.getFeatures(this.selectedProject.id);\n      }\n    });\n\n    this.authService.currentUser.subscribe((next) => (this.currentUser = next));\n\n    this.projectsService.getProjects();\n    this.projectsService.projects.subscribe((projects) => {\n      this.projects = projects;\n\n      if (this.projects.length) {\n        let lastProj;\n        // try {\n        //   //restores view to the last visited project from local storage\n        //   lastProj = JSON.parse(window.localStorage.getItem('lastProj'));\n        //   // console.log(lastProj);\n        // } catch (error) {\n        //   lastProj = this.projectsService.setActiveProject(this.projects[0]);\n        // }\n\n        lastProj = this.projectsService.setActiveProject(this.projects[0]);\n\n        // If lastProj is null, then there is no project saved, or can be found, default to the first project in the list\n        if (lastProj == 'none' || lastProj == null) {\n          lastProj = this.projects[0];\n        }\n\n        this.projectsService.setActiveProject(lastProj);\n      }\n\n      this.groupsService.selectedImages.subscribe((next) => {\n        this.selectedImages = next;\n      });\n\n      this.groupsService.showTagger.subscribe((next) => {\n        this.showTagger = next;\n      });\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.selectedProject = next;\n      this.getDataForProject(this.selectedProject);\n      // retrieves uuid for project, formats result into a link to that Hazmapper map\n      this.hazmapperLink =\n        'https://hazmapper.tacc.utexas.edu/hazmapper/project/' + next.uuid;\n    });\n\n    this.geoDataService.mapMouseLocation.pipe(skip(1)).subscribe((next) => {\n      this.mapMouseLocation = next;\n    });\n  }\n\n  ngAfterViewChecked() {\n    this.cdr.detectChanges();\n  }\n\n  clearAll() {\n    this.groupsService.unselectAllImages();\n  }\n\n  selectProject(p: Project): void {\n    this.projectsService.setActiveProject(p);\n    this.getDataForProject(p);\n  }\n\n  getDataForProject(p: Project): void {\n    this.geoDataService.getFeatures(p.id);\n    this.geoDataService.getOverlays(p.id);\n    this.geoDataService.getPointClouds(p.id);\n  }\n\n  openFilePicker() {\n    // Refreshes the list of found paths used in importing images without Geo tagging\n    this.foundFilePaths = [];\n    const modal = this.dialog.open(ModalFileBrowserComponent);\n    modal.afterClosed().subscribe((files: Array<RemoteFile>) => {\n      if (files != null) {\n        this.geoDataService.importFileFromTapis(this.selectedProject.id, files);\n      }\n    });\n  }\n\n  // Creates a feature with a long/lat value of 0,0 and no associated image. Used in alternate image inport\n  // I think if we want a placeholder image, we can add it here.\n  createBlankFeature() {\n    const blankFeature: Feature = {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [0, 0],\n      },\n      properties: {},\n    };\n    return blankFeature;\n  }\n\n  openDownloadSelector(fileName: string) {\n    const modal = this.dialog.open(ModalDownloadSelectorComponent);\n    let path: Array<string>;\n    modal.afterClosed().subscribe((passbackData: Array<string>) => {\n      path = passbackData;\n      this.saveFile(path[3] == '.json', true, path[0], path[1], path[2]);\n    });\n  }\n\n  openCreateProjectModal() {\n    this.dialog.open(ModalCreateProjectComponent, {\n      height: '400px',\n      width: '600px',\n    });\n  }\n\n  openShareProjectModal() {\n    this.dialog.open(ModalShareProjectComponent, {\n      height: '400px',\n      width: '600px',\n    });\n  }\n\n  openProjectModal(project) {\n    const modal = this.dialog.open(ModalCurrentProjectComponent, {\n      height: '400px',\n      width: '600px',\n      data: {\n        id: project.id,\n        name: project.name,\n        description: project.description,\n        uuid: project.uuid,\n      },\n    });\n\n    modal.afterClosed().subscribe((passbackData: Array<string>) => {\n      this.projectsService.setActiveProject(this.projects[0]);\n    });\n  }\n\n  addGroup(name: string) {\n    this.groupName = name;\n    if (!name || 0 === name.length) {\n      this.invalidNameError = true;\n      this.existingNameError = false;\n    } else if (this.groups.get(name)) {\n      this.invalidNameError = false;\n      this.existingNameError = true;\n    } else {\n      this.invalidNameError = false;\n      this.existingNameError = false;\n      const newGroup = this.geoDataService.createNewGroup(\n        this.selectedProject.id,\n        this.selectedImages,\n        name\n      );\n      this.dialog.closeAll();\n      this.groupsService.unselectAllImages();\n    }\n  }\n\n  openAddGroupModal(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  toggleTagger() {\n    if (!this.showTagger) {\n      this.scrollService.setScrollRestored(true);\n\n      const [initialGroupName] = this.groupsFeatures.keys();\n      const activeGroupFeatures = this.groupsFeatures.get(initialGroupName);\n      const activeGroup = this.groups.get(initialGroupName);\n      this.geoDataService.setActiveGroup(activeGroup);\n\n      this.groupsService.setShowTagGenerator(false);\n      this.groupsService.unselectAllImages();\n    } else {\n      this.scrollService.setScrollPosition();\n    }\n\n    this.groupsService.toggleTagger();\n  }\n\n  getAssetDisplay() {\n    return this.activeGroupFeature.featureShortPath();\n  }\n\n  otherPath(dir: boolean) {\n    if (dir) {\n      this.activeGroupFeaturesRotate.push(\n        this.activeGroupFeaturesRotate.shift()\n      );\n    } else {\n      this.activeGroupFeaturesRotate.unshift(\n        this.activeGroupFeaturesRotate.pop()\n      );\n    }\n    this.activeGroupFeature = this.activeGroupFeaturesRotate[0];\n    this.geoDataService.setActiveGroupFeature(this.activeGroupFeature);\n  }\n\n  // saves project as a CSV file by first organizing a JSON or a CSV and converting it. Saves to either MyData or local\n  // I apologize in advance for this mess of a function -Ben\n  // This really needs to be split into something like 3 separate functions\n  saveFile(\n    isJSON: Boolean,\n    forExport: Boolean = false,\n    systemID = '',\n    path = '',\n    fileName\n  ) {\n    let CSVHolder = 'FeatureID,longitude,latitude,src';\n    let JSONHolder: String = '';\n    let projID = '';\n    let tagsPresent = true;\n    let headerComplete = false; // If true, then the full csv header info has been compiled\n    let headerTagOptions = 0; // Controls how many tagOption columns are in the final CSV\n\n    this.featureList.forEach((element) => {\n      // Retrieves project ID for building a filename\n      projID = element.project_id;\n\n      // retrieves longitude and latitude values as an array\n      const coordinates = element.geometry.coordinates;\n\n      // creates image source URL from environment and cleans up URL to a usable link\n      let featureSource =\n        environment.apiUrl + '/assets/' + element.assets[0].path;\n      featureSource = featureSource.replace(/([^:])(\\/{2,})/g, '$1/');\n\n      // Grabs group data\n      // Group data can be accessed from the feature, through the properties element\n      // If the image doesn't have a group, a placeholder is given\n      // NOTE: future group properties can be accessed in the same way\n      let group, styles, tag;\n      try {\n        try {\n          group = element.properties.group;\n        } catch {\n          group = [\n            {\n              color: '#000000',\n              name: 'N/A',\n              icon: 'fa-house-damage',\n            },\n          ];\n        }\n\n        try {\n          styles = element.properties.style;\n        } catch {\n          styles = [];\n        }\n\n        try {\n          tag = element.properties.tag;\n        } catch {\n          tag = [];\n        }\n\n        // If groups are present on the data, add header data\n        if (group.length > 0 && !headerComplete) {\n          CSVHolder += ',groupName,groupColor,groupIcon';\n        }\n\n        // Check if the tag var has any data, if so, add new lines to the header\n        if (tag != undefined && tagsPresent && !headerComplete) {\n          // Add a few more lines to the holder to accomodate tags\n          CSVHolder += ',Icon,Color,tagType,tagSelection';\n          tag.forEach((tag) => {\n            let tempTagOptionNum = 0;\n            tag.options.forEach((option) => {\n              tempTagOptionNum++;\n              if (tempTagOptionNum > headerTagOptions) {\n                CSVHolder += ',tagOption';\n                headerTagOptions = tempTagOptionNum;\n              }\n            });\n          });\n          if (!headerComplete) {\n            CSVHolder += '\\r\\n';\n            tagsPresent = false;\n            headerComplete = true;\n          }\n        } else if (!headerComplete) {\n          // If not, indent the last line.\n          CSVHolder += '\\r\\n';\n          headerComplete = true;\n        }\n      } catch (error) {}\n\n      if (isJSON) {\n        // Compile the data it into a JSON\n        JSONHolder +=\n          this.compileJSON(\n            coordinates,\n            element.id,\n            featureSource,\n            group,\n            tag,\n            styles\n          ) + ', \\n';\n      } else {\n        // Compiles the attributes into a CSV format\n        // If there is no groups for the feature, output without group info\n        if (group == undefined) {\n          // Indents CSV header.\n          CSVHolder += '\\r\\n';\n          // Compiles data to a line of a CSV, and adds it to a growing full CSV file\n          // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n          const tempCSV =\n            element.id +\n            ',' +\n            coordinates[0] +\n            ',' +\n            coordinates[1] +\n            ',' +\n            featureSource +\n            '\\r\\n';\n          CSVHolder += tempCSV;\n        } else {\n          group.forEach((group) => {\n            // If tags exist, try to add each tag to the CSV\n            if (tag != undefined) {\n              try {\n                tag.forEach((tag) => {\n                  // If the tag is in the group, compile a row\n                  // TODO: If a group doesn't have a tag, it doesn't get printed at all\n                  if (true) {\n                    // (tag.groupName === group.name) {\n                    // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n                    let tempCSV =\n                      element.id +\n                      ',' +\n                      coordinates[0] +\n                      ',' +\n                      coordinates[1] +\n                      ',' +\n                      featureSource +\n                      ',' +\n                      // groupName\t\t\tgroupColor\t\t\tgroupIcon\t\t   Icon\t\t\t\t\t Color\n                      group.name +\n                      ',' +\n                      group.color +\n                      ',' +\n                      group.icon +\n                      ',' +\n                      styles.faIcon +\n                      ',' +\n                      styles.color +\n                      ',' +\n                      // tagType\t\t\ttagOption(This is repeated a lot)\n                      tag.type +\n                      ',' +\n                      tag.extra[0].option;\n                    tag.options.forEach((option) => {\n                      // Save each option in the tag to the CSV\n                      // Adds just the label to the CSV, we can reconstruct the key from that.\n                      tempCSV += ',' + option.label;\n                    });\n                    tempCSV += '\\r\\n';\n                    // And adds it to a growing full CSV file\n                    CSVHolder += tempCSV;\n                  }\n                });\n              } catch {\n                try {\n                  // If the above fails, attempt to construct a line with group data\n                  // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n                  const tempCSV =\n                    element.id +\n                    ',' +\n                    coordinates[0] +\n                    ',' +\n                    coordinates[1] +\n                    ',' +\n                    featureSource +\n                    ',' +\n                    // groupName\t\t\tgroupColor\t\t\tgroupIcon\n                    group.name +\n                    ',' +\n                    group.color +\n                    ',' +\n                    group.icon +\n                    '\\r\\n';\n                  CSVHolder += tempCSV;\n                } catch (error) {\n                  // If all else fails, It writes no data on an error, so output the groupless data\n                  // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n                  const tempCSV =\n                    element.id +\n                    ',' +\n                    coordinates[0] +\n                    ',' +\n                    coordinates[1] +\n                    ',' +\n                    featureSource +\n                    '\\r\\n';\n                  CSVHolder += tempCSV;\n                }\n              }\n            } else {\n              // Compiles data to a line of a CSV\n              // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n              const tempCSV =\n                element.id +\n                ',' +\n                coordinates[0] +\n                ',' +\n                coordinates[1] +\n                ',' +\n                featureSource +\n                ',' +\n                // groupName\t\t\tgroupColor\t\t\tgroupIcon\n                group.name +\n                ',' +\n                group.color +\n                ',' +\n                group.icon +\n                '\\r\\n';\n              // And adds it to a growing full CSV file\n              CSVHolder += tempCSV;\n            }\n          });\n        }\n      }\n    });\n    let content;\n    let extension;\n    // determine whether the file is wanted as a JSON or a CSV\n    if (isJSON) {\n      content = JSONHolder;\n      extension = '.json';\n    } else {\n      content = CSVHolder;\n      extension = '.csv';\n    }\n\n    // If the function is marked for export to Design Safe, route through export, otherwise, download the file\n    if (forExport) {\n      fileName == ''\n        ? (fileName = projID + extension)\n        : (fileName += extension);\n      this.filesService.export(systemID, path, fileName, extension, content);\n    } else {\n      this.download(content, extension, projID);\n    }\n  }\n\n  compileJSON(\n    coordinates,\n    featureID,\n    featureSource: string,\n    groups = [],\n    tags = [],\n    style\n  ) {\n    let compiledJSON = '';\n    let transferJSON;\n\n    // Add the most basic information to the compiled JSON\n    transferJSON = {\n      longitude: coordinates[0],\n      latitude: coordinates[1],\n      src: featureSource,\n    };\n    compiledJSON += JSON.stringify(transferJSON);\n\n    if (groups.length != 0) {\n      groups.forEach((group) => {\n        // At this point, group info should be added,\n        // If tags are set to a default value, there are none present, compile without tag information\n        transferJSON = {\n          groupName: group.name,\n          groupColor: group.color,\n        };\n        compiledJSON += JSON.stringify(transferJSON);\n        if (tags.length > 0) {\n          // Compile a JSON with full tag information\n          tags.forEach((tag) => {\n            if (tag.feature == featureID) {\n              transferJSON = {\n                icon: style.faIcon,\n                'icon color': style.color,\n                'tag name': tag.label,\n                'tag type': tag.type,\n                'tag selection': tag.extra[0].option,\n              };\n              compiledJSON += JSON.stringify(transferJSON);\n            }\n          });\n        }\n      });\n    }\n    // If the above failed, compile the minimum JSON\n    if (compiledJSON == '') {\n      transferJSON = {\n        longitude: coordinates[0],\n        latitude: coordinates[1],\n        src: featureSource,\n      };\n      compiledJSON += JSON.stringify(transferJSON);\n    }\n    return compiledJSON;\n  }\n\n  download(content, extension, projID) {\n    // Creates a download link in typescript through a blob\n    const blob = new Blob(['\\ufeff' + content], {\n      type: 'text/csv;charset=utf-8;',\n    });\n    const download = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    const filename = 'taggit-proj-' + projID;\n\n    // checks if the browser is Safari or otherwise, if so open download in new window\n    // Its a quirk of those browsers that they don't allow same-page downloads\n    if (\n      navigator.userAgent.indexOf('Safari') != -1 &&\n      navigator.userAgent.indexOf('Chrome') == -1\n    ) {\n      download.setAttribute('target', '_blank');\n    }\n    // Sets up the link, and simulates a click\n    download.setAttribute('href', url);\n    download.setAttribute('download', filename + extension);\n    download.style.visibility = 'hidden';\n    document.body.appendChild(download);\n    download.click();\n    document.body.removeChild(download);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { AuthService } from './services/authentication.service';\nimport { environment } from '../environments/environment';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((err) => {\n        if (err.status === 401) {\n          // auto logout if 401 response returned from api\n          this.authService.logout();\n          location.reload();\n        }\n\n        const error = err.error.message || err.statusText;\n        return throwError(error);\n      })\n    );\n  }\n}\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n  constructor(private authSvc: AuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.indexOf('https://agave.designsafe-ci.org') > -1) {\n      if (this.authSvc.isLoggedIn()) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: 'Bearer ' + this.authSvc.userToken.token,\n          },\n        });\n      }\n    }\n    // we put the JWT on the request to our geoapi API because it is not behind ws02 if in local dev\n    // and if user is logged in\n    if (\n      request.url.indexOf('http://localhost') > -1 &&\n      this.authSvc.isLoggedIn()\n    ) {\n      // add header\n      request = request.clone({\n        setHeaders: {\n          'X-JWT-Assertion-designsafe': environment.jwt,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import {\n  AfterViewChecked,\n  Component,\n  OnInit,\n  Renderer2,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { GeoDataService } from '../../services/geo-data.service';\nimport {\n  FeatureAsset,\n  Feature,\n  Project,\n  FeatureCollection,\n  TagGroup,\n} from '../../models/models';\nimport { AppEnvironment, environment } from '../../../environments/environment';\nimport { ProjectsService } from '../../services/projects.service';\nimport { ScrollService } from 'src/app/services/scroll.service';\nimport { GroupsService } from '../../services/groups.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { startWith } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ModalCreateProjectComponent } from '../modal-create-project/modal-create-project.component';\nimport { FeatureService } from 'src/app/services/feature.service';\n\n@Component({\n  selector: 'app-image-gallery',\n  templateUrl: './image-gallery.component.html',\n  styleUrls: ['./image-gallery.component.scss'],\n})\nexport class ImageGalleryComponent implements OnInit, AfterViewChecked {\n  environment: AppEnvironment;\n\n  public projects: Project[];\n  groupName: string;\n  showTagger = false;\n  scrolling = false;\n  scrollStatus: string;\n  imagesExist: boolean;\n  projectsExist: boolean;\n  featureList: Array<any> = [];\n  featureListScroll: Array<any>;\n  scrollSum = 15;\n  activeGroup: TagGroup;\n  activeFeature: Feature;\n  activeGroupFeature: Feature;\n  // activeFeatureNum: number;\n  featurePath: string;\n  loaded: boolean;\n  groupsFeatures: Map<string, any>;\n  groups: Map<string, any>;\n\n  constructor(\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService,\n    private groupsService: GroupsService,\n    private readonly cdr: ChangeDetectorRef,\n    private renderer: Renderer2,\n    private spinner: NgxSpinnerService,\n    private dialog: MatDialog,\n    private scrollService: ScrollService,\n    private featureService: FeatureService\n  ) {}\n\n  ngAfterViewChecked() {\n    if (this.scrollService.scrollRestored) {\n      this.scrollService.scroll();\n    }\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit() {\n    this.environment = environment;\n\n    this.geoDataService.loaded.subscribe(\n      (e) => {\n        this.loaded = e;\n      },\n      (error) => {\n        this.projectsExist = false;\n      }\n    );\n\n    this.featureService.features$.subscribe((fc: any) => {\n      if (fc) {\n        if (fc.features.length > 0) {\n          this.imagesExist = true;\n          this.featureList = fc.features.filter((feature) => {\n            try {\n              return (\n                feature.initialAsset() && feature.featureType() === 'image'\n              );\n            } catch (error) {\n              // If a feature has no asset, it ends up in this catch\n              console.error(error);\n              // After outputting the error, add an \"image not found\" placeholder,\n              // Allowing users to still select their errored import\n              // Note that this doesn't really work!\n              feature.assets.push({ path: '../../images/Image-not-found.png' });\n              return false;\n            }\n          });\n          this.featureListScroll = this.featureList.slice(0, this.scrollSum);\n        } else {\n          this.imagesExist = false;\n        }\n      }\n    });\n\n    this.projectsService.projects.subscribe((projects) => {\n      this.projects = projects;\n      if (this.projects.length) {\n        this.projectsExist = true;\n      } else {\n        this.projectsExist = false;\n      }\n    });\n\n    this.geoDataService.groupsFeatures.subscribe((next) => {\n      this.groupsFeatures = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.geoDataService.activeFeature.subscribe((next) => {\n      if (next) {\n        this.activeFeature = next;\n      }\n    });\n\n    this.geoDataService.activeGroup.subscribe((next: TagGroup) => {\n      this.activeGroup = next;\n    });\n\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.groupsService.showTagger.subscribe((next) => {\n      this.showTagger = next;\n      this.scrollStatus = next ? 'success' : 'danger';\n    });\n  }\n\n  getPath() {\n    return (\n      this.environment.apiUrl +\n      '/assets/' +\n      this.activeGroupFeature.assets[0].path.replace(/([^:])(\\/{2,})/g, '$1/')\n    );\n  }\n\n  appendSum() {\n    if (this.featureList.length != 0) {\n      if (this.scrollSum == this.featureList.length) {\n        this.spinner.hide();\n        this.scrolling = false;\n        return;\n      }\n      // If scrollSum is larger than the length of the feature list, curtail it to just be the length\n      if (this.scrollSum > this.featureList.length) {\n        this.scrollSum = this.featureList.length;\n      }\n    }\n    this.featureListScroll = this.featureList.slice(0, this.scrollSum);\n    setTimeout(() => {\n      this.spinner.hide();\n      this.scrolling = false;\n    }, 1300);\n  }\n\n  onScroll() {\n    if (!this.scrolling) {\n      this.spinner.show();\n      this.scrollSum += 10;\n      this.appendSum();\n      this.scrolling = true;\n    }\n  }\n\n  openCreateProjectModal() {\n    this.dialog.open(ModalCreateProjectComponent, {\n      height: '400px',\n      width: '600px',\n    });\n  }\n}\n","import { Component, Input, OnInit, TemplateRef } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { BsModalRef } from 'ngx-foundation/modal/bs-modal-ref.service';\nimport { FeatureService } from 'src/app/services/feature.service';\nimport { ScrollService } from 'src/app/services/scroll.service';\nimport { AppEnvironment, environment } from '../../../environments/environment';\nimport { Feature, Project, TagGroup } from '../../models/models';\nimport { GeoDataService } from '../../services/geo-data.service';\nimport { GroupsService } from '../../services/groups.service';\nimport { ProjectsService } from '../../services/projects.service';\n\n@Component({\n  selector: 'app-image-box',\n  templateUrl: './image-box.component.html',\n  styleUrls: ['./image-box.component.scss'],\n})\nexport class ImageBoxComponent implements OnInit {\n  @Input() feature: any;\n  environment: AppEnvironment;\n  featureSource: string;\n  featurePath: string;\n  status = false; // Controls the whether or not an image box is selected or not\n  imageSelected = 'img-unselected'; // Controls the whether or not an image box is selected or not\n  hasGroup = false;\n  colors: Array<string> = [];\n  groups: Map<string, TagGroup>;\n  coordinates: Array<any>;\n  containingGroupList: Array<any>;\n  selectedImages: Array<any>;\n  modalRef: BsModalRef;\n  groupToAdd: TagGroup;\n\n  public activeProject: Project;\n\n  constructor(\n    private geoDataService: GeoDataService,\n    private groupsService: GroupsService,\n    private projectsService: ProjectsService,\n    private dialog: MatDialog,\n    private scrollService: ScrollService,\n    private featureService: FeatureService\n  ) {}\n\n  ngOnInit() {\n    // TODO: put this in models\n    this.environment = environment;\n    let featureSource: string;\n    if (this.feature.assets[0].path != '../../images/Image-not-found.png') {\n      featureSource =\n        this.environment.apiUrl + '/assets/' + this.feature.assets[0].path;\n    } else {\n      featureSource = this.feature.assets[0].path;\n    }\n    featureSource = featureSource.replace(/([^:])(\\/{2,})/g, '$1/');\n    this.featureSource = featureSource;\n    this.coordinates = this.feature.geometry.coordinates;\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.groupsService.selectedImages.subscribe((next) => {\n      this.selectedImages = next;\n      this.imageSelected = this.groupsService.imageSelected(this.feature)\n        ? 'img-selected'\n        : 'img-unselected';\n    });\n\n    this.featurePath = this.feature.featurePath();\n  }\n\n  imageSelect() {\n    this.groupsService.toggleImageSelect(this.feature);\n  }\n\n  imageZoom(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  imageDelete() {\n    const featureService = this.featureService;\n    this.selectedImages.forEach(function(value) {\n      featureService.deleteFeature(value);\n    });\n    this.groupsService.unselectAllImages();\n    this.scrollService.setScrollRestored(true);\n  }\n\n  openMoreGroupsModal(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  openImageDeleteModal(template: TemplateRef<any>) {\n    this.scrollService.setScrollPosition();\n    this.dialog.open(template);\n  }\n\n  deleteFromGroup(feature: Feature, group: TagGroup) {\n    this.geoDataService.deleteGroupFeatures(\n      this.activeProject.id,\n      [feature],\n      group\n    );\n  }\n\n  openImageAddModal(template: TemplateRef<any>) {\n    this.scrollService.setScrollPosition();\n    this.dialog.open(template);\n  }\n\n  addGroup(group: TagGroup) {\n    this.geoDataService.createGroupFeatures(\n      this.activeProject.id,\n      this.selectedImages,\n      this.groups.get(group.name)\n    );\n    this.groupsService.unselectAllImages();\n    this.scrollService.setScrollRestored(true);\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { GroupForm } from 'src/app/models/models';\n\n@Component({\n  selector: 'app-form-generator',\n  templateUrl: './form-generator.component.html',\n  styleUrls: ['./form-generator.component.scss'],\n})\nexport class FormGeneratorComponent implements OnInit {\n  constructor() {}\n  @Input() form: GroupForm;\n  @Output() newValue: EventEmitter<any> = new EventEmitter<any>();\n  checked = false;\n  colorArray: Array<string> = [];\n  values = [];\n\n  name = new FormControl('');\n\n  ngOnInit() {\n    this.generateColors();\n  }\n\n  // Generates a key:value list of colors ranging from green (#00FF00) to red (#FF0000) based on passed in info\n  generateColors() {\n    let itemCount = this.form.options.length;\n    let isOdd = false;\n    if (itemCount % 2 === 1) {\n      // if there are an odd number of items in the collection, mark it and decriment the counter\n      isOdd = true;\n      itemCount--;\n    }\n    // Subtract 2 from item count (first entry is always green, #00FF00, last entry is always red, #FF0000\n    // Then half the item count, and use it to divide 255, this gives the amount we have to increment the colors\n    itemCount = (itemCount - 2) / 2;\n    let incrementVal = Math.floor(255 / itemCount);\n    if (incrementVal === 255) {\n      incrementVal = Math.floor(incrementVal / 2);\n    }\n    this.colorArray.push('#00FF00');\n    let baseNum = 0;\n    let temp: string;\n    // First loop, counts up from zero towards 255\n    for (let index = 0; index < itemCount; index++) {\n      baseNum = baseNum + incrementVal;\n      temp = baseNum.toString(16);\n      this.colorArray.push(`#${temp}FF00`);\n    }\n    // if there is an odd number of selections, push full yellow as a midpoint in the gradient\n    if (isOdd) {\n      this.colorArray.push('#FFFF00');\n    }\n    baseNum = 255; // Resets baseNum to 255 for the count down\n    // Second loop, counts down from 255 towards zero\n    for (let index = 0; index < itemCount; index++) {\n      baseNum = baseNum - incrementVal;\n      temp = baseNum.toString(16);\n      if (temp.length != 2) {\n        temp = '0' + temp;\n      }\n      this.colorArray.push(`#FF${temp}00`);\n    }\n    // Finally, pushes the color code for red onto the stack for the last entry\n    this.colorArray.push('#FF0000');\n  }\n\n  setValue(formValue) {\n    this.newValue.emit(formValue);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { GroupsService } from '../../services/groups.service';\n\n@Component({\n  selector: 'app-side-bar',\n  templateUrl: './side-bar.component.html',\n  styleUrls: ['./side-bar.component.scss'],\n})\nexport class SideBarComponent implements OnInit {\n  showTagGenerator = false;\n\n  constructor(private groupsService: GroupsService) {}\n\n  ngOnInit() {\n    this.groupsService.showTagGenerator.subscribe((next) => {\n      this.showTagGenerator = next;\n    });\n  }\n}\n","export const groupIcons: Array<any> = [\n  { id: 'fa-house-damage', unicode: '&#xf6f1; house-damage' },\n  { id: 'fa-car', unicode: '&#xf1b9; car' },\n  { id: 'fa-tree', unicode: '&#xf1bb; tree' },\n\n  { id: 'fa-school', unicode: '&#xf549; school' },\n  { id: 'fa-archway', unicode: '&#xf557; archway' },\n  { id: 'fa-building', unicode: '&#xf1ad; building' },\n  { id: 'fa-bus', unicode: '&#xf207; bus' },\n  { id: 'fa-church', unicode: '&#xf51d; church' },\n\n  { id: 'fa-helicopter', unicode: '&#xf533; helicopter' },\n  { id: 'fa-hospital-alt', unicode: '&#xf47d; hospital' },\n  { id: 'fa-hotel', unicode: '&#xf594; hotel' },\n  { id: 'fa-igloo', unicode: '&#xf7ae; igloo' },\n  { id: 'fa-motorcycle', unicode: '&#xf21c; motorcycle' },\n  { id: 'fa-place-of-worship', unicode: '&#xf67f; place-of-worship' },\n  { id: 'fa-plane', unicode: '&#xf072; plane' },\n  { id: 'fa-school', unicode: '&#xf549; school' },\n\n  { id: 'fa-rocket', unicode: '&#xf135; rocket' },\n  { id: 'fa-ship', unicode: '&#xf21a; ship' },\n  { id: 'fa-shopping-cart', unicode: '&#xf07a; shopping-cart' },\n  { id: 'fa-shuttle-van', unicode: '&#xf5b6; shuttle-van' },\n  { id: 'fa-monument', unicode: '&#xf5a6; monument' },\n  { id: 'fa-store', unicode: '&#xf54e; store' },\n\n  { id: 'fa-subway', unicode: '&#xf239; subway' },\n  { id: 'fa-taxi', unicode: '&#xf1ba; taxi' },\n  { id: 'fa-train', unicode: '&#xf238; train' },\n  { id: 'fa-truck', unicode: '&#xf0d1; truck' },\n  { id: 'fa-truck-pickup', unicode: '&#xf63c; truck-pickup' },\n  { id: 'fa-university', unicode: '&#xf19c; university' },\n  { id: 'fa-warehouse', unicode: '&#xf494; warehouse' },\n  { id: 'fa-bolt', unicode: '&#xf0e7; bolt' },\n];\n","import { Component, OnInit, OnDestroy, TemplateRef } from '@angular/core';\nimport { Project, TagGroup } from '../../../models/models';\nimport { ProjectsService } from '../../../services/projects.service';\nimport { FormsService } from '../../../services/forms.service';\nimport { GroupsService } from '../../../services/groups.service';\nimport { GeoDataService } from '../../../services/geo-data.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Subscription } from 'rxjs';\nimport { FeatureService } from 'src/app/services/feature.service';\n\nimport { groupIcons } from 'src/app/utils/groups';\n\n@Component({\n  selector: 'app-select-group',\n  templateUrl: './select-group.component.html',\n  styleUrls: ['./select-group.component.scss'],\n})\nexport class SelectGroupComponent implements OnInit, OnDestroy {\n  groups$: Subscription;\n  activeGroup$: Subscription;\n\n  public selectedProject: Project;\n\n  iconList = groupIcons;\n  selectedIcon = 'fa-house-damage';\n\n  selectedGroup: TagGroup;\n\n  activeGroup: TagGroup;\n  groups: Map<string, TagGroup>;\n  groupsFeatures: Map<string, any>;\n\n  showTagger: boolean;\n  showSubitem = true;\n\n  constructor(\n    private groupsService: GroupsService,\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService,\n    private dialog: MatDialog\n  ) {}\n\n  ngOnInit() {\n    this.projectsService.activeProject.subscribe((next) => {\n      this.selectedProject = next;\n    });\n\n    this.groups$ = this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.geoDataService.groupsFeatures.subscribe((next) => {\n      this.groupsFeatures = next;\n    });\n\n    this.activeGroup$ = this.geoDataService.activeGroup.subscribe((next) => {\n      this.activeGroup = next;\n      if (!next) {\n        this.groupsService.toggleTagger();\n      }\n    });\n  }\n\n  selectGroupForm(group: TagGroup) {\n    this.geoDataService.setActiveGroup(group);\n  }\n\n  openRenameOptionModal(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  // TODO: ensure ui is updated from getFeatures()\n  deleteGroup(group: TagGroup) {\n    const features = this.groupsFeatures.get(group.name);\n    this.geoDataService.deleteGroupFeatures(\n      this.selectedProject.id,\n      features,\n      group\n    );\n  }\n\n  openRenameModal(template: TemplateRef<any>, group: TagGroup) {\n    this.selectedGroup = group;\n    this.dialog.open(template);\n  }\n\n  openIconSelection(template: TemplateRef<any>, group: TagGroup) {\n    this.selectedGroup = group;\n    this.selectedIcon = group.icon;\n    this.dialog.open(template);\n  }\n\n  saveIcon(icon: string) {\n    this.geoDataService.reiconGroup(\n      this.selectedProject.id,\n      this.groupsFeatures.get(this.selectedGroup.name),\n      this.groups.get(this.selectedGroup.name),\n      icon\n    );\n\n    this.dialog.closeAll();\n  }\n\n  isChecked(name: string) {\n    if (this.activeGroup && this.activeGroup.name === name) {\n      return 'checked';\n    } else {\n      return '';\n    }\n  }\n\n  renameGroup(name: string) {\n    this.geoDataService.renameGroup(\n      this.selectedProject.id,\n      this.groupsFeatures.get(this.selectedGroup.name),\n      this.groups.get(this.selectedGroup.name),\n      name\n    );\n\n    this.dialog.closeAll();\n  }\n\n  expandPanel() {\n    this.showSubitem = !this.showSubitem;\n  }\n\n  ngOnDestroy() {\n    this.groups$.unsubscribe();\n    this.activeGroup$.unsubscribe();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Project, TagGroup } from '../../../models/models';\nimport { ProjectsService } from '../../../services/projects.service';\nimport { GeoDataService } from '../../../services/geo-data.service';\nimport { FormsService } from '../../../services/forms.service';\nimport { Feature } from '@turf/turf';\n\n@Component({\n  selector: 'app-select-image',\n  templateUrl: './select-image.component.html',\n  styleUrls: ['./select-image.component.scss'],\n})\nexport class SelectImageComponent implements OnInit {\n  public activeProject: Project;\n  private groups: Map<string, TagGroup>;\n  activeGroup: TagGroup;\n  activeGroupFeature: Feature;\n  showSubitem = true;\n  groupsFeatures: Map<string, any>;\n\n  constructor(\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService\n  ) {}\n\n  ngOnInit() {\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.geoDataService.activeGroup.subscribe((next) => {\n      this.activeGroup = next;\n    });\n\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n    });\n\n    this.geoDataService.groupsFeatures.subscribe((next) => {\n      this.groupsFeatures = next;\n      if (next && this.activeGroup) {\n        const groupFeatures = this.groupsFeatures.get(this.activeGroup.name);\n        if (groupFeatures) {\n          if (!groupFeatures.some((f) => f.id === this.activeGroupFeature.id)) {\n            this.geoDataService.setActiveGroupFeature(groupFeatures[0]);\n          }\n        } else {\n          const [nextGroup] = this.groups.values();\n          if (nextGroup) {\n            this.geoDataService.setActiveGroup(nextGroup);\n          } else {\n            this.geoDataService.setActiveGroup(null);\n          }\n        }\n      }\n    });\n  }\n\n  getActiveFeatures() {\n    if (this.activeGroup) {\n      const groupFeatures = this.groupsFeatures.get(this.activeGroup.name);\n      const group = this.groups.get(this.activeGroup.name);\n      if (group) {\n        return groupFeatures;\n      } else {\n        const [nextGroup] = this.groups.values();\n        if (nextGroup) {\n          this.geoDataService.setActiveGroup(nextGroup);\n          return this.groupsFeatures.get(nextGroup.name);\n        } else {\n          return [];\n        }\n      }\n    } else {\n      return [];\n    }\n  }\n\n  jumpToImage(feat: Feature) {\n    this.geoDataService.setActiveGroupFeature(feat);\n  }\n\n  isActiveFeature(feature: Feature) {\n    return this.activeGroupFeature.id === feature.id;\n  }\n\n  deleteFeature(feat: any) {\n    this.geoDataService.deleteGroupFeatures(\n      this.activeProject.id,\n      [feat],\n      this.groups.get(this.activeGroup.name)\n    );\n  }\n\n  getFeaturePath(feat: any) {\n    return feat.featureShortPath();\n  }\n\n  expandPanel() {\n    this.showSubitem = !this.showSubitem;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { GroupForm } from 'src/app/models/models';\n\n@Component({\n  selector: 'app-form-fields',\n  templateUrl: './form-fields.component.html',\n})\nexport class FormFieldsComponent implements OnInit {\n  field: any;\n  form: GroupForm;\n\n  constructor() {}\n\n  // This file and the HTML connected to this is useless so don't worry about it\n  ngOnInit() {}\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { FeatureService } from 'src/app/services/feature.service';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { GroupsService } from 'src/app/services/groups.service';\nimport { Feature, GroupForm, Project, TagGroup } from 'src/app/models/models';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\n\n@Component({\n  selector: 'app-form-checkbox',\n  templateUrl: 'form-checkbox.component.html',\n})\nexport class FormCheckBoxComponent {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any;\n  @Input() form: GroupForm;\n  value: any[] = [];\n  activeGroupFeature: Feature;\n  activeGroup: TagGroup;\n  private activeProject: Project;\n\n  constructor(\n    private formsService: FormsService,\n    private groupsService: GroupsService,\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService,\n    private featureService: FeatureService\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.formValue.emit({ id: this.form.id, value: this.value });\n    });\n\n    this.geoDataService.activeGroup.subscribe((next) => {\n      this.activeGroup = next;\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n  }\n\n  isChecked(opt) {\n    return this.value.some((val) => val.label === opt.label);\n  }\n\n  selected(e: any, option: any) {\n    this.value = this.value.filter((opt) => opt.label !== option.label);\n    if (e.target.checked) {\n      this.value.push(option);\n    }\n    this.formValue.emit({ id: this.form.id, value: this.value });\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { GroupsService } from 'src/app/services/groups.service';\nimport { Feature, GroupForm } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\n\n@Component({\n  selector: 'app-form-dropdown',\n  templateUrl: './form-dropdown.component.html',\n})\nexport class FormDropDownComponent {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any = {};\n  @Input() form: GroupForm;\n  value: string;\n\n  constructor(\n    private formsService: FormsService,\n    private geoDataService: GeoDataService\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.formValue.emit({ id: this.form.id, value: this.value });\n    });\n  }\n\n  updateCheckedTag() {\n    this.formValue.emit({ id: this.form.id, value: this.value });\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { GroupForm } from 'src/app/models/models';\n\n@Component({\n  selector: 'app-form-file',\n  templateUrl: './form-file.component.html',\n  styleUrls: ['./form-file.component.scss'],\n})\nexport class FormFileComponent {\n  field: any = {};\n  form: GroupForm;\n\n  constructor() {}\n\n  ngOnChange() {\n    console.log(this.field.value);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { GroupForm } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\n\n@Component({\n  selector: 'app-form-radio',\n  templateUrl: './form-radio.component.html',\n})\nexport class FormRadioComponent {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any = {};\n  @Input() form: GroupForm;\n  @Input() label: String;\n  public value: string;\n\n  constructor(\n    private formsService: FormsService,\n    private geoDataService: GeoDataService\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.formValue.emit({ id: this.form.id, value: this.value });\n    });\n  }\n\n  updateCheckedTag() {\n    this.formValue.emit({ id: this.form.id, value: this.value });\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { Feature, GroupForm, Project, TagGroup } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\n\n@Component({\n  selector: 'app-form-textbox',\n  templateUrl: './form-textbox.component.html',\n})\nexport class FormTextBoxComponent {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any = {};\n  @Input() form: GroupForm;\n  value = '';\n\n  constructor(\n    private formsService: FormsService,\n    private geoDataService: GeoDataService\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.formValue.emit({ id: this.form.id, value: this.value });\n    });\n  }\n\n  updateValue() {\n    this.formValue.emit({ id: this.form.id, value: this.value });\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { Feature, Project, GroupForm, TagGroup } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\nimport { ProjectsService } from 'src/app/services/projects.service';\n\n@Component({\n  selector: 'app-form-color',\n  templateUrl: './form-color.component.html',\n  styleUrls: ['./form-color.component.scss'],\n})\nexport class FormColorComponent implements OnInit {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any = {};\n  @Input() form: GroupForm;\n  @Input() color: string;\n  @Input() label: String;\n\n  public chosenTag: string;\n  public activeProject: Project;\n  public activeGroup: TagGroup;\n  public activeGroupFeature: Feature;\n  public chosenColor = '#ffffff';\n  value: any = {};\n\n  constructor(\n    private formsService: FormsService,\n    private projectsService: ProjectsService,\n    private geoDataService: GeoDataService\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.chosenTag = this.value.label;\n      this.formValue.emit({ id: this.form.id, value: this.value });\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n\n    this.geoDataService.activeGroup.subscribe((next: TagGroup) => {\n      this.activeGroup = next;\n    });\n\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n    });\n  }\n\n  updateCheckedTag() {\n    this.value = this.form.options.find((opt) => opt.label === this.chosenTag);\n    this.formsService.saveStyles(\n      this.activeProject.id,\n      [this.activeGroupFeature],\n      this.activeGroup,\n      this.value.color\n    );\n    this.formValue.emit({ id: this.form.id, value: this.value });\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n// CommonModule for dynamic field\nimport { APP_BASE_HREF, CommonModule } from '@angular/common';\n\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { NgxSpinnerModule } from 'ngx-spinner';\nimport { ModalModule, BsDropdownModule, AccordionModule } from 'ngx-foundation';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { NgxMasonryModule } from 'ngx-masonry';\nimport { ToastrModule } from 'ngx-toastr';\n\nimport { FileSizeModule } from 'ngx-filesize';\nimport { ApiModule } from 'ng-tapis';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { MapComponent } from './components/map/map.component';\nimport { MainComponent } from './components/main/main.component';\nimport { NotFoundComponent } from './components/notfound/notfound.component';\nimport { ControlBarComponent } from './components/control-bar/control-bar.component';\nimport { AuthService } from './services/authentication.service';\nimport { CallbackComponent } from './components/callback/callback.component';\nimport { AuthInterceptor, TokenInterceptor } from './app.interceptors';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { ModalFileBrowserComponent } from './components/modal-file-browser/modal-file-browser.component';\nimport { environment } from '../environments/environment';\nimport { ImageGalleryComponent } from './components/image-gallery/image-gallery.component';\n// import { TaggerComponent } from './components/tagger/tagger.component';\n// import { PresetGeneratorComponent } from './components/preset-generator/preset-generator.component';\nimport { ImageBoxComponent } from './components/image-box/image-box.component';\nimport { FormGeneratorComponent } from './components/side-bar/tag-images/form-generator/form-generator.component';\nimport { SideBarComponent } from './components/side-bar/side-bar.component';\n// import { ImageListComponent } from './components/image-list/image-list.component';\nimport { SelectGroupComponent } from './components/side-bar/select-group/select-group.component';\nimport { SelectImageComponent } from './components/side-bar/select-image/select-image.component';\nimport { TagGeneratorComponent } from './components/side-bar/tag-generator/tag-generator.component';\nimport { TagImagesComponent } from './components/side-bar/tag-images/tag-images.component';\nimport { ModalCreateProjectComponent } from './components/modal-create-project/modal-create-project.component';\nimport { ModalCurrentProjectComponent } from './components/modal-current-project/modal-current-project.component';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { MatProgressBar } from '@angular/material';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { ModalDownloadSelectorComponent } from './components/modal-download-selector/modal-download-selector.component';\nimport { FormFieldsComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-fields.component';\nimport { FormCheckBoxComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-checkbox/form-checkbox.component';\nimport { FormDropDownComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-dropdown/form-dropdown.component';\nimport { FormFileComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component';\nimport { FormRadioComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-radio/form-radio.component';\nimport { FormTextBoxComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-textbox/form-textbox.component';\nimport { FormColorComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component';\nimport { ModalShareProjectComponent } from './components/modal-share-project/modal-share-project.component';\nimport { MatCardModule } from '@angular/material/card';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MapComponent,\n    NotFoundComponent,\n    MainComponent,\n    ControlBarComponent,\n    CallbackComponent,\n    ModalFileBrowserComponent,\n    ImageGalleryComponent,\n    // TaggerComponent,\n    // PresetGeneratorComponent,\n    ImageBoxComponent,\n    FormGeneratorComponent,\n    SideBarComponent,\n    // ImageListComponent,\n    SelectGroupComponent,\n    SelectImageComponent,\n    TagGeneratorComponent,\n    TagImagesComponent,\n    ModalCreateProjectComponent,\n    ModalCurrentProjectComponent,\n    MatProgressBar,\n    ModalDownloadSelectorComponent,\n    FormFieldsComponent,\n    FormCheckBoxComponent,\n    FormDropDownComponent,\n    FormFileComponent,\n    FormRadioComponent,\n    FormTextBoxComponent,\n    ModalShareProjectComponent,\n    FormColorComponent,\n  ],\n  imports: [\n    // this is for the ng-tapis library\n    ApiModule.forRoot({ rootUrl: 'https://agave.designsafe-ci.org/' }),\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    InfiniteScrollModule,\n    NgxSpinnerModule,\n    NgxMasonryModule,\n    ToastrModule.forRoot(),\n    ModalModule.forRoot(),\n    MatMenuModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatTooltipModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatIconModule,\n    AccordionModule.forRoot(),\n    ReactiveFormsModule,\n    FormsModule,\n    FileSizeModule,\n    BsDropdownModule.forRoot(),\n    CommonModule,\n    MatProgressSpinnerModule,\n    ScrollingModule,\n    MatTreeModule,\n    MatSnackBarModule,\n    MatCardModule,\n  ],\n  providers: [\n    AuthService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      multi: true,\n      useClass: AuthInterceptor,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      multi: true,\n      useClass: TokenInterceptor,\n    },\n    {\n      provide: APP_BASE_HREF,\n      useValue: environment.baseHref,\n    },\n  ],\n  bootstrap: [AppComponent],\n  entryComponents: [\n    ModalFileBrowserComponent,\n    ModalDownloadSelectorComponent,\n    ModalCreateProjectComponent,\n    ModalCurrentProjectComponent,\n    ModalShareProjectComponent,\n  ],\n})\nexport class AppModule {}\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n","export default \"<div class=\\\"tag-forms\\\">\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">\\n    <span> Tag Images </span>\\n    <span>\\n      <span\\n        style=\\\"cursor: pointer\\\"\\n        (click)=\\\"showTagGenerator()\\\"\\n        matTooltip=\\\"Add New Tag Form\\\"\\n        style=\\\"cursor: pointer; margin-right: 10px\\\"\\n        matTooltipPosition=\\\"above\\\"\\n      >\\n        <i class=\\\"fas fa-plus\\\"></i>\\n      </span>\\n    </span>\\n  </div>\\n  <!-- subitem-title -->\\n\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem\\\">\\n    <div class=\\\"subitem-scroll\\\">\\n      <div *ngFor=\\\"let form of formList\\\">\\n        <div class=\\\"form-item-container\\\">\\n          <div class=\\\"name-group\\\">{{ form.label }} ({{ form.type }})</div>\\n          <div class=\\\"button-group\\\">\\n            <div (click)=\\\"deleteForm(form)\\\">\\n              <i\\n                class=\\\"fas fa-minus\\\"\\n                matTooltip=\\\"Delete\\\"\\n                matTooltipPosition=\\\"above\\\"\\n                style=\\\"cursor: pointer\\\"\\n              >\\n              </i>\\n            </div>\\n            <!-- delete button -->\\n\\n            <div (click)=\\\"openRenameOptionModal(renameFormItemModal)\\\">\\n              <i\\n                class=\\\"fas fa-edit\\\"\\n                matTooltip=\\\"Rename\\\"\\n                matTooltipPosition=\\\"above\\\"\\n                style=\\\"cursor: pointer\\\"\\n              >\\n              </i>\\n            </div>\\n\\n            <ng-template #renameFormItemModal>\\n              <input\\n                matInput\\n                #formItemRename\\n                [(ngModel)]=\\\"newTagValue\\\"\\n                value=\\\"{{ form.label }}\\\"\\n                placeholder=\\\"Rename Form Item\\\"\\n                (keyup.enter)=\\\"renameForm(form)\\\"\\n              />\\n              <br />\\n              <br />\\n              <div class=\\\"button-group\\\">\\n                <button\\n                  matDialogClose\\n                  mat-raised-button\\n                  color=\\\"primary\\\"\\n                  (click)=\\\"renameForm(form.label)\\\"\\n                >\\n                  Rename\\n                </button>\\n                <button matDialogClose mat-button>Cancel</button>\\n              </div>\\n            </ng-template>\\n            <!-- rename modal -->\\n          </div>\\n          <!-- button group -->\\n        </div>\\n        <!-- form-item-container -->\\n        <app-form-generator\\n          (newValue)=\\\"setValue($event)\\\"\\n          [form]=\\\"form\\\"\\n        ></app-form-generator>\\n      </div>\\n      <div *ngIf=\\\"formList && formList.length\\\">\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"saveTags()\\\">\\n          Save\\n        </button>\\n      </div>\\n    </div>\\n    <!-- subitem scroll -->\\n  </div>\\n  <!--subitem -->\\n</div>\\n<!-- tag-forms -->\\n\"","export default \"<div>\\n  <div [ngSwitch]=\\\"form.type\\\" class=\\\"form-controls\\\">\\n    <ng-container *ngSwitchCase=\\\"'text'\\\">\\n      <app-form-textbox\\n        (formValue)=\\\"setValue($event)\\\"\\n        [field]=\\\"form.options\\\"\\n        [form]=\\\"form\\\"\\n      ></app-form-textbox>\\n    </ng-container>\\n\\n    <ng-container *ngSwitchCase=\\\"'dropdown'\\\">\\n      <app-form-dropdown\\n        (formValue)=\\\"setValue($event)\\\"\\n        [field]=\\\"form.options\\\"\\n        [form]=\\\"form\\\"\\n      ></app-form-dropdown>\\n    </ng-container>\\n\\n    <ng-container *ngSwitchCase=\\\"'radio'\\\">\\n      <app-form-radio\\n        (formValue)=\\\"setValue($event)\\\"\\n        [field]=\\\"opt\\\"\\n        [form]=\\\"form\\\"\\n        label=\\\"{{ form.label }}\\\"\\n      ></app-form-radio>\\n    </ng-container>\\n\\n    <ng-container *ngSwitchCase=\\\"'checkbox'\\\">\\n      <app-form-checkbox\\n        (formValue)=\\\"setValue($event)\\\"\\n        [form]=\\\"form\\\"\\n      ></app-form-checkbox>\\n    </ng-container>\\n\\n    <ng-container *ngSwitchCase=\\\"'color'\\\">\\n      <app-form-color\\n        (formValue)=\\\"setValue($event)\\\"\\n        [field]=\\\"opt\\\"\\n        [form]=\\\"form\\\"\\n        label=\\\"{{ form.label }}\\\"\\n        [color]=\\\"colorArray[form.options.indexOf(opt)]\\\"\\n      ></app-form-color>\\n    </ng-container>\\n  </div>\\n</div>\\n\""]}