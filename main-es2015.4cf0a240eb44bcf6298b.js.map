{"version":3,"sources":["webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-dropdown/form-dropdown.component.html","webpack:///src/app/components/side-bar/select-image/select-image.component.html","webpack:///src/app/components/modal-file-browser/modal-file-browser.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component.html","webpack:///src/app/components/notfound/notfound.component.scss","webpack:///src/app/components/modal-download-selector/modal-download-selector.component.html","webpack:///src/app/components/main/main.component.scss","webpack:///src/app/components/main/main.component.html","webpack:///src/app/components/notfound/notfound.component.html","webpack:///src/app/components/modal-download-selector/modal-download-selector.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component.scss","webpack:///src/app/components/side-bar/select-group/select-group.component.scss","webpack:///src/app/components/side-bar/side-bar.component.scss","webpack:///src/app/components/side-bar/tag-generator/tag-generator.component.html","webpack:///src/app/components/image-gallery/image-gallery.component.scss","webpack:///src/app/components/modal-share-project/modal-share-project.component.html","webpack:///src/app/components/image-gallery/image-gallery.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-fields.component.html","webpack:///src/app/components/side-bar/select-image/select-image.component.scss","webpack:///src/app/app.component.html","webpack:///src/app/components/callback/callback.component.html","webpack:///src/app/components/image-box/image-box.component.html","webpack:///src/app/components/side-bar/side-bar.component.html","webpack:///src/$_lazy_route_resource lazy namespace object","webpack:///src/app/components/side-bar/tag-generator/tag-generator.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-textbox/form-textbox.component.html","webpack:///src/app/components/modal-share-project/modal-share-project.component.scss","webpack:///src/app/components/map/map.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-radio/form-radio.component.html","webpack:///src/app/components/modal-create-project/modal-create-project.component.scss","webpack:///src/app/components/image-box/image-box.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-generator.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component.html","webpack:///src/app/components/modal-current-project/modal-current-project.component.html","webpack:///src/app/components/modal-create-project/modal-create-project.component.html","webpack:///src/app/components/map/map.component.scss","webpack:///src/app/components/side-bar/tag-images/tag-images.component.scss","webpack:///src/app/components/side-bar/select-group/select-group.component.html","webpack:///src/app/components/modal-current-project/modal-current-project.component.scss","webpack:///src/app/components/callback/callback.component.scss","webpack:///src/app/components/modal-file-browser/modal-file-browser.component.scss","webpack:///src/app/components/control-bar/control-bar.component.scss","webpack:///src/app/components/control-bar/control-bar.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-checkbox/form-checkbox.component.html","webpack:///src/app/app.component.scss","webpack:///src/app/components/notfound/notfound.component.ts","webpack:///src/app/models/models.ts","webpack:///src/environments/environmentType.ts","webpack:///src/environments/environment.ts","webpack:///src/app/services/authentication.service.ts","webpack:///src/app/services/notifications.service.ts","webpack:///src/app/services/scroll.service.ts","webpack:///src/app/services/geo-data.service.ts","webpack:///src/app/utils/randomColor.ts","webpack:///src/app/components/main/main.component.ts","webpack:///src/app/components/callback/callback.component.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/utils/leafletUtils.ts","webpack:///src/app/components/map/map.component.ts","webpack:///src/app/services/projects.service.ts","webpack:///src/app/services/agave-systems.service.ts","webpack:///src/app/services/tapis-files.service.ts","webpack:///src/app/components/modal-file-browser/modal-file-browser.component.ts","webpack:///src/app/components/modal-download-selector/modal-download-selector.component.ts","webpack:///src/app/components/modal-create-project/modal-create-project.component.ts","webpack:///src/app/components/modal-share-project/modal-share-project.component.ts","webpack:///src/app/services/groups.service.ts","webpack:///src/app/services/forms.service.ts","webpack:///src/app/components/modal-current-project/modal-current-project.component.ts","webpack:///src/app/services/feature.service.ts","webpack:///src/app/components/control-bar/control-bar.component.ts","webpack:///src/app/app.interceptors.ts","webpack:///src/app/components/image-gallery/image-gallery.component.ts","webpack:///src/app/components/image-box/image-box.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-generator.component.ts","webpack:///src/app/components/side-bar/side-bar.component.ts","webpack:///src/app/utils/groups.ts","webpack:///src/app/components/side-bar/select-group/select-group.component.ts","webpack:///src/app/components/side-bar/select-image/select-image.component.ts","webpack:///src/app/components/side-bar/tag-generator/tag-generator.component.ts","webpack:///src/app/components/side-bar/tag-images/tag-images.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-fields.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-checkbox/form-checkbox.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-dropdown/form-dropdown.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-radio/form-radio.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-textbox/form-textbox.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component.ts","webpack:///src/app/app.module.ts","webpack:///src/main.ts","webpack:///src/app/components/side-bar/tag-images/tag-images.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-generator.component.html"],"names":["__webpack_require__","r","__webpack_exports__","default","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","NotFoundComponent","[object Object]","tslib_es6","a","Object","core","n","selector","template","b","GroupForm","AssetFilters","this","bbox","assetType","Set","has","delete","add","Project","ProjectRequest","AuthToken","token","expires","Date","expires_in","getTime","Feature","f","geometry","properties","type","assets","styles","project_id","length","initialAsset","asset_type","display_path","path","toString","exec","slice","EnvironmentType","Production","Staging","Local","environment","production","apiUrl","clientId","baseHref","backend","AuthenticatedUser","username","email","authentication_service_AuthService","http","router","_currentUser","ReplaySubject","currentUser","asObservable","LS_TOKEN_KEY","LS_USER_KEY","tokenStr","localStorage","getItem","JSON","parse","userToken","isExpired","logout","redirectToauthenticaor","getUserInfo","AUTH_URL","location","origin","Math","random","window","href","removeItem","fromExpiresIn","setItem","stringify","navigate","userStr","user","next","get","subscribe","resp","u","name","fesm2015_http","fesm2015_router","C","providedIn","notifications_service_NotificationsService","toastr","authService","TIMEOUT","_notifications","notifications","isLoggedIn","interval","getRecent","baseUrl","now","toISOString","notes","forEach","note","status","showSuccessToast","message","showErrorToast","success","error","ngx_toastr","ScrollService","scrollRestored","scrollPosition","change","document","documentElement","scrollTop","scroll","top","geo_data_service_GeoDataService","notificationsService","scrollService","_pointClouds","BehaviorSubject","pointClouds","_loaded","loaded","_activeGroupId","activeGroupId","_activeGroup","activeGroup","_activeGroupFeature","activeGroupFeature","_groups","groups","_groupsFeatures","groupsFeatures","_features","features","features$","_activeFeature","_mapMouseLocation","_basemap","_overlays","_activeOverlay","projectId","feature","query","restoreScroll","qstring","querystring","toJson","fc","map","feat","getGroups","setScrollRestored","getFeatures","group","groupFeatures","value","some","gf","setActiveGroupFeature","pipe","take","current","push","title","conversionParams","payload","description","conversion_parameters","post","getPointClouds","featureId","groupData","pc","file","form","FormData","append","console","log","files","tmp","system","fileList","showImportErrorToast","remoteFile","system_id","response","importImage","downloadLink","createElement","blob","Blob","URL","createObjectURL","setAttribute","body","appendChild","click","removeChild","feats","addFeature","getValue","activeFeature","ovs","label","minLat","maxLat","minLon","maxLon","toFixed","getOverlays","featureList","Map","filter","set","setActiveGroup","groupName","grp","groupProp","getGroupFeatures","v4","color","i","floor","icon","createGroupFeatures","createGroup","updateFeatureProperty","deleteGroup","updateGroup","renamedGroup","assign","updateGroupFeatures","reiconedGroup","forms","overlays","activeOverlay","ov","mapMouseLocation","loc","basemap","bmap","MainComponent","geoDataService","bsModalService","ngx_foundation","c","CallbackComponent","route","auth","frag","snapshot","fragment","params","URLSearchParams","setToken","Activate","authSvc","state","login","routes","component","canActivate","AppRoutingModule","K","imports","forRoot","onSameUrlNavigation","providers","AppComponent","createMarker","latlng","marker","featureType","ico","leaflet_src","divIcon","className","html","circleMarker","radius","fillColor","weight","opacity","fillOpacity","map_component_MapComponent","GeoDataService","mapType","FeatureGroup","featureClickHandler","bind","mouseEventHandler","center","zoom","baseOSM","tileLayer","maxZoom","attribution","satellite","addLayer","loadFeatures","on","ev","skip","addRemoveOverlay","turf_min","fitBounds","removeLayer","overlay","imageOverlay","getBounds","geojsonOptions","pointToLayer","collection","clearLayers","markers","markerClusterGroup","iconCreateFunction","cluster","getChildCount","d","geoJSON","layer","projects_service_ProjectsService","_projects","projects","_activeProject","activeProject","_projectUsers","projectUsers$","_deletingProjects","deletingProjects","myProjs","p","deletingProj","find","dp","updateProjectsList","data","prom","proj","setActiveProject","put","project","deleting","getProjects","deletingFailed","tap","users","uname","getProjectUsers","agave_systems_service_AgaveSystemsService","tapis","_systems","systems","systemsList","result","sys","startsWith","ng_tapis","tapis_files_service_TapisFilesService","popup","_listing","listing","IMPORTABLE_TYPES","ext","getFileExtension","includes","split","pop","toLowerCase","offset","limit","filesList","systemId","filePath","arr","replace","join","systemID","fileName","extension","snackbarConfig","duration","horizontalPosition","verticalPosition","fullURL","fileType","date","File","lastModified","valueOf","msg","open","sysStr","lastSystem","fileStr","lastFile","noPreviousSelections","snack_bar","modal_file_browser_component_ModalFileBrowserComponent","ModalFileBrowserComponent_1","tapisFilesService","dialogRef","dialog","agaveSystemsService","currentPath","w","allowedExtensions","inProgress","retrievalError","selectedFiles","onClose","Subject","list","combineLatest","myDataSystem","communityDataSystem","publishedDataSystem","selectedSystem","currentDirectory","init","browse","pth","selectedPath","getFiles","hasMoreFiles","listFiles","shift","getParentPath","unshift","newFile","allowedExt","index","concat","event","shiftKey","selectFilesShiftClick","checkIfSelectable","addSelectedFile","selectShift","firstFileIndex","saveState","Array","from","values","close","count","select","clear","undefined","addRangeFiles","lastFileIndex","again","maxIndex","max","min","esm2015_dialog","R","modal_download_selector_component_ModalDownloadSelectorComponent","ModalDownloadSelectorComponent_1","passbackData","fileExtension","downloadSelectForm","fesm2015_forms","Name","Extension","dirty","modal_create_project_component_ModalCreateProjectComponent","projectsService","projCreateForm","projRqst","create","modal_share_project_component_ModalShareProjectComponent","projShareForm","activeProj","projectUsers","onlyOne","addUserToProject","deleteUserFromProject","groups_service_GroupsService","_selectedImages","selectedImages","_showTagger","showTagger","_showTagGenerator","showTagGenerator","currentFeatures","newFeatures","imageSelected","forms_service_FormsService","featureGroups","taggedGroup","t","targetForm","newName","selectedColor","checkDefault","style","faIcon","updateFeatureStyle","tagValue","tagProp","tags","tag","formList","newValues","tagValueObj","featTag","modal_current_project_component_ModalCurrentProjectComponent","projData","confirm","uuid","update","B","args","feature_service_FeatureService","featureCollection","featListfeat","deleteFeature","delFeats","featListFeature","Number","featProp","saveFeature","control_bar_component_ControlBarComponent","groupsService","formsService","cdr","filesService","featureService","LatLng","invalidNameError","existingNameError","foundFilePaths","getState","groupsExist","size","grpFts","activeGroupFeatures","activeGroupFeaturesRotate","hasSuccessNotification","hasFailureNotification","selectedProject","item","substring","uploadNewFeature","createBlankFeature","lastProj","getDataForProject","hazmapperLink","detectChanges","unselectAllImages","afterClosed","importFileFromTapis","coordinates","saveFile","height","width","createNewGroup","closeAll","setScrollPosition","initialGroupName","setShowTagGenerator","toggleTagger","featureShortPath","dir","isJSON","forExport","content","CSVHolder","JSONHolder","projID","tagsPresent","headerComplete","headerTagOptions","element","featureSource","_a","_b","_c","tempTagOptionNum","options","option","compileJSON","tempCSV","extra","export","download","featureID","transferJSON","compiledJSON","longitude","latitude","src","groupColor","icon color","tag name","tag type","tag selection","url","filename","navigator","userAgent","indexOf","visibility","k","app_interceptors_AuthInterceptor","request","handle","catchError","err","reload","statusText","throwError","app_interceptors_TokenInterceptor","clone","setHeaders","Authorization","X-JWT-Assertion-designsafe","jwt","image_gallery_component_ImageGalleryComponent","renderer","spinner","scrolling","scrollSum","projectsExist","imagesExist","featureListScroll","scrollStatus","hide","setTimeout","show","appendSum","Z","ngx_spinner","image_box_component_ImageBoxComponent","hasGroup","colors","featurePath","toggleImageSelect","deleteGroupFeatures","F","form_generator_component_FormGeneratorComponent","newValue","checked","colorArray","generateColors","itemCount","isOdd","incrementVal","temp","baseNum","formValue","emit","SideBarComponent","groupIcons","unicode","select_group_component_SelectGroupComponent","iconList","selectedIcon","showSubitem","groups$","activeGroup$","selectedGroup","reiconGroup","renameGroup","unsubscribe","SelectImageComponent","nextGroup","TagGeneratorComponent","formOptions","optionColorFilter","openOption","enabledControls","formType","formName","formLabel","formRequired","target","formColor","opt","optionFilter","labelFilter","clearLabel","clearOptionColor","clearOption","formItem","myOpts","createForm","tag_images_component_TagImagesComponent","tagName","tagValues","grps","deleteForm","renameForm","updateTagValues","FormFieldsComponent","form_checkbox_component_FormCheckBoxComponent","getTagValue","val","form_dropdown_component_FormDropDownComponent","field","FormFileComponent","form_radio_component_FormRadioComponent","String","form_textbox_component_FormTextBoxComponent","form_color_component_FormColorComponent","chosenColor","chosenTag","AppModule","declarations","progress_bar","rootUrl","platform_browser","animations","ngx_infinite_scroll","ngx_masonry","menu","toolbar","esm2015_button","tooltip","input","esm2015_checkbox","esm2015_select","esm2015_radio","j","dist","common","progress_spinner","tree","card","provide","multi","useClass","useValue","bootstrap","entryComponents","sb","platform_browser_dynamic","bootstrapModule","catch"],"mappings":"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","file":"main-es2015.4cf0a240eb44bcf6298b.js","sourcesContent":["export default \"<div>\\n  <select class=\\\"form-control\\\" [(ngModel)]=\\\"value\\\" id=\\\"field.name\\\" name=\\\"field.name\\\" (change)=\\\"updateCheckedTag()\\\">\\n    <option *ngFor=\\\"let opt of field\\\" [value]=\\\"opt.label\\\">{{opt.label}}</option>\\n  </select>\\n</div>\\n\"","export default \"<div class=\\\"asset-list\\\">\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">Image List</div>\\n\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem asset-subitem\\\">\\n\\n\\t<div *ngFor=\\\"let feature of getActiveFeatures()\\\" \\n      (click)=\\\"jumpToImage(feature)\\\" \\n      class=\\\"asset-container\\\" \\n      [ngClass]=\\\"{'highlight': isActiveFeature(feature)}\\\">\\n\\n\\t  <div class=\\\"name-group\\\">\\n\\t\\t{{ getFeaturePath(feature) }}\\n\\t  </div>\\n\\n\\t  <div class=\\\"button-group\\\">\\n\\t\\t<div (click)=\\\"deleteFeature(feature)\\\">\\n\\t\\t  <i class=\\\"fas fa-minus\\\"\\n\\t\\t\\t matTooltip=\\\"Delete\\\"\\n\\t\\t\\t matTooltipPosition=\\\"above\\\">\\n\\t\\t  </i>\\n\\t\\t</div>\\n\\t  </div>\\n\\t</div>\\n  </div>\\n</div>\\n\"","export default \"<h4> Select Files </h4>\\n<small><em> Note: Only files are selectable, not folders. Double click on a folder to navigate into it. </em></small>\\n<hr>\\n<select (ngModelChange)=\\\"selectSystem($event)\\\" [(ngModel)]=\\\"selectedSystem\\\">\\n\\t<option [ngValue]=\\\"myDataSystem\\\"> My Data </option>\\n\\t<option [ngValue]=\\\"communityDataSystem\\\"> Community Data</option>\\n\\t<option [ngValue]=\\\"publishedDataSystem\\\"> Published Data</option>\\n\\t<optgroup label=\\\"My Projects\\\">\\n\\t\\t<option *ngFor=\\\"let project of projects\\\" [ngValue]=\\\"project\\\">{{project.description}}</option>\\n\\t</optgroup>\\n</select>\\n\\n<div class=\\\"fileslisting\\\"  infiniteScroll [infiniteScrollDistance]=\\\"2\\\" [infiniteScrollThrottle]=\\\"100\\\" [scrollWindow]=\\\"false\\\" (scrolled)=\\\"getFiles()\\\">\\n\\t<div class=\\\"clickable\\\" class=\\\"grid-x file-row\\\" (dblclick)=\\\"toRoot()\\\">\\n\\t\\t<i class=\\\"fas fa-folder\\\"></i>\\n\\t\\t<span > Home </span>\\n\\t</div>\\n\\t<div class=\\\"clickable\\\" class=\\\"grid-x file-row\\\">\\n\\t\\t<i class=\\\"fas fa-folder-open\\\"></i>\\n\\t\\t<span class=\\\"lineBreak\\\"> {{selectedPath}} </span>\\n\\t</div>\\n\\t<div *ngIf=\\\"retrievalError\\\" class=\\\"grid-x file-row\\\" class=\\\"error\\\">\\n\\t\\tError retrieving files\\n\\t</div>\\n\\t<div class=\\\"grid-x file-row\\\" *ngFor=\\\"let file of filesList; let fileIndex = index\\\" [ngClass]=\\\"{'selected':selectedFiles.has(file.path)}\\\">\\n\\t\\t<div class=\\\"clickable\\\" (click)=\\\"select($event, file, fileIndex)\\\"  (dblclick)=\\\"browse(file)\\\">\\n\\n\\t\\t\\t<i class=\\\"fas fa-folder\\\" *ngIf=\\\"file.type === 'dir'\\\" ></i>\\n\\t\\t\\t<i class=\\\"far fa-file\\\" *ngIf=\\\"file.type !== 'dir'\\\"></i>\\n\\t\\t\\t<span > {{ file.name }} </span>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"size\\\">\\n\\t\\t\\t{{file.length | filesize }}\\n\\t\\t</div>\\n\\t</div>\\n\\t<div class=\\\"grid-x\\\" *ngIf=\\\"inProgress\\\">\\n\\t\\t<div class=\\\"cell medium-12\\\">\\n\\t\\t  <i class=\\\"fas fa-spin fa-atom\\\"></i>\\n\\t\\t</div>\\n\\t  </div>\\n</div>\\n\\n<div class=\\\"button-group\\\">\\n\\t<button mat-raised-button color=\\\"basic\\\" (click)=\\\"selectAll()\\\">Select all</button>\\n\\t<button mat-raised-button color=\\\"warn\\\" class=\\\"button warning\\\" (click)=\\\"cancel()\\\">Done</button>\\n\\t<button mat-raised-button color=\\\"primary\\\" class=\\\"button\\\" [disabled]=\\\"!selectedFiles.size\\\" (click)=\\\"chooseFiles()\\\">Import</button>\\n</div>\\n\"","export default \":host .drop-container {\\n  background: #fff;\\n  border-radius: 6px;\\n  height: 150px;\\n  width: 100%;\\n  box-shadow: 1px 2px 20px rgba(10, 10, 10, 0.1);\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  border: 2px dashed #c0c4c7;\\n}\\n:host p {\\n  font-size: 16px;\\n  font-weight: 400;\\n  color: #c0c4c7;\\n}\\n:host .upload-button {\\n  display: inline-block;\\n  border: none;\\n  outline: none;\\n  cursor: pointer;\\n  color: #5754a3;\\n}\\n:host .upload-button input {\\n  display: none;\\n}\\n:host .dropzone {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  flex-direction: column;\\n  border-radius: 5px;\\n  background: white;\\n  margin: 10px 0;\\n}\\n:host .dropzone.hovering {\\n  border: 2px solid #f16624;\\n  color: #dadada !important;\\n}\\n:host progress::-webkit-progress-value {\\n  transition: width 0.1s ease;\\n}\"","export default \"<div [formGroup]=\\\"form\\\">\\n  <div *ngIf=\\\"!field.value\\\" class=\\\"drop-container dropzone\\\" dropZone (hovered)=\\\"toggleHover($event)\\\"\\n       (dropped)=\\\"field.onUpload($event)\\\" [class.hovering]=\\\"isHovering\\\">\\n    <p class=\\\"m-0\\\">\\n      Drag a file here or\\n      <label class=\\\"upload-button\\\">\\n\\t<input type=\\\"file\\\" multiple=\\\"\\\" (change)=\\\"field.onUpload($event.target.files)\\\"> browse\\n      </label>\\n      to upload.\\n    </p>\\n  </div>\\n  <div *ngIf=\\\"field.value\\\">\\n    <!-- <button type=\\\"button\\\" class=\\\"btn btn-primary\\\">Change</button> -->\\n    <div class=\\\"card\\\">\\n      <img class=\\\"card-img-top\\\" [src]=\\\"field.value\\\">\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"\"","export default \"<h4> Select Files </h4>\\n<small><em> If no folder is selected, the file will be saved in the root of your selected system. </em></small>\\n<hr>\\n<select (ngModelChange)=\\\"selectSystem($event)\\\" [(ngModel)]=\\\"selectedSystem\\\">\\n\\t<option [ngValue]=\\\"myDataSystem\\\"> My Data </option>\\n\\t<option [ngValue]=\\\"communityDataSystem\\\"> Community Data</option>\\n\\t<option [ngValue]=\\\"publishedDataSystem\\\"> Published Data</option>\\n\\t<optgroup label=\\\"My Galleries\\\">\\n\\t\\t<option *ngFor=\\\"let project of projects\\\" [ngValue]=\\\"project\\\">{{project.description}}</option>\\n\\t</optgroup>\\n</select>\\n<div class=\\\"fileslisting\\\"  infiniteScroll [infiniteScrollDistance]=\\\"2\\\" [infiniteScrollThrottle]=\\\"100\\\" [scrollWindow]=\\\"false\\\" (scrolled)=\\\"getFiles()\\\">\\n\\t<div class=\\\"grid-x file-row\\\" *ngFor=\\\"let file of filesList\\\" [ngClass]=\\\"{'selected':selectedFiles.has(file.path)}\\\">\\n\\t\\t<div class=\\\"clickable\\\" (dblclick)=\\\"browse(file)\\\">\\n\\t\\t\\t<i class=\\\"fas fa-folder\\\" *ngIf=\\\"file.type === 'dir'\\\" ></i>\\n\\t\\t\\t<i class=\\\"far fa-file\\\" *ngIf=\\\"file.type !== 'dir'\\\"></i>\\n\\t\\t\\t<span > {{ file.name }} </span>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"size\\\">\\n\\t\\t\\t{{file.length | filesize }}\\n\\t\\t</div>\\n\\t</div>\\n\\t<div class=\\\"grid-x\\\" *ngIf=\\\"inProgress\\\">\\n\\t\\t<div class=\\\"cell medium-12\\\">\\n\\t\\t  <i class=\\\"fas fa-spin fa-atom\\\"></i>\\n\\t\\t</div>\\n\\t  </div>\\n\\n</div>\\n\\n<form [formGroup]=\\\"downloadSelectForm\\\" (ngSubmit)=\\\"update()\\\" id=\\\"current-project-form\\\">\\n    <div>\\n        <small><em> If no filename is specified, it will default to the Gallery ID number. </em></small>\\n    </div>\\n\\n    <mat-form-field>\\n        <input matInput type=\\\"text\\\" formControlName=\\\"Name\\\" appearance=\\\"filled\\\"  required=\\\"false\\\">\\n    </mat-form-field>\\n</form>\\n<span class=\\\"radio-box\\\">\\n<mat-radio-group [(ngModel)]=\\\"fileExtension\\\">\\n    <mat-radio-button value=\\\".csv\\\">.csv</mat-radio-button>\\n    <mat-radio-button value=\\\".json\\\">.json</mat-radio-button>\\n</mat-radio-group>\\n</span>\\n\\n<div class=\\\"button-group\\\">\\n\\t<button mat-raised-button color=\\\"warn\\\" class=\\\"button warning\\\" (click)=\\\"cancel()\\\">Cancel</button>\\n\\t<button mat-raised-button color=\\\"primary\\\" class=\\\"button\\\" (click)=\\\"chooseFiles()\\\">Save</button>\\n</div>\\n\"","export default \":host .top-bar {\\n  height: 40px;\\n  padding: 5px;\\n  padding-left: 0.5em;\\n  flex-wrap: nowrap;\\n  position: fixed;\\n  overflow: hidden;\\n  width: 100%;\\n  z-index: 999;\\n}\\n:host .top-bar-right .top-bar-left {\\n  -webkit-box-flex: 0;\\n  flex-wrap: nowrap;\\n  flex: 0 1 auto;\\n  max-width: 100%;\\n}\\n@media print, screen and (min-width: 40em) {\\n  :host .top-bar {\\n    flex-wrap: nowrap;\\n    flex: 0 1 auto;\\n  }\\n}\"","export default \"<!-- <div class=\\\"grid-x\\\"> -->\\n\\n<!--   <div class=\\\"top-bar\\\" style=\\\"background-color: black\\\" id=\\\"navbar\\\"> -->\\n\\n<!--\\t<div class=\\\"top-bar-left\\\"> -->\\n<!--\\t  <img src=\\\"assets/logo.svg\\\" width=\\\"30PX\\\"> -->\\n<!--\\t  <span style=\\\"color: white\\\">Taggit</span> -->\\n<!--\\t</div> -->\\n\\n\\n<!--\\t<div class=\\\"top-bar-right\\\"> -->\\n<!--\\t  <div class=\\\"light-blue\\\" *ngIf=\\\"currentUser\\\">{{ currentUser.username }}</div> -->\\n<!--\\t</div> -->\\n\\n<!--   </div> -->\\n\\n<!--   <\\\\!-- <div class=\\\"cell control-bar\\\"> -\\\\-> -->\\n<!--   <\\\\!--\\t<app-control-bar></app-control-bar> -\\\\-> -->\\n<!--   <\\\\!-- </div> -\\\\-> -->\\n<!-- </div> -->\\n\\n<app-control-bar></app-control-bar>\\n<!-- NOTE Router Outlet was here -->\\n<app-image-gallery></app-image-gallery>\\n\\n<!-- NOTE Leaflet was here -->\\n\"","export default \"<p>\\n  notfound works!\\n</p>\\n\"","export default \":host {\\n  min-height: 20em;\\n}\\n:host .fileslisting {\\n  height: 20em;\\n  overflow-y: scroll;\\n  padding: 0px 20px;\\n}\\n:host .file-row {\\n  display: flex;\\n  background: #f9f9f9;\\n  border: 1px solid transparent;\\n  user-select: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n}\\n:host .clickable {\\n  flex: 1;\\n  max-width: 20em;\\n}\\n:host .size {\\n  align-items: flex-end;\\n}\\n:host .file-row:hover {\\n  border: 1px solid;\\n}\\n:host .file-row.selected {\\n  background: #d3d3d3;\\n}\\n:host .mat-radio-button ~ .mat-radio-button {\\n  margin-left: 16px;\\n}\\n:host .radio-box {\\n  position: relative;\\n  bottom: 45px;\\n  left: 45%;\\n}\"","export default \"\"","export default \":host {\\n  overflow-y: scroll;\\n}\\n:host .select-group {\\n  overflow: hidden;\\n  max-height: 20%;\\n}\\n:host .subitem-title {\\n  text-align: left;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #F1F1F1;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #F1F1F1;\\n  border-style: solid;\\n  overflow-y: scroll;\\n  background-color: #FFFFFF;\\n  height: 100%;\\n}\\n:host .group-subitem {\\n  height: 100px;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .boxed input[type=radio] {\\n  display: none;\\n}\\n:host .boxed label {\\n  background-color: #fff;\\n  transition: all 0.3s;\\n}\\n:host .boxed input[type=radio]:checked + label {\\n  background-color: #B3E5FF;\\n}\\n:host .group-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .name-group {\\n  display: inline-block;\\n  padding: 3px;\\n}\\n:host .button-group {\\n  margin: 0;\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n}\\n:host .fa {\\n  font-weight: 900;\\n  display: inline-block;\\n  font-style: normal;\\n  font-variant: normal;\\n  text-rendering: auto;\\n  font-family: \\\"FontAwesome\\\";\\n  line-height: 1;\\n}\\n:host .fa option {\\n  font-weight: 900;\\n}\"","export default \":host {\\n  background-color: #F1F1F1;\\n}\"","export default \"<div class=\\\"create-prompt\\\">\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">\\n\\t<span>\\n\\t  Create Tag\\n\\t</span>\\n  </div> <!-- subitem-title -->\\n\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem\\\">\\n\\t<form class=\\\"form-type-form\\\">\\n\\t  <div *ngFor=\\\"let control of enabledControls; let idx = index\\\" class=\\\"box form\\\">\\n\\t\\t<input type=\\\"radio\\\" [id]=\\\"control\\\" value=\\\"control.toLowerCase()\\\" name=\\\"form-type\\\" [checked]=\\\"(idx === 0)\\\" (change)=\\\"selectInputForm(control.toLowerCase())\\\">\\n\\t\\t<label style=\\\"cursor: pointer; margin: 3px; padding: 3px; font-size: 10px\\\" [for]=\\\"control\\\">{{ control }}</label>\\n\\t  </div> <!-- form-type-form -->\\n    </form>\\n\\n    <div class=\\\"form-name\\\">\\n      <mat-form-field class=\\\"input-label-group\\\">\\n        <mat-label>Label</mat-label>\\n        <input matInput placeholder=\\\"Label\\\" #labelValue [(ngModel)]=\\\"labelFilter\\\" (keyup)=\\\"inputFormLabel($event)\\\" name=\\\"labelFilter\\\" class=\\\"tiny\\\" type=\\\"text\\\">\\n      </mat-form-field>\\n\\n      <ng-container *ngIf=\\\"formType != 'text'\\\">\\n        <ng-container *ngIf=\\\"formType == 'color'\\\">\\n          <mat-form-field class=\\\"input-label-group\\\">\\n            <mat-label>Option Color</mat-label>\\n            <input matInput #optionColorValue placeholder=\\\"Option Color\\\" #labelValue [(ngModel)]=\\\"optionColorFilter\\\" (change)=\\\"inputFormColor($event)\\\" name=\\\"optionColorilter\\\" class=\\\"tiny\\\" type=\\\"color\\\">\\n          </mat-form-field>\\n        </ng-container>\\n\\n        <mat-form-field class=\\\"input-label-group\\\">\\n          <mat-label>Options</mat-label>\\n          <div class=\\\"input-group\\\">\\n            <input matInput #optionValue class=\\\"input-group-field\\\" placeholder=\\\"Option\\\" type=\\\"text\\\" [(ngModel)]=\\\"optionFilter\\\" name=\\\"optionFilter\\\" (keyup.enter)=\\\"addOptionItem(optionValue.value); optionValue.value = ''; optionColorValue.value = ''; clearOption(); clearOptionColor()\\\">\\n          </div> <!-- input-group -->\\n        </mat-form-field>\\n\\n\\n        <div class=\\\"input-group-button\\\">\\n          <button mat-button color=\\\"accent\\\" class=\\\"button\\\" (click)=\\\"addOptionItem(optionValue.value); optionValue.value = ''; clearOption()\\\">\\n            <i class=\\\"fas fa-plus\\\"></i>\\n          </button>\\n        </div> <!-- input-group-button -->\\n\\n        <ul class=\\\"form-option-container\\\">\\n          <li *ngFor=\\\"let opt of formOptions\\\" class=\\\"list-group\\\">\\n            <div>\\n              {{opt.label}}\\n              <ng-container *ngIf=\\\"formType == 'color'\\\">\\n                <svg class=\\\"box\\\" width=\\\"10px\\\" height=\\\"10px\\\">\\n                  <rect width=\\\"10px\\\" height=\\\"10px\\\" style=\\\"fill: #ffffff\\\"/>\\n                  <rect width=\\\"8px\\\" height=\\\"8px\\\" x=\\\"1px\\\" y=\\\"1px\\\" [style.fill]=\\\"opt.color\\\"/>\\n                </svg>\\n              </ng-container>\\n            </div> <!-- showopt -->\\n            <div class=\\\"button-group\\\">\\n              <div (click)=\\\"deleteOption(opt)\\\">\\n                <i class=\\\"fas fa-minus\\\"\\n                   matTooltip=\\\"Delete\\\"\\n                   matTooltipPosition=\\\"above\\\"\\n                   style=\\\"cursor: pointer\\\">\\n                </i>\\n              </div> <!-- delete opt -->\\n\\n              <div (click)=\\\"openRenameOptionModal(renameOptionModal)\\\">\\n                <i class=\\\"fas fa-edit\\\"\\n                   style=\\\"cursor: pointer\\\"\\n                   matTooltip=\\\"Rename\\\"\\n                   matTooltipPosition=\\\"above\\\">\\n                </i>\\n              </div>\\n\\n              <ng-template #renameOptionModal>\\n                <input matInput #optionRename\\n                       placeholder=\\\"Rename Option\\\">\\n                <br/>\\n                <br/>\\n                <div class=\\\"button-group\\\">\\n                  <button matDialogClose\\n                          mat-raised-button\\n                          color=\\\"primary\\\"\\n                          (click)=\\\"renameOption(opt, optionRename.value)\\\">Rename</button>\\n                  <button matDialogClose\\n                          mat-button>Cancel</button>\\n                </div>\\n              </ng-template>\\n            </div> <!-- button group -->\\n          </li>\\n        </ul>\\n      </ng-container>\\n    </div> <!-- form-name -->\\n\\n\\t<button mat-raised-button color=\\\"primary\\\" (click)=\\\"addFormItem()\\\">Save</button>\\n\\t<button mat-button color=\\\"primary\\\" (click)=\\\"cancelCreate()\\\">Cancel</button>\\n\\n  </div> <!-- subitem -->\\n</div> <!-- create-group -->\\n\"","export default \":host .img-list-container {\\n  display: grid;\\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\\n  grid-gap: 1em;\\n  height: 100%;\\n  padding: 1em;\\n}\\n:host #no-img {\\n  font-size: 32px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 70vh;\\n}\\n:host #no-proj {\\n  font-size: 32px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 70vh;\\n}\\n:host #new-proj {\\n  font-size: 32px;\\n  display: flex;\\n  height: 100vh;\\n  justify-content: center;\\n  align-items: center;\\n}\\n:host app-image-box {\\n  height: 100%;\\n}\\n:host .masonry-item {\\n  width: 200px;\\n}\\n:host img-spin {\\n  position: relative;\\n  bottom: 0px;\\n  left: 0px;\\n  width: 100%;\\n  height: 100px;\\n  background: #fff;\\n}\\n:host load-spin {\\n  position: relative;\\n  width: 100%;\\n  height: 100px;\\n  background: #fff;\\n}\\n:host .side-bar-container {\\n  background-color: #F1F1F1;\\n  position: fixed;\\n  width: 25%;\\n  margin-right: 0px;\\n  height: calc(100vh - 50px);\\n  right: 0;\\n}\\n:host .success {\\n  margin-right: 20%;\\n}\\n:host .danger {\\n  margin-right: 0%;\\n}\\n:host #gallery-container-container {\\n  position: relative;\\n  width: 100%;\\n  height: auto;\\n  text-align: center;\\n  display: flex;\\n  flex-direction: column;\\n  margin-top: 0px;\\n}\\n:host #loading-load {\\n  position: relative;\\n  width: 100%;\\n  height: auto;\\n  text-align: center;\\n  flex-direction: column;\\n  margin-top: 50px;\\n}\\n:host #gallery-container {\\n  position: relative;\\n  width: 100%;\\n  height: auto;\\n  text-align: center;\\n  display: flex;\\n  flex-direction: column;\\n}\\n:host #gallery-container .gallery-image {\\n  height: 100%;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n:host #gallery-container .gallery-image img {\\n  max-width: 100%;\\n  max-height: 100%;\\n  margin: 0 auto;\\n}\\n:host .imager {\\n  width: 75%;\\n  height: calc(100vh - 50px);\\n  background-color: #fefefe;\\n}\\n:host .view-image {\\n  max-width: 100%;\\n  height: auto;\\n}\\n:host .gallery-btn {\\n  width: 35px;\\n  height: 35px;\\n  background: #000;\\n  color: #fff;\\n  text-align: center;\\n  line-height: 35px;\\n  cursor: pointer;\\n  transition: all 0.4s ease;\\n  font-size: 20px;\\n  box-sizing: border-box;\\n  padding-left: 2px;\\n  position: fixed;\\n  bottom: 10px;\\n}\\n:host .gallery-btn:hover {\\n  background: #222;\\n}\\n:host .gallery-close {\\n  top: 10px;\\n}\\n:host .gallery-close .gallery-next {\\n  right: 10px;\\n}\\n:host .gallery-prev {\\n  right: 50px;\\n}\\n:host .gallery-prev .gallery-next {\\n  bottom: 10px;\\n}\\n@media (min-width: 478px) {\\n  :host .img-list-container img:nth-child(3n):not(last-of-type) {\\n    grid-row-end: span 2;\\n  }\\n}\\n@media (max-width: 768px) {\\n  :host .img-list-container {\\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\\n  }\\n}\\n@media (max-width: 450px) {\\n  :host .img-list-container {\\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\\n  }\\n}\"","export default \"<h4>Share this project</h4>\\n<small><em> People you share your project with will have full ability to edit and delete this project on Taggit and on HazMapper. </em></small>\\n\\n<form [formGroup]=\\\"projShareForm\\\" (ngSubmit)=\\\"submit()\\\" id=\\\"share-project-form\\\">\\n    <mat-form-field>\\n        <mat-label>Username:</mat-label>\\n        <input matInput type=\\\"text\\\" formControlName=\\\"name\\\" required=\\\"true\\\">\\n    </mat-form-field>\\n\\n<div class=\\\"button-group small\\\">\\n    <button mat-raised-button color=\\\"warn\\\" class=\\\"button small warning\\\" type=\\\"button\\\" (click)=\\\"close()\\\">Close</button>\\n    <button mat-raised-button color=\\\"primary\\\" class=\\\"button small align-right\\\" type=\\\"submit\\\" [disabled]=\\\"!projShareForm.valid\\\">Add Member</button>\\n</div>\\n\\n<br>\\n<h5>Current Users</h5>\\n<div *ngFor=\\\"let user of projectUsers\\\">\\n    <br>\\n    <mat-card class=\\\"card-container\\\">\\n        <span class=\\\"card-item\\\">\\n            {{user.username}}\\n        </span>\\n        <span class=\\\"card-buttons\\\">\\n            <button mat-raised-button color=\\\"warn\\\" class=\\\"button small warning\\\" type=\\\"button\\\" [disabled]=\\\"onlyOne\\\" (click)=\\\"delete(user.username)\\\">\\n                <i class=\\\"fas fa-trash\\\"></i>\\n            </button>\\n        </span>\\n    </mat-card>\\n</div>\\n</form>\"","export default \"<div *ngIf=\\\"loaded; else loader\\\" id=\\\"loading-load\\\">\\n  <div *ngIf=\\\"projectsExist; else noProjWarn\\\" id=\\\"gallery-container\\\">\\n    <div *ngIf=\\\"imagesExist; else noImgWarn\\\" id=\\\"gallery-container-container\\\">\\n      <div [ngClass]=\\\"scrollStatus\\\"\\n        infiniteScroll\\n        [infiniteScrollDistance]=\\\"1\\\"\\n        [infiniteScrollThrottle]=\\\"1500\\\"\\n        (scrolled)=\\\"onScroll()\\\"\\n        class=\\\"img-list-container\\\"\\n        *ngIf=\\\"!showTagger; else tagger\\\">\\n        <app-image-box\\n          *ngFor=\\\"let feat of featureListScroll\\\"\\n          [feature]=\\\"feat\\\">\\n        </app-image-box>\\n      </div>\\n\\n      <ngx-spinner\\n        bdOpacity = 0.9\\n        bdColor = \\\"\\\"\\n        size = \\\"default\\\"\\n        color = \\\"#3ADB76\\\"\\n        type = \\\"line-scale-pulse-out\\\"\\n        id = \\\"img-spin\\\"\\n        [fullScreen] = \\\"false\\\">\\n      </ngx-spinner>\\n      <ng-template #tagger>\\n        <div>\\n          <div class=\\\"imager\\\">\\n            <img class=\\\"view-image\\\" [src]=\\\"getPath()\\\">\\n          </div>\\n        </div>\\n      </ng-template>\\n      <div *ngIf=\\\"showTagger\\\" class=\\\"side-bar-container\\\">\\n        <app-side-bar></app-side-bar>\\n      </div>\\n    </div>\\n    <ng-template #noImgWarn>\\n      <div id=\\\"no-img\\\">\\n        No images have been imported!<br>Please import images through the menu.\\n      </div>\\n    </ng-template>\\n  </div>\\n\\n  <ng-template #noProjWarn>\\n    <div id=\\\"no-proj\\\">\\n      No project has been created!<br>Please create a project through the menu.\\n    </div>\\n  </ng-template>\\n\\n</div>\\n\\n<ng-template #loader>\\n  <div *ngIf=\\\"projectsExist; else createProj\\\" id=\\\"loader\\\">\\n    Loading...\\n  </div>\\n\\n  <ng-template #createProj> \\n    <div id=\\\"new-proj\\\" (click)=\\\"openCreateProjectModal()\\\">\\n      Start a new project\\n    </div>\\n  </ng-template>\\n\\n</ng-template>\\n\"","export default \"<div class=\\\"form-group row\\\" *ngFor=\\\"let tag of field\\\">\\n  <label class=\\\"col-md-3 form-control-label\\\" [attr.for]=\\\"tag.label\\\">\\n    {{field.label}}\\n    <strong class=\\\"text-danger\\\" *ngIf=\\\"tag.required\\\">*</strong>\\n  </label>\\n  <div class=\\\"col-md-9\\\" [ngSwitch]=\\\"tag.type\\\">\\n    <app-form-color *ngSwitchCase=\\\"'color'\\\" [field]=\\\"field\\\" [form]=\\\"form\\\"></app-form-color>\\n    <app-form-textbox *ngSwitchCase=\\\"'text'\\\" [field]=\\\"field\\\" [form]=\\\"form\\\"></app-form-textbox>\\n    <app-form-dropdown *ngSwitchCase=\\\"'dropdown'\\\" [field]=\\\"field\\\" [form]=\\\"form\\\"></app-form-dropdown>\\n    <app-form-checkbox *ngSwitchCase=\\\"'checkbox'\\\" [field]=\\\"field\\\" [form]=\\\"form\\\"></app-form-checkbox>\\n    <app-form-radio *ngSwitchCase=\\\"'radio'\\\" [field]=\\\"field\\\" [form]=\\\"form\\\"></app-form-radio>\\n  </div>\\n</div>\\n\"","export default \":host .subitem-title {\\n  text-align: left;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #F1F1F1;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #F1F1F1;\\n  border-style: solid;\\n  overflow-y: scroll;\\n  background-color: #FFFFFF;\\n  height: 100%;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .asset-list {\\n  max-height: 20%;\\n  overflow: hidden;\\n}\\n:host .asset-subitem {\\n  height: 100px;\\n}\\n:host .asset-container {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  cursor: pointer;\\n}\\n:host .highlight {\\n  background-color: #B3E5FF;\\n}\\n:host .name-group {\\n  display: inline-block;\\n  padding: 3px;\\n}\\n:host .button-group {\\n  margin: 0;\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n  padding-right: 5px;\\n}\"","export default \"<!--The content below is only a placeholder and can be replaced.-->\\n<router-outlet></router-outlet>\\n\"","export default \"<div id=\\\"callback\\\">\\n    <div>\\n\\t<i class=\\\"fas fa-spinner\\\"></i>\\n    </div>\\n</div>\\n\"","export default \"<div class=\\\"img-container\\\">\\n  <img [ngClass]=\\\"imageSelected\\\"\\n       [src]=\\\"featureSource\\\"\\n       (click)=\\\"imageSelect()\\\"\\n       class=\\\"img-responsive img-target\\\"\\n       title={{featurePath}}>\\n  <div class=\\\"top-overlay\\\">\\n    <div class=\\\"image-option\\\"\\n         matTooltip=\\\"Zoom\\\"\\n         matTooltipPosition=\\\"below\\\"\\n         (click)=\\\"imageZoom(diffSizes)\\\">\\n      <i class=\\\"fas fa-search-plus\\\"></i>\\n    </div>\\n\\n    <ng-template #diffSizes>\\n      <div class=\\\"zoom-content\\\">\\n        <div class=\\\"img-container\\\">\\n          <img [src]=\\\"featureSource\\\" title={{featurePath}}>\\n        </div>\\n        <div class=\\\"img-details\\\">\\n          <div class=\\\"detail-container\\\">\\n            <div class=\\\"title\\\">\\n              Coordinates\\n            </div>\\n            <div class=\\\"detail-contents\\\">\\n              <div class=\\\"detail-item\\\">\\n                {{coordinates[0]}},\\n              </div>\\n              <div class=\\\"detail-item\\\">\\n                {{coordinates[1]}}\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"detail-container\\\">\\n            <div class=\\\"title\\\">\\n              Image Source\\n            </div>\\n            <div class=\\\"detail-contents\\\">\\n              <div class=\\\"detail-item\\\">\\n                {{featurePath}}\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <button mat-button class=\\\"close-button\\\" matDialogClose aria-label=\\\"Close modal\\\" type=\\\"button\\\">\\n          <span aria-hidden=\\\"true\\\">&times;</span>\\n        </button>\\n      </div>\\n    </ng-template>\\n\\n    <div class=\\\"image-option\\\"\\n         matTooltip=\\\"Remove\\\"\\n         matTooltipPosition=\\\"below\\\"\\n         (click)=\\\"openImageDeleteModal(deleteImage)\\\">\\n      <i class=\\\"fas fa-trash\\\"></i>\\n    </div>\\n\\n    <ng-template #deleteImage>\\n      <div *ngIf=\\\"selectedImages.length === 1\\\">\\n        This image will be deleted from the current project. It will not be deleted from the Data Depot.\\n      </div>\\n\\n      <div *ngIf=\\\"selectedImages.length > 1\\\">\\n        {{selectedImages.length}} images will be deleted from the current project. They will not be deleted from the Data Depot.\\n      </div>\\n\\n      <button mat-raised-button color=\\\"primary\\\" matDialogClose (click)=\\\"imageDelete()\\\">Delete Image</button>\\n      <button mat-button matDialogClose>Cancel</button>\\n    </ng-template>\\n\\n    <div class=\\\"image-option\\\"\\n         matTooltip=\\\"Add To Group\\\"\\n         matTooltipPosition=\\\"below\\\"\\n         (click)=\\\"openImageAddModal(addMoreToGroup)\\\">\\n      <i class=\\\"fas fa-plus\\\"></i>\\n    </div>\\n\\n    <ng-template #addMoreToGroup>\\n\\n      <mat-form-field appearance=\\\"fill\\\">\\n        <mat-label>Groups</mat-label>\\n        <mat-select matNativeControl required [(value)]=\\\"groupToAdd\\\">\\n          <mat-option *ngFor=\\\"let group of groups | keyvalue\\\" [value]=\\\"group.value\\\">\\n            {{ group.key }}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <p>\\n        <button mat-raised-button color=\\\"primary\\\" matDialogClose (click)=\\\"addGroup(groupToAdd)\\\" [disabled]=\\\"!groupToAdd\\\">Add To Group</button>\\n        <button mat-button color=\\\"secondary\\\" matDialogClose>Cancel</button>\\n      </p>\\n\\n    </ng-template>\\n  </div>\\n\\n  <div class=\\\"bottom-overlay\\\">\\n\\n    <div *ngIf=\\\"feature.properties.group && feature.properties.group.length > 0\\\">\\n\\n      <div *ngIf=\\\"feature.properties.group.length < 5; else dotdot\\\" class=\\\"group-tags\\\">\\n        <div *ngFor=\\\"let group of feature.properties.group\\\"\\n             class=\\\"center\\\"\\n             (mouseover)=\\\"group.name\\\"\\n             [matTooltip]=\\\"group.name\\\"\\n             matTooltipPosition=\\\"above\\\">\\n          <svg class=\\\"box\\\" width=\\\"25px\\\" height=\\\"75px\\\" (click)=\\\"deleteFromGroup(feature, group)\\\">\\n            <rect width=\\\"15px\\\" height=\\\"15px\\\" x=\\\"5\\\" y=\\\"30\\\" [style.fill]=\\\"group.color\\\"/>\\n            <rect class=\\\"inner-del\\\" width=\\\"25px\\\" height=\\\"15px\\\" rx=\\\"3\\\" x=\\\"0\\\" y=\\\"0\\\" style=\\\"fill: #ffffff\\\"/>\\n            <rect  class=\\\"inner-del\\\" width=\\\"15px\\\" height=\\\"5px\\\" x=\\\"5\\\" y=\\\"5\\\" style=\\\"fill: #DE6363\\\"/>\\n          </svg>\\n        </div>\\n      </div>\\n\\n      <ng-template #dotdot class=\\\"text\\\">\\n        <div class=\\\"image-option\\\"\\n             (click)=\\\"openMoreGroupsModal(moreGroupsModal)\\\">\\n          <i class=\\\"fas fa-ellipsis-h\\\"></i>\\n        </div>\\n      </ng-template>\\n\\n      <!-- TODO Should close modal once zero groups -->\\n      <ng-template #moreGroupsModal>\\n        <div style=\\\"display: flex; justify-content: center; align-items: center\\\">\\n          <div *ngFor=\\\"let group of feature.properties.group\\\"\\n               class=\\\"center-temp\\\"\\n               style=\\\"display: flex\\\"\\n               (mouseover)=\\\"group.name\\\"\\n               [matTooltip]=\\\"group.name\\\"\\n               matTooltipPosition=\\\"right\\\">\\n            <svg style=\\\"padding: 1\\\" (click)=\\\"deleteFromGroup(feature, group)\\\" width=\\\"15px\\\" height=\\\"15px\\\">\\n              <rect width=\\\"15px\\\" height=\\\"15px\\\" [style.fill]=\\\"group.color\\\"/>\\n              <rect class=\\\"inner-del-temp\\\" width=\\\"8px\\\" height=\\\"4px\\\" x=\\\"3.3\\\" y=\\\"5.5\\\" style=\\\"fill: #000\\\"/>\\n            </svg>\\n          </div>\\n        </div>\\n      </ng-template>\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"<app-select-group></app-select-group>\\n<app-select-image></app-select-image>\\n\\n<app-tag-generator *ngIf=\\\"showTagGenerator; else tagImages\\\"></app-tag-generator>\\n<ng-template #tagImages>\\n  <app-tag-images></app-tag-images>\\n</ng-template>\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"crnd\";","export default \":host {\\n  display: block;\\n  font-size: 0.8em;\\n  height: calc(100vh - 50px);\\n}\\n:host .lat-lon-label {\\n  font-size: 0.8em;\\n  color: #4d4d4d;\\n}\\n:host .active-project {\\n  background-color: #1aff8c;\\n}\\n:host .menu button.dropdown.button {\\n  padding: 0.85em 1em;\\n}\\n:host .switch {\\n  margin: 0;\\n}\\n:host .button.tiny {\\n  margin: 0;\\n}\\n:host .create-prompt {\\n  max-height: 500px;\\n  height: 500px;\\n}\\n:host .select-group {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .subitem-title {\\n  text-align: left;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #F1F1F1;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n:host .input-label-group {\\n  padding: 10px;\\n  display: block;\\n}\\n:host .input-group {\\n  display: inline-block;\\n}\\n:host .form-name {\\n  text-align: center;\\n}\\n:host .input-group-button {\\n  display: inline-block;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #F1F1F1;\\n  border-style: solid;\\n  overflow-y: auto;\\n  background-color: #FFFFFF;\\n  height: 40vh;\\n  padding: 20px;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .preset-descriptions {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .boxed input[type=radio] {\\n  display: none;\\n}\\n:host .boxed label {\\n  background-color: #fff;\\n  transition: all 0.3s;\\n}\\n:host .boxed input[type=radio]:checked + label {\\n  background-color: #B3E5FF;\\n}\\n:host .group-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .button-group {\\n  margin: 0;\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .form-option-container {\\n  padding: 0px;\\n}\\n:host .list-group {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .list-suboptions {\\n  background-color: #F0F0F0;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n}\\n:host .name-group {\\n  display: inline-block;\\n  padding: 3px;\\n}\\n:host .form-item-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .form-type-form {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  margin: 5px;\\n  margin-bottom: 15px;\\n}\\n:host .form-type-form input[type=radio] {\\n  display: none;\\n}\\n:host .form-type-form label {\\n  border-style: solid;\\n  border-width: 1px;\\n  border-color: #ddd;\\n  transition: all 0.3s;\\n}\\n:host .form-type-form input[type=radio]:checked + label {\\n  border-style: solid;\\n  border-width: 1px;\\n  border-color: #000;\\n}\\n:host .changed {\\n  color: #F07575;\\n}\\n:host .unchanged {\\n  color: #555555;\\n}\\n:host .asset-list {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .asset-container {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  cursor: pointer;\\n}\\n:host .highlight {\\n  background-color: #B3E5FF;\\n}\"","export default \"<div>\\n  <textarea  [id]=\\\"field.name\\\"\\n\\t\\trows=\\\"9\\\" class=\\\"form-control\\\" [placeholder]=\\\"'notes'\\\" [(ngModel)]=\\\"value\\\" (keyup)=\\\"updateValue()\\\"></textarea>\\n</div>\\n\"","export default \":host #share-project-form {\\n  display: flex;\\n  flex-direction: column;\\n  text-align: center;\\n  padding: 5em;\\n}\\n\\n.card-container {\\n  display: flex;\\n  justify-content: space-between;\\n  width: 99%;\\n}\\n\\n.card-item {\\n  text-align: center;\\n  align-items: center;\\n}\\n\\n.card-buttons {\\n  align-items: flex-end;\\n}\"","export default \"<div id=\\\"map\\\" style=\\\"min-height: calc(100vh - 67px)\\\"></div>\\n\"","export default \"<div *ngFor=\\\"let opt of form.options\\\" [id]=\\\"form.label\\\" class=\\\"input-group\\\">\\t\\n  <div  class=\\\"form-check form-check\\\">\\n    <label class=\\\"form-check-label\\\">\\n      <input class=\\\"form-check-input\\\" [(ngModel)]=\\\"value\\\" type=\\\"radio\\\" id=\\\"inlineCheckbox2\\\" name={{label}} value={{opt.label}} (change)=\\\"updateCheckedTag()\\\" /> \\n      {{opt.label}}\\n    </label>\\n  </div>\\n</div>\\n\"","export default \":host #create-project-form {\\n  display: flex;\\n  flex-direction: column;\\n  text-align: center;\\n  padding: 5em;\\n}\"","export default \":host .img-container {\\n  position: relative;\\n}\\n:host .img-container img {\\n  -o-object-fit: cover;\\n     object-fit: cover;\\n  cursor: default;\\n  width: 100%;\\n  height: 100%;\\n  transition: opacity 0.3s ease;\\n  backface-visibility: hidden;\\n  max-width: 100%;\\n  max-height: 100%;\\n  margin: 0 auto;\\n}\\n:host .top-overlay {\\n  display: flex;\\n  flex-direction: row;\\n  transition: 0.3s ease;\\n  opacity: 0;\\n  position: absolute;\\n  right: 10px;\\n  top: 10px;\\n  cursor: pointer;\\n  text-align: center;\\n}\\n:host .bottom-overlay {\\n  display: flex;\\n  flex-direction: row;\\n  transition: 0.3s ease;\\n  opacity: 1;\\n  position: absolute;\\n  right: 10px;\\n  bottom: 10px;\\n  text-align: center;\\n}\\n:host .img-container:hover img {\\n  opacity: 0.9;\\n}\\n:host .img-container:hover .top-overlay {\\n  opacity: 0.9;\\n}\\n:host .img-container:hover .top-overlay:hover {\\n  opacity: 1;\\n}\\n:host .image-option {\\n  opacity: 0.9;\\n  background-color: white;\\n  display: flex;\\n  color: black;\\n  width: 40px;\\n  height: 30px;\\n  border-radius: 5px;\\n  font-size: 16px;\\n  margin: 3px;\\n  justify-content: center;\\n  align-items: center;\\n}\\n:host .image-option:hover {\\n  opacity: 1;\\n}\\n:host .image-option .fas {\\n  top: 5px;\\n}\\n:host .img-selected {\\n  border: solid #0191FF;\\n  border-width: 5px;\\n}\\n:host .img-unselected {\\n  border: solid #fff;\\n  border-width: 5px;\\n}\\n:host .group-tags {\\n  opacity: 0.9;\\n  background-color: white;\\n  display: flex;\\n  flex-direction: row;\\n  width: auto;\\n  height: 30px;\\n  border-radius: 5px;\\n  padding: 5px;\\n  justify-content: center;\\n  align-items: center;\\n  z-index: 999;\\n}\\n:host .center {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: center;\\n  transition: 0.3s ease;\\n  align-items: center;\\n}\\n:host .center .inner-del {\\n  opacity: 0;\\n  transition: 0.3s ease;\\n  cursor: pointer;\\n}\\n:host .center:hover .inner-del {\\n  opacity: 1;\\n}\\n:host .box {\\n  padding: 1px;\\n}\\n.center-temp {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.center-temp .inner-del-temp {\\n  opacity: 0;\\n  transition: 0.3s ease;\\n  cursor: pointer;\\n}\\n.center-temp:hover .inner-del-temp {\\n  opacity: 0.5;\\n}\\n.zoom-content {\\n  display: flex;\\n  flex-direction: column;\\n  max-height: 700px;\\n}\\n.zoom-content .img-container {\\n  overflow-y: scroll;\\n  width: 100%;\\n  height: 100%;\\n  background-color: #e7e7e7;\\n}\\n.zoom-content .img-details {\\n  display: flex;\\n  flex-direction: row;\\n  margin-top: 24px;\\n  background-color: #e7e7e7;\\n  align-items: center;\\n  text-align: center;\\n}\\n.zoom-content .title {\\n  background-color: #ccc;\\n  padding: 5px;\\n}\\n.zoom-content .detail-container {\\n  display: flex;\\n  flex-grow: 1;\\n  flex-direction: column;\\n  padding: 5px;\\n}\\n.zoom-content .detail-contents {\\n  display: flex;\\n  flex-direction: row;\\n  padding: 5px;\\n  background-color: #fff;\\n}\\n.zoom-content .detail-item {\\n  padding: 5px;\\n}\"","export default \":host {\\n  text-align: left;\\n}\\n:host .mat-form-field {\\n  width: 100%;\\n  text-align: left;\\n}\\n:host .input-group {\\n  padding: 5px;\\n}\\n:host label {\\n  padding: 5px;\\n}\\n:host input {\\n  padding: 5px;\\n  vertical-align: middle;\\n}\\n:host .radio-group {\\n  display: flex;\\n  flex-direction: column;\\n}\\n:host .form-controls {\\n  padding: 20px;\\n}\"","export default \"<div *ngFor=\\\"let opt of form.options\\\" [id]=\\\"form.label\\\" class=\\\"input-group\\\">\\n  <div  class=\\\"form-check form-check\\\">\\n    <label class=\\\"form-check-label\\\">\\n      <input class=\\\"form-check-input\\\" [(ngModel)]=\\\"chosenTag\\\" type=\\\"radio\\\" id=\\\"inlineCheckbox3\\\" name={{label}} value={{opt.label}} (change)=\\\"updateCheckedTag()\\\" /> \\n      {{opt.label}}\\n\\n\\t  <svg class=\\\"box\\\" width=\\\"10px\\\" height=\\\"10px\\\">\\n        <rect width=\\\"10px\\\" height=\\\"10px\\\" style=\\\"fill: #ffffff\\\"/>\\n        <rect width=\\\"8px\\\" height=\\\"8px\\\" x=\\\"1px\\\" y=\\\"1px\\\" [style.fill]=\\\"opt.color\\\"/>\\n      </svg>\\n    </label>\\n  </div>\\n</div>\\n\"","export default \"<h4> Current Gallery </h4>\\n<form [formGroup]=\\\"projCreateForm\\\" (ngSubmit)=\\\"update()\\\" id=\\\"current-project-form\\\">\\n  <mat-form-field>\\n\\t<mat-label>Name:</mat-label>\\n\\t<input matInput type=\\\"text\\\" formControlName=\\\"name\\\" appearance=\\\"filled\\\"  required=\\\"true\\\">\\n\\n  </mat-form-field>\\n\\n  <mat-form-field>\\n    <mat-label>Description</mat-label>\\n    <textarea matInput formControlName=\\\"description\\\" required=\\\"true\\\"></textarea>\\n  </mat-form-field>\\n\\n  <div class=\\\"button-group small\\\">\\n    <button mat-raised-button color=\\\"basic\\\" class=\\\"button small warning\\\" type=\\\"button\\\" (click)=\\\"close()\\\">Close</button>\\n    <button *ngIf=\\\"activeProject.deletable\\\" mat-raised-button color=\\\"warn\\\" class=\\\"button small warning\\\" type=\\\"delete\\\" (click)=\\\"delete()\\\">Delete</button>\\n    <button mat-raised-button color=\\\"primary\\\" class=\\\"button small align-right\\\" type=\\\"submit\\\" [disabled]=\\\"!projCreateForm.valid\\\">Update</button>\\n  </div>\\n</form>\\n\"","export default \"<h4> Create a new Gallery </h4>\\n<form [formGroup]=\\\"projCreateForm\\\" (ngSubmit)=\\\"submit()\\\" id=\\\"create-project-form\\\">\\n  <mat-form-field>\\n\\t<mat-label>Name:</mat-label>\\n\\t<input matInput type=\\\"text\\\" formControlName=\\\"name\\\" required=\\\"true\\\">\\n  </mat-form-field>\\n\\n  <mat-form-field>\\n\\t<mat-label>Description</mat-label>\\n\\t<textarea matInput formControlName=\\\"description\\\" required=\\\"true\\\"></textarea>\\n  </mat-form-field>\\n\\n  <div class=\\\"button-group small\\\">\\n\\t<button mat-raised-button color=\\\"warn\\\" class=\\\"button small warning\\\" type=\\\"button\\\" (click)=\\\"close()\\\">Close</button>\\n\\t<button mat-raised-button color=\\\"primary\\\" class=\\\"button small align-right\\\" type=\\\"submit\\\" [disabled]=\\\"!projCreateForm.valid\\\">Submit</button>\\n  </div>\\n</form>\\n\"","export default \"\"","export default \":host {\\n  font-size: 0.8em;\\n  display: block;\\n}\\n:host .subitem-title {\\n  text-align: left;\\n  display: flex;\\n  justify-content: space-between;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #F1F1F1;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #F1F1F1;\\n  border-style: solid;\\n  padding: 10px;\\n  overflow-y: auto;\\n  background-color: #FFFFFF;\\n  height: 40vh;\\n}\\n:host .main-form-container {\\n  padding: 10px;\\n}\\n:host .subitem-scroll {\\n  padding: 10px;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .highlight {\\n  background-color: #B3E5FF;\\n}\\n:host .boxed input[type=radio] {\\n  display: none;\\n}\\n:host .boxed label {\\n  background-color: #fff;\\n  transition: all 0.3s;\\n}\\n:host .boxed input[type=radio]:checked + label {\\n  background-color: #B3E5FF;\\n}\\n:host .group-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .select-group {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .tag-forms {\\n  height: 500px;\\n}\\n:host .asset-list {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .asset-container {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  cursor: pointer;\\n}\\n:host .preset-descriptions {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .form-item-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .button-group {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n}\\n:host .name-group {\\n  padding: 3px;\\n  font-size: 17px;\\n  font-weight: bold;\\n}\\n:host .list-group {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .list-suboptions {\\n  background-color: #F0F0F0;\\n}\"","export default \"<div class=\\\"select-group\\\">\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">Groups</div>\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem group-subitem\\\">\\n\\t<!-- TODO redundant functionality radio is just for style -->\\n\\t<form class=\\\"boxed\\\">\\n\\t  <div *ngFor=\\\"let group of groups | keyvalue\\\" (click)=\\\"selectGroupForm(group.value)\\\" class=\\\"box form\\\">\\n\\t\\t<input type=\\\"radio\\\" [id]=\\\"group.key\\\" [value]=\\\"group.key\\\" name=\\\"skills\\\" [checked]=\\\"isChecked(group.key)\\\">\\n\\t\\t<label class=\\\"group-container\\\" style=\\\"cursor: pointer\\\" [for]=\\\"group.key\\\">\\n\\t\\t  <div class=\\\"name-group\\\">\\n\\t\\t\\t{{group.key}}\\n\\t\\t\\t<svg class=\\\"box\\\" width=\\\"10px\\\" height=\\\"10px\\\">\\n\\t\\t\\t  <rect width=\\\"10px\\\" height=\\\"10px\\\" style=\\\"fill: #ffffff\\\"/>\\n\\t\\t\\t  <rect width=\\\"8px\\\" height=\\\"8px\\\" x=\\\"1px\\\" y=\\\"1px\\\" [style.fill]=\\\"group.value.color\\\"/>\\n\\t\\t\\t</svg>\\n\\t\\t  </div>\\n\\t\\t  <div class=\\\"button-group\\\">\\n\\t\\t\\t<div (click)=\\\"deleteGroup(group.value)\\\">\\n\\t\\t\\t  <i class=\\\"fas fa-minus\\\"\\n\\t\\t\\t\\t matTooltip=\\\"Delete\\\"\\n\\t\\t\\t\\t matTooltipPosition=\\\"below\\\">\\n\\t\\t\\t  </i>\\n\\t\\t\\t</div>\\n\\t\\t\\t<div (click)=\\\"openRenameModal(renameModal, group.value)\\\">\\n\\t\\t\\t  <i class=\\\"fas fa-edit\\\"\\n\\t\\t\\t\\t matTooltip=\\\"Rename\\\"\\n\\t\\t\\t\\t matTooltipPosition=\\\"below\\\">\\n\\t\\t\\t  </i>\\n\\t\\t\\t</div>\\n\\t\\t\\t\\t<div (click)=\\\"openIconSelection(iconModal, group.value)\\\">\\n\\t\\t\\t\\t\\t<span class=\\\"fa {{group.value.icon}}\\\"\\n\\t\\t\\t\\t\\tmatTooltip=\\\"icons\\\"\\n\\t\\t\\t\\t\\tmatTooltipPosition=\\\"below\\\"></span>\\n\\t\\t\\t\\t</div>\\n\\t\\t  \\t</div>\\n\\t\\t</label>\\n\\t  </div>\\n\\t</form>\\n\\n\\t<ng-template #renameModal>\\n\\t  <input matInput #groupRename\\n\\t\\t\\t placeholder=\\\"Rename Group\\\"\\n\\t\\t\\t (keyup.enter)=\\\"renameGroup(groupRename.value)\\\">\\n\\t  <br/>\\n\\t  <br/>\\n\\t  <div class=\\\"button-group\\\">\\n\\t\\t<button matDialogClose color=\\\"primary\\\" mat-raised-button (click)=\\\"renameGroup(groupRename.value)\\\">Rename</button>\\n\\t\\t<button matDialogClose mat-button>Cancel</button>\\n\\t  </div>\\n\\t</ng-template>\\n\\n\\t<ng-template #iconModal>\\n\\t\\t<div class=\\\"iconDropdown\\\">\\n\\t\\t<select class=\\\"fa\\\" [(ngModel)]=\\\"selectedIcon\\\">\\n\\t\\t  <option class=\\\"fa\\\" *ngFor=\\\"let icon of iconList\\\" value={{icon.id}} [innerHTML]=\\\"icon.unicode\\\">\\n          </option>\\n\\t\\t</select>\\n\\t\\t<br/>\\n\\t  \\t<br/>\\n\\t\\t<div class=\\\"button-group\\\">\\n\\t\\t\\t<button matDialogClose color=\\\"primary\\\" mat-raised-button (click)=\\\"saveIcon(selectedIcon)\\\">Save</button>\\n\\t\\t\\t<button matDialogClose mat-button>Cancel</button>\\n\\t\\t  </div>\\n\\t</div>\\n\\t</ng-template>\\n\\n  </div> <!-- subitem -->\\n</div> <!-- select-group -->\\n\"","export default \":host #current-project-form {\\n  display: flex;\\n  flex-direction: column;\\n  text-align: center;\\n  padding: 5em;\\n}\"","export default \"\"","export default \":host {\\n  min-height: 20em;\\n}\\n:host .fileslisting {\\n  height: 20em;\\n  overflow-y: scroll;\\n  padding: 0px 20px;\\n}\\n:host .file-row {\\n  display: flex;\\n  background: #f9f9f9;\\n  border: 1px solid transparent;\\n  user-select: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n}\\n:host .clickable {\\n  flex: 1;\\n  max-width: 20em;\\n}\\n:host .size {\\n  align-items: flex-end;\\n}\\n:host .file-row:hover {\\n  border: 1px solid;\\n}\\n:host .file-row.selected {\\n  background: #d3d3d3;\\n}\\n.error {\\n  background-color: red;\\n  color: white;\\n}\\n.lineBreak {\\n  max-width: 350px;\\n  word-break: break-word;\\n}\"","export default \":host .active-project {\\n  background-color: #1aff8c;\\n}\\n:host .menu button.dropdown.button {\\n  padding: 0.85em 1em;\\n}\\n:host .button.tiny {\\n  margin: 0;\\n}\\n:host .current-project {\\n  padding: 30px;\\n  font-size: 14px;\\n}\\n:host .goods {\\n  height: 27px;\\n  margin: 0px;\\n  padding: 0px;\\n}\\n:host .toggler {\\n  margin-left: 10px;\\n}\\n:host .picker {\\n  display: inline-block;\\n}\\n:host .group-bar {\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .path-buttons {\\n  text-align: center;\\n}\\n:host .project-menu {\\n  margin-left: 10px;\\n}\\n:host .top-bar {\\n  position: fixed;\\n  margin-top: -50px;\\n  height: 50px;\\n  z-index: 999;\\n}\\n:host .top-bar-right .top-bar-left {\\n  -webkit-box-flex: 0;\\n  flex-wrap: nowrap;\\n  flex: 0 1 auto;\\n  max-width: 100%;\\n}\\n:host .my-button {\\n  border-radius: 5px;\\n  padding: 5px;\\n}\\n:host .button-spacing {\\n  margin-right: 15px;\\n}\\n@media print, screen and (min-width: 40em) {\\n  :host .top-bar {\\n    flex-wrap: nowrap;\\n    flex: 0 1 auto;\\n  }\\n}\\n:host .example-spacer {\\n  flex: 1 1 auto;\\n}\"","export default \"<mat-toolbar class=\\\"top-bar\\\" color=\\\"primary\\\">\\n  <img src=\\\"assets/logo.svg\\\" width=\\\"40PX\\\">\\n  <span style=\\\"color: white\\\">Taggit</span>\\n\\n  <button mat-icon-button [matMenuTriggerFor]=\\\"project\\\" color=\\\"foreground\\\" class=\\\"project-menu\\\">\\n    <mat-icon>menu</mat-icon>\\n  </button>\\n\\n\\n  <mat-menu #project=\\\"matMenu\\\">\\n    <span mat-menu-item *ngIf=\\\"selectedProject\\\" (click)=\\\"openProjectModal(selectedProject)\\\">\\n      Current Gallery : {{selectedProject.name}}\\n    </span>\\n    <button mat-menu-item (click)=\\\"openCreateProjectModal()\\\">Create Gallery</button>\\n    <button mat-menu-item [matMenuTriggerFor]=\\\"projectList\\\">Select Gallery</button>\\n    <button mat-menu-item (click)=\\\"openFilePicker(test)\\\">File Browser</button>\\n    <button mat-menu-item [matMenuTriggerFor]=\\\"saveOptions\\\">Save as</button>\\n  </mat-menu>\\n\\n  <mat-menu #projectList=\\\"matMenu\\\">\\n    <button mat-menu-item class=\\\"clickable\\\" *ngFor=\\\"let p of projects\\\" (click)=\\\"selectProject(p)\\\" [ngClass]=\\\"{'active-project': p === selectedProject}\\\">\\n      {{ p.name }}\\n    </button>\\n  </mat-menu>\\n\\n  <mat-menu #saveOptions=\\\"matMenu\\\">\\n    <button mat-menu-item (click)=saveFile(0)>CSV file</button>\\n    <button mat-menu-item (click)=saveFile(1)>JSON file</button>\\n    <button mat-menu-item (click)=openDownloadSelector()>Export to DesignSafe</button>\\n  </mat-menu>\\n\\n  <span class=\\\"example-spacer\\\"></span>\\n\\n  <div *ngIf=\\\"showTagger\\\" class=\\\"path-buttons\\\">\\n    <div class=\\\"slides\\\" style=\\\"line-height: 1; font-size: 12px\\\">\\n      {{getAssetDisplay()}}\\n      <div class=\\\"lr-buttons\\\" style=\\\"margin-top: 5px\\\">\\n        <i (click)=\\\"otherPath(false)\\\" style=\\\"margin-right: 10px; cursor: pointer\\\" class=\\\"fas fa-angle-left\\\"></i>\\n        <i (click)=\\\"otherPath(true)\\\" style=\\\"margin-left: 10px; cursor: pointer\\\" class=\\\"fas fa-angle-right\\\"></i>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <span class=\\\"example-spacer\\\"></span>\\n\\n  <div class=\\\"group-bar grid-x align-right\\\">\\n\\n    <button mat-raised-button class=\\\"button-spacing\\\" [disabled]=\\\"selectedImages.length === 0\\\" (click)=\\\"clearAll()\\\">Clear Selected</button>\\n\\n    <!-- A link that looks like a button, links to Hazmapper-->\\n    <a class=\\\"button-spacing\\\" mat-raised-button href={{hazMapperLink}} title=\\\"Open your gallery in HazMapper\\\" target=\\\"_blank\\\">\\n      <img src=\\\"assets/hazmapper-header-logo.png\\\" width=\\\"100PX\\\">\\n    </a>\\n\\n    <button mat-raised-button\\n      (click)=\\\"openAddGroupModal(addGroupModal)\\\" *ngIf=\\\"selectedImages.length > 0 && !showTagger\\\">Add Group</button>\\n\\n    <ng-template #addGroupModal>\\n      <mat-form-field>\\n        <mat-label>Group Name</mat-label>\\n        <input matInput placeholder=\\\"Group Name\\\" (keyup.enter)=\\\"addGroup(groupInput.value)\\\" #groupInput>\\n      </mat-form-field>\\n\\n      <div style=\\\"color: #ff0000\\\" *ngIf=\\\"invalidNameError\\\">\\n        Invalid Name!\\n      </div>\\n      <div style=\\\"color: #ff0000\\\" *ngIf=\\\"existingNameError\\\">\\n        Existing Name!\\n      </div>\\n      <br/>\\n      <br/>\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"addGroup(groupInput.value)\\\">Add Group</button>\\n      <button mat-button matDialogClose color=\\\"secondary\\\">Cancel</button>\\n    </ng-template>\\n  </div>\\n\\n  <button *ngIf=\\\"groupsExist && !showTagger\\\"\\n    mat-raised-button\\n    style=\\\"margin-left: 15px\\\"\\n    (click)=\\\"toggleTagger()\\\">Taggit!</button>\\n\\n  <button *ngIf=\\\"showTagger\\\"\\n    mat-raised-button\\n    style=\\\"margin-left: 15px\\\"\\n    (click)=\\\"toggleTagger()\\\">Gallery</button>\\n\\n\\n</mat-toolbar>\\n\"","export default \"<div *ngFor=\\\"let opt of form.options\\\" [id]=\\\"form.label\\\" class=\\\"input-group\\\">\\n  <div  class=\\\"form-check form-check\\\">\\n    <label class=\\\"form-check-label\\\">\\n      <input class=\\\"form-check-input\\\" type=\\\"checkbox\\\" [checked]=\\\"isChecked(opt)\\\" id=\\\"inlineCheckbox1\\\" value={{opt.label}} (change)=\\\"selected($event, opt)\\\" /> \\n      {{opt.label}}\\n    </label>\\n  </div>\\n</div>\\n\\n\"","export default \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-notfound',\n  templateUrl: './notfound.component.html',\n  styleUrls: ['./notfound.component.scss']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import {\n  Feature as GeoJSONFeature,\n  GeoJsonProperties,\n  Geometry,\n  FeatureCollection as IFeatureCollection,\n} from 'geojson';\n\n// TODO: break these out into their own files\n\nexport interface IPointCloud {\n  id: number;\n  description: string;\n  conversion_parameters: string;\n  feature_id?: number;\n  task_id?: string;\n  project_id: number;\n}\n\n// export interface Group {\n//   groupName: Array<string>;\n//   formList: Array<any>;\n//   // type: any;\n// }\n\n// export interface Group {\n//   groupName: Array<string>;\n//   formList: Array<any>;\n//   // type: any;\n// }\n\nexport interface Group {\n  groupName: string;\n  formList: Array<any>;\n  color: string;\n  // type: any;\n}\n\nexport class Group implements Group {}\n\nexport interface TagGroup {\n  name: string;\n  id?: number;\n  color?: string;\n  icon?: string;\n  forms?: GroupForm[];\n}\n\nexport class TagGroup implements TagGroup {}\n\nexport interface GroupForm {\n  id?: string;\n  groupName?: string;\n  label?: string;\n  color?: string;\n  type?: string;\n  options?: Array<any>;\n}\n\nexport class GroupForm implements GroupForm {}\n\nexport interface Tag {\n  id?: string;\n  value?: any;\n}\n\nexport class Tag implements Tag {}\n\n// NOTE: For geojson/tag\nexport interface TagValue {\n  id: number;\n  featureId?: number;\n  tagId?: number;\n  groupId?: string;\n  value?: Array<any> | string | number;\n}\n\nexport class TagValue implements TagValue {}\n\nexport class AssetFilters {\n  // bbox has the following format: [sw_lng, sw_lat, ne_lng, ne_lat], the same as leaflet\n  bbox: Array<number> = [];\n  assetType: Set<string> = new Set<string>();\n\n  updateAssetTypes(assetType: string) {\n    this.assetType.has(assetType)\n      ? this.assetType.delete(assetType)\n      : this.assetType.add(assetType);\n  }\n\n  updateBBox(bbox: Array<number>): void {\n    this.bbox = bbox;\n  }\n\n  toJson() {\n    return {\n      assetType: [...this.assetType],\n      bbox: this.bbox,\n    };\n  }\n}\n\nexport interface Project {\n  description: string;\n  id?: number;\n  name: string;\n  ds_id?: string;\n  title?: string;\n  uuid?: string;\n  public?: boolean;\n  system_file?: string;\n  system_id?: string;\n  system_path?: string;\n  deletable?: boolean;\n  deleting?: boolean;\n  deletingFailed?: boolean;\n}\n\nexport class Project implements Project {}\n\nexport interface ProjectRequest {\n  project: Project;\n  observable?: boolean;\n  watch_content?: boolean;\n}\n\nexport class ProjectRequest implements ProjectRequest {}\n\nexport class AuthToken {\n  token: string;\n  expires: Date;\n  /**\n   *\n   * @param token : String\n   * @param expires: Date\n   */\n  constructor(token: string, expires: Date) {\n    this.token = token;\n    this.expires = new Date(expires);\n  }\n\n  static fromExpiresIn(token: string, expires_in: number) {\n    const expires = new Date(new Date().getTime() + expires_in * 1000);\n    return new AuthToken(token, expires);\n  }\n\n  /**\n   * Checks if the token is expired or not\n   */\n  public isExpired(): boolean {\n    return new Date().getTime() > this.expires.getTime();\n  }\n}\n\nexport interface IFeatureAsset {\n  id?: number;\n  path?: string;\n  uuid?: string;\n  feature_id?: number;\n  asset_type?: string;\n  display_path?: string;\n}\n\nexport class FeatureAsset implements IFeatureAsset {\n  id: number;\n  path: string;\n  uuid: string;\n  feature_id: number;\n  asset_type: string;\n  display_path: string;\n\n  // TODO: Implenent this\n  get assetPath(): string {\n    return '';\n  }\n}\n\ninterface FeatureStyles {\n  [key: string]: string | number;\n}\n\nexport interface Overlay {\n  id: number;\n  path: string;\n  uuid: string;\n  minLon: number;\n  minLat: number;\n  maxLon: number;\n  maxLat: number;\n  project_id: number;\n  label: string;\n}\n\ninterface AppGeoJSONFeature extends GeoJSONFeature {\n  assets?: Array<IFeatureAsset>;\n  styles?: FeatureStyles;\n  project_id?: number;\n  // featureType?(): String\n}\n\nexport class FeatureCollection implements IFeatureCollection {\n  features: Feature[];\n  type: any;\n}\n\nexport class Feature implements AppGeoJSONFeature {\n  geometry: Geometry;\n  // Taggit specific:\n  // properties.tags: Tag[]\n  // properties.groups: Group[]\n  // properties.values: TagValue[]\n  properties: GeoJsonProperties;\n  id?: string | number;\n  type: any;\n  assets?: Array<IFeatureAsset>;\n  styles?: FeatureStyles;\n  project_id?: number;\n\n  constructor(f: AppGeoJSONFeature) {\n    this.geometry = f.geometry;\n    this.properties = f.properties;\n    this.id = f.id;\n    this.type = f.type;\n    this.assets = f.assets;\n    this.styles = f.styles;\n    this.project_id = f.project_id;\n  }\n\n  initialAsset?() {\n    return this.assets[0];\n  }\n\n  featureType?(): string {\n    if (this.assets && this.assets.length === 1) {\n      return this.initialAsset().asset_type;\n    }\n\n    if (this.assets && this.assets.length > 1) {\n      return 'collection';\n    }\n\n    if (!this.assets.length) {\n      return this.geometry.type;\n    }\n  }\n\n  featurePath?(): string {\n    const initialAsset = this.initialAsset();\n    if (initialAsset.display_path) {\n      return initialAsset.display_path;\n    } else if (initialAsset.path) {\n      return initialAsset.path;\n    } else {\n      return this.id.toString();\n    }\n  }\n\n  featureShortPath?(): string {\n    const [initialAsset] = this.assets;\n    if (initialAsset.display_path) {\n      return /[^/]*$/.exec(initialAsset.display_path)[0];\n    } else if (initialAsset.path) {\n      const path = /[^/]*$/.exec(initialAsset.path)[0];\n      return path.slice(0, 15) + '...';\n    } else {\n      return this.id.toString();\n    }\n  }\n}\n\nexport interface IProjectUser {\n  id: number;\n  username: string;\n}\n","export enum EnvironmentType {\n  Production = 'production',\n  Staging = 'staging',\n  Local = 'local',\n}\n","import { EnvironmentType } from './environmentType';\n\nexport interface AppEnvironment {\n  production: boolean;\n  apiUrl: string;\n  jwt?: string;\n  clientId: string;\n  baseHref: string;\n  backend: EnvironmentType;\n}\n\nexport const environment: AppEnvironment = {\n  production: true,\n  apiUrl: 'https://agave.designsafe-ci.org/geo/v2/',\n  clientId: 'jHXnvsmQQcmP43qlrG7ATaxFXHQa',\n  baseHref: '/',\n  backend: EnvironmentType.Production\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { AuthToken } from '../models/models';\nimport {environment} from '../../environments/environment';\nimport {Observable, ReplaySubject} from 'rxjs';\nimport {Router} from '@angular/router';\n\nexport class AuthenticatedUser {\n  public readonly username: string;\n  public readonly email: string;\n  private _token: AuthToken;\n\n  constructor(username: string, email: string) {\n    this.username = username;\n    this.email = email;\n  }\n\n}\n\ninterface OpenIDUser {\n  name: string;\n  email: string;\n}\n\n\n@Injectable({providedIn: 'root'})\nexport class AuthService {\n\n  private _currentUser: ReplaySubject<AuthenticatedUser> = new ReplaySubject<AuthenticatedUser>(1);\n  public readonly currentUser: Observable<AuthenticatedUser> = this._currentUser.asObservable();\n  userToken: AuthToken;\n  private LS_TOKEN_KEY = 'hazmapperToken';\n  private LS_USER_KEY = 'hazmapperUser';\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  public login() {\n    // First, check if the user has a token in localStorage\n    const tokenStr = localStorage.getItem(this.LS_TOKEN_KEY);\n    if (!tokenStr) {\n      this.redirectToauthenticaor();\n    } else {\n      const token = JSON.parse(tokenStr);\n      this.userToken = new AuthToken(token.token, new Date(token.expires));\n      if (!this.userToken || this.userToken.isExpired()) {\n        this.logout();\n        this.redirectToauthenticaor();\n      }\n      this.getUserInfo();\n    }\n  }\n\n  private redirectToauthenticaor() {\n    const client_id = environment.clientId;\n    const callback = location.origin + environment.baseHref + 'callback';\n    const state = Math.random().toString(36);\n    const AUTH_URL = `https://agave.designsafe-ci.org/authorize?scope=openid&client_id=${client_id}&response_type=token&redirect_uri=${callback}&state=${state}`;\n    window.location.href = AUTH_URL;\n  }\n\n\n  /**\n   * Checks to make sure that the user has a token and the token is not expired;\n   */\n  public isLoggedIn(): boolean {\n    return this.userToken && !this.userToken.isExpired();\n  }\n\n  public logout(): void {\n    this.userToken = null;\n    localStorage.removeItem(this.LS_TOKEN_KEY);\n    localStorage.removeItem(this.LS_USER_KEY);\n  }\n\n  public setToken(token: string, expires: number): void {\n    this.userToken = AuthToken.fromExpiresIn(token, expires);\n    localStorage.setItem(this.LS_TOKEN_KEY, JSON.stringify(this.userToken));\n    // hit the wso2 api to retrieve the username etc\n    this.router.navigate(['/']);\n  }\n\n  public getUserInfo() {\n    const INFO_URL = `https://agave.designsafe-ci.org/oauth2/userinfo?schema=openid`;\n    const userStr = localStorage.getItem(this.LS_USER_KEY);\n    const user = JSON.parse(userStr);\n    if (user !== null) {\n      this._currentUser.next(\n        new AuthenticatedUser(user.username, user.email)\n      );\n    } else {\n      this.http.get<OpenIDUser>(INFO_URL).subscribe(resp => {\n        const u = new AuthenticatedUser(resp.name, resp.email);\n        localStorage.setItem(this.LS_USER_KEY, JSON.stringify(u));\n        this._currentUser.next(u);\n      });\n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { ToastrService } from 'ngx-toastr';\nimport { HttpClient } from '@angular/common/http';\nimport { INotification } from '../models/notification';\nimport { interval, Observable, ReplaySubject } from 'rxjs';\nimport { AuthService } from '../services/authentication.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationsService {\n  // Interval time to get notifications in millisecs\n  private TIMEOUT = 5000;\n  private _notifications: ReplaySubject<Array<INotification>> = new ReplaySubject<Array<INotification>>(1);\n  public readonly  notifications: Observable<Array<INotification>> = this._notifications.asObservable();\n\n  constructor(private toastr: ToastrService,\n              private http: HttpClient,\n              private authService: AuthService ) {\n      if (this.authService.isLoggedIn()) {\n      const timer = interval(this.TIMEOUT);\n      timer.subscribe((next) => {\n        this.getRecent();\n      });\n    }\n  }\n\n  // Sends a request to GeoAPI to retrieve recent notifications\n  getRecent(): void {\n    const baseUrl = environment.apiUrl + 'notifications/';\n    const now = new Date();\n    const then = new Date(now.getTime() - this.TIMEOUT);\n\n    this.http.get<Array<INotification>>(baseUrl + `?startDate=${then.toISOString()}`)\n      .subscribe( (notes) => {\n        this._notifications.next(notes);\n        notes.forEach( (note) => {\n          switch (note.status) {\n            case 'success':\n              this.showSuccessToast(note.message);\n              break;\n            case 'error':\n              this.showErrorToast(note.message);\n              break;\n            default:\n              break;\n          }\n        });\n      });\n  }\n\n  showSuccessToast(message: string): void {\n    this.toastr.success(message);\n  }\n\n  showImportErrorToast(message: string): void {\n    this.toastr.error(message + ', trying alternate method');\n  }\n\n  showErrorToast(message: string): void {\n    this.toastr.error(message);\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScrollService {\n\n  constructor() { }\n\n  public scrollRestored = true; // if true, the scroll was restored to the proper place\n  public scrollPosition = 0;\n\n  setScrollRestored(change: boolean) { this.scrollRestored = change; }\n\n  setScrollPosition() { this.scrollPosition = document.documentElement.scrollTop; }\n\n  scroll() {\n    // Attempts to scroll to the specified location\n\t\tdocument.documentElement.scroll({top: this.scrollPosition});\n\t\t// if it reaches there, marks the check as complete\n\t\tif (document.documentElement.scrollTop == this.scrollPosition) {\n\t\t\tthis.scrollRestored = false;\n\t\t}\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { LatLng } from 'leaflet';\nimport {\n  AssetFilters,\n  FeatureAsset,\n  IFeatureAsset,\n  IPointCloud,\n  Overlay,\n  TagGroup,\n  Tag,\n  TagValue,\n  GroupForm,\n} from '../models/models';\nimport { Feature, FeatureCollection } from '../models/models';\nimport { environment } from '../../environments/environment';\nimport { Form } from '@angular/forms';\nimport { take } from 'rxjs/operators';\nimport * as querystring from 'querystring';\nimport { RemoteFile } from 'ng-tapis';\nimport { NotificationsService } from './notifications.service';\nimport { ScrollService } from './scroll.service';\nimport { getRandomColor } from '../utils/randomColor';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GeoDataService {\n  // TODO: clean this up and put the observables up here. Also look into Replay/Behavior\n  // TODO: Go over this and remove all unused functions, a lot of this was copy/pasted over from Hazmapper without a second thought\n  private _features: BehaviorSubject<FeatureCollection>;\n  private features$: Observable<FeatureCollection>;\n  private _activeFeature: BehaviorSubject<any>;\n  private _mapMouseLocation: BehaviorSubject<any>;\n  private _basemap: BehaviorSubject<any>;\n  private _overlays: BehaviorSubject<any>;\n  private _activeOverlay: BehaviorSubject<any>;\n  private _pointClouds: BehaviorSubject<Array<IPointCloud>> =\n    new BehaviorSubject<Array<IPointCloud>>(null);\n  public readonly pointClouds: Observable<Array<IPointCloud>> =\n    this._pointClouds.asObservable();\n  private fileList: Array<RemoteFile>;\n\n  private _loaded: BehaviorSubject<boolean> = new BehaviorSubject(null);\n  public loaded: Observable<boolean> = this._loaded.asObservable();\n\n  private _activeGroupId: BehaviorSubject<number> = new BehaviorSubject(null);\n  public activeGroupId: Observable<number> = this._activeGroupId.asObservable();\n\n  private _activeGroup: BehaviorSubject<TagGroup> = new BehaviorSubject(null);\n  public activeGroup: Observable<TagGroup> = this._activeGroup.asObservable();\n\n  private _activeGroupFeature: BehaviorSubject<any> = new BehaviorSubject<any>(\n    null\n  );\n  public activeGroupFeature: Observable<any> =\n    this._activeGroupFeature.asObservable();\n\n  private _groups: BehaviorSubject<Map<string, TagGroup>> = new BehaviorSubject(\n    null\n  );\n  public groups: Observable<Map<string, TagGroup>> =\n    this._groups.asObservable();\n\n  private _groupsFeatures: BehaviorSubject<Map<string, Feature[]>> =\n    new BehaviorSubject(null);\n  public groupsFeatures: Observable<Map<string, Feature[]>> =\n    this._groupsFeatures.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private notificationsService: NotificationsService,\n    private scrollService: ScrollService\n  ) {\n    this._features = new BehaviorSubject<FeatureCollection>({\n      type: 'FeatureCollection',\n      features: [],\n    });\n    this.features$ = this._features.asObservable();\n    this._activeFeature = new BehaviorSubject<any>(null);\n    this._mapMouseLocation = new BehaviorSubject<any>(null);\n\n    // For the style of the basemap, defaults to OpenStreetmap\n    this._basemap = new BehaviorSubject<any>('roads');\n\n    // Holds all of the overlays on a project\n    this._overlays = new BehaviorSubject<any>(null);\n    this._activeOverlay = new BehaviorSubject<any>(null);\n  }\n\n  getFeature(\n    projectId: number,\n    feature: Feature\n  ): Observable<FeatureCollection> {\n    return this.http.get<FeatureCollection>(\n      environment.apiUrl + `/projects/${projectId}/features/${feature.id}/`\n    );\n  }\n\n  getFeatures(\n    projectId: number,\n    query: AssetFilters = new AssetFilters(),\n    restoreScroll = false\n  ): void {\n    const qstring: string = querystring.stringify(query.toJson());\n    this.http\n      .get<FeatureCollection>(\n        environment.apiUrl + `/projects/${projectId}/features/` + '?' + qstring\n      )\n      .subscribe((fc: FeatureCollection) => {\n        fc.features = fc.features.map((feat: Feature) => new Feature(feat));\n        this.getGroups(fc.features);\n        this._features.next(fc);\n        this._loaded.next(true);\n\n        if (restoreScroll) {\n          this.scrollService.setScrollRestored(true);\n        }\n      });\n  }\n\n  deleteFeature(feature: Feature) {\n    this.http\n      .delete(\n        environment.apiUrl +\n          `projects/${feature.project_id}/features/${feature.id}/`\n      )\n      .subscribe((resp) => {\n        this.getFeatures(feature.project_id, new AssetFilters(), true);\n      });\n  }\n\n  getPointClouds(projectId: number) {\n    this.http\n      .get<Array<IPointCloud>>(\n        environment.apiUrl + `/projects/${projectId}/point-cloud/`\n      )\n      .subscribe((resp) => {\n        this._pointClouds.next(resp);\n      });\n  }\n\n  setActiveGroup(group: TagGroup): void {\n    this._activeGroup.next(group);\n    if (group) {\n      const groupFeatures = this._groupsFeatures.value.get(group.name);\n      if (!this._activeGroupFeature.value || !groupFeatures.some(gf => this._activeGroupFeature.value.id === gf.id)) {\n        this.setActiveGroupFeature(groupFeatures[0]);\n      } \n    } else {\n      this.setActiveGroupFeature(null);\n    }\n  }\n\n  setActiveGroupFeature(feat: any): void {\n    this._activeGroupFeature.next(feat);\n  }\n\n  addFeature(feat: Feature): void {\n    this.features$.pipe(take(1)).subscribe((current: FeatureCollection) => {\n      current.features.push(feat);\n      this._features.next(current);\n    });\n  }\n\n  addPointCloud(\n    projectId: number,\n    title: string,\n    conversionParams: string\n  ): void {\n    const payload = {\n      description: title,\n      conversion_parameters: conversionParams,\n    };\n    this.http\n      .post(environment.apiUrl + `/projects/${projectId}/point-cloud/`, payload)\n      .subscribe(\n        (resp) => {\n          this.getPointClouds(projectId);\n        },\n        (error) => {\n          // TODO: notification\n        }\n      );\n  }\n\n  updateFeatureProperty(\n    projectId: number,\n    featureId: string | number,\n    groupData: any\n  ): void {\n    this.http\n      .post(\n        environment.apiUrl +\n          `projects/${projectId}/features/${featureId}/properties/`,\n        groupData\n      )\n      .subscribe(\n        // TODO: getFeatures() here\n        (resp) => {\n          this.getFeatures(projectId);\n        },\n        (error) => {}\n      );\n  }\n\n  updateFeatureStyle(\n    projectId: number,\n    featureId: string | number,\n    groupData: any\n  ): void {\n    this.http\n      .post(\n        environment.apiUrl +\n          `/projects/${projectId}/features/${featureId}/styles/`,\n        groupData\n      )\n      .subscribe(\n        (resp) => {},\n        (error) => {}\n      );\n  }\n\n  deletePointCloud(pc: IPointCloud): void {\n    this.http\n      .delete(\n        environment.apiUrl + `/projects/${pc.project_id}/point-cloud/${pc.id}/`\n      )\n      .subscribe((resp) => {\n        this.getPointClouds(pc.project_id);\n      });\n  }\n\n  addFileToPointCloud(pc: IPointCloud, file: File) {\n    const form = new FormData();\n    form.append('file', file);\n    this.http\n      .post(\n        environment.apiUrl + `/projects/${pc.project_id}/point-cloud/${pc.id}/`,\n        form\n      )\n      .subscribe((resp) => {\n        console.log(resp);\n      });\n  }\n\n  // This function updates the underlying observable, so changes naturally flow to feature service\n  importFileFromTapis(projectId: number, files: Array<RemoteFile>): void {\n    const tmp = files.map((f) => ({ system: f.system, path: f.path }));\n    const payload = {\n      files: tmp,\n    };\n    this.fileList = tmp;\n    this.http\n      .post(\n        environment.apiUrl + `projects/${projectId}/features/files/import/`,\n        payload\n      )\n\n      .subscribe(\n        (resp) => {\n          this.notificationsService.showSuccessToast('Import started!');\n        },\n        (error) => {\n          this.notificationsService.showImportErrorToast(\n            'Import failed! Try again?'\n          );\n        }\n      );\n  }\n\n  // An alternate function for importing images with no GPS data. A feature is created elsewhere, and the image is added to the feature\n  // Inputs:\n  // projectId: Id number of current project\n  // features: A pre-created feature with user-defined or zeroed out gps data\n  // file: A Tapis Remote File containing the image to be imported\n  importImage(projectId: number, feature: Feature, path: string): void {\n    const featureId = feature.id;\n    let file;\n    this.fileList.forEach((remoteFile) => {\n      if (remoteFile.path == path) {\n        file = remoteFile;\n      }\n    });\n    const payload = { system_id: file.system, path: file.path };\n    this.http\n      .post(\n        environment.apiUrl +\n          `projects/${projectId}/features/${featureId}/assets/`,\n        payload\n      )\n      .subscribe((resp) => {\n        this.notificationsService.showSuccessToast('Import started!');\n        // this.getFeatures(projectId)\n      });\n  }\n\n  // Creates a new feature from an uploaded locally created feature\n  uploadNewFeature(projectId: number, feature: Feature, path: string): void {\n    const payload = feature;\n    let response;\n    // Calls the addFeatureAsset route in GeoAPI, resp is a list of features\n    this.http\n      .post(environment.apiUrl + `projects/${projectId}/features/`, payload)\n      .subscribe((resp) => {\n        response = new Feature(resp[0]);\n        this.importImage(projectId, response, path);\n      });\n  }\n\n  downloadGeoJSON(projectId: number, query: AssetFilters = new AssetFilters()) {\n    const qstring: string = querystring.stringify(query.toJson());\n    const downloadLink = document.createElement('a');\n\n    this.http\n      .get<FeatureCollection>(\n        environment.apiUrl + `/projects/${projectId}/features/` + '?' + qstring\n      )\n      .subscribe((resp) => {\n        const blob = new Blob([JSON.stringify(resp)], {\n          type: 'application/json',\n        });\n        downloadLink.href = URL.createObjectURL(blob);\n        downloadLink.setAttribute('download', 'hazmapper.json');\n        document.body.appendChild(downloadLink);\n        downloadLink.click();\n        document.body.removeChild(downloadLink);\n      });\n  }\n\n  uploadFile(projectId: number, file: File): void {\n    const form: FormData = new FormData();\n    form.append('file', file, file.name);\n    this.http\n      .post<Array<Feature>>(\n        environment.apiUrl + `/projects/${projectId}/features/files/`,\n        form\n      )\n      .subscribe(\n        (feats) => {\n          feats.forEach((feat) => {\n            this.addFeature(new Feature(feat));\n          });\n        },\n        (error) => {\n          // TODO: Add notification\n        }\n      );\n  }\n\n  uploadAssetFile(projectId: number, featureId: number, file: File): void {\n    const form: FormData = new FormData();\n    form.append('file', file, file.name);\n    this.http\n      .post<Feature>(\n        environment.apiUrl +\n          `/api/projects/${projectId}/features/${featureId}/assets/`,\n        form\n      )\n      .subscribe(\n        (feature) => {\n          // TODO workaround to update activeFeature\n          const f = this._activeFeature.getValue();\n          if (f && f.id === featureId) {\n            this.activeFeature = new Feature(feature);\n            this.getFeatures(projectId);\n          }\n        },\n        (error) => {\n          // TODO: Add notification\n        }\n      );\n  }\n\n  getOverlays(projectId: number): void {\n    this.http\n      .get(environment.apiUrl + `/projects/${projectId}/overlays/`)\n      .subscribe((ovs: Array<Overlay>) => {\n        this._overlays.next(ovs);\n      });\n  }\n\n  addOverlay(\n    projectId: number,\n    file: File,\n    label: string,\n    minLat: number,\n    maxLat: number,\n    minLon: number,\n    maxLon: number\n  ) {\n    const payload = new FormData();\n    payload.append('file', file);\n    payload.append('label', label);\n    payload.append('minLat', minLat.toFixed(6));\n    payload.append('maxLat', maxLat.toFixed(6));\n    payload.append('minLon', minLon.toFixed(6));\n    payload.append('maxLon', maxLon.toFixed(6));\n\n    this.http\n      .post(environment.apiUrl + `/projects/${projectId}/overlays/`, payload)\n      .subscribe((resp) => {\n        this.getOverlays(projectId);\n      });\n  }\n\n  // Call on getFeatures (each time feature update)\n  getGroups(featureList: Feature[]): void {\n    const groups = new Map<string, TagGroup>();\n    const groupsFeatures = new Map<string, Feature[]>();\n    featureList\n      .filter(\n        (feat: Feature) =>\n          feat.properties.group && feat.properties.group.length > 0\n      )\n      .forEach((feat: Feature) => {\n        feat.properties.group.forEach((group: TagGroup) => {\n          groupsFeatures.set(\n            group.name,\n            groupsFeatures.has(group.name)\n              ? [...groupsFeatures.get(group.name), feat]\n              : [feat]\n          );\n          groups.set(group.name, group);\n        });\n      });\n    this._groups.next(groups);\n    this._groupsFeatures.next(groupsFeatures);\n    const activeGroup = this._activeGroup.value;\n    if (activeGroup) {\n      this.setActiveGroup(groups.get(activeGroup.name));\n    }\n  }\n\n  getGroup(groupName: string) {\n    return this._groups.value.get(groupName);\n  }\n\n  getGroupFeatures(featureList: Feature[], group: TagGroup) {\n    return featureList.filter(\n      (feat: Feature) =>\n        feat.properties.group &&\n        feat.properties.group.length &&\n        feat.properties.group.some((grp: TagGroup) => grp.id === group.id)\n    );\n  }\n\n  private createGroup(\n    featureList: Feature[],\n    group: TagGroup // TODO: Generate group with new uuid and not with name\n  ): Feature[] {\n    return featureList.map((feat: Feature) => {\n      let groupProp = feat.properties.group ? feat.properties.group : [];\n      groupProp = groupProp.filter((grp: TagGroup) => grp.id !== group.id);\n      groupProp.push(group);\n      feat.properties.group = groupProp;\n\n      return feat;\n    });\n  }\n\n  private createGroupInFeature(\n    feature: Feature,\n    group: TagGroup // TODO: Generate group with new uuid and not with name\n  ): Feature {\n    if (feature.properties.group) {\n      feature.properties.group\n        .filter((grp: TagGroup) => grp.name !== group.name)\n        .push(group);\n    }\n    return feature;\n  }\n\n  private updateGroup(featureList: Feature[], group: TagGroup): Feature[] {\n    return this.getGroupFeatures(featureList, group).map(\n      (feat: Feature) => {\n        const groupProp = feat.properties.group.filter(\n          (grp: TagGroup) => grp.id !== group.id\n        );\n        groupProp.push(group);\n        feat.properties.group = groupProp;\n\n        return feat;\n      }\n    );\n  }\n\n  private deleteGroup(featureList: Feature[], group: TagGroup): Feature[] {\n    return this.getGroupFeatures(featureList, group).map(\n      (feat: Feature) => {\n        feat.properties.group = feat.properties.group.filter(\n          (grp: TagGroup) => grp.id !== group.id\n        );\n        return feat;\n      }\n    );\n  }\n\n  createNewGroup(\n    projectId: number,\n    featureList: Feature[],\n    name: string\n  ) {\n    const id = uuidv4();\n    const myRandColor: string = getRandomColor();\n    const group: TagGroup = {\n      id,\n      name,\n      color: myRandColor,\n      icon: 'fa-house-damage'\n    };\n    this.createGroupFeatures(projectId, featureList, group);\n    return group;\n  }\n\n  createGroupFeatures(\n    projectId: number,\n    featureList: Feature[],\n    group: TagGroup\n  ) {\n    this.createGroup(featureList, group).forEach((feat: Feature) => {\n      this.updateFeatureProperty(projectId, feat.id, feat.properties);\n    });\n  }\n\n  deleteGroupFeatures(\n    projectId: number,\n    featureList: Feature[],\n    group: TagGroup\n  ) {\n    this.deleteGroup(featureList, group).forEach((feat: Feature) => {\n      this.updateFeatureProperty(projectId, feat.id, feat.properties);\n    });\n  }\n\n  updateGroupFeatures(\n    projectId: number,\n    featureList: Feature[],\n    group: TagGroup\n  ) {\n    this.updateGroup(featureList, group).forEach((feat: Feature) => {\n      this.updateFeatureProperty(projectId, feat.id, feat.properties);\n    });\n  }\n\n  renameGroup(projectId: number, featureList: Feature[], group: TagGroup, name: string): void {\n    const renamedGroup = {\n      ...group,\n      name\n    };\n\n    this.updateGroupFeatures(\n      projectId,\n      featureList,\n      renamedGroup\n    );\n  }\n\n  reiconGroup(projectId: number, featureList: Feature[], group: TagGroup, icon: string): void {\n    const reiconedGroup = {\n      ...group,\n      icon\n    };\n\n    this.updateGroupFeatures(\n      projectId,\n      featureList,\n      reiconedGroup\n    );\n  }\n\n\n  getForms(groupName: string): GroupForm[] {\n    return this._groups.value.get(groupName).forms;\n  }\n\n  public get overlays(): Observable<Array<Overlay>> {\n    return this._overlays.asObservable();\n  }\n\n  public get features(): Observable<FeatureCollection> {\n    return this._features.asObservable();\n  }\n\n  public get activeFeature() {\n    return this._activeFeature.asObservable();\n  }\n\n  // TODO: This is heinous\n  public set activeFeature(f: any) {\n    if (f) {\n      if (f === this._activeFeature.getValue()) {\n        this._activeFeature.next(null);\n      } else {\n        this._activeFeature.next(f);\n      }\n    } else {\n      this._activeFeature.next(null);\n    }\n  }\n\n  public get activeOverlay(): Observable<Overlay> {\n    return this._activeOverlay.asObservable();\n  }\n\n  public set activeOverlay(ov) {\n    this._activeOverlay.next(ov);\n  }\n\n  public get mapMouseLocation(): Observable<LatLng> {\n    return this._mapMouseLocation.asObservable();\n  }\n\n  public set mapMouseLocation(loc) {\n    this._mapMouseLocation.next(loc);\n  }\n\n  public set basemap(bmap) {\n    this._basemap.next(bmap);\n  }\n\n  public get basemap(): any {\n    return this._basemap.asObservable();\n  }\n}\n","export function getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n","import { Component, OnInit } from '@angular/core';\nimport {GeoDataService} from '../../services/geo-data.service';\nimport {Feature} from '../../models/models';\nimport {AuthenticatedUser, AuthService} from '../../services/authentication.service';\nimport {Observable} from 'rxjs';\nimport {BsModalRef, BsModalService} from 'ngx-foundation';\nimport {ModalFileBrowserComponent} from '../modal-file-browser/modal-file-browser.component';\nimport {RemoteFile} from 'ng-tapis';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class MainComponent implements OnInit {\n\n  // public activeFeature: Feature;\n  // public currentUser: AuthenticatedUser;\n\n  constructor(private geoDataService: GeoDataService, private authService: AuthService, private bsModalService: BsModalService, ) {}\n\n  ngOnInit() {\n\t// this.geoDataService.activeFeature.subscribe( next => {\n\t//   this.activeFeature = next;\n\t// });\n\t// this.authService.currentUser.subscribe(next => this.currentUser = next);\n  }\n\n\n\n}\n","import {Component, NgZone, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router, Route} from '@angular/router';\nimport {AuthService} from '../../services/authentication.service';\n\n@Component({\n  selector: 'app-callback',\n  templateUrl: './callback.component.html',\n  styleUrls: ['./callback.component.scss']\n})\nexport class CallbackComponent implements OnInit {\n\n  constructor(private route: ActivatedRoute, private auth: AuthService) { }\n\n  ngOnInit() {\n\t// TODO: For some reason wso2 is sending back a fragment like #access_token=qadad&expires_in=3600\n\tconst frag = this.route.snapshot.fragment;\n\tconst params = new URLSearchParams(frag);\n\tconst token = params.get('access_token');\n\tconst expires_in = +params.get('expires_in');\n\tthis.auth.setToken(token, expires_in);\n  }\n\n}\n","import {Injectable, NgModule} from '@angular/core';\nimport {Routes, RouterModule, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot} from '@angular/router';\nimport { NotFoundComponent} from './components/notfound/notfound.component';\nimport {AuthService} from './services/authentication.service';\nimport {MainComponent} from './components/main/main.component';\nimport { CallbackComponent } from './components/callback/callback.component';\n\n@Injectable()\nexport class Activate implements CanActivate {\n  constructor(private authSvc: AuthService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean  {\n\t if (this.authSvc.isLoggedIn()) {\n\t   return true;\n\t }\n\t this.authSvc.login();\n  }\n}\n\n\nconst routes: Routes = [\n  {path: '', component: MainComponent, canActivate: [Activate]\n  },\n\n  {path: 'callback', component: CallbackComponent},\n  {path: '404', component: NotFoundComponent }];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {onSameUrlNavigation: 'reload'})],\n  exports: [RouterModule],\n  providers: [Activate]\n})\nexport class AppRoutingModule { }\n","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from './services/authentication.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  title = 'viewer';\n\n  constructor(private authService: AuthService) {}\n\n  ngOnInit() {\n\tthis.authService.login();\n  }\n}\n","import {CircleMarker, circleMarker, divIcon, LatLng, Marker, marker} from 'leaflet';\nimport {Feature} from '../models/models';\n\nfunction createCircleMarker(feature: Feature, latlng: LatLng): CircleMarker {\n  const options = {\n    radius: 8,\n    fillColor: '#d3d3d3',\n    color: 'black',\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0.8\n  };\n  return circleMarker( latlng, options );\n}\n\nfunction createImageMarker(feature: Feature, latlng: LatLng): Marker {\n  const divHtml = '<i class=\\'fas fa-camera-retro fa-2x light-blue\\'></i>';\n  const ico = divIcon({className: 'leaflet-fa-marker-icon', html: divHtml});\n  return marker(latlng, {icon: ico});\n}\n\nfunction createCollectionMarker(feature: Feature, latlng: LatLng): Marker {\n  const divHtml = '<i class=\"fa fa-folder-open fa-2x light-blue\"></i>';\n  const ico = divIcon({className: 'icon-marker', html: divHtml});\n  return marker(latlng, {icon: ico});\n}\nfunction createVideoMarker(feature: Feature, latlng: LatLng): Marker {\n  const divHtml = '<i class=\\'fas fa-video fa-2x light-blue\\'></i>';\n  const ico = divIcon({className: 'leaflet-fa-marker-icon', html: divHtml});\n  return marker(latlng, {icon: ico});\n}\n\nexport function createMarker(feature: Feature, latlng: LatLng): Marker {\n  let marker;\n  if (feature.featureType() == 'image') {\n    marker = createImageMarker(feature, latlng);\n  } else if (feature.featureType() == 'collection') {\n    marker =  createCollectionMarker(feature, latlng);\n  } else if (feature.featureType() == 'video') {\n    marker = createVideoMarker(feature, latlng);\n  } else {\n    marker = createCircleMarker(feature, latlng);\n  }\n  return marker;\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport * as L from 'leaflet';\nimport 'leaflet.markercluster';\n\nimport { GeoDataService} from '../../services/geo-data.service';\nimport { createMarker } from '../../utils/leafletUtils';\nimport {Feature} from 'geojson';\nimport {FeatureGroup, ImageOverlay, LatLng, LeafletMouseEvent} from 'leaflet';\nimport * as turf from '@turf/turf';\nimport { AllGeoJSON } from '@turf/helpers';\nimport {filter, skip} from 'rxjs/operators';\nimport {Overlay} from '../../models/models';\nimport {AppEnvironment, environment} from '../../../environments/environment';\n\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.scss']\n})\nexport class MapComponent implements OnInit {\n\n  map: L.Map;\n  mapType = 'normal';\n  activeFeature: Feature;\n  activeOverlay: Overlay;\n  features: FeatureGroup = new FeatureGroup();\n  overlays: Map<number, ImageOverlay>;\n  environment: AppEnvironment;\n\n  constructor(private GeoDataService: GeoDataService,\n\t\t\t           private route: ActivatedRoute,\n\t\t\t  ) {\n\n\t// Have to bind these to keep this being this\n\tthis.featureClickHandler.bind(this);\n\tthis.mouseEventHandler.bind(this);\n  }\n\n  ngOnInit() {\n\t// const mapType: string = this.route.snapshot.queryParamMap.get('mapType');\n\t// this.projectId = +this.route.snapshot.paramMap.get(\"projectId\");\n\t// this.cluster = this.route.snapshot.queryParamMap.get('mapType');\n\tthis.environment = environment;\n\tthis.overlays = new Map();\n\tthis.map = new L.Map('map', {\n\t center: [40, -80],\n\t zoom: 9\n\t});\n\n\tconst baseOSM = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\t  maxZoom: 19,\n\t  attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n\t});\n\tconst satellite = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n\t  attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n\t});\n\t// default to streetmap view;\n\tthis.map.addLayer(baseOSM);\n\n\tthis.loadFeatures();\n\n\t// Publish the mouse location on the mapMouseLocation stream\n\tthis.map.on('mousemove', (ev: LeafletMouseEvent) => this.mouseEventHandler(ev));\n\tthis.GeoDataService.activeOverlay.pipe(skip(1)).subscribe((next) => {\n\t  this.addRemoveOverlay(next);\n\t});\n\n\n\t// Listen on the activeFeature stream and zoom map to that feature when it changes\n\tthis.GeoDataService.activeFeature.pipe(filter(n => n != null)).subscribe( (next) => {\n\t  this.activeFeature = next;\n\t  const bbox = turf.bbox(<AllGeoJSON> next);\n\t  this.map.fitBounds([[bbox[1], bbox[0]], [bbox[3], bbox[2]]]);\n\t});\n\n\t// Listen for changes to the basemap\n\tthis.GeoDataService.basemap.pipe(skip(1)).subscribe((next) => {\n\t  if (next == 'sat') {\n\t\tthis.map.removeLayer(baseOSM);\n\t\tthis.map.addLayer(satellite);\n\t  }\n\t  if (next == 'roads') {\n\t\tthis.map.removeLayer(satellite);\n\t\tthis.map.addLayer(baseOSM);\n\t  }\n\t});\n  }\n\n  addRemoveOverlay(ov: Overlay): void {\n\tif (this.overlays.has(ov.id)) {\n\t  this.features.removeLayer(this.overlays.get(ov.id));\n\t  this.overlays.delete(ov.id);\n\t} else {\n\t  const overlay = L.imageOverlay(environment.apiUrl + '/assets/' + ov.path, [[ov.minLat, ov.minLon], [ov.maxLat, ov.maxLon]]);\n\t  this.overlays.set(ov.id, overlay);\n\t  this.features.addLayer(overlay);\n\t}\n\tthis.map.fitBounds(this.features.getBounds());\n  }\n\n\n  mouseEventHandler(ev: any): void {\n\tthis.GeoDataService.mapMouseLocation = ev.latlng;\n  }\n\n\n  /**\n   * Load Features for a project.\n   */\n  loadFeatures() {\n\tconst geojsonOptions = {\n\t  pointToLayer: createMarker\n\t};\n\tthis.GeoDataService.features.subscribe(collection => {\n\t  this.features.clearLayers();\n\t  const markers = L.markerClusterGroup({\n\t\ticonCreateFunction: (cluster) => {\n\t\t  return L.divIcon({html: `<div><b>${cluster.getChildCount()}</b></div>`, className: 'marker-cluster'});\n\t\t}\n\t  });\n\t  collection.features.forEach( d => {\n\t\tconst feat = L.geoJSON(d, geojsonOptions);\n\t\tfeat.on('click', (ev) => { this.featureClickHandler(ev); } );\n\n\t\tif (d.geometry.type == 'Point') {\n\t\t  markers.addLayer(feat);\n\t\t} else {\n\t\t  this.features.addLayer(feat);\n\t\t}\n\t  });\n\t  this.features.addLayer(markers);\n\t  this.map.addLayer(this.features);\n\t  try {\n\t\tthis.map.fitBounds(this.features.getBounds());\n\t  } catch (e) {}\n\t});\n\n  }\n\n  /**\n   *\n   * @param ev\n   */\n  featureClickHandler(ev: any): void {\n\tconst f = ev.layer.feature;\n\tthis.GeoDataService.activeFeature = f;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Project, IProjectUser, ProjectRequest } from '../models/models';\nimport { environment } from '../../environments/environment';\nimport { AuthService } from './authentication.service';\nimport { validateBBox } from '@turf/helpers';\nimport { NotificationsService } from './notifications.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProjectsService {\n  private _projects: BehaviorSubject<Project[]> = new BehaviorSubject([]);\n  public readonly projects: Observable<Project[]> =\n    this._projects.asObservable();\n  private _activeProject: ReplaySubject<Project> = new ReplaySubject<Project>(\n    1\n  );\n  public readonly activeProject: Observable<Project> =\n    this._activeProject.asObservable();\n  private _projectUsers: ReplaySubject<Array<IProjectUser>> = new ReplaySubject<\n    Array<IProjectUser>\n  >(1);\n  public readonly projectUsers$: Observable<Array<IProjectUser>> =\n    this._projectUsers.asObservable();\n\n  private _deletingProjects: BehaviorSubject<Project[]> = new BehaviorSubject<\n    Project[]\n  >([]);\n  public deletingProjects: Observable<Project[]> =\n    this._deletingProjects.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService,\n    private notificationsService: NotificationsService\n  ) {}\n\n  testGeoApi(): void {\n    const data = {\n      name: 'Awesome Project',\n      description: 'Cool project',\n    };\n    const prom = this.http\n      .post<Project>(`http://localhost:8888/projects/`, data)\n      .subscribe((resp) => {\n        this._projects.next([...this._projects.value, resp]);\n        // Set the active project to the one just created?\n        this._activeProject.next(resp);\n      });\n\n    this.http\n      .get<Project[]>(`http://localhost:8888/projects/`)\n      .subscribe((resp) => {\n        this._projects.next(resp);\n      });\n  }\n\n  updateProjectsList(resp: Project[] = []) {\n    const myProjs = resp.length !== 0 ? resp : this._projects.value;\n\n    this._deletingProjects.value.length !== 0\n      ? this._projects.next(\n          myProjs.map((p) => {\n            const deletingProj = this._deletingProjects.value.find(\n              (dp) => dp.id === p.id\n            );\n            return deletingProj ? deletingProj : p;\n          })\n        )\n      : this._projects.next(myProjs);\n  }\n\n  // Queries database for all user projects.\n  getProjects(): void {\n    this.http.get<Project[]>(environment.apiUrl + `/projects/`).subscribe(\n      (resp) => {\n        this.updateProjectsList(resp);\n      },\n      (error) => {\n        this.notificationsService.showErrorToast(\n          'Error importing files Design Safe, GeoAPI might be down'\n        );\n      }\n    );\n  }\n\n  create(data: ProjectRequest): Observable<Project> {\n    const prom = this.http.post<Project>(\n      environment.apiUrl + `/projects/`,\n      data\n    );\n    prom.subscribe((proj) => {\n      this._projects.next([...this._projects.value, proj]);\n\n      // Awkward as hell, but this ensures we actually transition to the newly created project\n      // Without this, the screen flickers briefly to the new project, but ends up stuck on the old project\n      this.setActiveProject(proj);\n      this.setActiveProject(proj);\n    });\n    return prom;\n  }\n\n  setActiveProject(proj: Project): void {\n    // saves change as last visited project\n    window.localStorage.setItem('lastProj', JSON.stringify(proj));\n    try {\n      this._activeProject.next(proj);\n    } catch (error) {\n      return error;\n    }\n  }\n\n  update(data: ProjectRequest): void {\n    this.http\n      .put<Project>(environment.apiUrl + `/projects/${data.project.id}/`, data)\n      .subscribe((resp) => {\n        this._activeProject.next(resp);\n      });\n  }\n\n  // Note: This will delete the project for everyone, if the project is shared.\n  delete(data: Project): void {\n    this._deletingProjects.next([\n      ...this._deletingProjects.value,\n      { ...data, deleting: true },\n    ]);\n    this.updateProjectsList();\n\n    this.http.delete(environment.apiUrl + `projects/${data.id}/`).subscribe(\n      (resp) => {\n        window.localStorage.setItem('lastProj', JSON.stringify('none'));\n\n        this._deletingProjects.next(\n          this._deletingProjects.value.filter((p) => p.id !== data.id)\n        );\n        // These next two lines might be causing problems. Adding getProjects causes duplicates during project creation,\n        // So I'm thinking that calling these here might be the root of my delete woes, as they're restoring the project I just\n        // deleted...\n        this.updateProjectsList();\n        this.getProjects();\n        // As elegant as a brick to the face, but this solves the delete issues...\n        window.localStorage.setItem('lastProj', JSON.stringify('none'));\n      },\n      (error) => {\n        window.localStorage.setItem('lastProj', JSON.stringify('none'));\n\n        this._deletingProjects.next(\n          this._deletingProjects.value.map((p) => {\n            return p.id === data.id\n              ? { ...p, deleting: false, deletingFailed: true }\n              : p;\n          })\n        );\n        this.updateProjectsList();\n\n        this.getProjects();\n\n        this.notificationsService.showErrorToast('Could not delete project!');\n        console.error(error);\n      }\n    ); // end of error\n  }\n\n  getProjectUsers(proj: Project): Observable<Array<IProjectUser>> {\n    return this.http\n      .get<Array<IProjectUser>>(\n        environment.apiUrl + `/projects/${proj.id}/users/`\n      )\n      .pipe(\n        tap((users) => {\n          this._projectUsers.next(users);\n        })\n      );\n  }\n\n  addUserToProject(proj: Project, uname: string): void {\n    const payload = {\n      username: uname,\n    };\n    this.http\n      .post(environment.apiUrl + `/projects/${proj.id}/users/`, payload)\n      .subscribe((resp) => {\n        this.getProjectUsers(proj).subscribe();\n      });\n  }\n\n  deleteUserFromProject(proj: Project, user: string): void {\n    this.http\n      .delete(environment.apiUrl + `/projects/${proj.id}/users/${user}/`)\n      .subscribe(\n        (resp) => {\n          this.getProjectUsers(proj).subscribe();\n        },\n        (error) => {\n          // TODO: Create popup for an error message.\n          console.log(error);\n        }\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {SystemSummary} from 'ng-tapis';\nimport { ApiService } from 'ng-tapis';\nimport {Observable, ReplaySubject} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgaveSystemsService {\n\n  private baseUrl = 'https://agave.designsafe-ci.org/systems/v2/';\n  private _systems: ReplaySubject<SystemSummary[]> = new ReplaySubject<SystemSummary[]>(1);\n  public readonly systems: Observable<SystemSummary[]> = this._systems.asObservable();\n  private _projects: ReplaySubject<SystemSummary[]> = new ReplaySubject<SystemSummary[]>(1);\n  public readonly projects: Observable<SystemSummary[]> = this._projects.asObservable();\n  private systemsList: SystemSummary[];\n\n  constructor(private tapis: ApiService) { }\n\n  // list() runs when the file browser is opened, retrieves all files in TACC for given user\n  list() {\n    this.tapis.systemsList({type: 'STORAGE'})\n      .subscribe(resp => {\n        this._systems.next(resp.result);\n        this._projects.next(resp.result.filter(sys => sys.id.startsWith('project')));\n      }, error => {\n        this._systems.next(null);\n        this._projects.next(null);\n      });\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport { ApiService, FileOperationRequest} from 'ng-tapis';\nimport {RemoteFile} from 'ng-tapis';\nimport {Project} from '../models/models';\nimport {share} from 'rxjs/operators';\nimport {HttpClient} from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport {AuthService} from './authentication.service';\nimport {MatSnackBar, MatSnackBarConfig} from '@angular/material/snack-bar';\nimport { SystemSummary} from 'ng-tapis';\n// import { verify } from 'ts-mockito';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TapisFilesService {\n\n  private baseUrl = 'https://agave.designsafe-ci.org/files/v2/';\n  public currentListing: Array<RemoteFile>;\n  private _listing: BehaviorSubject<RemoteFile[]> = new BehaviorSubject<RemoteFile[]>([]);\n  public readonly listing: Observable<RemoteFile[]> = this._listing.asObservable();\n  public readonly IMPORTABLE_TYPES: Array<string> = ['jpg', 'jpeg', 'las', 'laz', 'json', 'geojson', 'geotiff', 'tiff', 'gpx'];\n  public lastSystem: SystemSummary; // The last filesystem the user was browsing\n  public lastFile: RemoteFile; // The last directory the user was browsing\n  public noPreviousSelections: boolean;\n\n  constructor(private tapis: ApiService,\n              private http: HttpClient,\n              private authService: AuthService,\n              private popup: MatSnackBar) { }\n\n  checkIfSelectable(file: RemoteFile): boolean {\n    if (file.type === 'dir') {return false; }\n    const ext = this.getFileExtension(file);\n    return this.IMPORTABLE_TYPES.includes(ext);\n  }\n\n  private getFileExtension(file: RemoteFile): string {\n    return file.name.split('.').pop().toLowerCase();\n  }\n\n  listFiles(system: string, path: string, offset: number, limit: number) {\n    return this.tapis.filesList({systemId: system, filePath: path, offset, limit});\n  }\n\n  public getParentPath(path: string): string {\n    const cleaned = path.replace('//', '/');\n    const arr = cleaned.split('/');\n    arr.pop();\n    const parentPath = arr.join('/');\n    return parentPath;\n  }\n\n  // saves project to a specified format in Design Safe's my Data section\n  public export(systemID: string, path: string, fileName: string, extension: string, data: any) {\n    // Constructs an object that configures the success/error pop-up\n    const snackbarConfig: MatSnackBarConfig = {duration: 3000, horizontalPosition: 'right', verticalPosition: 'top'};\n    // construct the full URL that points to where the data will be stored\n    const fullURL = `https://agave.designsafe-ci.org/files/v2/media/system/${systemID}${path}`;\n\n    // construct a file to submit\n    let fileType = 'plain/text';\n    ((extension == '.csv') ? (fileType = 'text/csv') : (fileType = 'application/json'));\n    const tmp = new Blob([data], {type: fileType});\n    const date = new Date();\n    const file = new File([tmp], fileName, {lastModified: date.valueOf()});\n\n    // Creates a form data object which holds the file to be uploaded\n    const form: FormData = new FormData;\n    form.append('fileToUpload', file);\n\n    // sends the packaged data to Designsafe. URL its being uploaded to handles authentication\n    this.http.post(fullURL, form).subscribe(resp => {\n      console.log(resp);\n      const msg = 'Successfully saved file to ' + systemID + path;\n      this.popup.open(msg, '', snackbarConfig);\n    }, error => {\n      console.log(error);\n      const msg = 'Faled to save file to ' + systemID + path;\n      this.popup.open(msg, '', snackbarConfig);\n    });\n  }\n\n  // Saves the current file directory and file system to Local Storage\n  saveState() {\n    const sysStr = JSON.stringify(this.lastSystem);\n    const fileStr = JSON.stringify(this.lastFile);\n    window.localStorage.setItem('system', sysStr);\n    window.localStorage.setItem('file', fileStr);\n  }\n\n  // Attempts to retrieve the last used state\n  getState() {\n    try {\n      this.lastSystem = JSON.parse(window.localStorage.getItem('system'));\n      this.lastFile = JSON.parse(window.localStorage.getItem('file'));\n      this.noPreviousSelections = this.lastFile == null;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n","import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\nimport {AgaveSystemsService} from '../../services/agave-systems.service';\nimport {AuthenticatedUser, AuthService} from '../../services/authentication.service';\nimport { RemoteFile} from 'ng-tapis/models/remote-file';\nimport { SystemSummary} from 'ng-tapis';\nimport { TapisFilesService } from '../../services/tapis-files.service';\nimport { BsModalRef } from 'ngx-foundation/modal/bs-modal-ref.service';\nimport { Subject, combineLatest} from 'rxjs';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { take } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-modal-file-browser',\n  templateUrl: './modal-file-browser.component.html',\n  styleUrls: ['./modal-file-browser.component.scss'],\n})\nexport class ModalFileBrowserComponent implements OnInit {\n\n  static limit = 200; // Limits maximum amount of files displayed\n\n  @Output() currentPath: EventEmitter<string> = new EventEmitter<string>();\n\n  public allowedExtensions: Array<string> = this.tapisFilesService.IMPORTABLE_TYPES;\n \n  private currentUser: AuthenticatedUser;\n  public selectedPath;\n  public filesList: Array<RemoteFile> = [];\n  public inProgress = true;\n  public retrievalError = false;\n  public selectedFiles: Map<string, RemoteFile> = new Map();\n  public onClose: Subject<Array<RemoteFile>> = new Subject<Array<RemoteFile>>();\n  public projects: Array<SystemSummary>;\n  private selectedSystem: SystemSummary;\n  public myDataSystem: SystemSummary;\n  public communityDataSystem: SystemSummary;\n  public publishedDataSystem: SystemSummary;\n  public currentDirectory: RemoteFile;\n  private offset: number;\n  public firstFileIndex: number;\n\n  constructor(private tapisFilesService: TapisFilesService,\n\t\t  // private modalRef: BsModalRef,\n\t\t            public dialogRef: MatDialogRef<ModalFileBrowserComponent>,\n\t\t            private dialog: MatDialog,\n\t\t            private authService: AuthService,\n\t\t            private agaveSystemsService: AgaveSystemsService) { }\n\n  ngOnInit() {\n\t// retrive state data\n\t// this.tapisFilesService.getState()\n\n\t// This finds all the projects, and file systems found from a user \n\tthis.agaveSystemsService.list();\n\n\t// TODO: change those hard coded systemIds to environment vars or some sort of config\n\t// wait on the currentUser and systems to resolve\n\tcombineLatest([this.authService.currentUser, this.agaveSystemsService.systems, this.agaveSystemsService.projects])\n\t\n\t// This little thing helped me fix the problem on calling ngOnInit several times\n\t.pipe(\n        take(1)\n      )\n\t  .subscribe( ([user, systems, projects]) => {\n\t\n\t\t// Uses systems to find the different directories that has the files in\n\tthis.myDataSystem = systems.find( (sys) => sys.id === 'designsafe.storage.default');\n\tthis.communityDataSystem = systems.find( (sys) => sys.id === 'designsafe.storage.community');\n\tthis.publishedDataSystem = systems.find( (sys) => sys.id === 'designsafe.storage.published');\n\t\n\t// This is where they choose which one they start with\n\tthis.selectedSystem = this.tapisFilesService.lastSystem;\n\n\tif (this.selectedSystem == null) {\n\t\tthis.selectedSystem = this.myDataSystem;\n\t\tthis.tapisFilesService.lastSystem = this.myDataSystem;\n\t}\n\n\t// If the user has already navigated to a folder, restore those options\n\tthis.currentDirectory = this.tapisFilesService.lastFile;\n\n\tthis.projects = projects;\n\tthis.currentUser = user;\n\tconst init = <RemoteFile> {\t\n\t\tsystem: this.myDataSystem.id,\n\t\ttype: 'dir',\n\t\tpath: this.currentUser.username\n\t};\n\t// If the user hasn't yet opened the file browser, set the last file to an init file.\n\tif ( this.tapisFilesService.noPreviousSelections) {\n\t\tthis.selectedSystem = this.myDataSystem;\n\t\tthis.tapisFilesService.lastFile = init;\n\t\tthis.tapisFilesService.noPreviousSelections = false;\n\t}\n\tthis.browse(this.tapisFilesService.lastFile);\n\t  });\n\n  }\n\n  selectSystem(system: SystemSummary): void {\n\tlet pth;\n\tsystem.id === this.myDataSystem.id ? pth = this.currentUser.username : pth = '/';\n\tconst init = <RemoteFile> {\n\t  system: system.id,\n\t  type: 'dir',\n\t  path: pth\n\t};\n\tthis.selectedSystem = system;\n\tthis.tapisFilesService.lastSystem = this.selectedSystem;\n\tthis.browse(init);\n  }\n\n\n  browse(file: RemoteFile) {\n\tthis.selectedPath = file.path;\n\tthis.selectedSystem = this.selectedSystem; // Self-assignment keeps the system name from disappearing while browsing subfolders\n\tif (file.type !== 'dir') { return; }\n\tthis.currentDirectory = file;\n\tthis.tapisFilesService.lastFile = file; // Updates the last directory visted\n\t// this.selectedFiles.clear();\n\tthis.filesList = [];\n\tthis.offset = 0;\n\tthis.inProgress = false;\n\tthis.getFiles();\n  }\n\n  toRoot() {\n\tlet pth;\n\tthis.selectedSystem.id === this.myDataSystem.id ? pth = this.currentUser.username : pth = '/';\n\tconst init = <RemoteFile> {\n\t  system: this.selectedSystem.id,\n\t  type: 'dir',\n\t  path: pth\n\t};\n\tthis.browse(init);\n  }\n\n  getFiles() {\n\tconst hasMoreFiles = (this.offset % ModalFileBrowserComponent.limit) === 0;\n\n\tif (this.inProgress || !hasMoreFiles) {\n\t\treturn;\n\t}\n\n\tthis.inProgress = true;\n\tthis.tapisFilesService.listFiles(this.currentDirectory.system, this.currentDirectory.path, this.offset, ModalFileBrowserComponent.limit)\n\t.subscribe(listing => {\n\t\tconst files = listing.result;\n\n\t\tif (files.length && files[0].name === '.') {\n\t\t\t// This removes the first item in the listing, which in Agave\n\t\t\t// is always a reference to self '.' and replaces with '..'\n\t\t\tconst current = files.shift();\n\t\t\tthis.currentPath.next(current.path);\n\t\t\tcurrent.path = this.tapisFilesService.getParentPath(current.path);\n\t\t\tcurrent.name = '..';\n\t\t\tfiles.unshift(current);\n\t\t  }\n\t\tconst newFile = [];\n\t\tconst allowedExt = this.allowedExtensions;\n\t\tfiles.forEach(function(value, index) {\n          if ((value.type == 'file' && allowedExt.includes(value.path.split('.').pop().toLowerCase()) ) || value.type == 'dir') {\n            newFile.push(value);\n          }});\n\n\t\tthis.inProgress = false;\n\t\tthis.retrievalError = false;\n\t\tthis.filesList = this.filesList.concat(newFile);\n\t\tthis.offset = this.offset + files.length;\n\t},\n\terror => {\n\t\t// If retrieving the files from DesignSafe bugs out due to the site being down, this is where it ends up\n\t\tthis.retrievalError = true;\n\t\tthis.inProgress = false;\n\t});\n  }\n\n  // TODO: Ian: Error message on incorrect file type?\n  select(event: any, file: RemoteFile, index: number) {\n    if (event.shiftKey) {\n      this.selectFilesShiftClick(index, file);\n    } else {\n      if (this.tapisFilesService.checkIfSelectable(file)) {\n        this.addSelectedFile(file, index);\n      } else {\n      }\n    }\n  }\n\n  selectFilesShiftClick(index: number, file: RemoteFile) {\n    // this.selectedFiles.clear();\n    this.selectShift(index, file);\n  }\n\n\n  addSelectedFile(file: RemoteFile, index: number) {\n\tif (index != -1) {\n\t\tthis.firstFileIndex = index;\n\t  }\n\n\tif (this.tapisFilesService.checkIfSelectable(file)) {\n\t\tif (this.selectedFiles.has(file.path)) {\n\t\t\tthis.selectedFiles.delete(file.path);\n\t\t} else {\n\t\t\tthis.selectedFiles.set(file.path, file);\n\t\t}\n\t}\n  }\n\n  chooseFiles() {\n\tthis.tapisFilesService.saveState();\n\tthis.tapisFilesService.lastSystem = this.selectedSystem;\n\tconst tmp = Array.from(this.selectedFiles.values());\n\tthis.dialogRef.close(tmp);\n  }\n\n  cancel() {\n\tthis.tapisFilesService.saveState();\n\tthis.tapisFilesService.lastSystem = this.selectedSystem;\n\tthis.dialogRef.close();\n  }\n\n  selectAll() {\n\t  const indexTmp = -1;\n\t  let count = 0;\n\t  for (const file of this.filesList) {\n\t\tif (! this.selectedFiles.has(file.path)) {\n\t\t\tthis.select('', file, indexTmp);\n\t\t\tcount += 1;\n\t\t}\n\t  }\n\t  if (count == 1) {\n\t\tthis.selectedFiles.clear();\n\t  }\n  }\n\n  selectShift(index: number, file: RemoteFile) {\n    if (this.firstFileIndex != undefined && this.firstFileIndex != index) {\n      this.addRangeFiles(this.firstFileIndex, index, true);\n    } else {\n      this.addSelectedFile(file, index);\n    }\n  }\n\n  addRangeFiles(firstFileIndex: number, lastFileIndex: number, again: boolean) {\n    const maxIndex = Math.max(firstFileIndex, lastFileIndex);\n    const minIndex = Math.min(firstFileIndex, lastFileIndex);\n\n    for (let i = minIndex; i < maxIndex + 1; ++i) {\n      this.addSelectedFile(this.filesList[i], -1);\n    }\n\n    if (again) {\n      this.addSelectedFile(this.filesList[firstFileIndex], -1);\n    }\n  }\n}\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport {AgaveSystemsService} from '../../services/agave-systems.service';\nimport {AuthenticatedUser, AuthService} from '../../services/authentication.service';\nimport { RemoteFile} from 'ng-tapis/models/remote-file';\nimport { SystemSummary} from 'ng-tapis';\nimport { TapisFilesService } from '../../services/tapis-files.service';\nimport { BsModalRef } from 'ngx-foundation/modal/bs-modal-ref.service';\nimport { Subject, combineLatest} from 'rxjs';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { take } from 'rxjs/operators';\nimport { FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-modal-download-selector',\n  templateUrl: './modal-download-selector.component.html',\n  styleUrls: ['./modal-download-selector.component.scss']\n})\nexport class ModalDownloadSelectorComponent implements OnInit {\n\t\n  static limit = 200; // Limits maximum amount of files displayed\n\n  @Output() currentPath: EventEmitter<string> = new EventEmitter<string>();\n\n  private downloadSelectForm: FormGroup;\n  private currentUser: AuthenticatedUser;\n  public filesList: Array<RemoteFile> = [];\n  public inProgress = true;\n  public selectedFiles: Map<string, RemoteFile> = new Map();\n  public onClose: Subject<Array<RemoteFile>> = new Subject<Array<RemoteFile>>();\n  public projects: Array<SystemSummary>;\n  private selectedSystem: SystemSummary;\n  public myDataSystem: SystemSummary;\n  public communityDataSystem: SystemSummary;\n  public publishedDataSystem: SystemSummary;\n  public currentDirectory: RemoteFile;\n  public passbackData: Array<string> = ['', '', '', ''];\n  public fileName = 'Custom File Name';\n  public fileExtension = '.csv';\n  private offset: number;\n\n  constructor(private tapisFilesService: TapisFilesService,\n\t\t  // private modalRef: BsModalRef,\n\t\t            public dialogRef: MatDialogRef<ModalDownloadSelectorComponent>,\n\t\t            private dialog: MatDialog,\n\t\t            private authService: AuthService,\n\t\t            private agaveSystemsService: AgaveSystemsService) { }\n\n  ngOnInit() {\n\n  this.downloadSelectForm = new FormGroup( {\n    Name: new FormControl(this.fileName),\n    Extension: new FormControl(this.fileExtension)\n  });\n\n\t  // This finds all the projects, and file systems found from a user \n\t this.agaveSystemsService.list();\n\n\t// TODO: change those hard coded systemIds to environment vars or some sort of config\n\t// wait on the currentUser and systems to resolve\n\t combineLatest([this.authService.currentUser, this.agaveSystemsService.systems, this.agaveSystemsService.projects])\n\t\n\t// This little thing helped me fix the problem on calling ngOnInit several times\n\t.pipe(\n        take(1)\n      )\n\t  .subscribe( ([user, systems, projects]) => {\n\t\n\t\t// Uses systems to find the different directories that has the files in\n\tthis.myDataSystem = systems.find( (sys) => sys.id === 'designsafe.storage.default');\n\tthis.communityDataSystem = systems.find( (sys) => sys.id === 'designsafe.storage.community');\n\tthis.publishedDataSystem = systems.find( (sys) => sys.id === 'designsafe.storage.published');\n\t\n\t// This is where they choose which one they start with\n\tthis.selectedSystem = this.myDataSystem;\n\n\tthis.projects = projects;\n\tthis.currentUser = user;\n\tconst init = <RemoteFile> {\t\n\t\tsystem: this.myDataSystem.id,\n\t\ttype: 'dir',\n\t\tpath: this.currentUser.username\n\t};\n\tthis.browse(init);\n\t  });\n\n  }\n\n  selectSystem(system: SystemSummary): void {\n\tlet pth;\n\tsystem.id === this.myDataSystem.id ? pth = this.currentUser.username : pth = '/';\n\tconst init = <RemoteFile> {\n\t  system: system.id,\n\t  type: 'dir',\n\t  path: pth\n\t};\n\tthis.browse(init);\n  }\n\n\n  browse(file: RemoteFile) {\n\tif (file.type !== 'dir') { return; }\n\tthis.currentDirectory = file;\n\t// this.selectedFiles.clear();\n\tthis.filesList = [];\n\tthis.offset = 0;\n\tthis.inProgress = false;\n\tthis.getFiles();\n  }\n\n  getFiles() {\n\tconst hasMoreFiles = (this.offset % ModalDownloadSelectorComponent.limit) === 0;\n\n\tif (this.inProgress || !hasMoreFiles) {\n\t\treturn;\n\t}\n\n\tthis.inProgress = true;\n\n\tthis.tapisFilesService.listFiles(this.currentDirectory.system, this.currentDirectory.path, this.offset, ModalDownloadSelectorComponent.limit)\n\t.subscribe(listing => {\n\t\tconst files = listing.result;\n\n\t\tif (files.length && files[0].name === '.') {\n\t\t\t// This removes the first item in the listing, which in Agave\n\t\t\t// is always a reference to self '.' and replaces with '..'\n\t\t\tconst current = files.shift();\n\t\t\tthis.currentPath.next(current.path);\n   this.passbackData[1] = current.path;\n\t\t\tcurrent.path = this.tapisFilesService.getParentPath(current.path);\n\t\t\tcurrent.name = '..';\n\t\t\tfiles.unshift(current);\n\t\t  }\n\t\tconst newFile = [];\n\t\tfiles.forEach(function(value, index) {\n          if (value.type == 'file' || value.type == 'dir') {\n            newFile.push(value);\n          }});\n\n\t\tthis.inProgress = false;\n\t\tthis.filesList = this.filesList.concat(newFile);\n\t\tthis.offset = this.offset + files.length;\n\t},\n\terror => {\n\t\tthis.inProgress = false;\n\t});\n  }\n\n  chooseFiles() {\n  this.passbackData[0] = this.selectedSystem.id;\n \n  // checks to see if the input was left unchanged\n  if ( this.downloadSelectForm.dirty ) {\n    // if changed, enter name as specified\n    this.passbackData[2] = this.downloadSelectForm.get('Name').value;\n  } else {\n    // if unchanged, enter filename as empty string\n    this.passbackData[2] = '';\n  }\n  this.passbackData[3] = this.fileExtension;\n\t this.dialogRef.close(this.passbackData);\n  }\n\n  cancel() {\n\tthis.dialogRef.close();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalService, BsModalRef } from 'ngx-foundation';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ProjectsService } from '../../services/projects.service';\nimport { Project, ProjectRequest } from '../../models/models';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-modal-create-project',\n  templateUrl: './modal-create-project.component.html',\n  styleUrls: ['./modal-create-project.component.scss']\n})\nexport class ModalCreateProjectComponent implements OnInit {\n\n  public readonly onClose: Subject<any> = new Subject<any>();\n\n  projCreateForm: FormGroup;\n\n  constructor(public dialogRef: MatDialogRef<ModalCreateProjectComponent>,\n\t\t\t           private dialog: MatDialog,\n\t\t\t           private projectsService: ProjectsService) { }\n\n  ngOnInit() {\n\tthis.projCreateForm = new FormGroup( {\n\t  name: new FormControl(''),\n\t  description: new FormControl('')\n\t});\n  }\n\n  close(project: Project) {\n\tthis.dialogRef.close();\n  }\n\n  submit() {\n\t// Watch content we can set to false, for our project, we don't need this yet.\n\t// Watch content refers to syncing files created in a folder with a hazmapper map\n\t// Set observable to true, Hazmapper doesn't let users define that value for some reason.\n\tconst proj = new Project();\n\tconst projRqst = new ProjectRequest();\n\n\t// Retrieve project name and description\n\tproj.description = this.projCreateForm.get('description').value;\n\tproj.name = this.projCreateForm.get('name').value;\n\n\tprojRqst.project = proj;\n\n\tthis.projectsService.create(projRqst);\n\tthis.dialogRef.close();\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ProjectsService } from '../../services/projects.service';\nimport { Project } from '../../models/models';\nimport { THIS_EXPR } from '@angular/compiler/src/output/output_ast';\n\n@Component({\n  selector: 'app-modal-share-project',\n  templateUrl: './modal-share-project.component.html',\n  styleUrls: ['./modal-share-project.component.scss']\n})\nexport class ModalShareProjectComponent implements OnInit {\n\n  projShareForm: FormGroup;\n  activeProj: Project;\n  projectUsers;\n  onlyOne: boolean; // if only one user is present == TRUE \n\n  constructor(public dialogRef: MatDialogRef<ModalShareProjectComponent>,\n              private dialog: MatDialog,\n              private projectsService: ProjectsService) { }\n\n  ngOnInit() {\n    // creates new form control group to access input value\n    this.projShareForm = new FormGroup({\n      name: new FormControl(''),\n    });\n\n    // retrieves active project, needed to add users to the project\n    this.projectsService.activeProject.subscribe((proj) => {\n      this.activeProj = proj;\n    });\n\n    // retrieves all users currently registered to the active project\n    this.projectsService.getProjectUsers(this.activeProj).subscribe((next) => {\n      this.projectUsers = next;\n      this.onlyOne = (this.projectUsers.length == 1);\n    });\n  }\n\n  // closes modal without submitting anything\n  close() {\n    this.dialogRef.close();\n    }\n\n  // shares project with specified user\n  submit() {\n    this.projectsService.addUserToProject(this.activeProj, this.projShareForm.get('name').value);\n    this.dialogRef.close();\n  }\n\n  // deletes user from project\n  delete(user) {\n    this.projectsService.deleteUserFromProject(this.activeProj, user);\n    this.dialogRef.close();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { ProjectsService } from './projects.service';\nimport { Feature } from '../models/models';\n\n// Will inject Projects and GeoData Service to get properties of Feature\n@Injectable({\n  providedIn: 'root',\n})\nexport class GroupsService {\n  private _selectedImages: BehaviorSubject<Array<any>> = new BehaviorSubject([]);\n  public selectedImages: Observable<Array<any>> = this._selectedImages.asObservable();\n\n  private _showTagger: BehaviorSubject<boolean> = new BehaviorSubject(false);\n  public showTagger: Observable<boolean> = this._showTagger.asObservable();\n\n  private _showTagGenerator: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(\n    false\n  );\n  public showTagGenerator: Observable<boolean> = this._showTagGenerator.asObservable();\n\n  constructor() {}\n\n  imageSelected(feature: Feature): boolean {\n    const currentFeatures = this._selectedImages.value;\n    return currentFeatures.some(feat => feat.id === feature.id);\n  }\n\n  unselectAllImages() {\n    this._selectedImages.next([]);\n  }\n\n  toggleImageSelect(feature: Feature): void {\n    const currentFeatures = this._selectedImages.value;\n    const newFeatures = this.imageSelected(feature)\n      ? currentFeatures.filter(feat => feat.id !== feature.id)\n      : [feature, ...currentFeatures];\n\n    this._selectedImages.next(newFeatures);\n  }\n\n  setSelectedImages(selectedImages: any): void {\n    this._selectedImages.next(selectedImages);\n  }\n\n  toggleTagger(): void {\n    this._showTagger.next(!this._showTagger.value);\n  }\n\n  setShowTagGenerator(value: boolean): void {\n    this._showTagGenerator.next(value);\n  }\n}\n","import { Component, Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { Group, TagGroup, GroupForm, Tag, Project } from '../models/models';\nimport { map, first } from 'rxjs/operators';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { GeoDataService } from './geo-data.service';\nimport { prepareSyntheticListenerFunctionName } from '@angular/compiler/src/render3/util';\nimport { fadeInItems } from '@angular/material';\nimport { Feature, FeatureCollection } from 'geojson';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FormsService {\n  constructor(\n    private geoDataService: GeoDataService\n  ) {}\n\n  deleteForm(\n    projectId: number,\n    form: GroupForm,\n    activeGroup: TagGroup,\n    featureGroups: Feature[]\n  ): void {\n    const taggedGroup: TagGroup = {\n      ...activeGroup,\n      forms: activeGroup.forms.filter((t: GroupForm) => t.id !== form.id),\n    };\n\n    this.geoDataService.updateGroupFeatures(\n      projectId,\n      featureGroups,\n      taggedGroup\n    );\n  }\n\n  renameForm(\n    projectId: number,\n    targetForm: GroupForm,\n    activeGroup: TagGroup,\n    featureGroups: Feature[],\n    newName: string\n  ): void {\n    const taggedGroup: TagGroup = {\n      ...activeGroup,\n      forms: [...activeGroup.forms.filter(form => form.id !== targetForm.id), { ...targetForm, label: newName }],\n    };\n\n    this.geoDataService.updateGroupFeatures(\n      projectId,\n      featureGroups,\n      taggedGroup\n    );\n  }\n\n  createForm(\n    projectId: number,\n    form: GroupForm,\n    activeGroup: TagGroup,\n    featureGroups: Feature[]\n  ): void {\n    const id = uuidv4();\n    form = { ...form, id };\n    const taggedGroup: TagGroup = {\n      ...activeGroup,\n      forms: activeGroup.forms ? [...activeGroup.forms, form] : [form],\n    };\n    this.geoDataService.updateGroupFeatures(\n      projectId,\n      featureGroups,\n      taggedGroup\n    );\n  }\n\n  checkDefault(selectedColor: string, feature: any) {\n    if (selectedColor === 'default') {\n      try {\n        selectedColor = feature.styles.color;\n      } catch (error) {\n        selectedColor = '#00C8FF';\n      }\n    }\n    return selectedColor;\n  }\n\n  // Inputs:\n  // color:string A 7 digit hexadecimal string (#RRGGBB) passed in from a color tag\n  // This method accesses group services to retrive the current group's icon as well\n  // REDO: because it doesn't utilize hazmapper's styles properly\n  saveStyles(\n    projectId: number,\n    selectedColor: string,\n    group: TagGroup,\n    feature: Feature\n  ) {\n    group.color = this.checkDefault(selectedColor, feature);\n\n    const style = {\n      faIcon: group.icon,\n      color: group.color,\n    };\n\n    this.geoDataService.updateGroupFeatures(projectId, [feature], group);\n    this.geoDataService.updateFeatureStyle(projectId, feature.id, style);\n  }\n\n  updateTagValue(\n    activeProject: Project,\n    feature: Feature,\n    form: GroupForm,\n    tagValue: any\n  ) {\n    let tagProp = feature.properties.tags ? feature.properties.tags : [];\n    tagProp = tagProp.filter((tag: Tag) => form.id !== tag.id);\n\n    const tag = {\n      id: form.id,\n      value: tagValue,\n    };\n\n    feature.properties.tags = [...tagProp, tag];\n\n    this.geoDataService.updateFeatureProperty(\n      activeProject.id,\n      feature.id,\n      feature.properties\n    );\n  }\n\n  updateTagValues(\n    activeProject: Project,\n    feature: Feature,\n    formList: GroupForm[],\n    newValues: any[]\n  ) {\n    feature.properties.tags = newValues;\n    this.geoDataService.updateFeatureProperty(\n      activeProject.id,\n      feature.id,\n      feature.properties\n    );\n  }\n\n  getTagValue(feature: Feature, form: GroupForm): any {\n    if (feature.properties.tags) {\n      const tagValueObj = feature.properties.tags.find(\n        (featTag: any) => featTag.id && featTag.id === form.id\n      );\n\n      if (tagValueObj) {\n        return tagValueObj.value;\n      }\n    }\n    if (form.type === 'checkbox') {\n      return [];\n    } else {\n      return '';\n    }\n  }\n}\n\n// TODO: put this in models so we can reference it like we do the Features type\nexport interface tags {\n  type: string;\n  groupName: string;\n  label: string;\n  options: Array<Group>;\n  feature: string | number;\n  extra: Array<Group>;\n  id?: string;\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { BsModalService, BsModalRef } from 'ngx-foundation';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ProjectsService } from '../../services/projects.service';\nimport { Project, ProjectRequest } from '../../models/models';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-modal-current-project',\n  templateUrl: './modal-current-project.component.html',\n  styleUrls: ['./modal-current-project.component.scss']\n})\nexport class ModalCurrentProjectComponent implements OnInit {\n  projCreateForm: FormGroup;\n  activeProject: Project;\n\n  constructor(public dialogRef: MatDialogRef<ModalCurrentProjectComponent>,\n\t\t\t           private dialog: MatDialog,\n\t\t\t           private projectsService: ProjectsService,\n\t\t\t           @Inject(MAT_DIALOG_DATA) public projData: any) { }\n\n  ngOnInit() {\n\n    \n    this.projectsService.activeProject.subscribe( (next) => {\n      this.activeProject = next;\n    });\n\n    this.projCreateForm = new FormGroup( {\n      name: new FormControl(this.activeProject.name),\n      description: new FormControl(this.activeProject.description)\n    });\n\n  }\n\n  close() {\n\tthis.dialogRef.close();\n  }\n\n  delete() {\n    if (confirm('Are you sure you want to delete this project? This will also delete it from HazMapper, and anyone this project was shared with.')) {\n      this.projectsService.delete(this.activeProject);\n    }\n    this.dialogRef.close();\n  }\n  \n  update() {\n    // The project is being properly assembled, but the problem is that the returned project isn't updating.\n    // Do I need more data in my projects?\n    /*\n      export interface Project {\n      description: string;\n      id?: number;\n      name: string;\n      ds_id?: string;\n      title?: string;\n      uuid?: string;\n      public?: boolean;\n      system_file?: string;\n      system_id?: string;\n      system_path?: string;\n      deleting?: boolean;\n      deletingFailed?: boolean;\n    }\n     */\n    const p = new Project();\n    const projRqst = new ProjectRequest();\n\n    p.description = this.projCreateForm.get('description').value;\n    p.name = this.projCreateForm.get('name').value;\n    p.id = this.activeProject.id;\n    p.uuid = this.activeProject.uuid;\n    \n    projRqst.project = p;\n\n    this.projectsService.update(projRqst);\n    this.dialogRef.close();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Feature,\n  FeatureCollection\n} from '../models/models';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { GeoDataService } from './geo-data.service';\nimport { feature } from '@turf/turf';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureService {\n  private featureCollection: FeatureCollection;\n  private _features: BehaviorSubject<FeatureCollection>;\n  public features$: Observable<FeatureCollection>;\n\n  constructor(\n    private geoDataService: GeoDataService,\n  ) {\n    this._features = new BehaviorSubject<FeatureCollection>({\n      type: 'FeatureCollection',\n      features: [],\n    });\n    this.features$ = this._features.asObservable();\n\n    this.geoDataService.features.subscribe((fc: FeatureCollection) => {\n      this._features.next(fc);\n      this.featureCollection = fc;\n    });\n  }\n\n  // Takes the feature to be deleted, and filters it out of the feature list\n  deleteFeature(feat: Feature): void {\n    this.featureCollection.features = this.featureCollection.features.filter(\n      (featListfeat) => featListfeat.id != feat.id\n    );\n    this._features.next(this.featureCollection); // Update the observable\n    this.geoDataService.deleteFeature(feat);\n  }\n\n  // Takes a list of features, and deletes them from the observable in a more efficient manner\n  bulkFeatureDelete(delFeats: Array<Feature>): void {\n    delFeats.forEach((feat) => {\n      // Filter out every feature in delFeats from the master list\n      this.featureCollection.features = this.featureCollection.features.filter(\n        (featListFeature) => featListFeature.id != feat.id\n      );\n      this.geoDataService.deleteFeature(feat);\n    });\n    this._features.next(this.featureCollection); // Update the observable with the filtered list\n  }\n\n  saveFeature(feat: Feature): void {\n    this.geoDataService.updateFeatureProperty(\n      feat.project_id,\n      Number(feat.id),\n      feat.properties\n    );\n  }\n\n  // Takes a feature, and optionally an updated property section\n  // If featprop is null, it assumes the passed in feature was already updated with the new properties\n  updateFeatureProperties(feature: Feature, featProp = null): void {\n    // If featprop has a value, update the feature's properties to the new section\n    if (featProp != null) {\n      feature.properties = featProp;\n    }\n    // Update and save the list\n    this.featureCollection.features.forEach((feat) => {\n      if (feat.id == feature.id) {\n        feat = feature;\n      }\n    });\n    this.saveFeature(feature);\n  }\n}\n","import { Component, OnInit, Output, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { ProjectsService } from '../../services/projects.service';\nimport { Feature, Project, TagGroup } from '../../models/models';\nimport { FeatureCollection } from 'geojson';\nimport { GeoDataService } from '../../services/geo-data.service';\nimport { LatLng } from 'leaflet';\nimport { skip, startWith } from 'rxjs/operators';\nimport { BsModalRef, BsModalService } from 'ngx-foundation';\nimport { ModalFileBrowserComponent } from '../modal-file-browser/modal-file-browser.component';\nimport { ModalDownloadSelectorComponent } from '../modal-download-selector/modal-download-selector.component';\nimport { ModalCreateProjectComponent } from '../modal-create-project/modal-create-project.component';\nimport { ModalShareProjectComponent } from '../modal-share-project/modal-share-project.component';\nimport { interval, Observable, Subscription, combineLatest } from 'rxjs';\nimport { RemoteFile } from 'ng-tapis';\nimport { GroupsService } from '../../services/groups.service';\nimport { FormsService } from '../../services/forms.service';\nimport {\n  AuthenticatedUser,\n  AuthService,\n} from '../../services/authentication.service';\nimport { Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ModalCurrentProjectComponent } from '../modal-current-project/modal-current-project.component';\nimport { AppEnvironment, environment } from '../../../environments/environment';\nimport { feature } from '@turf/helpers';\nimport { TapisFilesService } from '../../services/tapis-files.service';\nimport { element } from 'protractor';\nimport { consoleTestResultHandler } from 'tslint/lib/test';\nimport { ScrollService } from 'src/app/services/scroll.service';\nimport { NotificationsService } from 'src/app/services/notifications.service';\nimport { FeatureService } from 'src/app/services/feature.service';\n\n@Component({\n  selector: 'app-control-bar',\n  templateUrl: './control-bar.component.html',\n  styleUrls: ['./control-bar.component.scss'],\n})\nexport class ControlBarComponent implements OnInit {\n  public activeFeature: Feature;\n  features: FeatureCollection;\n  featureList: Array<any> = [];\n\n  public currentUser: AuthenticatedUser;\n  public projects: Project[];\n  public selectedProject: Project;\n  public mapMouseLocation: LatLng = new LatLng(0, 0);\n  imageName: string;\n  groupsExist: boolean;\n  groupName: string;\n  showTagger = false;\n  selectedImages: Array<any>;\n  modalRef: BsModalRef;\n  activeGroup: TagGroup;\n  groups: Map<string, TagGroup>;\n  groupsFeatures: Map<string, any>;\n  activeGroupFeatures: any;\n  activeGroupFeaturesRotate: any;\n  activeGroupFeature: any;\n  invalidNameError = false;\n  existingNameError = false;\n  hazmapperLink: string;\n  foundFilePaths = [];\n\n  constructor(\n    private projectsService: ProjectsService,\n    private geoDataService: GeoDataService,\n    private bsModalService: BsModalService,\n    private groupsService: GroupsService,\n    private formsService: FormsService,\n    private authService: AuthService,\n    private readonly cdr: ChangeDetectorRef,\n    private filesService: TapisFilesService,\n    private router: Router,\n    private dialog: MatDialog,\n    private scrollService: ScrollService,\n    private notificationsService: NotificationsService,\n    private featureService: FeatureService\n  ) {}\n\n  ngOnInit() {\n    this.filesService.getState();\n\n    this.featureService.features$.subscribe((fc: FeatureCollection) => {\n      this.features = fc;\n\n      if (this.features != undefined) {\n        this.featureList = fc.features.filter((feature: Feature) => \n              feature.assets.length && feature.initialAsset() && feature.featureType() === 'image'\n        );\n      }\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n      this.groupsExist = next && next.size ? true : false;\n    });\n\n    combineLatest(\n      this.geoDataService.activeGroup,\n      this.geoDataService.groupsFeatures\n    ).subscribe(([grp, grpFts]) => {\n      this.activeGroup = grp;\n      this.groupsFeatures = grpFts;\n      if (grp && grpFts) {\n        this.activeGroupFeatures = grpFts.get(grp.name);\n        if (this.activeGroupFeatures) {\n          this.activeGroupFeaturesRotate = [...this.activeGroupFeatures];\n        }\n      }\n    });\n\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n    });\n\n    this.geoDataService.activeFeature.subscribe((next) => {\n      this.activeFeature = next;\n    });\n\n    this.notificationsService.notifications.subscribe((next) => {\n      const hasSuccessNotification = next.some(\n        (note) => note.status === 'success'\n      );\n      const hasFailureNotification = next.some((note) => note.status === 'error');\n      if (hasSuccessNotification) {\n        this.geoDataService.getFeatures(this.selectedProject.id);\n      }\n      if (hasFailureNotification) {\n        next.forEach((item) => {\n          // Compiles a list of all necessary files to import via the alt method\n          // The substring from 0 to 16 contains the phrase \"Error importing\", everything after this is the file path\n          if (\n            item.message.substring(0, 16) == 'Error importing ' &&\n            !this.foundFilePaths.some(\n              (filePath) => filePath === item.message.substring(16)\n            )\n          ) {\n            const path = item.message.substring(16);\n            this.geoDataService.uploadNewFeature(\n              this.selectedProject.id,\n              this.createBlankFeature(),\n              path\n            );\n            this.foundFilePaths.push(path);\n          }\n        });\n        this.geoDataService.getFeatures(this.selectedProject.id);\n      }\n    });\n\n    this.authService.currentUser.subscribe((next) => (this.currentUser = next));\n\n    this.projectsService.getProjects();\n    this.projectsService.projects.subscribe((projects) => {\n      this.projects = projects;\n\n      if (this.projects.length) {\n        let lastProj;\n        // try {\n        //   //restores view to the last visited project from local storage\n        //   lastProj = JSON.parse(window.localStorage.getItem('lastProj'));\n        //   // console.log(lastProj);\n        // } catch (error) {\n        //   lastProj = this.projectsService.setActiveProject(this.projects[0]);\n        // }\n\n        lastProj = this.projectsService.setActiveProject(this.projects[0]);\n\n        // If lastProj is null, then there is no project saved, or can be found, default to the first project in the list\n        if (lastProj == 'none' || lastProj == null) {\n          lastProj = this.projects[0];\n        }\n\n        this.projectsService.setActiveProject(lastProj);\n      }\n\n      this.groupsService.selectedImages.subscribe((next) => {\n        this.selectedImages = next;\n      });\n\n      this.groupsService.showTagger.subscribe((next) => {\n        this.showTagger = next;\n      });\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.selectedProject = next;\n      this.getDataForProject(this.selectedProject);\n      // retrieves uuid for project, formats result into a link to that Hazmapper map\n      this.hazmapperLink =\n        'https://hazmapper.tacc.utexas.edu/hazmapper/project/' + next.uuid;\n    });\n\n    this.geoDataService.mapMouseLocation.pipe(skip(1)).subscribe((next) => {\n      this.mapMouseLocation = next;\n    });\n  }\n\n  ngAfterViewChecked() {\n    this.cdr.detectChanges();\n  }\n\n  clearAll() {\n    this.groupsService.unselectAllImages();\n  }\n\n  selectProject(p: Project): void {\n    this.projectsService.setActiveProject(p);\n    this.getDataForProject(p);\n  }\n\n  getDataForProject(p: Project): void {\n    this.geoDataService.getFeatures(p.id);\n    this.geoDataService.getOverlays(p.id);\n    this.geoDataService.getPointClouds(p.id);\n  }\n\n  openFilePicker() {\n    // Refreshes the list of found paths used in importing images without Geo tagging\n    this.foundFilePaths = [];\n    const modal = this.dialog.open(ModalFileBrowserComponent);\n    modal.afterClosed().subscribe((files: Array<RemoteFile>) => {\n      if (files != null) {\n        this.geoDataService.importFileFromTapis(this.selectedProject.id, files);\n      }\n    });\n  }\n\n  // Creates a feature with a long/lat value of 0,0 and no associated image. Used in alternate image inport\n  // I think if we want a placeholder image, we can add it here.\n  createBlankFeature() {\n    const blankFeature: Feature = {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [0, 0],\n      },\n      properties: {},\n    };\n    return blankFeature;\n  }\n\n  openDownloadSelector(fileName: string) {\n    const modal = this.dialog.open(ModalDownloadSelectorComponent);\n    let path: Array<string>;\n    modal.afterClosed().subscribe((passbackData: Array<string>) => {\n      path = passbackData;\n      this.saveFile(path[3] == '.json', true, path[0], path[1], path[2]);\n    });\n  }\n\n  openCreateProjectModal() {\n    this.dialog.open(ModalCreateProjectComponent, {\n      height: '400px',\n      width: '600px',\n    });\n  }\n\n  openShareProjectModal() {\n    this.dialog.open(ModalShareProjectComponent, {\n      height: '400px',\n      width: '600px',\n    });\n  }\n\n  openProjectModal(project) {\n    const modal = this.dialog.open(ModalCurrentProjectComponent, {\n      height: '400px',\n      width: '600px',\n      data: {\n        id: project.id,\n        name: project.name,\n        description: project.description,\n        uuid: project.uuid,\n      },\n    });\n\n    modal.afterClosed().subscribe((passbackData: Array<string>) => {\n      this.projectsService.setActiveProject(this.projects[0]);\n    });\n  }\n\n  addGroup(name: string) {\n    this.groupName = name;\n    if (!name || 0 === name.length) {\n      this.invalidNameError = true;\n      this.existingNameError = false;\n    } else if (this.groups.get(name)) {\n      this.invalidNameError = false;\n      this.existingNameError = true;\n    } else {\n      this.invalidNameError = false;\n      this.existingNameError = false;\n      const newGroup = this.geoDataService.createNewGroup(\n        this.selectedProject.id,\n        this.selectedImages,\n        name\n      );\n      this.dialog.closeAll();\n      this.groupsService.unselectAllImages();\n    }\n  }\n\n  openAddGroupModal(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  toggleTagger() {\n    if (!this.showTagger) {\n      this.scrollService.setScrollRestored(true);\n\n      const [initialGroupName] = this.groupsFeatures.keys();\n      const activeGroupFeatures = this.groupsFeatures.get(initialGroupName);\n      const activeGroup = this.groups.get(initialGroupName);\n      this.geoDataService.setActiveGroup(activeGroup);\n\n      this.groupsService.setShowTagGenerator(false);\n      this.groupsService.unselectAllImages();\n    } else {\n      this.scrollService.setScrollPosition();\n    }\n\n    this.groupsService.toggleTagger();\n  }\n\n  getAssetDisplay() {\n    return this.activeGroupFeature.featureShortPath();\n  }\n\n  otherPath(dir: boolean) {\n    if (dir) {\n      this.activeGroupFeaturesRotate.push(\n        this.activeGroupFeaturesRotate.shift()\n      );\n    } else {\n      this.activeGroupFeaturesRotate.unshift(\n        this.activeGroupFeaturesRotate.pop()\n      );\n    }\n    this.activeGroupFeature = this.activeGroupFeaturesRotate[0];\n    this.geoDataService.setActiveGroupFeature(this.activeGroupFeature);\n  }\n\n  // saves project as a CSV file by first organizing a JSON or a CSV and converting it. Saves to either MyData or local\n  // I apologize in advance for this mess of a function -Ben\n  // This really needs to be split into something like 3 separate functions\n  saveFile(\n    isJSON: Boolean,\n    forExport: Boolean = false,\n    systemID = '',\n    path = '',\n    fileName\n  ) {\n    let CSVHolder = 'FeatureID,longitude,latitude,src';\n    let JSONHolder: String = '';\n    let projID = '';\n    let tagsPresent = true;\n    let headerComplete = false; // If true, then the full csv header info has been compiled\n    let headerTagOptions = 0; // Controls how many tagOption columns are in the final CSV\n\n    this.featureList.forEach((element) => {\n      // Retrieves project ID for building a filename\n      projID = element.project_id;\n\n\n      // retrieves longitude and latitude values as an array\n      const coordinates = element.geometry.coordinates;\n\n      // creates image source URL from environment and cleans up URL to a usable link\n      let featureSource =\n        environment.apiUrl + '/assets/' + element.assets[0].path;\n      featureSource = featureSource.replace(/([^:])(\\/{2,})/g, '$1/');\n\n      // Grabs group data\n      // Group data can be accessed from the feature, through the properties element\n      // If the image doesn't have a group, a placeholder is given\n      // NOTE: future group properties can be accessed in the same way\n      let group, styles, tag;\n      try {\n        try {\n          group = element.properties.group;\n        } catch {\n          group = [\n            {\n              color: '#000000',\n              name: 'N/A',\n              icon: 'fa-house-damage',\n            },\n          ];\n        }\n\n        try {\n          styles = element.properties.style;\n        } catch {\n          styles = [];\n        }\n\n        try {\n          tag = element.properties.tag;\n        } catch {\n          tag = [];\n        }\n\n        // If groups are present on the data, add header data\n        if (group.length > 0 && !headerComplete) {\n          CSVHolder += ',groupName,groupColor,groupIcon';\n        }\n\n        // Check if the tag var has any data, if so, add new lines to the header\n        if (tag != undefined && tagsPresent && !headerComplete) {\n          // Add a few more lines to the holder to accomodate tags\n          CSVHolder += ',Icon,Color,tagType,tagSelection';\n          tag.forEach((tag) => {\n            let tempTagOptionNum = 0;\n            tag.options.forEach((option) => {\n              tempTagOptionNum++;\n              if (tempTagOptionNum > headerTagOptions) {\n                CSVHolder += ',tagOption';\n                headerTagOptions = tempTagOptionNum;\n              }\n            });\n          });\n          if (!headerComplete) {\n            CSVHolder += '\\r\\n';\n            tagsPresent = false;\n            headerComplete = true;\n          }\n        } else if (!headerComplete) {\n          // If not, indent the last line.\n          CSVHolder += '\\r\\n';\n          headerComplete = true;\n        }\n      } catch (error) {}\n\n      if (isJSON) {\n        // Compile the data it into a JSON\n        JSONHolder +=\n          this.compileJSON(\n            coordinates,\n            element.id,\n            featureSource,\n            group,\n            tag,\n            styles\n          ) + ', \\n';\n      } else {\n        // Compiles the attributes into a CSV format\n        // If there is no groups for the feature, output without group info\n        if (group == undefined) {\n          // Indents CSV header.\n          CSVHolder += '\\r\\n';\n          // Compiles data to a line of a CSV, and adds it to a growing full CSV file\n          // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n          const tempCSV =\n            element.id +\n            ',' +\n            coordinates[0] +\n            ',' +\n            coordinates[1] +\n            ',' +\n            featureSource +\n            '\\r\\n';\n          CSVHolder += tempCSV;\n        } else {\n          group.forEach((group) => {\n            // If tags exist, try to add each tag to the CSV\n            if (tag != undefined) {\n              try {\n                tag.forEach((tag) => {\n                  // If the tag is in the group, compile a row\n                  // TODO: If a group doesn't have a tag, it doesn't get printed at all\n                  if (true) {\n                    // (tag.groupName === group.name) {\n                    // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n                    let tempCSV =\n                      element.id +\n                      ',' +\n                      coordinates[0] +\n                      ',' +\n                      coordinates[1] +\n                      ',' +\n                      featureSource +\n                      ',' +\n                      // groupName\t\t\tgroupColor\t\t\tgroupIcon\t\t   Icon\t\t\t\t\t Color\n                      group.name +\n                      ',' +\n                      group.color +\n                      ',' +\n                      group.icon +\n                      ',' +\n                      styles.faIcon +\n                      ',' +\n                      styles.color +\n                      ',' +\n                      // tagType\t\t\ttagOption(This is repeated a lot)\n                      tag.type +\n                      ',' +\n                      tag.extra[0].option;\n                    tag.options.forEach((option) => {\n                      // Save each option in the tag to the CSV\n                      // Adds just the label to the CSV, we can reconstruct the key from that.\n                      tempCSV += ',' + option.label;\n                    });\n                    tempCSV += '\\r\\n';\n                    // And adds it to a growing full CSV file\n                    CSVHolder += tempCSV;\n                  }\n                });\n              } catch {\n                try {\n                  // If the above fails, attempt to construct a line with group data\n                  // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n                  const tempCSV =\n                    element.id +\n                    ',' +\n                    coordinates[0] +\n                    ',' +\n                    coordinates[1] +\n                    ',' +\n                    featureSource +\n                    ',' +\n                    // groupName\t\t\tgroupColor\t\t\tgroupIcon\n                    group.name +\n                    ',' +\n                    group.color +\n                    ',' +\n                    group.icon +\n                    '\\r\\n';\n                  CSVHolder += tempCSV;\n                } catch (error) {\n                  // If all else fails, It writes no data on an error, so output the groupless data\n                  // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n                  const tempCSV =\n                    element.id +\n                    ',' +\n                    coordinates[0] +\n                    ',' +\n                    coordinates[1] +\n                    ',' +\n                    featureSource +\n                    '\\r\\n';\n                  CSVHolder += tempCSV;\n                }\n              }\n            } else {\n              // Compiles data to a line of a CSV\n              // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n              const tempCSV =\n                element.id +\n                ',' +\n                coordinates[0] +\n                ',' +\n                coordinates[1] +\n                ',' +\n                featureSource +\n                ',' +\n                // groupName\t\t\tgroupColor\t\t\tgroupIcon\n                group.name +\n                ',' +\n                group.color +\n                ',' +\n                group.icon +\n                '\\r\\n';\n              // And adds it to a growing full CSV file\n              CSVHolder += tempCSV;\n            }\n          });\n        }\n      }\n    });\n    let content;\n    let extension;\n    // determine whether the file is wanted as a JSON or a CSV\n    if (isJSON) {\n      content = JSONHolder;\n      extension = '.json';\n    } else {\n      content = CSVHolder;\n      extension = '.csv';\n    }\n\n    // If the function is marked for export to Design Safe, route through export, otherwise, download the file\n    if (forExport) {\n      fileName == ''\n        ? (fileName = projID + extension)\n        : (fileName += extension);\n      this.filesService.export(systemID, path, fileName, extension, content);\n    } else {\n      this.download(content, extension, projID);\n    }\n  }\n\n  compileJSON(\n    coordinates,\n    featureID,\n    featureSource: string,\n    groups = [],\n    tags = [],\n    style\n  ) {\n    let compiledJSON = '';\n    let transferJSON;\n\n    // Add the most basic information to the compiled JSON\n    transferJSON = {\n      longitude: coordinates[0],\n      latitude: coordinates[1],\n      src: featureSource,\n    };\n    compiledJSON += JSON.stringify(transferJSON);\n\n    if (groups.length != 0) {\n      groups.forEach((group) => {\n        // At this point, group info should be added,\n        // If tags are set to a default value, there are none present, compile without tag information\n        transferJSON = {\n          groupName: group.name,\n          groupColor: group.color,\n        };\n        compiledJSON += JSON.stringify(transferJSON);\n        if (tags.length > 0) {\n          // Compile a JSON with full tag information\n          tags.forEach((tag) => {\n            if (tag.feature == featureID) {\n              transferJSON = {\n                icon: style.faIcon,\n                'icon color': style.color,\n                'tag name': tag.label,\n                'tag type': tag.type,\n                'tag selection': tag.extra[0].option,\n              };\n              compiledJSON += JSON.stringify(transferJSON);\n            }\n          });\n        }\n      });\n    }\n    // If the above failed, compile the minimum JSON\n    if (compiledJSON == '') {\n      transferJSON = {\n        longitude: coordinates[0],\n        latitude: coordinates[1],\n        src: featureSource,\n      };\n      compiledJSON += JSON.stringify(transferJSON);\n    }\n    return compiledJSON;\n  }\n\n  download(content, extension, projID) {\n    // Creates a download link in typescript through a blob\n    const blob = new Blob(['\\ufeff' + content], {\n      type: 'text/csv;charset=utf-8;',\n    });\n    const download = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    const filename = 'taggit-proj-' + projID;\n\n    // checks if the browser is Safari or otherwise, if so open download in new window\n    // Its a quirk of those browsers that they don't allow same-page downloads\n    if (\n      navigator.userAgent.indexOf('Safari') != -1 &&\n      navigator.userAgent.indexOf('Chrome') == -1\n    ) {\n      download.setAttribute('target', '_blank');\n    }\n    // Sets up the link, and simulates a click\n    download.setAttribute('href', url);\n    download.setAttribute('download', filename + extension);\n    download.style.visibility = 'hidden';\n    document.body.appendChild(download);\n    download.click();\n    document.body.removeChild(download);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport { AuthService} from './services/authentication.service';\nimport { environment } from '../environments/environment';\nimport {catchError} from 'rxjs/operators';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n    constructor(private authService: AuthService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        return next.handle(request).pipe(catchError(err => {\n            if (err.status === 401) {\n                // auto logout if 401 response returned from api\n                this.authService.logout();\n                location.reload();\n            }\n\n            const error = err.error.message || err.statusText;\n            return throwError(error);\n        }));\n    }\n}\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n    constructor(private authSvc: AuthService) {}\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n        if (request.url.indexOf('https://agave.designsafe-ci.org') > -1) {\n            if (this.authSvc.isLoggedIn()) {\n                request = request.clone({\n                    setHeaders: {\n                        Authorization: 'Bearer ' + this.authSvc.userToken.token\n                    }\n                });\n            }\n        }\n        // we put the JWT on the request to our geoapi API because it is not behind ws02 if in local dev\n        // and if user is logged in\n        if (\n          request.url.indexOf('http://localhost') > -1 &&\n          this.authSvc.isLoggedIn()\n        ) {\n            // add header\n            request = request.clone({\n                setHeaders: {\n                    'X-JWT-Assertion-designsafe': environment.jwt,\n                },\n            });\n        }\n\n        return next.handle(request);\n    }\n}\n","import { AfterViewChecked, Component, OnInit, Renderer2, ChangeDetectorRef } from '@angular/core';\nimport { GeoDataService } from '../../services/geo-data.service';\nimport {\n  FeatureAsset,\n  Feature,\n  Project,\n  FeatureCollection,\n  TagGroup,\n} from '../../models/models';\nimport { AppEnvironment, environment } from '../../../environments/environment';\nimport { ProjectsService } from '../../services/projects.service';\nimport { ScrollService } from 'src/app/services/scroll.service';\nimport { GroupsService } from '../../services/groups.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { startWith } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ModalCreateProjectComponent } from '../modal-create-project/modal-create-project.component';\nimport { FeatureService } from 'src/app/services/feature.service';\n\n@Component({\n  selector: 'app-image-gallery',\n  templateUrl: './image-gallery.component.html',\n  styleUrls: ['./image-gallery.component.scss'],\n})\nexport class ImageGalleryComponent implements OnInit, AfterViewChecked {\n  environment: AppEnvironment;\n\n  public projects: Project[];\n  groupName: string;\n  showTagger = false;\n  scrolling = false;\n  scrollStatus: string;\n  imagesExist: boolean;\n  projectsExist: boolean;\n  featureList: Array<any> = [];\n  featureListScroll: Array<any>;\n  scrollSum = 15;\n  activeGroup: TagGroup;\n  activeFeature: Feature;\n  activeGroupFeature: Feature;\n  // activeFeatureNum: number;\n  featurePath: string;\n  loaded: boolean;\n  groupsFeatures: Map<string, any>;\n  groups: Map<string, any>;\n\n  constructor(\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService,\n    private groupsService: GroupsService,\n    private readonly cdr: ChangeDetectorRef,\n    private renderer: Renderer2,\n    private spinner: NgxSpinnerService,\n    private dialog: MatDialog,\n    private scrollService: ScrollService,\n    private featureService: FeatureService\n  ) {}\n\n  ngAfterViewChecked() {\n    if (this.scrollService.scrollRestored) {\n      this.scrollService.scroll();\n    }\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit() {\n    this.environment = environment;\n\n    this.geoDataService.loaded.subscribe(\n      (e) => {\n        this.loaded = e;\n      },\n      (error) => {\n        this.projectsExist = false;\n      }\n    );\n\n    this.featureService.features$.subscribe((fc: any) => {\n      if (fc) {\n        if (fc.features.length > 0) {\n          this.imagesExist = true;\n          this.featureList = fc.features.filter((feature) => {\n            try {\n              return (\n                feature.initialAsset() && feature.featureType() === 'image'\n              );\n            } catch (error) {\n              // If a feature has no asset, it ends up in this catch\n              console.error(error);\n              // After outputting the error, add an \"image not found\" placeholder,\n              // Allowing users to still select their errored import\n              // Note that this doesn't really work!\n              feature.assets.push({ path: '../../images/Image-not-found.png' });\n              return false;\n            }\n          });\n          this.featureListScroll = this.featureList.slice(0, this.scrollSum);\n        } else {\n          this.imagesExist = false;\n        }\n      }\n    });\n\n    this.projectsService.projects.subscribe((projects) => {\n      this.projects = projects;\n      if (this.projects.length) {\n        this.projectsExist = true;\n      } else {\n        this.projectsExist = false;\n      }\n    });\n\n    this.geoDataService.groupsFeatures.subscribe((next) => {\n      this.groupsFeatures = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.geoDataService.activeFeature.subscribe((next) => {\n      if (next) {\n        this.activeFeature = next;\n      }\n    });\n\n    this.geoDataService.activeGroup.subscribe((next: TagGroup) => {\n      this.activeGroup = next;\n    });\n\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.groupsService.showTagger.subscribe((next) => {\n      this.showTagger = next;\n      this.scrollStatus = next ? 'success' : 'danger';\n    });\n  }\n\n  getPath() {\n    return (\n      this.environment.apiUrl +\n      '/assets/' +\n      this.activeGroupFeature.assets[0].path.replace(/([^:])(\\/{2,})/g, '$1/')\n    );\n  }\n\n  appendSum() {\n    if (this.featureList.length != 0) {\n      if (this.scrollSum == this.featureList.length) {\n        this.spinner.hide();\n        this.scrolling = false;\n        return;\n      }\n      // If scrollSum is larger than the length of the feature list, curtail it to just be the length\n      if (this.scrollSum > this.featureList.length) {\n        this.scrollSum = this.featureList.length;\n      }\n    }\n    this.featureListScroll = this.featureList.slice(0, this.scrollSum);\n    setTimeout(() => {\n      this.spinner.hide();\n      this.scrolling = false;\n    }, 1300);\n  }\n\n  onScroll() {\n    if (!this.scrolling) {\n      this.spinner.show();\n      this.scrollSum += 10;\n      this.appendSum();\n      this.scrolling = true;\n    }\n  }\n\n  openCreateProjectModal() {\n    this.dialog.open(ModalCreateProjectComponent, {\n      height: '400px',\n      width: '600px',\n    });\n  }\n}\n","import {\n  Component,\n  OnInit,\n  Input,\n  TemplateRef,\n} from '@angular/core';\nimport { Feature, Project, TagGroup } from '../../models/models';\nimport { GeoDataService } from '../../services/geo-data.service';\nimport { AppEnvironment, environment } from '../../../environments/environment';\nimport { GroupsService } from '../../services/groups.service';\nimport { ProjectsService } from '../../services/projects.service';\nimport { BsModalRef } from 'ngx-foundation/modal/bs-modal-ref.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ScrollService } from 'src/app/services/scroll.service';\nimport { FeatureService } from 'src/app/services/feature.service';\n\n@Component({\n  selector: 'app-image-box',\n  templateUrl: './image-box.component.html',\n  styleUrls: ['./image-box.component.scss'],\n})\nexport class ImageBoxComponent implements OnInit {\n  @Input() feature: any;\n  environment: AppEnvironment;\n  featureSource: string;\n  featurePath: string;\n  status = false; // Controls the whether or not an image box is selected or not\n  imageSelected = 'img-unselected'; // Controls the whether or not an image box is selected or not\n  hasGroup = false;\n  colors: Array<string> = [];\n  groups: Map<string, TagGroup>;\n  coordinates: Array<any>;\n  containingGroupList: Array<any>;\n  selectedImages: Array<any>;\n  modalRef: BsModalRef;\n  groupToAdd: TagGroup;\n\n  public activeProject: Project;\n\n  constructor(\n    private geoDataService: GeoDataService,\n    private groupsService: GroupsService,\n    private projectsService: ProjectsService,\n    private dialog: MatDialog,\n    private scrollService: ScrollService,\n    private featureService: FeatureService\n  ) {}\n\n  ngOnInit() {\n    // TODO: put this in models\n    this.environment = environment;\n    let featureSource: string;\n    if (this.feature.assets[0].path != '../../images/Image-not-found.png') {\n      featureSource =\n        this.environment.apiUrl + '/assets/' + this.feature.assets[0].path;\n    } else {\n      featureSource = this.feature.assets[0].path;\n    }\n    featureSource = featureSource.replace(/([^:])(\\/{2,})/g, '$1/');\n    this.featureSource = featureSource;\n    this.coordinates = this.feature.geometry.coordinates;\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.groupsService.selectedImages.subscribe((next) => {\n      this.selectedImages = next;\n      this.imageSelected = this.groupsService.imageSelected(this.feature)\n        ? 'img-selected'\n        : 'img-unselected';\n    });\n\n    this.featurePath = this.feature.featurePath();\n  }\n\n  imageSelect() {\n    this.groupsService.toggleImageSelect(this.feature);\n  }\n\n  imageZoom(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  imageDelete() {\n    const featureService = this.featureService;\n    this.selectedImages.forEach(function(value) {\n      featureService.deleteFeature(value);\n    });\n    this.groupsService.unselectAllImages();\n    this.scrollService.setScrollRestored(true);\n  }\n\n  openMoreGroupsModal(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  openImageDeleteModal(template: TemplateRef<any>) {\n    this.scrollService.setScrollPosition();\n    this.dialog.open(template);\n  }\n\n  deleteFromGroup(feature: Feature, group: TagGroup) {\n    this.geoDataService.deleteGroupFeatures(\n      this.activeProject.id,\n      [feature],\n      group\n    );\n  }\n\n  openImageAddModal(template: TemplateRef<any>) {\n    this.scrollService.setScrollPosition();\n    this.dialog.open(template);\n  }\n\n  addGroup(group: TagGroup) {\n    this.geoDataService.createGroupFeatures(\n      this.activeProject.id,\n      this.selectedImages,\n      this.groups.get(group.name)\n    );\n    this.groupsService.unselectAllImages();\n    this.scrollService.setScrollRestored(true);\n  }\n}\n","import { Component, OnInit, EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { GroupForm } from 'src/app/models/models';\n\n@Component({\n  selector: 'app-form-generator',\n  templateUrl: './form-generator.component.html',\n  styleUrls: ['./form-generator.component.scss'],\n})\nexport class FormGeneratorComponent implements OnInit {\n  constructor() {}\n  form: GroupForm;\n  newValue = new EventEmitter();\n  checked = false;\n  colorArray: Array<string> = [];\n  values = [];\n\n  name = new FormControl('');\n\n  ngOnInit() {\n    this.generateColors();\n  }\n\n  // Generates a key:value list of colors ranging from green (#00FF00) to red (#FF0000) based on passed in info\n  generateColors() {\n    let itemCount = this.form.options.length;\n    let isOdd = false;\n    if (itemCount % 2 === 1) {\n      // if there are an odd number of items in the collection, mark it and decriment the counter\n      isOdd = true;\n      itemCount--;\n    }\n    // Subtract 2 from item count (first entry is always green, #00FF00, last entry is always red, #FF0000\n    // Then half the item count, and use it to divide 255, this gives the amount we have to increment the colors\n    itemCount = (itemCount - 2) / 2;\n    let incrementVal = Math.floor(255 / itemCount);\n    if (incrementVal === 255) {\n      incrementVal = Math.floor(incrementVal / 2);\n    }\n    this.colorArray.push('#00FF00');\n    let baseNum = 0;\n    let temp: string;\n    // First loop, counts up from zero towards 255\n    for (let index = 0; index < itemCount; index++) {\n      baseNum = baseNum + incrementVal;\n      temp = baseNum.toString(16);\n      this.colorArray.push(`#${temp}FF00`);\n    }\n    // if there is an odd number of selections, push full yellow as a midpoint in the gradient\n    if (isOdd) {\n      this.colorArray.push('#FFFF00');\n    }\n    baseNum = 255; // Resets baseNum to 255 for the count down\n    // Second loop, counts down from 255 towards zero\n    for (let index = 0; index < itemCount; index++) {\n      baseNum = baseNum - incrementVal;\n      temp = baseNum.toString(16);\n      if (temp.length != 2) {\n        temp = '0' + temp;\n      }\n      this.colorArray.push(`#FF${temp}00`);\n    }\n    // Finally, pushes the color code for red onto the stack for the last entry\n    this.colorArray.push('#FF0000');\n  }\n\n  setValue(formValue) {\n    this.newValue.emit(formValue);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { GroupsService } from '../../services/groups.service';\n\n@Component({\n  selector: 'app-side-bar',\n  templateUrl: './side-bar.component.html',\n  styleUrls: ['./side-bar.component.scss'],\n})\nexport class SideBarComponent implements OnInit {\n  showTagGenerator = false;\n\n  constructor(\n    private groupsService: GroupsService,\n  ) {}\n\n  ngOnInit() {\n    this.groupsService.showTagGenerator.subscribe((next) => {\n      this.showTagGenerator = next;\n    });\n  }\n}\n","export const groupIcons: Array<any> = [\n  { id: 'fa-house-damage', unicode: '&#xf6f1; house-damage' },\n  { id: 'fa-car', unicode: '&#xf1b9; car' },\n  { id: 'fa-tree', unicode: '&#xf1bb; tree' },\n\n  { id: 'fa-school', unicode: '&#xf549; school' },\n  { id: 'fa-archway', unicode: '&#xf557; archway' },\n  { id: 'fa-building', unicode: '&#xf1ad; building' },\n  { id: 'fa-bus', unicode: '&#xf207; bus' },\n  { id: 'fa-church', unicode: '&#xf51d; church' },\n\n  { id: 'fa-helicopter', unicode: '&#xf533; helicopter' },\n  { id: 'fa-hospital-alt', unicode: '&#xf47d; hospital' },\n  { id: 'fa-hotel', unicode: '&#xf594; hotel' },\n  { id: 'fa-igloo', unicode: '&#xf7ae; igloo' },\n  { id: 'fa-motorcycle', unicode: '&#xf21c; motorcycle' },\n  { id: 'fa-place-of-worship', unicode: '&#xf67f; place-of-worship' },\n  { id: 'fa-plane', unicode: '&#xf072; plane' },\n  { id: 'fa-school', unicode: '&#xf549; school' },\n\n  { id: 'fa-rocket', unicode: '&#xf135; rocket' },\n  { id: 'fa-ship', unicode: '&#xf21a; ship' },\n  { id: 'fa-shopping-cart', unicode: '&#xf07a; shopping-cart' },\n  { id: 'fa-shuttle-van', unicode: '&#xf5b6; shuttle-van' },\n  { id: 'fa-monument', unicode: '&#xf5a6; monument' },\n  { id: 'fa-store', unicode: '&#xf54e; store' },\n\n  { id: 'fa-subway', unicode: '&#xf239; subway' },\n  { id: 'fa-taxi', unicode: '&#xf1ba; taxi' },\n  { id: 'fa-train', unicode: '&#xf238; train' },\n  { id: 'fa-truck', unicode: '&#xf0d1; truck' },\n  { id: 'fa-truck-pickup', unicode: '&#xf63c; truck-pickup' },\n  { id: 'fa-university', unicode: '&#xf19c; university' },\n  { id: 'fa-warehouse', unicode: '&#xf494; warehouse' },\n  { id: 'fa-bolt', unicode: '&#xf0e7; bolt' },\n];\n","import { Component, OnInit, OnDestroy, TemplateRef } from '@angular/core';\nimport { Project, TagGroup } from '../../../models/models';\nimport { ProjectsService } from '../../../services/projects.service';\nimport { FormsService } from '../../../services/forms.service';\nimport { GroupsService } from '../../../services/groups.service';\nimport { GeoDataService } from '../../../services/geo-data.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Subscription } from 'rxjs';\nimport { FeatureService } from 'src/app/services/feature.service';\n\nimport { groupIcons } from 'src/app/utils/groups';\n\n@Component({\n  selector: 'app-select-group',\n  templateUrl: './select-group.component.html',\n  styleUrls: ['./select-group.component.scss'],\n})\nexport class SelectGroupComponent implements OnInit, OnDestroy {\n  groups$: Subscription;\n  activeGroup$: Subscription;\n\n  public selectedProject: Project;\n\n  iconList = groupIcons;\n  selectedIcon = 'fa-house-damage';\n\n  selectedGroup: TagGroup;\n\n  activeGroup: TagGroup;\n  groups: Map<string, TagGroup>;\n  groupsFeatures: Map<string, any>;\n\n  showTagger: boolean;\n  showSubitem = true;\n\n  constructor(\n    private groupsService: GroupsService,\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService,\n    private dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    this.projectsService.activeProject.subscribe((next) => {\n      this.selectedProject = next;\n    });\n\n    this.groups$ = this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.geoDataService.groupsFeatures.subscribe((next) => {\n      this.groupsFeatures = next;\n    });\n\n    this.activeGroup$ = this.geoDataService.activeGroup.subscribe((next) => {\n      this.activeGroup = next;\n      if (!next) {\n        this.groupsService.toggleTagger();\n      }\n    });\n  }\n\n  selectGroupForm(group: TagGroup) {\n    this.geoDataService.setActiveGroup(group);\n  }\n\n  openRenameOptionModal(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  // TODO: ensure ui is updated from getFeatures()\n  deleteGroup(group: TagGroup) {\n    const features = this.groupsFeatures.get(group.name);\n    this.geoDataService.deleteGroupFeatures(\n      this.selectedProject.id,\n      features,\n      group\n    );\n  }\n\n  openRenameModal(template: TemplateRef<any>, group: TagGroup) {\n    this.selectedGroup = group;\n    this.dialog.open(template);\n  }\n\n  openIconSelection(template: TemplateRef<any>, group: TagGroup) {\n    this.selectedGroup = group;\n    this.selectedIcon = group.icon;\n    this.dialog.open(template);\n  }\n\n  saveIcon(icon: string) {\n    this.geoDataService.reiconGroup(\n      this.selectedProject.id,\n      this.groupsFeatures.get(this.selectedGroup.name),\n      this.groups.get(this.selectedGroup.name),\n      icon\n    );\n\n    this.dialog.closeAll();\n    // TODO: Update save styles\n    // for (let feat of this.tempGroup) {\n    //   this.formsService.saveStyles('default', Number(feat.id));\n    // }\n  }\n\n  isChecked(name: string) {\n    if (this.activeGroup && this.activeGroup.name === name) {\n      return 'checked';\n    } else {\n      return '';\n    }\n  }\n\n  renameGroup(name: string) {\n    this.geoDataService.renameGroup(\n      this.selectedProject.id,\n      this.groupsFeatures.get(this.selectedGroup.name),\n      this.groups.get(this.selectedGroup.name),\n      name\n    );\n\n    this.dialog.closeAll();\n  }\n\n  expandPanel() {\n    this.showSubitem = !this.showSubitem;\n  }\n\n  ngOnDestroy() {\n    this.groups$.unsubscribe();\n    this.activeGroup$.unsubscribe();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Project, TagGroup } from '../../../models/models';\nimport { ProjectsService } from '../../../services/projects.service';\nimport { GeoDataService } from '../../../services/geo-data.service';\nimport { FormsService } from '../../../services/forms.service';\nimport { Feature } from '@turf/turf';\n\n@Component({\n  selector: 'app-select-image',\n  templateUrl: './select-image.component.html',\n  styleUrls: ['./select-image.component.scss'],\n})\nexport class SelectImageComponent implements OnInit {\n  public activeProject: Project;\n  private groups: Map<string, TagGroup>;\n  activeGroup: TagGroup;\n  activeGroupFeature: Feature;\n  showSubitem = true;\n  groupsFeatures: Map<string, any>;\n\n  constructor(\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService\n  ) {}\n\n  ngOnInit() {\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.geoDataService.activeGroup.subscribe((next) => {\n      this.activeGroup = next;\n    });\n\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n    });\n\n    this.geoDataService.groupsFeatures.subscribe((next) => {\n      this.groupsFeatures = next;\n      if (next && this.activeGroup) {\n        const groupFeatures = this.groupsFeatures.get(this.activeGroup.name);\n        if (groupFeatures) {\n          if (!groupFeatures.some(f => f.id === this.activeGroupFeature.id)) {\n            this.geoDataService.setActiveGroupFeature(groupFeatures[0]);\n          }\n        } else {\n          const [nextGroup] = this.groups.values();\n          if (nextGroup) {\n            this.geoDataService.setActiveGroup(nextGroup);\n          } else {\n            this.geoDataService.setActiveGroup(null);\n          }\n        }\n      }\n    });\n  }\n\n  getActiveFeatures() {\n    if (this.activeGroup) {\n      const groupFeatures = this.groupsFeatures.get(this.activeGroup.name);\n      const group = this.groups.get(this.activeGroup.name);\n      if (group) {\n        return groupFeatures;\n      } else {\n        const [nextGroup] = this.groups.values();\n        if (nextGroup) {\n          this.geoDataService.setActiveGroup(nextGroup);\n          return this.groupsFeatures.get(nextGroup.name);\n        } else {\n          return [];\n        }\n      }\n    } else {\n      return [];\n    }\n  }\n\n  jumpToImage(feat: Feature) {\n    this.geoDataService.setActiveGroupFeature(feat);\n  }\n\n  isActiveFeature(feature: Feature) {\n    return this.activeGroupFeature.id === feature.id;\n  }\n\n  deleteFeature(feat: any) {\n    this.geoDataService.deleteGroupFeatures(\n      this.activeProject.id,\n      [feat],\n      this.groups.get(this.activeGroup.name)\n    );\n  }\n\n  getFeaturePath(feat: any) {\n    return feat.featureShortPath();\n  }\n\n  expandPanel() {\n    this.showSubitem = !this.showSubitem;\n  }\n}\n","import {\n  Component,\n  OnInit,\n  TemplateRef,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { FormsService, tags } from '../../../services/forms.service';\nimport { GroupsService } from '../../../services/groups.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { Feature, Project, TagGroup, GroupForm } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\nimport { ProjectsService } from 'src/app/services/projects.service';\n\n@Component({\n  selector: 'app-tag-generator',\n  templateUrl: './tag-generator.component.html',\n  styleUrls: ['./tag-generator.component.scss'],\n})\nexport class TagGeneratorComponent implements OnInit {\n  formLabel: string;\n  formColor: string;\n  formOptions: Array<any> = [];\n  selectedGroup: string;\n  formType: string;\n  labelFilter: string;\n  optionColorFilter = '#000000';\n  activeGroup: TagGroup;\n  optionFilter: string;\n  formName: string;\n  formValue: string;\n  formRequired: boolean;\n  openOption: any = {};\n  enabledControls: Array<string> = [];\n  showSubitem = true;\n  groups: Map<string, TagGroup>;\n  groupsFeatures: Map<string, any>;\n  groups$: Subscription;\n  private activeProject: Project;\n\n  constructor(\n    private formsService: FormsService,\n    private groupsService: GroupsService,\n    private dialog: MatDialog,\n    private router: Router,\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService,\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroup.subscribe((next) => {\n      this.activeGroup = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.geoDataService.groupsFeatures.subscribe((next) => {\n      this.groupsFeatures = next;\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n\n    this.formOptions = [];\n    this.formType = 'text';\n    this.formName = '';\n    this.formLabel = '';\n    this.formValue = '';\n    this.formRequired = false;\n    this.enabledControls = ['Text', 'Checkbox', 'Radio', 'Dropdown', 'Color'];\n  }\n\n  inputFormLabel(event: any) {\n    this.formLabel = event.target.value;\n  }\n\n  inputFormColor(event: any) {\n    this.formColor = event.target.value;\n  }\n\n  addOptionItem(value: string) {\n    if (value) {\n      const formWithValue = this.formOptions.filter((e) => e.label == value);\n      if (formWithValue.length == 0 && value.length != 0) {\n        this.formOptions.push({\n          label: value,\n          color: this.optionColorFilter,\n        });\n      }\n    }\n  }\n\n  deleteOption(opt: any) {\n    this.formOptions = this.formOptions.filter(\n      (option) => option.label != opt.label\n    );\n  }\n\n  openRenameModal(template: TemplateRef<any>, name: string) {\n    this.selectedGroup = name;\n    this.dialog.open(template);\n  }\n\n  openRenameOptionModal(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  renameOption(opt: any, label: string) {\n    label = label.toLowerCase();\n    this.formOptions.forEach((e) => {\n      if (e.label == opt.label) {\n        e.label = label;\n      }\n    });\n  }\n\n  selectInputForm(name: string) {\n    this.formType = name;\n    this.formLabel = '';\n    this.formOptions = [];\n  }\n\n  clearOption() {\n    this.optionFilter = '';\n  }\n\n  clearLabel() {\n    this.labelFilter = '';\n  }\n\n  clearOptionColor() {\n    this.optionColorFilter = '#000000';\n  }\n\n  clear() {\n    this.clearLabel();\n    this.clearOptionColor();\n    this.clearOption();\n  }\n\n  addFormItem() {\n    // Assemble the new tag\n    const formItem: GroupForm = {\n      type: this.formType,\n      groupName: this.activeGroup.name,\n      label: this.formLabel,\n      options: [],\n    };\n    this.openOption[this.formLabel] = false;\n    // Adds the options for drop down, checklist, and radio buttons\n    if (this.formType !== 'text' && this.formOptions.length != 0) {\n      const myOpts = [];\n      for (const opt of this.formOptions) {\n        myOpts.push({\n          label: opt,\n        });\n      }\n      formItem.options = this.formOptions;\n    }\n\n    this.formsService.createForm(\n      this.activeProject.id,\n      formItem,\n      this.groups.get(this.activeGroup.name),\n      this.groupsFeatures.get(this.activeGroup.name)\n    );\n\n    // Reset user-defined fields to blank options\n    this.formLabel = '';\n    this.formColor = '';\n    this.formOptions = [];\n    this.groupsService.setShowTagGenerator(false);\n    this.clear();\n  }\n\n  cancelCreate() {\n    this.groupsService.setShowTagGenerator(false);\n    this.clear();\n  }\n\n  expandPanel() {\n    this.showSubitem = !this.showSubitem;\n  }\n}\n","import { Component, OnInit, TemplateRef } from '@angular/core';\nimport { GroupsService } from '../../../services/groups.service';\nimport { FormsService, tags } from '../../../services/forms.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { combineLatest } from 'rxjs';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\nimport { Feature } from 'geojson';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { FeatureService } from 'src/app/services/feature.service';\nimport { TagGroup, GroupForm } from 'src/app/models/models';\n\n@Component({\n  selector: 'app-tag-images',\n  templateUrl: './tag-images.component.html',\n  styleUrls: ['./tag-images.component.scss'],\n})\nexport class TagImagesComponent implements OnInit {\n  private activeProject;\n  payload: any;\n  selectedGroup: string;\n  activeGroup: TagGroup;\n  showSubitem = true;\n  formList: GroupForm[] = [];\n  tagName = '';\n  groups: Map<string, TagGroup>;\n  groupsFeatures: Map<string, Feature[]>;\n  activeGroupFeature: Feature;\n  tagValues = [];\n\n  constructor(\n    private groupsService: GroupsService,\n    private formsService: FormsService,\n    private dialog: MatDialog,\n    private projectsService: ProjectsService,\n    private geoDataService: GeoDataService,\n  ) {}\n\n  ngOnInit() {\n    combineLatest(\n      this.geoDataService.activeGroup,\n      this.geoDataService.groupsFeatures,\n      this.geoDataService.groups\n    ).subscribe(([grp, grpFts, grps]) => {\n      this.activeGroup = grp;\n      this.groupsFeatures = grpFts;\n      this.groups = grps;\n      if (grp) {\n        this.formList = grp.forms;\n      }\n    });\n\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n  }\n\n  openRenameModal(template: TemplateRef<any>, name: string) {\n    this.selectedGroup = name;\n    this.dialog.open(template);\n  }\n\n  // Takes the name of the tag's group, and the tag itself to delete\n  deleteForm(tag: GroupForm) {\n    this.formsService.deleteForm(\n      this.activeProject.id,\n      tag,\n      this.groups.get(this.activeGroup.name),\n      this.groupsFeatures.get(this.activeGroup.name)\n    );\n  }\n\n  // submits a tag's name change to geoAPI\n  renameForm(tag: GroupForm) {\n    this.formsService.renameForm(\n      this.activeProject.id,\n      tag,\n      this.groups.get(this.activeGroup.name),\n      this.groupsFeatures.get(this.activeGroup.name),\n      this.tagName\n    );\n    // Reset newTagValue for the next rename\n    this.tagName = '';\n    this.dialog.closeAll(); // Ensures the window closes when using enter-submission\n  }\n\n  showTagGenerator() {\n    this.groupsService.setShowTagGenerator(true);\n  }\n\n  saveTags() {\n    this.formsService.updateTagValues(\n      this.activeProject,\n      this.activeGroupFeature,\n      this.formList,\n      this.tagValues\n    );\n  }\n\n  setValue(formValue) {\n    this.tagValues = this.tagValues.filter((value) => value.id !== formValue.id);\n    this.tagValues.push(formValue);\n  }\n\n  expandPanel() {\n    this.showSubitem = !this.showSubitem;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { GroupForm } from 'src/app/models/models';\n\n@Component({\n  selector: 'app-form-fields',\n  templateUrl: './form-fields.component.html',\n})\nexport class FormFieldsComponent implements OnInit {\n  field: any;\n  form: GroupForm;\n\n  constructor() {}\n\n  // This file and the HTML connected to this is useless so don't worry about it\n  ngOnInit() {}\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { FeatureService } from 'src/app/services/feature.service';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { GroupsService } from 'src/app/services/groups.service';\nimport { Feature, GroupForm, Project, TagGroup } from 'src/app/models/models';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\n\n@Component({\n  selector: 'app-form-checkbox',\n  templateUrl: 'form-checkbox.component.html',\n})\nexport class FormCheckBoxComponent {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any;\n  @Input() form: GroupForm;\n  value: any[] = [];\n  activeGroupFeature: Feature;\n  activeGroup: TagGroup;\n  private activeProject: Project;\n\n  constructor(\n    private formsService: FormsService,\n    private groupsService: GroupsService,\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService,\n    private featureService: FeatureService\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.formValue.emit({id: this.form.id, value: this.value});\n    });\n\n\n    this.geoDataService.activeGroup.subscribe((next) => {\n      this.activeGroup = next;\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n  }\n\n  isChecked(opt) {\n    return this.value.some(val => val.label === opt.label);\n  }\n\n  selected(e: any, option: any) {\n    this.value = this.value.filter((opt) => opt.label !== option.label);\n    if (e.target.checked) {\n      this.value.push(option);\n    }\n    this.formValue.emit({id: this.form.id, value: this.value});\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { GroupsService } from 'src/app/services/groups.service';\nimport { Feature, GroupForm } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\n\n@Component({\n  selector: 'app-form-dropdown',\n  templateUrl: './form-dropdown.component.html',\n})\nexport class FormDropDownComponent {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any = {};\n  @Input() form: GroupForm;\n  value: string;\n\n  constructor(\n    private formsService: FormsService,\n    private geoDataService: GeoDataService,\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.formValue.emit({id: this.form.id, value: this.value});\n    });\n  }\n\n  updateCheckedTag() {\n    this.formValue.emit({id: this.form.id, value: this.value});\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { GroupForm } from 'src/app/models/models';\n\n@Component({\n  selector: 'app-form-file',\n  templateUrl: './form-file.component.html',\n  styleUrls: ['./form-file.component.scss'],\n})\nexport class FormFileComponent {\n  field: any = {};\n  form: GroupForm;\n\n  constructor() {}\n\n  ngOnChange() {\n    console.log(this.field.value);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { GroupForm } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\n\n@Component({\n  selector: 'app-form-radio',\n  templateUrl: './form-radio.component.html',\n})\nexport class FormRadioComponent {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any = {};\n  @Input() form: GroupForm;\n  @Input() label: String;\n  public value: string;\n\n  constructor(\n    private formsService: FormsService,\n    private geoDataService: GeoDataService,\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.formValue.emit({id: this.form.id, value: this.value});\n    });\n  }\n\n  updateCheckedTag() {\n    this.formValue.emit({id: this.form.id, value: this.value});\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { Feature, GroupForm, Project, TagGroup } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\n\n@Component({\n  selector: 'app-form-textbox',\n  templateUrl: './form-textbox.component.html',\n})\nexport class FormTextBoxComponent {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any = {};\n  @Input() form: GroupForm;\n  value = '';\n\n  constructor(\n    private formsService: FormsService,\n    private geoDataService: GeoDataService,\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.formValue.emit({id: this.form.id, value: this.value});\n    });\n  }\n\n  updateValue() {\n    this.formValue.emit({id: this.form.id, value: this.value});\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { Feature, Project, GroupForm, TagGroup } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\n\n@Component({\n  selector: 'app-form-color',\n  templateUrl: './form-color.component.html',\n  styleUrls: ['./form-color.component.scss'],\n})\nexport class FormColorComponent implements OnInit {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any = {};\n  @Input() form: GroupForm;\n  @Input() color: string;\n  @Input() label: String;\n\n  public chosenTag: string;\n  public chosenColor = '#ffffff';\n  value: any = {};\n\n  constructor(\n    private formsService: FormsService,\n    private geoDataService: GeoDataService,\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.chosenTag = this.value.label;\n      this.formValue.emit({id: this.form.id, value: this.value});\n    });\n  }\n\n  updateCheckedTag() {\n    this.value = this.form.options.find(opt => opt.label === this.chosenTag);\n    // TODO: Move this to somewhere else?\n    // Objective is to save both tag and color\n    // this.formsService.saveStyles(\n    //   this.activeProject.id,\n    //   this.value.color,\n    //   this.activeGroup,\n    //   this.activeGroupFeature\n    // );\n    this.formValue.emit({id: this.form.id, value: this.value});\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n// CommonModule for dynamic field\nimport {APP_BASE_HREF, CommonModule} from '@angular/common';\n\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { NgxSpinnerModule } from 'ngx-spinner';\nimport {ModalModule, BsDropdownModule, AccordionModule} from 'ngx-foundation';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport { NgxMasonryModule } from 'ngx-masonry';\nimport { ToastrModule } from 'ngx-toastr';\n\n\nimport { FileSizeModule } from 'ngx-filesize';\nimport { ApiModule} from 'ng-tapis';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { MapComponent} from './components/map/map.component';\nimport { MainComponent } from './components/main/main.component';\nimport { NotFoundComponent } from './components/notfound/notfound.component';\nimport { ControlBarComponent } from './components/control-bar/control-bar.component';\nimport { AuthService } from './services/authentication.service';\nimport { CallbackComponent } from './components/callback/callback.component';\nimport {AuthInterceptor, TokenInterceptor} from './app.interceptors';\nimport {ReactiveFormsModule, FormsModule} from '@angular/forms';\nimport { ModalFileBrowserComponent } from './components/modal-file-browser/modal-file-browser.component';\nimport {environment} from '../environments/environment';\nimport { ImageGalleryComponent } from './components/image-gallery/image-gallery.component';\n// import { TaggerComponent } from './components/tagger/tagger.component';\n// import { PresetGeneratorComponent } from './components/preset-generator/preset-generator.component';\nimport { ImageBoxComponent } from './components/image-box/image-box.component';\nimport { FormGeneratorComponent } from './components/side-bar/tag-images/form-generator/form-generator.component';\nimport { SideBarComponent } from './components/side-bar/side-bar.component';\n// import { ImageListComponent } from './components/image-list/image-list.component';\nimport { SelectGroupComponent } from './components/side-bar/select-group/select-group.component';\nimport { SelectImageComponent } from './components/side-bar/select-image/select-image.component';\nimport { TagGeneratorComponent } from './components/side-bar/tag-generator/tag-generator.component';\nimport { TagImagesComponent } from './components/side-bar/tag-images/tag-images.component';\nimport { ModalCreateProjectComponent } from './components/modal-create-project/modal-create-project.component';\nimport { ModalCurrentProjectComponent } from './components/modal-current-project/modal-current-project.component';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatTreeModule} from '@angular/material/tree';\nimport { MatProgressBar } from '@angular/material';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport { ModalDownloadSelectorComponent } from './components/modal-download-selector/modal-download-selector.component';\nimport { FormFieldsComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-fields.component';\nimport { FormCheckBoxComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-checkbox/form-checkbox.component';\nimport { FormDropDownComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-dropdown/form-dropdown.component';\nimport { FormFileComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component';\nimport { FormRadioComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-radio/form-radio.component';\nimport { FormTextBoxComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-textbox/form-textbox.component';\nimport { FormColorComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component';\nimport { ModalShareProjectComponent } from './components/modal-share-project/modal-share-project.component';\nimport {MatCardModule} from '@angular/material/card';\n\n@NgModule({\n  declarations: [\n\tAppComponent, MapComponent, NotFoundComponent, MainComponent,\n\tControlBarComponent,\n\tCallbackComponent,\n\tModalFileBrowserComponent,\n\tImageGalleryComponent,\n\t// TaggerComponent,\n\t// PresetGeneratorComponent,\n\tImageBoxComponent,\n\tFormGeneratorComponent,\n\tSideBarComponent,\n\t// ImageListComponent,\n\tSelectGroupComponent,\n\tSelectImageComponent,\n\tTagGeneratorComponent,\n\tTagImagesComponent,\n\tModalCreateProjectComponent,\n\tModalCurrentProjectComponent,\n\tMatProgressBar,\n\tModalDownloadSelectorComponent,\n\tFormFieldsComponent,\n\tFormCheckBoxComponent,\n\tFormDropDownComponent,\n\tFormFileComponent,\n\tFormRadioComponent,\n\tFormTextBoxComponent,\n\tModalShareProjectComponent,\n\tFormColorComponent\n\n  ],\n  imports: [\n\t// this is for the ng-tapis library\n\tApiModule.forRoot({rootUrl: 'https://agave.designsafe-ci.org/'}),\n\tBrowserModule,\n\tAppRoutingModule,\n\tHttpClientModule,\n\tBrowserAnimationsModule,\n\tInfiniteScrollModule,\n\tNgxSpinnerModule,\n\tNgxMasonryModule,\n\tToastrModule.forRoot(),\n\tModalModule.forRoot(),\n\tMatMenuModule,\n\tMatToolbarModule,\n\tMatButtonModule,\n\tMatDialogModule,\n\tMatTooltipModule,\n\tMatInputModule,\n\tMatCheckboxModule,\n\tMatSelectModule,\n\tMatRadioModule,\n\tMatIconModule,\n\tAccordionModule.forRoot(),\n\tReactiveFormsModule,\n\tFormsModule,\n\tFileSizeModule,\n\tBsDropdownModule.forRoot(),\n\tCommonModule,\n\tMatProgressSpinnerModule,\n\tScrollingModule,\n\tMatTreeModule,\n\tMatSnackBarModule,\n\tMatCardModule\n  ],\n  providers: [\n\tAuthService,\n\t{\n\t  provide: HTTP_INTERCEPTORS,\n\t  multi: true,\n\t  useClass: AuthInterceptor\n\t},\n\t{\n\t  provide: HTTP_INTERCEPTORS,\n\t  multi: true,\n\t  useClass: TokenInterceptor\n\t},\n\t{\n\t  provide: APP_BASE_HREF,\n\t  useValue: environment.baseHref\n\t}\n  ],\n  bootstrap: [AppComponent],\n  entryComponents: [ModalFileBrowserComponent, ModalDownloadSelectorComponent, ModalCreateProjectComponent, ModalCurrentProjectComponent, ModalShareProjectComponent]\n})\nexport class AppModule { }\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","export default \"<div class=\\\"tag-forms\\\">\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">\\n    <span>\\n      Tag Images\\n    </span>\\n    <span>\\n      <span style=\\\"cursor: pointer\\\"\\n            (click)=\\\"showTagGenerator()\\\"\\n            matTooltip=\\\"Add New Tag Form\\\"\\n            style=\\\"cursor: pointer; margin-right: 10px\\\"\\n            matTooltipPosition=\\\"above\\\">\\n        <i class=\\\"fas fa-plus\\\"></i>\\n      </span>\\n    </span>\\n  </div> <!-- subitem-title -->\\n\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem\\\">\\n    <div class=\\\"subitem-scroll\\\">\\n\\n      <div *ngFor = \\\"let form of formList\\\">\\n        <div class=\\\"form-item-container\\\">  \\n          <div class=\\\"name-group\\\"> {{form.label}} ({{form.type}})</div>\\n          <div class=\\\"button-group\\\">\\n            <div (click)=\\\"deleteForm(form)\\\">\\n              <i class=\\\"fas fa-minus\\\"\\n                 matTooltip=\\\"Delete\\\"\\n                 matTooltipPosition=\\\"above\\\"\\n                 style=\\\"cursor: pointer\\\">\\n              </i>\\n            </div> <!-- delete button -->\\n\\n            <div (click)=\\\"openRenameOptionModal(renameFormItemModal)\\\">\\n              <i class=\\\"fas fa-edit\\\"\\n                 matTooltip=\\\"Rename\\\"\\n                 matTooltipPosition=\\\"above\\\"\\n                 style=\\\"cursor: pointer\\\">\\n              </i>\\n            </div>\\n\\n            <ng-template #renameFormItemModal>\\n              <input matInput #formItemRename\\n                     [(ngModel)]=\\\"newTagValue\\\"\\n                     value={{form.label}}\\n                     placeholder=\\\"Rename Form Item\\\"\\n                     (keyup.enter)=\\\"renameForm(form)\\\">\\n              <br/>\\n              <br/>\\n              <div class=\\\"button-group\\\">\\n                <button matDialogClose\\n                        mat-raised-button\\n                        color=\\\"primary\\\" (click)=\\\"renameForm(form.label)\\\"\\n                        >Rename</button>\\n                <button matDialogClose\\n                        mat-button>Cancel</button>\\n              </div> \\n            </ng-template> <!-- rename modal -->\\n\\n          </div> <!-- button group -->\\n        </div> <!-- form-item-container -->\\n        <app-form-generator (newValue)=\\\"setValue($event)\\\" [form]=\\\"form\\\"></app-form-generator>\\n\\n      </div>\\n      <div *ngIf=\\\"formList && formList.length\\\"><button mat-raised-button color=\\\"primary\\\" (click)=\\\"saveTags()\\\">Save</button></div>\\n    </div> <!-- subitem scroll -->\\n  </div> <!--subitem -->\\n</div> <!-- tag-forms -->\\n\"","export default \"<div>\\n  <div [ngSwitch]=\\\"form.type\\\" class=\\\"form-controls\\\">\\n\\t<ng-container *ngSwitchCase=\\\"'text'\\\">\\n\\t  \\t<app-form-textbox (formValue)=\\\"setValue($event)\\\" [field]=\\\"form.options\\\" [form]=\\\"form\\\"></app-form-textbox>\\n\\t</ng-container>\\n\\n\\t<ng-container *ngSwitchCase=\\\"'dropdown'\\\">\\n\\t  \\t<app-form-dropdown (formValue)=\\\"setValue($event)\\\" [field]=\\\"form.options\\\" [form]=\\\"form\\\"></app-form-dropdown>\\n\\t</ng-container>\\n\\n\\t<ng-container *ngSwitchCase=\\\"'radio'\\\">\\n      <app-form-radio (formValue)=\\\"setValue($event)\\\" [field]=\\\"opt\\\" [form]=\\\"form\\\" label={{form.label}}></app-form-radio>\\n    </ng-container>\\n\\n    <ng-container *ngSwitchCase=\\\"'checkbox'\\\">\\n      <app-form-checkbox (formValue)=\\\"setValue($event)\\\" [form]=\\\"form\\\"></app-form-checkbox>\\n\\t</ng-container>\\n\\n    <ng-container *ngSwitchCase=\\\"'color'\\\">\\n      <app-form-color (formValue)=\\\"setValue($event)\\\" [field]=\\\"opt\\\" [form]=\\\"form\\\" label={{form.label}} [color]=\\\"colorArray[form.options.indexOf(opt)]\\\"></app-form-color>\\n    </ng-container>\\n\\n  </div>\\n</div>\\n\""]}