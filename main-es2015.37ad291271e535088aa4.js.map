{"version":3,"sources":["webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-dropdown/form-dropdown.component.html","webpack:///src/app/components/side-bar/select-image/select-image.component.html","webpack:///src/app/components/modal-file-browser/modal-file-browser.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component.html","webpack:///src/app/components/notfound/notfound.component.scss","webpack:///src/app/components/modal-download-selector/modal-download-selector.component.html","webpack:///src/app/components/main/main.component.scss","webpack:///src/app/components/main/main.component.html","webpack:///src/app/components/notfound/notfound.component.html","webpack:///src/app/components/modal-download-selector/modal-download-selector.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component.scss","webpack:///src/app/components/side-bar/select-group/select-group.component.scss","webpack:///src/app/components/side-bar/side-bar.component.scss","webpack:///src/app/components/side-bar/tag-generator/tag-generator.component.html","webpack:///src/app/components/image-gallery/image-gallery.component.scss","webpack:///src/app/components/modal-share-project/modal-share-project.component.html","webpack:///src/app/components/image-gallery/image-gallery.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-fields.component.html","webpack:///src/app/components/side-bar/select-image/select-image.component.scss","webpack:///src/app/app.component.html","webpack:///src/app/components/callback/callback.component.html","webpack:///src/app/components/image-box/image-box.component.html","webpack:///src/app/components/side-bar/side-bar.component.html","webpack:///src/$_lazy_route_resource lazy namespace object","webpack:///src/app/components/side-bar/tag-generator/tag-generator.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-textbox/form-textbox.component.html","webpack:///src/app/components/modal-share-project/modal-share-project.component.scss","webpack:///src/app/components/map/map.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-radio/form-radio.component.html","webpack:///src/app/components/modal-create-project/modal-create-project.component.scss","webpack:///src/app/components/image-box/image-box.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-generator.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component.html","webpack:///src/app/components/modal-current-project/modal-current-project.component.html","webpack:///src/app/components/modal-create-project/modal-create-project.component.html","webpack:///src/app/components/map/map.component.scss","webpack:///src/app/components/side-bar/tag-images/tag-images.component.scss","webpack:///src/app/components/side-bar/select-group/select-group.component.html","webpack:///src/app/components/modal-current-project/modal-current-project.component.scss","webpack:///src/app/components/callback/callback.component.scss","webpack:///src/app/components/modal-file-browser/modal-file-browser.component.scss","webpack:///src/app/components/control-bar/control-bar.component.scss","webpack:///src/app/components/control-bar/control-bar.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-checkbox/form-checkbox.component.html","webpack:///src/app/app.component.scss","webpack:///src/app/components/notfound/notfound.component.ts","webpack:///src/app/models/models.ts","webpack:///src/environments/environmentType.ts","webpack:///src/environments/environment.ts","webpack:///src/app/services/authentication.service.ts","webpack:///src/app/services/notifications.service.ts","webpack:///src/app/services/scroll.service.ts","webpack:///src/app/services/geo-data.service.ts","webpack:///src/app/components/main/main.component.ts","webpack:///src/app/components/callback/callback.component.ts","webpack:///src/app/services/projects.service.ts","webpack:///src/app/services/groups.service.ts","webpack:///src/app/services/forms.service.ts","webpack:///src/app/components/side-bar/tag-generator/tag-generator.component.ts","webpack:///src/app/components/side-bar/tag-images/tag-images.component.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/utils/leafletUtils.ts","webpack:///src/app/components/map/map.component.ts","webpack:///src/app/services/agave-systems.service.ts","webpack:///src/app/services/tapis-files.service.ts","webpack:///src/app/components/modal-file-browser/modal-file-browser.component.ts","webpack:///src/app/components/modal-download-selector/modal-download-selector.component.ts","webpack:///src/app/components/modal-create-project/modal-create-project.component.ts","webpack:///src/app/components/modal-share-project/modal-share-project.component.ts","webpack:///src/app/components/modal-current-project/modal-current-project.component.ts","webpack:///src/app/components/control-bar/control-bar.component.ts","webpack:///src/app/app.interceptors.ts","webpack:///src/app/components/image-gallery/image-gallery.component.ts","webpack:///src/app/components/image-box/image-box.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-generator.component.ts","webpack:///src/app/components/side-bar/side-bar.component.ts","webpack:///src/app/components/side-bar/select-group/select-group.component.ts","webpack:///src/app/components/side-bar/select-image/select-image.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-fields.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-checkbox/form-checkbox.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-dropdown/form-dropdown.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-radio/form-radio.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-textbox/form-textbox.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component.ts","webpack:///src/app/app.module.ts","webpack:///src/main.ts","webpack:///src/app/components/side-bar/tag-images/tag-images.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-generator.component.html"],"names":["__webpack_require__","r","__webpack_exports__","default","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","NotFoundComponent","[object Object]","tslib_es6","a","Object","core","n","selector","template","b","Group","AssetFilters","this","bbox","assetType","Set","has","delete","add","Project","AuthToken","token","expires","Date","expires_in","getTime","Feature","f","geometry","properties","type","assets","styles","project_id","length","asset_type","EnvironmentType","Production","Staging","Local","environment","production","apiUrl","clientId","baseHref","backend","AuthenticatedUser","username","email","authentication_service_AuthService","http","router","_currentUser","ReplaySubject","currentUser","asObservable","LS_TOKEN_KEY","LS_USER_KEY","tokenStr","localStorage","getItem","JSON","parse","userToken","isExpired","logout","redirectToauthenticaor","getUserInfo","AUTH_URL","location","origin","Math","random","toString","window","href","removeItem","fromExpiresIn","setItem","stringify","navigate","userStr","user","next","get","subscribe","resp","u","name","fesm2015_http","fesm2015_router","C","providedIn","notifications_service_NotificationsService","toastr","authService","TIMEOUT","_notifications","notifications","isLoggedIn","interval","getRecent","baseUrl","now","toISOString","notes","forEach","note","status","showSuccessToast","message","showErrorToast","success","error","ngx_toastr","ScrollService","scrollRestored","scrollPosition","change","document","documentElement","scrollTop","scroll","top","geo_data_service_GeoDataService","notificationsService","scrollService","_pointClouds","BehaviorSubject","pointClouds","_loaded","loaded","_features","features","features$","_activeFeature","_mapMouseLocation","_basemap","_overlays","_activeOverlay","projectId","query","restoreScroll","qstring","querystring","toJson","fc","map","feat","setScrollRestored","feature","getFeatures","pipe","take","current","push","title","conversionParams","payload","description","conversion_parameters","post","getPointClouds","featureId","groupData","pc","console","log","file","form","FormData","append","files","tmp","system","path","fileList","remoteFile","system_id","response","importImage","downloadLink","createElement","blob","Blob","URL","createObjectURL","setAttribute","body","appendChild","click","removeChild","feats","addFeature","getValue","activeFeature","ovs","label","minLat","maxLat","minLon","maxLon","toFixed","getOverlays","overlays","activeOverlay","ov","mapMouseLocation","loc","basemap","bmap","MainComponent","geoDataService","bsModalService","ngx_foundation","c","CallbackComponent","route","auth","frag","snapshot","fragment","params","URLSearchParams","setToken","projects_service_ProjectsService","_projects","projects","_activeProject","activeProject","_projectUsers","projectUsers$","value","data","prom","proj","put","getProjects","tap","users","uname","getProjectUsers","groups_service_GroupsService","projectsService","_groups","groups","_forms","forms","_tempGroup","tempGroup","_showGroup","showGroup","_showSidebar","showSidebar","_activeGroup","activeGroup","_activeFeatureNum","activeFeatureNum","_unselectAll","unselectAll","_featureImagesExist","featureImagesExist","_activeFeatureId","activeFeatureId","_activePane","activePane","_tagFeatureGroup","tagFeatureGroup","_itemsSelected","itemsSelected","groupList","featureList","tempGroupList","group","color","icon","findIndex","item","values","formList","show","select","groupName","pane","num","groupFeature","tagFeatureGroupValue","forms_service_FormsService","groupsService","_activeFormList","activeFormList","_formGroup","formGroup","userTag","options","extra","tagData","checkedOptions","chosenTag","option","notebook","newTag","optData","newOpt","radioOptions","selectedProject","selectedFeatureID","selectedFeature","undefined","formItem","first","groupObj","changeGroupForm","required","fesm2015_forms","k","find","updateFormItem","selectedColor","style","currentID","checkDefault","faIcon","updateFeatureProperty","groupObject","filter","opt","formObj","finalArray","gName","tag","tLabel","index","tTag","Number","ind","splice","key","tGroup","selection","componentId","compId","rOption","componentID","compID","TagGeneratorComponent","formsService","dialog","formOptions","changed","formItemList","openOption","enabledControls","showSubitem","newGroup","groups$","formType","formName","formLabel","formValue","formRequired","event","target","selectedGroup","open","showOpt","toLowerCase","optionFilter","labelFilter","myOpts","hasOwnProperty","saveTag","setActivePane","navigateByUrl","skipLocationChange","esm2015_dialog","TagImagesComponent","tagList","getTags","activeGroup$","activeFeatureId$","formGroup$","getRawValue","unsubscribe","Activate","authSvc","state","login","routes","component","canActivate","children","canActivateChild","AppRoutingModule","K","imports","forRoot","onSameUrlNavigation","providers","AppComponent","createMarker","latlng","marker","featureType","ico","leaflet_src","divIcon","className","html","circleMarker","radius","fillColor","weight","opacity","fillOpacity","map_component_MapComponent","GeoDataService","mapType","FeatureGroup","featureClickHandler","bind","mouseEventHandler","Map","center","zoom","baseOSM","tileLayer","maxZoom","attribution","satellite","addLayer","loadFeatures","on","ev","skip","addRemoveOverlay","turf_min","fitBounds","removeLayer","overlay","imageOverlay","set","getBounds","geojsonOptions","pointToLayer","collection","clearLayers","markers","markerClusterGroup","iconCreateFunction","cluster","getChildCount","d","geoJSON","layer","agave_systems_service_AgaveSystemsService","tapis","_systems","systems","systemsList","result","sys","startsWith","ng_tapis","tapis_files_service_TapisFilesService","popup","_listing","listing","IMPORTABLE_TYPES","ext","getFileExtension","includes","split","pop","offset","limit","filesList","systemId","filePath","arr","replace","join","systemID","fileName","extension","snackbarConfig","duration","horizontalPosition","verticalPosition","fullURL","fileType","date","File","lastModified","valueOf","msg","sysStr","lastSystem","fileStr","lastFile","noPreviousSelections","snack_bar","modal_file_browser_component_ModalFileBrowserComponent","ModalFileBrowserComponent_1","tapisFilesService","dialogRef","agaveSystemsService","currentPath","w","allowedExtensions","inProgress","retrievalError","selectedFiles","onClose","Subject","list","combineLatest","myDataSystem","communityDataSystem","publishedDataSystem","selectedSystem","currentDirectory","init","browse","pth","selectedPath","getFiles","hasMoreFiles","listFiles","shift","getParentPath","unshift","newFile","allowedExt","concat","shiftKey","selectFilesShiftClick","checkIfSelectable","addSelectedFile","selectShift","firstFileIndex","saveState","Array","from","close","count","clear","addRangeFiles","lastFileIndex","again","maxIndex","max","i","min","R","modal_download_selector_component_ModalDownloadSelectorComponent","ModalDownloadSelectorComponent_1","passbackData","fileExtension","downloadSelectForm","Name","Extension","dirty","modal_create_project_component_ModalCreateProjectComponent","projCreateForm","p","create","modal_share_project_component_ModalShareProjectComponent","projShareForm","activeProj","projectUsers","addUserToProject","deleteUserFromProject","modal_current_project_component_ModalCurrentProjectComponent","projData","confirm","uuid","update","B","args","control_bar_component_ControlBarComponent","filesService","REFRESHTIME","LatLng","liveRefresh","timer","foundFilePaths","getState","setActiveProject","setGroupProperties","hasSuccessNotification","some","hasFailureNotification","substring","uploadNewFeature","createBlankFeature","lastProj","groupsExist","startWith","display_path","imageName","exec","getDataForProject","hazMapperLink","setActiveFeatureNum","setUnselectAll","setItemsSelected","timerSubscription","reloadFeatures","setLiveRefresh","afterClosed","importFileFromTapis","coordinates","saveFile","height","width","project","setActiveGroup","myRandColor","getRandomColor","addGroup","featProp","addTempGroup","setShowGroup","setScrollPosition","setFeatureImagesExist","setShowSidebar","dir","activeGroupObj","realGroup","floor","isJSON","forExport","content","CSVHolder","JSONHolder","projID","element","featureSource","groupColor","transferJSON","longitude","latitude","src","tempCSV","export","download","url","filename","navigator","userAgent","indexOf","visibility","app_interceptors_AuthInterceptor","request","handle","catchError","err","reload","statusText","throwError","TokenInterceptor","clone","setHeaders","Authorization","image_gallery_component_ImageGalleryComponent","renderer","spinner","scrolling","scrollSum","projectsExist","imagesExist","featureListScroll","slice","groupExist","setActiveFeatureId","hide","setTimeout","appendSum","Z","ngx_spinner","image_box_component_ImageBoxComponent","modalService","hasGroup","colors","currentGroup","imageCollection","featurePath","v","geoData","deleteFeature","selectGroupForm","ngx_foundation_modal","F","form_generator_component_FormGeneratorComponent","checked","checkedOpt","getCheckedOpt","colorArray","generateColors","itemCount","field","isOdd","incrementVal","temp","baseNum","SideBarComponent","SelectGroupComponent","currentIcon","iconList","unicode","what","saveStyles","SelectImageComponent","activeFeatureNum$","asset","assetId","deleteGroup","getActiveFeatures","FormFieldsComponent","isValid","controls","valid","isDirty","FormCheckBoxComponent","isChecked","addCheckedOpt","deleteCheckedOpt","FormDropDownComponent","getSelectedRadio","updateSelectedRadio","FormFileComponent","FormRadioComponent","FormTextBoxComponent","updateNotes","FormColorComponent","chosenColor","AppModule","declarations","progress_bar","rootUrl","platform_browser","animations","ngx_infinite_scroll","ngx_masonry","menu","toolbar","esm2015_button","tooltip","input","esm2015_checkbox","esm2015_select","esm2015_radio","j","dist","common","progress_spinner","tree","card","provide","multi","useClass","useValue","bootstrap","entryComponents","sb","platform_browser_dynamic","bootstrapModule","catch"],"mappings":"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","file":"main-es2015.37ad291271e535088aa4.js","sourcesContent":["export default \"<div>\\r\\n  <select class=\\\"form-control\\\" [(ngModel)]=\\\"chosenTag\\\" id=\\\"field.name\\\" name=\\\"field.name\\\" (change)=\\\"updateCheckedTag()\\\">\\r\\n      <option *ngFor=\\\"let opt of field\\\" [value]=\\\"opt.label\\\">{{opt.label}}</option>\\r\\n  </select>\\r\\n</div>\"","export default \"<div class=\\\"asset-list\\\">\\r\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">Image List</div>\\r\\n\\r\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem asset-subitem\\\">\\r\\n\\r\\n\\t<div *ngFor=\\\"let asset of getActiveFeatures()\\\" (click)=\\\"jumpToImage(asset)\\\" class=\\\"asset-container\\\" [ngClass]=\\\"{'highlight': isActiveFeature(asset)}\\\">\\r\\n\\r\\n\\t  <div class=\\\"name-group\\\">\\r\\n\\t\\t{{ getAssetDisplay(asset) }}\\r\\n\\t  </div>\\r\\n\\r\\n\\t  <div class=\\\"button-group\\\">\\r\\n\\t\\t<div (click)=\\\"deleteAsset(asset.id)\\\">\\r\\n\\t\\t  <i class=\\\"fas fa-minus\\\"\\r\\n\\t\\t\\t matTooltip=\\\"Delete\\\"\\r\\n\\t\\t\\t matTooltipPosition=\\\"above\\\">\\r\\n\\t\\t  </i>\\r\\n\\t\\t</div>\\r\\n\\t  </div>\\r\\n\\t</div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<h4> Select Files </h4>\\r\\n<small><em> Note: Only files are selectable, not folders. Double click on a folder to navigate into it. </em></small>\\r\\n<hr>\\r\\n<select (ngModelChange)=\\\"selectSystem($event)\\\" [(ngModel)]=\\\"selectedSystem\\\">\\r\\n\\t<option [ngValue]=\\\"myDataSystem\\\"> My Data </option>\\r\\n\\t<option [ngValue]=\\\"communityDataSystem\\\"> Community Data</option>\\r\\n\\t<option [ngValue]=\\\"publishedDataSystem\\\"> Published Data</option>\\r\\n\\t<optgroup label=\\\"My Projects\\\">\\r\\n\\t\\t<option *ngFor=\\\"let project of projects\\\" [ngValue]=\\\"project\\\">{{project.description}}</option>\\r\\n\\t</optgroup>\\r\\n</select>\\r\\n\\r\\n<div class=\\\"fileslisting\\\"  infiniteScroll [infiniteScrollDistance]=\\\"2\\\" [infiniteScrollThrottle]=\\\"100\\\" [scrollWindow]=\\\"false\\\" (scrolled)=\\\"getFiles()\\\">\\r\\n\\t<div class=\\\"clickable\\\" class=\\\"grid-x file-row\\\" (dblclick)=\\\"toRoot()\\\">\\r\\n\\t\\t<i class=\\\"fas fa-folder\\\"></i>\\r\\n\\t\\t<span > Home </span>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"clickable\\\" class=\\\"grid-x file-row\\\">\\r\\n\\t\\t<i class=\\\"fas fa-folder-open\\\"></i>\\r\\n\\t\\t<span class=\\\"lineBreak\\\"> {{selectedPath}} </span>\\r\\n\\t</div>\\r\\n\\t<div *ngIf=\\\"retrievalError\\\" class=\\\"grid-x file-row\\\" class=\\\"error\\\">\\r\\n\\t\\tError retrieving files\\r\\n\\t</div>\\r\\n\\t<div class=\\\"grid-x file-row\\\" *ngFor=\\\"let file of filesList; let fileIndex = index\\\" [ngClass]=\\\"{'selected':selectedFiles.has(file.path)}\\\">\\r\\n\\t\\t<div class=\\\"clickable\\\" (click)=\\\"select($event, file, fileIndex)\\\"  (dblclick)=\\\"browse(file)\\\">\\r\\n\\r\\n\\t\\t\\t<i class=\\\"fas fa-folder\\\" *ngIf=\\\"file.type === 'dir'\\\" ></i>\\r\\n\\t\\t\\t<i class=\\\"far fa-file\\\" *ngIf=\\\"file.type !== 'dir'\\\"></i>\\r\\n\\t\\t\\t<span > {{ file.name }} </span>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"size\\\">\\r\\n\\t\\t\\t{{file.length | filesize }}\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"grid-x\\\" *ngIf=\\\"inProgress\\\">\\r\\n\\t\\t<div class=\\\"cell medium-12\\\">\\r\\n\\t\\t  <i class=\\\"fas fa-spin fa-atom\\\"></i>\\r\\n\\t\\t</div>\\r\\n\\t  </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"button-group\\\">\\r\\n\\t<button mat-raised-button color=\\\"basic\\\" (click)=\\\"selectAll()\\\">Select all</button>\\r\\n\\t<button mat-raised-button color=\\\"warn\\\" class=\\\"button warning\\\" (click)=\\\"cancel()\\\">Done</button>\\r\\n\\t<button mat-raised-button color=\\\"primary\\\" class=\\\"button\\\" [disabled]=\\\"!selectedFiles.size\\\" (click)=\\\"chooseFiles()\\\">Import</button>\\r\\n</div>\\r\\n\"","export default \":host .drop-container {\\n  background: #fff;\\n  border-radius: 6px;\\n  height: 150px;\\n  width: 100%;\\n  box-shadow: 1px 2px 20px rgba(10, 10, 10, 0.1);\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  border: 2px dashed #c0c4c7;\\n}\\n:host p {\\n  font-size: 16px;\\n  font-weight: 400;\\n  color: #c0c4c7;\\n}\\n:host .upload-button {\\n  display: inline-block;\\n  border: none;\\n  outline: none;\\n  cursor: pointer;\\n  color: #5754a3;\\n}\\n:host .upload-button input {\\n  display: none;\\n}\\n:host .dropzone {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  flex-direction: column;\\n  border-radius: 5px;\\n  background: white;\\n  margin: 10px 0;\\n}\\n:host .dropzone.hovering {\\n  border: 2px solid #f16624;\\n  color: #dadada !important;\\n}\\n:host progress::-webkit-progress-value {\\n  transition: width 0.1s ease;\\n}\"","export default \"<div [formGroup]=\\\"form\\\">\\r\\n  <div *ngIf=\\\"!field.value\\\" class=\\\"drop-container dropzone\\\" dropZone (hovered)=\\\"toggleHover($event)\\\"\\r\\n       (dropped)=\\\"field.onUpload($event)\\\" [class.hovering]=\\\"isHovering\\\">\\r\\n    <p class=\\\"m-0\\\">\\r\\n      Drag a file here or\\r\\n      <label class=\\\"upload-button\\\">\\r\\n\\t<input type=\\\"file\\\" multiple=\\\"\\\" (change)=\\\"field.onUpload($event.target.files)\\\"> browse\\r\\n      </label>\\r\\n      to upload.\\r\\n    </p>\\r\\n  </div>\\r\\n  <div *ngIf=\\\"field.value\\\">\\r\\n    <!-- <button type=\\\"button\\\" class=\\\"btn btn-primary\\\">Change</button> -->\\r\\n    <div class=\\\"card\\\">\\r\\n      <img class=\\\"card-img-top\\\" [src]=\\\"field.value\\\">\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"\"","export default \"<h4> Select Files </h4>\\r\\n<small><em> If no folder is selected, the file will be saved in the root of your selected system. </em></small>\\r\\n<hr>\\r\\n<select (ngModelChange)=\\\"selectSystem($event)\\\" [(ngModel)]=\\\"selectedSystem\\\">\\r\\n\\t<option [ngValue]=\\\"myDataSystem\\\"> My Data </option>\\r\\n\\t<option [ngValue]=\\\"communityDataSystem\\\"> Community Data</option>\\r\\n\\t<option [ngValue]=\\\"publishedDataSystem\\\"> Published Data</option>\\r\\n\\t<optgroup label=\\\"My Projects\\\">\\r\\n\\t\\t<option *ngFor=\\\"let project of projects\\\" [ngValue]=\\\"project\\\">{{project.description}}</option>\\r\\n\\t</optgroup>\\r\\n</select>\\r\\n<div class=\\\"fileslisting\\\"  infiniteScroll [infiniteScrollDistance]=\\\"2\\\" [infiniteScrollThrottle]=\\\"100\\\" [scrollWindow]=\\\"false\\\" (scrolled)=\\\"getFiles()\\\">\\r\\n\\t<div class=\\\"grid-x file-row\\\" *ngFor=\\\"let file of filesList\\\" [ngClass]=\\\"{'selected':selectedFiles.has(file.path)}\\\">\\r\\n\\t\\t<div class=\\\"clickable\\\" (dblclick)=\\\"browse(file)\\\">\\r\\n\\t\\t\\t<i class=\\\"fas fa-folder\\\" *ngIf=\\\"file.type === 'dir'\\\" ></i>\\r\\n\\t\\t\\t<i class=\\\"far fa-file\\\" *ngIf=\\\"file.type !== 'dir'\\\"></i>\\r\\n\\t\\t\\t<span > {{ file.name }} </span>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"size\\\">\\r\\n\\t\\t\\t{{file.length | filesize }}\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"grid-x\\\" *ngIf=\\\"inProgress\\\">\\r\\n\\t\\t<div class=\\\"cell medium-12\\\">\\r\\n\\t\\t  <i class=\\\"fas fa-spin fa-atom\\\"></i>\\r\\n\\t\\t</div>\\r\\n\\t  </div>\\r\\n\\r\\n</div>\\r\\n\\r\\n<form [formGroup]=\\\"downloadSelectForm\\\" (ngSubmit)=\\\"update()\\\" id=\\\"current-project-form\\\">\\r\\n    <div>\\r\\n        <small><em> If no filename is specified, it will default to the project ID number. </em></small>\\r\\n    </div>\\r\\n\\r\\n    <mat-form-field>\\r\\n        <input matInput type=\\\"text\\\" formControlName=\\\"Name\\\" appearance=\\\"filled\\\"  required=\\\"false\\\">\\r\\n    </mat-form-field>\\r\\n</form>\\r\\n<span class=\\\"radio-box\\\">\\r\\n<mat-radio-group [(ngModel)]=\\\"fileExtension\\\">\\r\\n    <mat-radio-button value=\\\".csv\\\">.csv</mat-radio-button>\\r\\n    <mat-radio-button value=\\\".json\\\">.json</mat-radio-button>\\r\\n</mat-radio-group>\\r\\n</span>\\r\\n\\r\\n<div class=\\\"button-group\\\">\\r\\n\\t<button mat-raised-button color=\\\"warn\\\" class=\\\"button warning\\\" (click)=\\\"cancel()\\\">Cancel</button>\\r\\n\\t<button mat-raised-button color=\\\"primary\\\" class=\\\"button\\\" (click)=\\\"chooseFiles()\\\">Save</button>\\r\\n</div>\\r\\n\"","export default \":host .top-bar {\\n  height: 40px;\\n  padding: 5px;\\n  padding-left: 0.5em;\\n  flex-wrap: nowrap;\\n  position: fixed;\\n  overflow: hidden;\\n  width: 100%;\\n  z-index: 999;\\n}\\n:host .top-bar-right .top-bar-left {\\n  -webkit-box-flex: 0;\\n  flex-wrap: nowrap;\\n  flex: 0 1 auto;\\n  max-width: 100%;\\n}\\n@media print, screen and (min-width: 40em) {\\n  :host .top-bar {\\n    flex-wrap: nowrap;\\n    flex: 0 1 auto;\\n  }\\n}\"","export default \"<!-- <div class=\\\"grid-x\\\"> -->\\r\\n\\r\\n<!--   <div class=\\\"top-bar\\\" style=\\\"background-color: black\\\" id=\\\"navbar\\\"> -->\\r\\n\\r\\n<!--\\t<div class=\\\"top-bar-left\\\"> -->\\r\\n<!--\\t  <img src=\\\"assets/logo.svg\\\" width=\\\"30PX\\\"> -->\\r\\n<!--\\t  <span style=\\\"color: white\\\">Taggit</span> -->\\r\\n<!--\\t</div> -->\\r\\n\\r\\n\\r\\n<!--\\t<div class=\\\"top-bar-right\\\"> -->\\r\\n<!--\\t  <div class=\\\"light-blue\\\" *ngIf=\\\"currentUser\\\">{{ currentUser.username }}</div> -->\\r\\n<!--\\t</div> -->\\r\\n\\r\\n<!--   </div> -->\\r\\n\\r\\n<!--   <\\\\!-- <div class=\\\"cell control-bar\\\"> -\\\\-> -->\\r\\n<!--   <\\\\!--\\t<app-control-bar></app-control-bar> -\\\\-> -->\\r\\n<!--   <\\\\!-- </div> -\\\\-> -->\\r\\n<!-- </div> -->\\r\\n\\r\\n<app-control-bar></app-control-bar>\\r\\n<!-- NOTE Router Outlet was here -->\\r\\n<app-image-gallery></app-image-gallery>\\r\\n\\r\\n<!-- NOTE Leaflet was here -->\\r\\n\"","export default \"<p>\\r\\n  notfound works!\\r\\n</p>\\r\\n\"","export default \":host {\\n  min-height: 20em;\\n}\\n:host .fileslisting {\\n  height: 20em;\\n  overflow-y: scroll;\\n  padding: 0px 20px;\\n}\\n:host .file-row {\\n  display: flex;\\n  background: #f9f9f9;\\n  border: 1px solid transparent;\\n  user-select: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n}\\n:host .clickable {\\n  flex: 1;\\n  max-width: 20em;\\n}\\n:host .size {\\n  align-items: flex-end;\\n}\\n:host .file-row:hover {\\n  border: 1px solid;\\n}\\n:host .file-row.selected {\\n  background: #d3d3d3;\\n}\\n:host .mat-radio-button ~ .mat-radio-button {\\n  margin-left: 16px;\\n}\\n:host .radio-box {\\n  position: relative;\\n  bottom: 45px;\\n  left: 45%;\\n}\"","export default \"\"","export default \":host {\\n  overflow-y: scroll;\\n}\\n:host .select-group {\\n  max-height: 20%;\\n}\\n:host .subitem-title {\\n  text-align: left;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #F1F1F1;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #F1F1F1;\\n  border-style: solid;\\n  overflow-y: scroll;\\n  background-color: #FFFFFF;\\n  height: 100%;\\n}\\n:host .group-subitem {\\n  height: 100px;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .boxed input[type=radio] {\\n  display: none;\\n}\\n:host .boxed label {\\n  background-color: #fff;\\n  transition: all 0.3s;\\n}\\n:host .boxed input[type=radio]:checked + label {\\n  background-color: #B3E5FF;\\n}\\n:host .group-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .name-group {\\n  display: inline-block;\\n  padding: 3px;\\n}\\n:host .button-group {\\n  margin: 0;\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n}\\n:host .fa {\\n  font-weight: 900;\\n  display: inline-block;\\n  font-style: normal;\\n  font-variant: normal;\\n  text-rendering: auto;\\n  font-family: Font Awesome\\\\ 5 Free;\\n  line-height: 1;\\n}\\n:host .fa option {\\n  font-weight: 900;\\n}\"","export default \":host {\\n  background-color: #F1F1F1;\\n}\"","export default \"<div class=\\\"create-prompt\\\">\\r\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">\\r\\n\\t<span>\\r\\n\\t  Create Tag\\r\\n\\t</span>\\r\\n\\t<!-- <span style=\\\"cursor: pointer\\\" -->\\r\\n\\t<!--\\t  (click)=\\\"addFormItem(); clearLabel(); clearOption()\\\" -->\\r\\n\\t<!--\\t  matTooltip=\\\"Add Form Item\\\" -->\\r\\n\\t<!--\\t  style=\\\"cursor: pointer; margin-right: 20px\\\" -->\\r\\n\\t<!--\\t  matTooltipPosition=\\\"above\\\"> -->\\r\\n\\t<!--   <i class=\\\"fas fa-plus\\\"></i> -->\\r\\n\\t<!-- </span> -->\\r\\n  </div> <!-- subitem-title -->\\r\\n\\r\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem\\\">\\r\\n\\t<form class=\\\"form-type-form\\\">\\r\\n\\t  <div *ngFor=\\\"let control of enabledControls; let idx = index\\\" class=\\\"box form\\\">\\r\\n\\t\\t<input type=\\\"radio\\\" [id]=\\\"control\\\" value=\\\"control.toLowerCase()\\\" name=\\\"form-type\\\" [checked]=\\\"(idx === 0)\\\" (change)=\\\"selectInputForm(control.toLowerCase())\\\">\\r\\n\\t\\t<label style=\\\"cursor: pointer; margin: 3px; padding: 3px; font-size: 10px\\\" [for]=\\\"control\\\">{{ control }}</label>\\r\\n\\t  </div> <!-- form-type-form -->\\r\\n\\t</form>\\r\\n\\r\\n\\t<div *ngIf=\\\"formType == 'text'; else optionForms\\\">\\r\\n\\t  <div class=\\\"form-name\\\">\\r\\n\\t\\t<mat-form-field class=\\\"input-label-group\\\">\\r\\n\\t\\t  <mat-label>Label</mat-label>\\r\\n\\t\\t  <input matInput placeholder=\\\"Label\\\" #labelValue [(ngModel)]=\\\"labelFilter\\\" (keyup)=\\\"inputFormLabel($event)\\\" name=\\\"labelFilter\\\" class=\\\"tiny\\\" type=\\\"text\\\">\\r\\n\\t\\t</mat-form-field>\\r\\n\\t  </div> <!--form-name -->\\r\\n\\t</div> <!-- formtype -->\\r\\n\\r\\n\\t<ng-template #optionForms>\\r\\n\\t  <div class=\\\"form-name\\\">\\r\\n\\r\\n\\t\\t<mat-form-field class=\\\"input-label-group\\\">\\r\\n\\t\\t  <mat-label>Label</mat-label>\\r\\n\\t\\t  <input matInput placeholder=\\\"Label\\\" #labelValue [(ngModel)]=\\\"labelFilter\\\" (keyup)=\\\"inputFormLabel($event)\\\" name=\\\"labelFilter\\\" class=\\\"tiny\\\" type=\\\"text\\\">\\r\\n\\t\\t</mat-form-field>\\r\\n\\t\\t<mat-form-field class=\\\"input-label-group\\\">\\r\\n\\t\\t  <mat-label>Options</mat-label>\\r\\n\\t\\t  <div class=\\\"input-group\\\">\\r\\n\\t\\t\\t<input matInput #optionValue class=\\\"input-group-field\\\" placeholder=\\\"Option\\\" type=\\\"text\\\" [(ngModel)]=\\\"optionFilter\\\" name=\\\"optionFilter\\\" (keyup.enter)=\\\"addOptionItem(optionValue.value); optionValue.value = ''; clearOption()\\\">\\r\\n\\t\\t  </div> <!-- input-group -->\\r\\n\\t\\t</mat-form-field>\\r\\n\\r\\n\\t\\t<div class=\\\"input-group-button\\\">\\r\\n\\t\\t  <button mat-button color=\\\"accent\\\" class=\\\"button\\\" (click)=\\\"addOptionItem(optionValue.value); optionValue.value = ''; clearOption()\\\">\\r\\n\\t\\t\\t<i class=\\\"fas fa-plus\\\"></i>\\r\\n\\t\\t  </button>\\r\\n\\t\\t</div> <!-- input-group-button -->\\r\\n\\r\\n\\t\\t<ul class=\\\"form-option-container\\\">\\r\\n\\t\\t  <li *ngFor=\\\"let opt of formOptions\\\" class=\\\"list-group\\\">\\r\\n\\t\\t\\t<div [className]=\\\"showOpt\\\">\\r\\n\\t\\t\\t  {{opt.label}}\\r\\n\\t\\t\\t</div> <!-- showopt -->\\r\\n\\t\\t\\t<div class=\\\"button-group\\\">\\r\\n\\t\\t\\t  <div (click)=\\\"deleteOption(opt)\\\">\\r\\n\\t\\t\\t\\t<i class=\\\"fas fa-minus\\\"\\r\\n\\t\\t\\t\\t   matTooltip=\\\"Delete\\\"\\r\\n\\t\\t\\t\\t   matTooltipPosition=\\\"above\\\"\\r\\n\\t\\t\\t\\t   style=\\\"cursor: pointer\\\">\\r\\n\\t\\t\\t\\t</i>\\r\\n\\t\\t\\t  </div> <!-- delete opt -->\\r\\n\\r\\n\\t\\t\\t  <div (click)=\\\"openRenameOptionModal(renameOptionModal)\\\">\\r\\n\\t\\t\\t\\t<i class=\\\"fas fa-edit\\\"\\r\\n\\t\\t\\t\\t   style=\\\"cursor: pointer\\\"\\r\\n\\t\\t\\t\\t   matTooltip=\\\"Rename\\\"\\r\\n\\t\\t\\t\\t   matTooltipPosition=\\\"above\\\">\\r\\n\\t\\t\\t\\t</i>\\r\\n\\t\\t\\t  </div>\\r\\n\\r\\n\\t\\t\\t  <ng-template #renameOptionModal>\\r\\n\\t\\t\\t\\t<input matInput #optionRename\\r\\n\\t\\t\\t\\t\\t   placeholder=\\\"Rename Option\\\">\\r\\n\\t\\t\\t\\t<br/>\\r\\n\\t\\t\\t\\t<br/>\\r\\n\\t\\t\\t\\t<div class=\\\"button-group\\\">\\r\\n\\t\\t\\t\\t  <button matDialogClose\\r\\n\\t\\t\\t\\t\\t\\t  mat-raised-button\\r\\n\\t\\t\\t\\t\\t\\t  color=\\\"primary\\\"\\r\\n\\t\\t\\t\\t\\t\\t  (click)=\\\"renameOption(opt, optionRename.value)\\\">Rename</button>\\r\\n\\t\\t\\t\\t  <button matDialogClose\\r\\n\\t\\t\\t\\t\\t\\t  mat-button>Cancel</button>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t  </ng-template>\\r\\n\\r\\n\\t\\t\\t</div> <!-- button group -->\\r\\n\\r\\n\\t\\t  </li>\\r\\n\\t\\t</ul>\\r\\n\\t  </div> <!-- form name -->\\r\\n\\t</ng-template> <!-- form options -->\\r\\n\\r\\n\\t<button mat-raised-button color=\\\"primary\\\" (click)=\\\"addFormItem(); clearLabel(); clearOption()\\\">Save</button>\\r\\n\\t<button mat-button color=\\\"primary\\\" (click)=\\\"cancelCreate(); clearLabel(); clearOption()\\\">Cancel</button>\\r\\n\\r\\n  </div> <!-- subitem -->\\r\\n</div> <!-- create-group -->\\r\\n\"","export default \":host .img-list-container {\\n  display: grid;\\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\\n  grid-gap: 1em;\\n  height: 100%;\\n  padding: 1em;\\n}\\n:host #no-img {\\n  font-size: 32px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 70vh;\\n}\\n:host #no-proj {\\n  font-size: 32px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 70vh;\\n}\\n:host #new-proj {\\n  font-size: 32px;\\n  display: flex;\\n  height: 100vh;\\n  justify-content: center;\\n  align-items: center;\\n}\\n:host app-image-box {\\n  height: 100%;\\n}\\n:host .masonry-item {\\n  width: 200px;\\n}\\n:host img-spin {\\n  position: relative;\\n  bottom: 0px;\\n  left: 0px;\\n  width: 100%;\\n  height: 100px;\\n  background: #fff;\\n}\\n:host load-spin {\\n  position: relative;\\n  width: 100%;\\n  height: 100px;\\n  background: #fff;\\n}\\n:host .side-bar-container {\\n  background-color: #F1F1F1;\\n  position: fixed;\\n  width: 25%;\\n  margin-right: 0px;\\n  height: calc(100vh - 50px);\\n  right: 0;\\n}\\n:host .success {\\n  margin-right: 20%;\\n}\\n:host .danger {\\n  margin-right: 0%;\\n}\\n:host #gallery-container-container {\\n  position: relative;\\n  width: 100%;\\n  height: auto;\\n  text-align: center;\\n  display: flex;\\n  flex-direction: column;\\n  margin-top: 0px;\\n}\\n:host #loading-load {\\n  position: relative;\\n  width: 100%;\\n  height: auto;\\n  text-align: center;\\n  flex-direction: column;\\n  margin-top: 50px;\\n}\\n:host #gallery-container {\\n  position: relative;\\n  width: 100%;\\n  height: auto;\\n  text-align: center;\\n  display: flex;\\n  flex-direction: column;\\n}\\n:host #gallery-container .gallery-image {\\n  height: 100%;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n:host #gallery-container .gallery-image img {\\n  max-width: 100%;\\n  max-height: 100%;\\n  margin: 0 auto;\\n}\\n:host .imager {\\n  width: 75%;\\n  height: calc(100vh - 50px);\\n  background-color: #fefefe;\\n}\\n:host .view-image {\\n  max-width: 100%;\\n  height: auto;\\n}\\n:host .gallery-btn {\\n  width: 35px;\\n  height: 35px;\\n  background: #000;\\n  color: #fff;\\n  text-align: center;\\n  line-height: 35px;\\n  cursor: pointer;\\n  transition: all 0.4s ease;\\n  font-size: 20px;\\n  box-sizing: border-box;\\n  padding-left: 2px;\\n  position: fixed;\\n  bottom: 10px;\\n}\\n:host .gallery-btn:hover {\\n  background: #222;\\n}\\n:host .gallery-close {\\n  top: 10px;\\n}\\n:host .gallery-close .gallery-next {\\n  right: 10px;\\n}\\n:host .gallery-prev {\\n  right: 50px;\\n}\\n:host .gallery-prev .gallery-next {\\n  bottom: 10px;\\n}\\n@media (min-width: 478px) {\\n  :host .img-list-container img:nth-child(3n):not(last-of-type) {\\n    grid-row-end: span 2;\\n  }\\n}\\n@media (max-width: 768px) {\\n  :host .img-list-container {\\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\\n  }\\n}\\n@media (max-width: 450px) {\\n  :host .img-list-container {\\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\\n  }\\n}\"","export default \"<h4>Share this project</h4>\\r\\n<small><em> People you share your project with will have full ability to edit and delete this project on Taggit and on HazMapper. </em></small>\\r\\n\\r\\n<form [formGroup]=\\\"projShareForm\\\" (ngSubmit)=\\\"submit()\\\" id=\\\"share-project-form\\\">\\r\\n    <mat-form-field>\\r\\n        <mat-label>Username:</mat-label>\\r\\n        <input matInput type=\\\"text\\\" formControlName=\\\"name\\\" required=\\\"true\\\">\\r\\n    </mat-form-field>\\r\\n\\r\\n<div class=\\\"button-group small\\\">\\r\\n    <button mat-raised-button color=\\\"warn\\\" class=\\\"button small warning\\\" type=\\\"button\\\" (click)=\\\"close()\\\">Close</button>\\r\\n    <button mat-raised-button color=\\\"primary\\\" class=\\\"button small align-right\\\" type=\\\"submit\\\" [disabled]=\\\"!projShareForm.valid\\\">Add Member</button>\\r\\n</div>\\r\\n\\r\\n<br>\\r\\n<h5>Current Users</h5>\\r\\n<div *ngFor=\\\"let user of projectUsers\\\">\\r\\n    <br>\\r\\n    <mat-card class=\\\"card-container\\\">\\r\\n        <span class=\\\"card-item\\\">\\r\\n            {{user.username}}\\r\\n        </span>\\r\\n        <span class=\\\"card-buttons\\\">\\r\\n            <button mat-raised-button color=\\\"warn\\\" class=\\\"button small warning\\\" type=\\\"button\\\" (click)=\\\"delete(user.username)\\\">\\r\\n                <i class=\\\"fas fa-trash\\\"></i>\\r\\n            </button>\\r\\n        </span>\\r\\n    </mat-card>\\r\\n</div>\\r\\n</form>\"","export default \"<div *ngIf=\\\"loaded; else loader\\\" id=\\\"loading-load\\\">\\r\\n  <div *ngIf=\\\"projectsExist; else noProjWarn\\\" id=\\\"gallery-container\\\">\\r\\n\\t<div *ngIf=\\\"imagesExist; else noImgWarn\\\" id=\\\"gallery-container-container\\\">\\r\\n\\t  <div [ngClass]=\\\"status ? 'success' : 'danger'\\\"\\r\\n\\t\\t   infiniteScroll\\r\\n\\t\\t   [infiniteScrollDistance]=\\\"1\\\"\\r\\n\\t\\t   [infiniteScrollThrottle]=\\\"1500\\\"\\r\\n\\t\\t   (scrolled)=\\\"onScroll()\\\"\\r\\n\\t\\t   class=\\\"img-list-container\\\"\\r\\n\\t\\t   *ngIf=\\\"!showSidebar; else elseBlock\\\">\\r\\n\\t\\t<app-image-box\\r\\n\\t\\t  *ngFor=\\\"let feat of featureListScroll\\\"\\r\\n\\t\\t  [feature]=\\\"feat\\\">\\r\\n\\t\\t</app-image-box>\\r\\n\\t  </div>\\r\\n\\r\\n\\t  <ngx-spinner\\r\\n\\t\\tbdOpacity = 0.9\\r\\n\\t\\tbdColor = \\\"\\\"\\r\\n\\t\\tsize = \\\"default\\\"\\r\\n\\t\\tcolor = \\\"#3ADB76\\\"\\r\\n\\t\\ttype = \\\"line-scale-pulse-out\\\"\\r\\n\\t\\tid = \\\"img-spin\\\"\\r\\n\\t\\t[fullScreen] = \\\"false\\\">\\r\\n\\t  </ngx-spinner>\\r\\n\\t  <ng-template #elseBlock>\\r\\n\\t\\t<div *ngIf=\\\"groupExist; else noImgDisplay\\\">\\r\\n\\t\\t  <div class=\\\"imager\\\">\\r\\n\\t\\t\\t<img class=\\\"view-image\\\" [src]=\\\"getPath()\\\">\\r\\n\\t\\t  </div>\\r\\n\\t\\t</div>\\r\\n\\t\\t<ng-template #noImgDisplay> No Images exist for this Group </ng-template>\\r\\n\\t\\t<!-- <div (click)=\\\"otherPath(1)\\\">next</div> -->\\r\\n\\t\\t<!-- <div (click)=\\\"otherPath(-1)\\\">prev</div> -->\\r\\n\\r\\n\\r\\n\\t\\t<!-- <img [src]=\\\"getPath()\\\"> -->\\r\\n\\t\\t<!-- <button class=\\\"button\\\" (click)=\\\"otherPath(1)\\\">next</button> -->\\r\\n\\t\\t<!-- <button class=\\\"button\\\" (click)=\\\"otherPath(-1)\\\">prev</button> -->\\r\\n\\r\\n\\t\\t<!-- <app-image-list> -->\\r\\n\\t\\t  <!--   <\\\\!-- *ngFor=\\\"let feat of features.features\\\" -\\\\-> -->\\r\\n\\t\\t\\t<!--   <\\\\!-- [feature]=\\\"feat\\\" -\\\\-> -->\\r\\n\\r\\n\\t\\t\\t  <!--   <\\\\!-- *ngFor=\\\"let feat of features.features\\\" -\\\\-> -->\\r\\n\\t\\t\\t\\t<!--   <\\\\!-- [feature]=\\\"features.features\\\" -\\\\-> -->\\r\\n\\t\\t\\t\\t  <!--   <\\\\!-- (clickRequest)=\\\"addGroupList($event)\\\" -\\\\-> -->\\r\\n\\t\\t\\t\\t\\t<!-- </app-image-list> -->\\r\\n\\r\\n\\t  </ng-template>\\r\\n\\t  <div *ngIf=\\\"showSidebar\\\" class=\\\"side-bar-container\\\">\\r\\n\\t\\t<app-side-bar></app-side-bar>\\r\\n\\t  </div>\\r\\n\\t</div>\\r\\n\\t<ng-template #noImgWarn>\\r\\n\\t  <div id=\\\"no-img\\\">\\r\\n\\t\\tNo images have been imported!<br>Please import images through the menu.\\r\\n\\t  </div>\\r\\n\\t</ng-template>\\r\\n  </div>\\r\\n\\r\\n  <ng-template #noProjWarn>\\r\\n\\t<div id=\\\"no-proj\\\">\\r\\n\\t  No project has been created!<br>Please create a project through the menu.\\r\\n\\t</div>\\r\\n  </ng-template>\\r\\n\\r\\n  <!-- <div id=\\\"gallery-container\\\"> -->\\r\\n\\t<!--   <div [ngClass]=\\\"status ? 'success' : 'danger'\\\"> -->\\r\\n\\t  <!--\\t<div class=\\\"img-list-container\\\" *ngIf=\\\"!showSidebar; else elseBlock\\\"> -->\\r\\n\\t\\t<!--\\t  <app-image-box -->\\r\\n\\t\\t<!--\\t\\t*ngFor=\\\"let feat of features.features\\\" -->\\r\\n\\t\\t<!--\\t\\t[feature]=\\\"feat\\\" -->\\r\\n\\t\\t<!--\\t\\t(clickRequest)=\\\"addGroupList($event)\\\"> -->\\r\\n\\t\\t  <!--\\t  </app-image-box> -->\\r\\n\\t\\t<!--\\t</div> -->\\r\\n\\r\\n\\t  <!--\\t<ng-template #elseBlock> -->\\r\\n\\t\\t<!--\\t  <app-image-list> -->\\r\\n\\t\\t  <!--\\t  </app-image-list> -->\\r\\n\\t\\t<!--\\t</ng-template> -->\\r\\n\\r\\n\\t  <!--   </div> -->\\r\\n\\t<!--   <div *ngIf=\\\"showSidebar\\\" class=\\\"side-bar-container\\\"> -->\\r\\n\\t  <!--\\t<app-side-bar></app-side-bar> -->\\r\\n\\t  <!--   </div> -->\\r\\n\\t<!-- </div> -->\\r\\n\\r\\n</div>\\r\\n\\r\\n<ng-template #loader>\\r\\n  <div *ngIf=\\\"projectsExist; else createProj\\\" id=\\\"loader\\\">\\r\\n\\tLoading...\\r\\n  </div>\\r\\n\\r\\n  <ng-template #createProj> \\r\\n\\t<div id=\\\"new-proj\\\" (click)=\\\"openCreateProjectModal()\\\">\\r\\n\\t\\tStart a new project\\r\\n\\t</div>\\r\\n</ng-template>\\r\\n\\r\\n\\r\\n  <!-- <ngx-spinner\\r\\n\\tbdOpacity = 0.9\\r\\n\\tbdColor = \\\"\\\"\\r\\n\\tsize = \\\"default\\\"\\r\\n\\tcolor = \\\"#3ADB76\\\"\\r\\n\\ttype = \\\"line-scale-pulse-out\\\"\\r\\n\\tid = \\\"load-spin\\\"\\r\\n\\t[fullScreen] = \\\"false\\\">\\r\\n  </ngx-spinner> -->\\r\\n</ng-template>\\r\\n\"","export default \"<div class=\\\"form-group row\\\" *ngFor=\\\"let tag of field\\\">\\r\\n  <label class=\\\"col-md-3 form-control-label\\\" [attr.for]=\\\"tag.label\\\">\\r\\n\\t{{field.label}}\\r\\n\\t<strong class=\\\"text-danger\\\" *ngIf=\\\"tag.required\\\">*</strong>\\r\\n  </label>\\r\\n  <div class=\\\"col-md-9\\\" [ngSwitch]=\\\"tag.type\\\">\\r\\n\\t<app-form-color *ngSwitchCase=\\\"'color'\\\" [field]=\\\"field\\\" [form]=\\\"form\\\"></app-form-color>\\r\\n\\t<app-form-textbox *ngSwitchCase=\\\"'text'\\\" [field]=\\\"field\\\" [form]=\\\"form\\\"></app-form-textbox>\\r\\n\\t<app-form-dropdown *ngSwitchCase=\\\"'dropdown'\\\" [field]=\\\"field\\\" [form]=\\\"form\\\"></app-form-dropdown>\\r\\n\\t<app-form-checkbox *ngSwitchCase=\\\"'checkbox'\\\" [field]=\\\"field\\\" [form]=\\\"form\\\"></app-form-checkbox>\\r\\n\\t<app-form-radio *ngSwitchCase=\\\"'radio'\\\" [field]=\\\"field\\\" [form]=\\\"form\\\"></app-form-radio>\\r\\n\\t<!-- <app-form-file *ngSwitchCase=\\\"'file'\\\" [field]=\\\"field\\\" [form]=\\\"form\\\"></app-form-file> -->\\r\\n\\t<div class=\\\"alert alert-danger my-1 p-2 fadeInDown animated\\\" *ngIf=\\\"!isValid && isDirty\\\">{{tag.label}} is required</div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \":host .subitem-title {\\n  text-align: left;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #F1F1F1;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #F1F1F1;\\n  border-style: solid;\\n  overflow-y: scroll;\\n  background-color: #FFFFFF;\\n  height: 100%;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .asset-list {\\n  max-height: 20%;\\n}\\n:host .asset-subitem {\\n  height: 100px;\\n}\\n:host .asset-container {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  cursor: pointer;\\n}\\n:host .highlight {\\n  background-color: #B3E5FF;\\n}\\n:host .name-group {\\n  display: inline-block;\\n  padding: 3px;\\n}\\n:host .button-group {\\n  margin: 0;\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n  padding-right: 5px;\\n}\"","export default \"<!--The content below is only a placeholder and can be replaced.-->\\r\\n<router-outlet></router-outlet>\\r\\n\"","export default \"<div id=\\\"callback\\\">\\r\\n    <div>\\r\\n\\t<i class=\\\"fas fa-spinner\\\"></i>\\r\\n    </div>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"img-container\\\">\\r\\n  <img [ngClass]=\\\"status ? 'img-selected' : 'img-unselected'\\\"\\r\\n\\t   [src]=\\\"featureSource\\\"\\r\\n\\t   (click)=\\\"imageSelect()\\\"\\r\\n\\t   class=\\\"img-responsive img-target\\\"\\r\\n\\t   title={{featurePath}}>\\r\\n  <div class=\\\"top-overlay\\\">\\r\\n\\t<div class=\\\"image-option\\\"\\r\\n\\t\\t matTooltip=\\\"Zoom\\\"\\r\\n\\t\\t matTooltipPosition=\\\"below\\\"\\r\\n\\t\\t (click)=\\\"imageZoom(diffSizes)\\\">\\r\\n\\t  <i class=\\\"fas fa-search-plus\\\"></i>\\r\\n\\t</div>\\r\\n\\r\\n\\t<ng-template #diffSizes>\\r\\n\\t  <div class=\\\"zoom-content\\\">\\r\\n\\t\\t<div class=\\\"img-container\\\">\\r\\n\\t\\t  <img [src]=\\\"featureSource\\\" title={{featurePath}}>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"img-details\\\">\\r\\n\\t\\t  <div class=\\\"detail-container\\\">\\r\\n\\t\\t\\t<div class=\\\"title\\\">\\r\\n\\t\\t\\t  Coordinates\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<div class=\\\"detail-contents\\\">\\r\\n\\t\\t\\t  <div class=\\\"detail-item\\\">\\r\\n\\t\\t\\t\\t{{coordinates[0]}},\\r\\n\\t\\t\\t  </div>\\r\\n\\t\\t\\t  <div class=\\\"detail-item\\\">\\r\\n\\t\\t\\t\\t{{coordinates[1]}}\\r\\n\\t\\t\\t  </div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t  </div>\\r\\n\\t\\t  <div class=\\\"detail-container\\\">\\r\\n\\t\\t\\t<div class=\\\"title\\\">\\r\\n\\t\\t\\t  Image Source\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<div class=\\\"detail-contents\\\">\\r\\n\\t\\t\\t  <div class=\\\"detail-item\\\">\\r\\n\\t\\t\\t\\t{{featurePath}}\\r\\n\\t\\t\\t  </div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t  </div>\\r\\n\\t\\t</div>\\r\\n\\t\\t<button mat-button class=\\\"close-button\\\" matDialogClose aria-label=\\\"Close modal\\\" type=\\\"button\\\">\\r\\n\\t\\t  <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n\\t\\t</button>\\r\\n\\t  </div>\\r\\n\\t</ng-template>\\r\\n\\r\\n\\t<div class=\\\"image-option\\\"\\r\\n\\t\\t matTooltip=\\\"Remove\\\"\\r\\n\\t\\t matTooltipPosition=\\\"below\\\"\\r\\n\\t\\t (click)=\\\"openImageDeleteModal(deleteImage)\\\">\\r\\n\\t  <i class=\\\"fas fa-trash\\\"></i>\\r\\n\\t</div>\\r\\n\\r\\n\\t<ng-template #deleteImage>\\r\\n\\t  <div *ngIf=\\\"tempGroup.length === 1\\\">\\r\\n\\t  This image will be deleted from the current project. It will not be deleted from the Data Depot.\\r\\n\\t  </div>\\r\\n\\r\\n\\t  <div *ngIf=\\\"tempGroup.length > 1\\\">\\r\\n\\t\\t{{tempGroup.length}} images will be deleted from the current project. They will not be deleted from the Data Depot.\\r\\n\\t\\t</div>\\r\\n\\r\\n\\t  <button mat-raised-button color=\\\"primary\\\" matDialogClose (click)=\\\"imageDelete()\\\">Delete Image</button>\\r\\n\\t  <button mat-button matDialogClose>Cancel</button>\\r\\n\\t</ng-template>\\r\\n\\r\\n\\t<div class=\\\"image-option\\\"\\r\\n\\t\\t matTooltip=\\\"Add To Group\\\"\\r\\n\\t\\t matTooltipPosition=\\\"below\\\"\\r\\n\\t\\t (click)=\\\"openImageAddModal(addMoreToGroup)\\\">\\r\\n\\t  <i class=\\\"fas fa-plus\\\"></i>\\r\\n\\t</div>\\r\\n\\r\\n\\t<ng-template #addMoreToGroup>\\r\\n\\r\\n\\t  <mat-form-field appearance=\\\"fill\\\">\\r\\n\\t\\t<mat-label>Groups</mat-label>\\r\\n\\t\\t<mat-select matNativeControl required [(value)]=\\\"activeGroup\\\">\\r\\n\\t\\t  <mat-option>\\r\\n\\t\\t\\tNone\\r\\n\\t\\t  </mat-option>\\r\\n\\t\\t  <mat-option *ngFor=\\\"let group of groupList\\\" [value]=\\\"group.name\\\">\\r\\n\\t\\t\\t{{ group.name }}\\r\\n\\t\\t  </mat-option>\\r\\n\\t\\t</mat-select>\\r\\n\\t  </mat-form-field>\\r\\n\\r\\n\\t  <!-- <select #selectGroup class=\\\"form-control\\\" [value]=\\\"activeGroup\\\"> -->\\r\\n\\t  <!--\\t<option *ngFor=\\\"let group of groupList\\\"> -->\\r\\n\\t  <!--\\t  {{ group.name }} -->\\r\\n\\t  <!--\\t</option> -->\\r\\n\\t  <!-- </select> -->\\r\\n\\t  <!-- <button mat-raised-button color=\\\"primary\\\" matDialogClose (click)=\\\"selectGroupForm(selectGroup.value)\\\">Add To Group</button> -->\\r\\n\\t  <p>\\r\\n\\t\\t<button mat-raised-button color=\\\"primary\\\" matDialogClose (click)=\\\"addGroups(activeGroup)\\\" [disabled]=\\\"!activeGroup\\\">Add To Group</button>\\r\\n\\t\\t<button mat-button color=\\\"secondary\\\" matDialogClose>Cancel</button>\\r\\n\\t  </p>\\r\\n\\r\\n\\t  <!-- <button mat-raised-button color=\\\"primary\\\" class=\\\"button\\\" matDialogClose aria-label=\\\"Close modal\\\" type=\\\"button\\\"> -->\\r\\n\\t  <!--\\t<span aria-hidden=\\\"true\\\">&times;</span> -->\\r\\n\\t  <!-- </button> -->\\r\\n\\t</ng-template>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"bottom-overlay\\\">\\r\\n\\r\\n\\t<!-- <div class=\\\"color-container\\\"> -->\\r\\n\\t  <!-- TODO This should be an iff relationship -->\\r\\n\\t  <div *ngIf=\\\"hasGroup && colors.length > 0\\\">\\r\\n\\r\\n\\t\\t<div *ngIf=\\\"colors.length < 5; else dotdot\\\" class=\\\"group-tags\\\">\\r\\n\\t\\t  <div *ngFor=\\\"let color of colors\\\"\\r\\n\\t\\t\\t   class=\\\"center\\\"\\r\\n\\t\\t\\t   (mouseover)=\\\"getGroupNameFromColor(color)\\\"\\r\\n\\t\\t\\t   [matTooltip]=\\\"currentGroup\\\"\\r\\n\\t\\t\\t   matTooltipPosition=\\\"above\\\">\\r\\n\\t\\t\\t<svg class=\\\"box\\\" width=\\\"25px\\\" height=\\\"75px\\\" (click)=\\\"deleteFromGroup(color)\\\">\\r\\n\\t\\t\\t  <!-- <rect width=\\\"15px\\\" height=\\\"15px\\\" [style.fill]=\\\"color\\\"/> -->\\r\\n\\t\\t\\t  <rect width=\\\"15px\\\" height=\\\"15px\\\" x=\\\"5\\\" y=\\\"30\\\" [style.fill]=\\\"color\\\"/>\\r\\n\\t\\t\\t  <rect class=\\\"inner-del\\\" width=\\\"25px\\\" height=\\\"15px\\\" rx=\\\"3\\\" x=\\\"0\\\" y=\\\"0\\\" style=\\\"fill: #ffffff\\\"/>\\r\\n\\t\\t\\t  <rect  class=\\\"inner-del\\\" width=\\\"15px\\\" height=\\\"5px\\\" x=\\\"5\\\" y=\\\"5\\\" style=\\\"fill: #DE6363\\\"/>\\r\\n\\t\\t\\t</svg>\\r\\n\\t\\t  </div>\\r\\n\\t\\t</div>\\r\\n\\r\\n\\t\\t<ng-template #dotdot class=\\\"text\\\">\\r\\n\\t\\t  <div class=\\\"image-option\\\"\\r\\n\\t\\t\\t   (click)=\\\"openMoreGroupsModal(moreGroupsModal)\\\">\\r\\n\\t\\t\\t<i class=\\\"fas fa-ellipsis-h\\\"></i>\\r\\n\\t\\t  </div>\\r\\n\\t\\t</ng-template>\\r\\n\\r\\n\\t\\t<!-- TODO Should close modal once zero groups -->\\r\\n\\t\\t<ng-template #moreGroupsModal>\\r\\n\\t\\t  <div style=\\\"display: flex; justify-content: center; align-items: center\\\">\\r\\n\\t\\t\\t<div *ngFor=\\\"let color of colors\\\"\\r\\n\\t\\t\\t\\t class=\\\"center-temp\\\"\\r\\n\\t\\t\\t\\t style=\\\"display: flex\\\"\\r\\n\\t\\t\\t\\t (mouseover)=\\\"getGroupNameFromColor(color)\\\"\\r\\n\\t\\t\\t\\t [matTooltip]=\\\"currentGroup\\\"\\r\\n\\t\\t\\t\\t matTooltipPosition=\\\"right\\\">\\r\\n\\t\\t\\t  <svg style=\\\"padding: 1\\\" (click)=\\\"deleteFromGroup(color)\\\" width=\\\"15px\\\" height=\\\"15px\\\">\\r\\n\\t\\t\\t\\t<rect width=\\\"15px\\\" height=\\\"15px\\\" [style.fill]=\\\"color\\\"/>\\r\\n\\t\\t\\t\\t<rect class=\\\"inner-del-temp\\\" width=\\\"8px\\\" height=\\\"4px\\\" x=\\\"3.3\\\" y=\\\"5.5\\\" style=\\\"fill: #000\\\"/>\\r\\n\\t\\t\\t  </svg>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t  </div>\\r\\n\\t\\t</ng-template>\\r\\n\\r\\n\\t  </div>\\r\\n\\t<!-- </div> -->\\r\\n\\r\\n  </div>\\r\\n\\r\\n</div>\\r\\n\"","export default \"<!-- <p>side-bar works!</p> -->\\r\\n<!-- <app-preset-generator></app-preset-generator> -->\\r\\n<!-- <app-tagger></app-tagger> -->\\r\\n<app-select-group></app-select-group>\\r\\n<app-select-image></app-select-image>\\r\\n<router-outlet></router-outlet>\\r\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"crnd\";","export default \":host {\\n  display: block;\\n  font-size: 0.8em;\\n  height: calc(100vh - 50px);\\n}\\n:host .lat-lon-label {\\n  font-size: 0.8em;\\n  color: #4d4d4d;\\n}\\n:host .active-project {\\n  background-color: #1aff8c;\\n}\\n:host .menu button.dropdown.button {\\n  padding: 0.85em 1em;\\n}\\n:host .switch {\\n  margin: 0;\\n}\\n:host .button.tiny {\\n  margin: 0;\\n}\\n:host .no-show-option {\\n  display: none;\\n}\\n:host .show-option {\\n  display: block;\\n}\\n:host .create-prompt {\\n  max-height: 500px;\\n  height: 500px;\\n}\\n:host .select-group {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .subitem-title {\\n  text-align: left;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #F1F1F1;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n:host .input-label-group {\\n  padding: 10px;\\n  display: block;\\n}\\n:host .input-group {\\n  display: inline-block;\\n}\\n:host .form-name {\\n  text-align: center;\\n}\\n:host .input-group-button {\\n  display: inline-block;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #F1F1F1;\\n  border-style: solid;\\n  overflow-y: auto;\\n  background-color: #FFFFFF;\\n  height: 40vh;\\n  padding: 20px;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .preset-descriptions {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .boxed input[type=radio] {\\n  display: none;\\n}\\n:host .boxed label {\\n  background-color: #fff;\\n  transition: all 0.3s;\\n}\\n:host .boxed input[type=radio]:checked + label {\\n  background-color: #B3E5FF;\\n}\\n:host .group-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .button-group {\\n  margin: 0;\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .form-option-container {\\n  padding: 0px;\\n}\\n:host .list-group {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .list-suboptions {\\n  background-color: #F0F0F0;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n}\\n:host .name-group {\\n  display: inline-block;\\n  padding: 3px;\\n}\\n:host .form-item-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .form-type-form {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  margin: 5px;\\n  margin-bottom: 15px;\\n}\\n:host .form-type-form input[type=radio] {\\n  display: none;\\n}\\n:host .form-type-form label {\\n  border-style: solid;\\n  border-width: 1px;\\n  border-color: #ddd;\\n  transition: all 0.3s;\\n}\\n:host .form-type-form input[type=radio]:checked + label {\\n  border-style: solid;\\n  border-width: 1px;\\n  border-color: #000;\\n}\\n:host .changed {\\n  color: #F07575;\\n}\\n:host .unchanged {\\n  color: #555555;\\n}\\n:host .asset-list {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .asset-container {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  cursor: pointer;\\n}\\n:host .highlight {\\n  background-color: #B3E5FF;\\n}\"","export default \"<!--<div *ngIf=\\\"!field.multiline\\\">\\r\\n  <input [attr.type]=\\\"field.type\\\" class=\\\"form-control\\\"  [id]=\\\"field.name\\\" [name]=\\\"field.name\\\" [(ngModel)]=\\\"note\\\" (change)=\\\"updateNotes()\\\">\\r\\n</div>\\r\\nNote! Right now, this tag is set to only use a text area, it seems like this component was set up to switch between the two when the imput\\r\\nbecame too large. However, how this was done isn't clear, and a text area just looks better, in my opinion-->\\r\\n<div>\\r\\n  <textarea  [id]=\\\"field.name\\\"\\r\\n\\t\\trows=\\\"9\\\" class=\\\"form-control\\\" [placeholder]=\\\"notes\\\" [(ngModel)]=\\\"note\\\" (keyup)=\\\"updateNotes()\\\"></textarea>\\r\\n</div>\\r\\n\"","export default \":host #share-project-form {\\n  display: flex;\\n  flex-direction: column;\\n  text-align: center;\\n  padding: 5em;\\n}\\n\\n.card-container {\\n  display: flex;\\n  justify-content: space-between;\\n  width: 99%;\\n}\\n\\n.card-item {\\n  text-align: center;\\n  align-items: center;\\n}\\n\\n.card-buttons {\\n  align-items: flex-end;\\n}\"","export default \"<div id=\\\"map\\\" style=\\\"min-height: calc(100vh - 67px)\\\"></div>\\r\\n\"","export default \"<div  class=\\\"form-check form-check\\\">\\r\\n  <label class=\\\"form-check-label\\\">\\r\\n      <input class=\\\"form-check-input\\\" [(ngModel)]=\\\"chosenTag\\\" type=\\\"radio\\\" id=\\\"inlineCheckbox2\\\" value={{field.label}} (change)=\\\"updateCheckedTag()\\\" /> \\r\\n          {{field.label}}\\r\\n      </label>\\r\\n</div>\"","export default \":host #create-project-form {\\n  display: flex;\\n  flex-direction: column;\\n  text-align: center;\\n  padding: 5em;\\n}\"","export default \":host .img-container {\\n  position: relative;\\n}\\n:host .img-container img {\\n  -o-object-fit: cover;\\n     object-fit: cover;\\n  cursor: default;\\n  width: 100%;\\n  height: 100%;\\n  transition: opacity 0.3s ease;\\n  backface-visibility: hidden;\\n  max-width: 100%;\\n  max-height: 100%;\\n  margin: 0 auto;\\n}\\n:host .top-overlay {\\n  display: flex;\\n  flex-direction: row;\\n  transition: 0.3s ease;\\n  opacity: 0;\\n  position: absolute;\\n  right: 10px;\\n  top: 10px;\\n  cursor: pointer;\\n  text-align: center;\\n}\\n:host .bottom-overlay {\\n  display: flex;\\n  flex-direction: row;\\n  transition: 0.3s ease;\\n  opacity: 1;\\n  position: absolute;\\n  right: 10px;\\n  bottom: 10px;\\n  text-align: center;\\n}\\n:host .img-container:hover img {\\n  opacity: 0.9;\\n}\\n:host .img-container:hover .top-overlay {\\n  opacity: 0.9;\\n}\\n:host .img-container:hover .top-overlay:hover {\\n  opacity: 1;\\n}\\n:host .image-option {\\n  opacity: 0.9;\\n  background-color: white;\\n  display: flex;\\n  color: black;\\n  width: 40px;\\n  height: 30px;\\n  border-radius: 5px;\\n  font-size: 16px;\\n  margin: 3px;\\n  justify-content: center;\\n  align-items: center;\\n}\\n:host .image-option:hover {\\n  opacity: 1;\\n}\\n:host .image-option .fas {\\n  top: 5px;\\n}\\n:host .img-selected {\\n  border: solid #4FB876;\\n  border-width: 5px;\\n}\\n:host .img-unselected {\\n  border: solid #fff;\\n  border-width: 5px;\\n}\\n:host .group-tags {\\n  opacity: 0.9;\\n  background-color: white;\\n  display: flex;\\n  flex-direction: row;\\n  width: auto;\\n  height: 30px;\\n  border-radius: 5px;\\n  padding: 5px;\\n  justify-content: center;\\n  align-items: center;\\n  z-index: 999;\\n}\\n:host .center {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: center;\\n  transition: 0.3s ease;\\n  align-items: center;\\n}\\n:host .center .inner-del {\\n  opacity: 0;\\n  transition: 0.3s ease;\\n  cursor: pointer;\\n}\\n:host .center:hover .inner-del {\\n  opacity: 1;\\n}\\n:host .box {\\n  padding: 1px;\\n}\\n.center-temp {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.center-temp .inner-del-temp {\\n  opacity: 0;\\n  transition: 0.3s ease;\\n  cursor: pointer;\\n}\\n.center-temp:hover .inner-del-temp {\\n  opacity: 0.5;\\n}\\n.zoom-content {\\n  display: flex;\\n  flex-direction: column;\\n  max-height: 700px;\\n}\\n.zoom-content .img-container {\\n  overflow-y: scroll;\\n  width: 100%;\\n  height: 100%;\\n  background-color: #e7e7e7;\\n}\\n.zoom-content .img-details {\\n  display: flex;\\n  flex-direction: row;\\n  margin-top: 24px;\\n  background-color: #e7e7e7;\\n  align-items: center;\\n  text-align: center;\\n}\\n.zoom-content .title {\\n  background-color: #ccc;\\n  padding: 5px;\\n}\\n.zoom-content .detail-container {\\n  display: flex;\\n  flex-grow: 1;\\n  flex-direction: column;\\n  padding: 5px;\\n}\\n.zoom-content .detail-contents {\\n  display: flex;\\n  flex-direction: row;\\n  padding: 5px;\\n  background-color: #fff;\\n}\\n.zoom-content .detail-item {\\n  padding: 5px;\\n}\"","export default \":host {\\n  text-align: left;\\n}\\n:host .mat-form-field {\\n  width: 100%;\\n  text-align: left;\\n}\\n:host .input-group {\\n  padding: 5px;\\n}\\n:host label {\\n  padding: 5px;\\n}\\n:host input {\\n  padding: 5px;\\n  vertical-align: middle;\\n}\\n:host .radio-group {\\n  display: flex;\\n  flex-direction: column;\\n}\\n:host .form-controls {\\n  padding: 20px;\\n}\"","export default \"<div  class=\\\"form-check form-check\\\">\\r\\n  <label class=\\\"form-check-label\\\">\\r\\n      <input class=\\\"form-check-input\\\" [(ngModel)]=\\\"chosenTag\\\" type=\\\"radio\\\" id=\\\"inlineCheckbox3\\\" value={{field.label}} (change)=\\\"updateCheckedTag()\\\" /> \\r\\n          {{field.label}}\\r\\n      <input class=\\\"form-check-input\\\" [(ngModel)]=\\\"chosenColor\\\" type=\\\"color\\\" id=\\\"inlineCheckbox3\\\"/>\\r\\n  </label>\\r\\n</div>\"","export default \"<h4> Current Project </h4>\\r\\n<form [formGroup]=\\\"projCreateForm\\\" (ngSubmit)=\\\"update()\\\" id=\\\"current-project-form\\\">\\r\\n  <mat-form-field>\\r\\n\\t<mat-label>Name:</mat-label>\\r\\n\\t<input matInput type=\\\"text\\\" formControlName=\\\"name\\\" appearance=\\\"filled\\\"  required=\\\"true\\\">\\r\\n\\r\\n  </mat-form-field>\\r\\n\\r\\n  <mat-form-field>\\r\\n    <mat-label>Description</mat-label>\\r\\n    <textarea matInput formControlName=\\\"description\\\" required=\\\"true\\\"></textarea>\\r\\n  </mat-form-field>\\r\\n\\r\\n  <div class=\\\"button-group small\\\">\\r\\n    <button mat-raised-button color=\\\"basic\\\" class=\\\"button small warning\\\" type=\\\"button\\\" (click)=\\\"close()\\\">Close</button>\\r\\n    <button mat-raised-button color=\\\"warn\\\" class=\\\"button small warning\\\" type=\\\"delete\\\" (click)=\\\"delete()\\\">Delete</button>\\r\\n    <button mat-raised-button color=\\\"primary\\\" class=\\\"button small align-right\\\" type=\\\"submit\\\" [disabled]=\\\"!projCreateForm.valid\\\">Update</button>\\r\\n  </div>\\r\\n</form>\\r\\n\"","export default \"<h4> Create a new Project </h4>\\r\\n<form [formGroup]=\\\"projCreateForm\\\" (ngSubmit)=\\\"submit()\\\" id=\\\"create-project-form\\\">\\r\\n  <mat-form-field>\\r\\n\\t<mat-label>Name:</mat-label>\\r\\n\\t<input matInput type=\\\"text\\\" formControlName=\\\"name\\\" required=\\\"true\\\">\\r\\n  </mat-form-field>\\r\\n\\r\\n  <mat-form-field>\\r\\n\\t<mat-label>Description</mat-label>\\r\\n\\t<textarea matInput formControlName=\\\"description\\\" required=\\\"true\\\"></textarea>\\r\\n  </mat-form-field>\\r\\n\\r\\n  <div class=\\\"button-group small\\\">\\r\\n\\t<button mat-raised-button color=\\\"warn\\\" class=\\\"button small warning\\\" type=\\\"button\\\" (click)=\\\"close()\\\">Close</button>\\r\\n\\t<button mat-raised-button color=\\\"primary\\\" class=\\\"button small align-right\\\" type=\\\"submit\\\" [disabled]=\\\"!projCreateForm.valid\\\">Submit</button>\\r\\n  </div>\\r\\n</form>\\r\\n\"","export default \"\"","export default \":host {\\n  font-size: 0.8em;\\n  display: block;\\n}\\n:host .subitem-title {\\n  text-align: left;\\n  display: flex;\\n  justify-content: space-between;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #F1F1F1;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #F1F1F1;\\n  border-style: solid;\\n  padding: 10px;\\n  overflow-y: auto;\\n  background-color: #FFFFFF;\\n  height: 40vh;\\n}\\n:host .main-form-container {\\n  padding: 10px;\\n}\\n:host .subitem-scroll {\\n  padding: 10px;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .highlight {\\n  background-color: #B3E5FF;\\n}\\n:host .boxed input[type=radio] {\\n  display: none;\\n}\\n:host .boxed label {\\n  background-color: #fff;\\n  transition: all 0.3s;\\n}\\n:host .boxed input[type=radio]:checked + label {\\n  background-color: #B3E5FF;\\n}\\n:host .group-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .select-group {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .tag-forms {\\n  height: 500px;\\n}\\n:host .asset-list {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .asset-container {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  cursor: pointer;\\n}\\n:host .preset-descriptions {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .form-item-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .button-group {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n}\\n:host .name-group {\\n  padding: 3px;\\n  font-size: 17px;\\n  font-weight: bold;\\n}\\n:host .list-group {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .list-suboptions {\\n  background-color: #F0F0F0;\\n}\"","export default \"<div class=\\\"select-group\\\">\\r\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">Groups</div>\\r\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem group-subitem\\\">\\r\\n\\t<!-- TODO redundant functionality radio is just for style -->\\r\\n\\t<form class=\\\"boxed\\\">\\r\\n\\t  <div *ngFor=\\\"let group of groupList\\\" (click)=\\\"selectGroupForm(group.name)\\\" class=\\\"box form\\\">\\r\\n\\t\\t<input type=\\\"radio\\\" [id]=\\\"group.name\\\" [value]=\\\"group.name\\\" name=\\\"skills\\\" [checked]=\\\"isChecked(group.name)\\\">\\r\\n\\t\\t<label class=\\\"group-container\\\" style=\\\"cursor: pointer\\\" [for]=\\\"group.name\\\">\\r\\n\\t\\t  <div class=\\\"name-group\\\">\\r\\n\\t\\t\\t{{group.name}}\\r\\n\\t\\t\\t<svg class=\\\"box\\\" width=\\\"10px\\\" height=\\\"10px\\\">\\r\\n\\t\\t\\t  <rect width=\\\"10px\\\" height=\\\"10px\\\" style=\\\"fill: #ffffff\\\"/>\\r\\n\\t\\t\\t  <rect width=\\\"8px\\\" height=\\\"8px\\\" x=\\\"1px\\\" y=\\\"1px\\\" [style.fill]=\\\"group.color\\\"/>\\r\\n\\t\\t\\t</svg>\\r\\n\\t\\t  </div>\\r\\n\\t\\t  <div class=\\\"button-group\\\">\\r\\n\\t\\t\\t<div (click)=\\\"deleteGroup(group.name)\\\">\\r\\n\\t\\t\\t  <i class=\\\"fas fa-minus\\\"\\r\\n\\t\\t\\t\\t matTooltip=\\\"Delete\\\"\\r\\n\\t\\t\\t\\t matTooltipPosition=\\\"below\\\">\\r\\n\\t\\t\\t  </i>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<div (click)=\\\"openRenameModal(renameModal, group.name)\\\">\\r\\n\\t\\t\\t  <i class=\\\"fas fa-edit\\\"\\r\\n\\t\\t\\t\\t matTooltip=\\\"Rename\\\"\\r\\n\\t\\t\\t\\t matTooltipPosition=\\\"below\\\">\\r\\n\\t\\t\\t  </i>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<!-- <div *ngFor = \\\"let icon of groupIcon\\\">  -->\\r\\n\\t\\t\\t\\t<!-- <div *ngIf = \\\"icon.groupName == activeGroup\\\"> -->\\r\\n\\t\\t\\t\\t\\t<div (click)=\\\"openIconSelection(iconModal, group.name)\\\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\\\"fa {{group.icon}}\\\"\\r\\n\\t\\t\\t\\t\\t\\tmatTooltip=\\\"icons\\\"\\r\\n\\t\\t\\t\\t\\t\\tmatTooltipPosition=\\\"below\\\"></span>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t<!-- </div> -->\\r\\n\\t\\t\\t<!-- </div> -->\\r\\n\\t\\t  </div>\\r\\n\\t\\t</label>\\r\\n\\t  </div>\\r\\n\\t</form>\\r\\n\\r\\n\\t<ng-template #renameModal>\\r\\n\\t  <input matInput #groupRename\\r\\n\\t\\t\\t placeholder=\\\"Rename Group\\\"\\r\\n\\t\\t\\t (keyup.enter)=\\\"renameGroup(groupRename.value)\\\">\\r\\n\\t  <br/>\\r\\n\\t  <br/>\\r\\n\\t  <div class=\\\"button-group\\\">\\r\\n\\t\\t<button matDialogClose color=\\\"primary\\\" mat-raised-button (click)=\\\"renameGroup(groupRename.value)\\\">Rename</button>\\r\\n\\t\\t<!-- <button matDialogClose color=\\\"primary\\\" mat-raised-button (click)=\\\"saveGroup(groupRename.value, currentIcon)\\\">Rename</button> -->\\r\\n\\t\\t<button matDialogClose mat-button>Cancel</button>\\r\\n\\t  </div>\\r\\n\\t</ng-template>\\r\\n\\r\\n\\t<ng-template #iconModal>\\r\\n\\t\\t<div class=\\\"iconDropdown\\\">\\r\\n\\t\\t<select class=\\\"fa\\\" [(ngModel)]=\\\"choice\\\">\\r\\n\\t\\t\\t<!-- <option>------</option> -->\\r\\n\\t\\t\\t<option class=\\\"fa\\\" *ngFor=\\\"let icons of iconList\\\" value={{icons.id}} [innerHTML]=\\\"icons.unicode\\\"></option>\\r\\n\\t\\t</select>\\r\\n\\t\\t<br/>\\r\\n\\t  \\t<br/>\\r\\n\\t\\t<div class=\\\"button-group\\\">\\r\\n\\t\\t\\t<button matDialogClose color=\\\"primary\\\" mat-raised-button (click)=\\\"saveIcon(choice)\\\">Save</button>\\r\\n\\t<!-- <button matDialogClose color=\\\"primary\\\" mat-raised-button (click)=\\\"saveGroup(selectedGroup, choice)\\\">Save</button> -->\\r\\n\\t\\t\\t<button matDialogClose mat-button>Cancel</button>\\r\\n\\t\\t  </div>\\r\\n\\t</div>\\r\\n\\t</ng-template>\\r\\n\\r\\n  </div> <!-- subitem -->\\r\\n</div> <!-- select-group -->\\r\\n\"","export default \":host #current-project-form {\\n  display: flex;\\n  flex-direction: column;\\n  text-align: center;\\n  padding: 5em;\\n}\"","export default \"\"","export default \":host {\\n  min-height: 20em;\\n}\\n:host .fileslisting {\\n  height: 20em;\\n  overflow-y: scroll;\\n  padding: 0px 20px;\\n}\\n:host .file-row {\\n  display: flex;\\n  background: #f9f9f9;\\n  border: 1px solid transparent;\\n  user-select: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n}\\n:host .clickable {\\n  flex: 1;\\n  max-width: 20em;\\n}\\n:host .size {\\n  align-items: flex-end;\\n}\\n:host .file-row:hover {\\n  border: 1px solid;\\n}\\n:host .file-row.selected {\\n  background: #d3d3d3;\\n}\\n.error {\\n  background-color: red;\\n  color: white;\\n}\\n.lineBreak {\\n  max-width: 350px;\\n  word-break: break-word;\\n}\"","export default \":host .active-project {\\n  background-color: #1aff8c;\\n}\\n:host .menu button.dropdown.button {\\n  padding: 0.85em 1em;\\n}\\n:host .button.tiny {\\n  margin: 0;\\n}\\n:host .current-project {\\n  padding: 30px;\\n  font-size: 14px;\\n}\\n:host .goods {\\n  height: 27px;\\n  margin: 0px;\\n  padding: 0px;\\n}\\n:host .toggler {\\n  margin-left: 10px;\\n}\\n:host .picker {\\n  display: inline-block;\\n}\\n:host .group-bar {\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .path-buttons {\\n  text-align: center;\\n}\\n:host .project-menu {\\n  margin-left: 10px;\\n}\\n:host .top-bar {\\n  position: fixed;\\n  margin-top: -50px;\\n  height: 50px;\\n  z-index: 999;\\n}\\n:host .top-bar-right .top-bar-left {\\n  -webkit-box-flex: 0;\\n  flex-wrap: nowrap;\\n  flex: 0 1 auto;\\n  max-width: 100%;\\n}\\n:host .my-button {\\n  border-radius: 5px;\\n  padding: 5px;\\n}\\n:host .button-spacing {\\n  margin-right: 15px;\\n}\\n@media print, screen and (min-width: 40em) {\\n  :host .top-bar {\\n    flex-wrap: nowrap;\\n    flex: 0 1 auto;\\n  }\\n}\\n:host .example-spacer {\\n  flex: 1 1 auto;\\n}\"","export default \"<mat-toolbar class=\\\"top-bar\\\" color=\\\"primary\\\">\\r\\n  <img src=\\\"assets/logo.svg\\\" width=\\\"40PX\\\">\\r\\n  <span style=\\\"color: white\\\">Taggit</span>\\r\\n\\r\\n  <button mat-icon-button [matMenuTriggerFor]=\\\"project\\\" color=\\\"foreground\\\" class=\\\"project-menu\\\">\\r\\n\\t<mat-icon>menu</mat-icon>\\r\\n  </button>\\r\\n\\r\\n\\r\\n  <mat-menu #project=\\\"matMenu\\\">\\r\\n\\t<span mat-menu-item *ngIf=\\\"selectedProject\\\" (click)=\\\"openProjectModal(selectedProject)\\\">\\r\\n\\t  Current Project : {{selectedProject.name}}\\r\\n\\t</span>\\r\\n\\t<button mat-menu-item (click)=\\\"openCreateProjectModal()\\\">Create Project</button>\\r\\n\\t<button mat-menu-item [matMenuTriggerFor]=\\\"projectList\\\">Select Project</button>\\r\\n\\t<button mat-menu-item (click)=\\\"openShareProjectModal()\\\">Share Project</button>\\r\\n\\t<button mat-menu-item (click)=\\\"openFilePicker(test)\\\">File Browser</button>\\r\\n\\t<button mat-menu-item [matMenuTriggerFor]=\\\"saveOptions\\\">Save as</button>\\r\\n  </mat-menu>\\r\\n\\r\\n  <mat-menu #projectList=\\\"matMenu\\\">\\r\\n\\t<button mat-menu-item class=\\\"clickable\\\" *ngFor=\\\"let p of projects\\\" (click)=\\\"selectProject(p)\\\" [ngClass]=\\\"{'active-project': p === selectedProject}\\\">\\r\\n\\t  {{ p.name }}\\r\\n\\t</button>\\r\\n  </mat-menu>\\r\\n\\r\\n  <mat-menu #saveOptions=\\\"matMenu\\\">\\r\\n\\t<button mat-menu-item (click)=saveFile(0)>CSV file</button>\\r\\n\\t<button mat-menu-item (click)=saveFile(1)>JSON file</button>\\r\\n\\t<button mat-menu-item (click)=openDownloadSelector()>Export to Design Safe</button>\\r\\n  </mat-menu>\\r\\n\\r\\n  <span class=\\\"example-spacer\\\"></span>\\r\\n\\r\\n  <div *ngIf=\\\"showSidebar; else doThat\\\" class=\\\"path-buttons\\\">\\r\\n\\t<div class=\\\"slides\\\" style=\\\"line-height: 1; font-size: 12px\\\">\\r\\n\\t  {{imageName}}\\r\\n\\t  <div class=\\\"lr-buttons\\\" style=\\\"margin-top: 5px\\\">\\r\\n\\t\\t<i (click)=\\\"otherPath(false)\\\" style=\\\"margin-right: 10px; cursor: pointer\\\" class=\\\"fas fa-angle-left\\\"></i>\\r\\n\\t\\t<i (click)=\\\"otherPath(true)\\\" style=\\\"margin-left: 10px; cursor: pointer\\\" class=\\\"fas fa-angle-right\\\"></i>\\r\\n\\t  </div>\\r\\n\\t</div>\\r\\n  </div>\\r\\n\\r\\n  <ng-template #doThat>\\r\\n\\t<!-- <input placeholder=\\\"Search images\\\" -->\\r\\n\\t<!--\\t   name=\\\"\\\" -->\\r\\n\\t<!--\\t   type=\\\"text\\\" -->\\r\\n\\t<!--\\t   value=\\\"\\\" -->\\r\\n\\t<!--\\t   class=\\\"goods\\\"/> -->\\r\\n\\r\\n\\r\\n\\t<!-- <mat-form-field appearance=\\\"fill\\\"> -->\\r\\n\\t<!--   <input matInput placeholder=\\\"Search\\\"> -->\\r\\n\\t<!-- </mat-form-field> -->\\r\\n\\r\\n\\t<!-- <mat-form-field class=\\\"example-full-width\\\"> -->\\r\\n\\t<!--   <input matInput type=\\\"text\\\" -->\\r\\n\\t<!--\\t\\t [(ngModel)]=\\\"value\\\" -->\\r\\n\\t<!--\\t\\t placeholder=\\\"Search\\\"> -->\\r\\n\\t<!-- </mat-form-field> -->\\r\\n  </ng-template>\\r\\n\\r\\n  <span class=\\\"example-spacer\\\"></span>\\r\\n\\r\\n  <!-- <div *ngIf=\\\"showGroup\\\" class=\\\"group-bar grid-x align-right\\\"> -->\\r\\n  <div class=\\\"group-bar grid-x align-right\\\">\\r\\n\\t\\r\\n\\t<button mat-raised-button class=\\\"button-spacing\\\" [disabled]=\\\"!itemsSelected\\\" (click)=\\\"clearAll()\\\">Clear Selected</button>\\r\\n\\r\\n\\t<!-- A link that looks like a button, links to Hazmapper-->\\r\\n\\t<a class=\\\"button-spacing\\\" mat-raised-button href={{hazMapperLink}} title=\\\"Open your project in HazMapper\\\" target=\\\"_blank\\\">\\r\\n\\t\\t<img src=\\\"assets/hazmapper-header-logo.png\\\" width=\\\"100PX\\\">\\r\\n\\t</a>\\r\\n\\r\\n\\t<button mat-raised-button\\r\\n\\t\\t\\t(click)=\\\"openAddGroupModal(addGroupModal)\\\" *ngIf=\\\"itemsSelected && !showSidebar\\\">Add Group</button>\\r\\n\\r\\n\\t<ng-template #addGroupModal>\\r\\n\\t  <mat-form-field>\\r\\n\\t\\t<mat-label>Group Name</mat-label>\\r\\n\\t\\t<input matInput placeholder=\\\"Group Name\\\" #groupInput>\\r\\n\\t  </mat-form-field>\\r\\n\\t  <br/>\\r\\n\\t  <br/>\\r\\n\\t  <button mat-raised-button matDialogClose color=\\\"primary\\\" (click)=\\\"addToGroupService(groupInput.value)\\\">Add Group</button>\\r\\n\\t  <button mat-button matDialogClose color=\\\"secondary\\\">Cancel</button>\\r\\n\\t</ng-template>\\r\\n  </div>\\r\\n\\r\\n  <!-- <button *ngIf=\\\"groupsExist && showSidebar && activePane == 'preset'\\\" -->\\r\\n  <!--\\t\\t  mat-button -->\\r\\n  <!--\\t\\t  color=\\\"secondary\\\" -->\\r\\n  <!--\\t\\t  (click)=\\\"goToRoute()\\\">Tagger</button> -->\\r\\n\\r\\n  <!-- <button *ngIf=\\\"groupsExist && showSidebar && activePane == 'tagger'\\\" -->\\r\\n  <!--\\t\\t  mat-button -->\\r\\n  <!--\\t\\t  color=\\\"secondary\\\" -->\\r\\n  <!--\\t\\t  (click)=\\\"goToRoute()\\\">Preset</button> -->\\r\\n\\r\\n\\r\\n  <button *ngIf=\\\"groupsExist && !showSidebar\\\"\\r\\n\\t\\t  mat-raised-button\\r\\n\\t\\t  style=\\\"margin-left: 15px\\\"\\r\\n\\t\\t  (click)=\\\"openSidebar()\\\">Taggit!</button>\\r\\n\\r\\n  <button *ngIf=\\\"groupsExist && showSidebar\\\"\\r\\n\\t\\t  mat-raised-button\\r\\n\\t\\t  style=\\\"margin-left: 15px\\\"\\r\\n\\t\\t  (click)=\\\"openSidebar()\\\">Gallery</button>\\r\\n\\r\\n\\r\\n</mat-toolbar>\\r\\n\"","export default \"<div  class=\\\"form-check form-check\\\">\\r\\n    <label class=\\\"form-check-label\\\">\\r\\n        <input class=\\\"form-check-input\\\" type=\\\"checkbox\\\" [checked]=\\\"isChecked\\\" id=\\\"inlineCheckbox1\\\" value={{field.label}} (change)=\\\"selected($event, field)\\\" /> \\r\\n            {{field.label}}\\r\\n        </label>\\r\\n</div>\"","export default \"\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-notfound',\r\n  templateUrl: './notfound.component.html',\r\n  styleUrls: ['./notfound.component.scss']\r\n})\r\nexport class NotFoundComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import {Feature as GeoJSONFeature,\r\n  GeoJsonProperties,\r\n  Geometry,\r\n  FeatureCollection as IFeatureCollection } from 'geojson';\r\n\r\n\r\n// TODO: break these out into their own files\r\n\r\nexport interface IPointCloud {\r\n  id: number;\r\n  description: string;\r\n  conversion_parameters: string;\r\n  feature_id?: number;\r\n  task_id?: string;\r\n  project_id: number;\r\n}\r\n\r\n// export interface Group {\r\n//   groupName: Array<string>;\r\n//   formList: Array<any>;\r\n//   // type: any;\r\n// }\r\n\r\n// export interface Group {\r\n//   groupName: Array<string>;\r\n//   formList: Array<any>;\r\n//   // type: any;\r\n// }\r\n\r\nexport interface Group {\r\n  groupName: string;\r\n  formList: Array<any>;\r\n  color: string;\r\n  // type: any;\r\n}\r\n\r\nexport class Group implements Group {\r\n\r\n}\r\n\r\n\r\nexport class AssetFilters {\r\n\r\n  // bbox has the following format: [sw_lng, sw_lat, ne_lng, ne_lat], the same as leaflet\r\n  bbox: Array<number> = [];\r\n  assetType: Set<string> = new Set<string>();\r\n\r\n  updateAssetTypes(assetType: string) {\r\n\tthis.assetType.has(assetType) ? this.assetType.delete(assetType) : this.assetType.add(assetType);\r\n  }\r\n\r\n  updateBBox(bbox: Array<number>): void {\r\n\tthis.bbox = bbox;\r\n  }\r\n\r\n  toJson() {\r\n\treturn {\r\n\t  assetType: [...this.assetType],\r\n\t  bbox: this.bbox\r\n\t};\r\n  }\r\n\r\n}\r\n\r\n\r\nexport interface Project {\r\n  description: string;\r\n  id?: number;\r\n  name: string;\r\n  uuid?: string;\r\n  system_id?: string;\r\n  system_path?: string;\r\n}\r\n\r\nexport class Project implements Project {\r\n\r\n}\r\n\r\nexport class AuthToken {\r\n  token: string;\r\n  expires: Date;\r\n  /**\r\n   *\r\n   * @param token : String\r\n   * @param expires: Date\r\n   */\r\n  constructor(token: string, expires: Date) {\r\n\tthis.token = token;\r\n\tthis.expires = new Date(expires);\r\n  }\r\n\r\n  static fromExpiresIn(token: string, expires_in: number) {\r\n\tconst expires = new Date(new Date().getTime() + expires_in * 1000);\r\n\treturn new AuthToken(token, expires);\r\n  }\r\n\r\n  /**\r\n   * Checks if the token is expired or not\r\n   */\r\n  public isExpired(): boolean {\r\n\treturn new Date().getTime() > this.expires.getTime();\r\n  }\r\n}\r\n\r\n\r\nexport interface IFeatureAsset {\r\n  id: number;\r\n  path: string;\r\n  uuid: string;\r\n  feature_id: number;\r\n  asset_type: string;\r\n  display_path: string;\r\n}\r\n\r\nexport class FeatureAsset implements IFeatureAsset {\r\n  id: number;\r\n  path: string;\r\n  uuid: string;\r\n  feature_id: number;\r\n  asset_type: string;\r\n  display_path: string;\r\n\r\n  // TODO: Implenent this\r\n  get assetPath(): string {\r\n\treturn '';\r\n  }\r\n\r\n}\r\n\r\n\r\ninterface FeatureStyles {\r\n  [key: string]: string | number;\r\n}\r\n\r\n\r\nexport interface Overlay {\r\n  id: number;\r\n  path: string;\r\n  uuid: string;\r\n  minLon: number;\r\n  minLat: number;\r\n  maxLon: number;\r\n  maxLat: number;\r\n  project_id: number;\r\n  label: string;\r\n}\r\n\r\ninterface AppGeoJSONFeature extends GeoJSONFeature {\r\n  assets?: Array<IFeatureAsset>;\r\n  styles?: FeatureStyles;\r\n  project_id?: number;\r\n  // featureType?(): String\r\n}\r\n\r\nexport class FeatureCollection implements IFeatureCollection {\r\n  features: Feature[];\r\n  type: any;\r\n}\r\n\r\n\r\nexport class Feature implements AppGeoJSONFeature {\r\n  geometry: Geometry;\r\n  properties: GeoJsonProperties;\r\n  id?: string | number;\r\n  type: any;\r\n  assets?: Array<IFeatureAsset>;\r\n  styles?: FeatureStyles;\r\n  project_id?: number;\r\n\r\n  constructor(f: AppGeoJSONFeature) {\r\n\tthis.geometry = f.geometry;\r\n\tthis.properties = f.properties;\r\n\tthis.id = f.id;\r\n\tthis.type = f.type;\r\n\tthis.assets = f.assets;\r\n\tthis.styles = f.styles;\r\n\tthis.project_id = f.project_id;\r\n  }\r\n\r\n  featureType?(): string {\r\n\tif (this.assets &&\r\n\tthis.assets.length === 1) {\r\n\t  return this.assets[0].asset_type;\r\n\t}\r\n\r\n\tif (this.assets &&\r\n\tthis.assets.length > 1) {\r\n\t  return 'collection';\r\n\t}\r\n\r\n\tif (!this.assets.length) {\r\n\t  return this.geometry.type;\r\n\t}\r\n\r\n\r\n\r\n  }\r\n}\r\n\r\nexport interface IProjectUser {\r\n  id: number;\r\n  username: string;\r\n}","export enum EnvironmentType {\r\n  Production = 'production',\r\n  Staging = 'staging',\r\n  Local = 'local',\r\n}","import { EnvironmentType } from \"./environmentType\";\r\n\r\nexport interface AppEnvironment {\r\n  production: boolean;\r\n  apiUrl: string;\r\n  jwt?: string;\r\n  clientId: string;\r\n  baseHref: string;\r\n  backend: EnvironmentType;\r\n}\r\n\r\nexport const environment: AppEnvironment = {\r\n  production: true,\r\n  apiUrl: 'https://agave.designsafe-ci.org/geo/v2/',\r\n  clientId: 'jHXnvsmQQcmP43qlrG7ATaxFXHQa',\r\n  //   apiUrl: 'https://localhost:8000',\r\n  // clientId: 'RMCJHgW9CwJ6mKjhLTDnUYBo9Hka',\r\n  baseHref: '/',\r\n  backend: EnvironmentType.Production\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AuthToken } from '../models/models';\r\nimport {environment} from '../../environments/environment';\r\nimport {Observable, ReplaySubject} from 'rxjs';\r\nimport {Router} from '@angular/router';\r\n\r\nexport class AuthenticatedUser {\r\n  public readonly username: string;\r\n  public readonly email: string;\r\n  private _token: AuthToken;\r\n\r\n  constructor(username: string, email: string) {\r\n    this.username = username;\r\n    this.email = email;\r\n  }\r\n\r\n}\r\n\r\ninterface OpenIDUser {\r\n  name: string;\r\n  email: string;\r\n}\r\n\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class AuthService {\r\n\r\n  private _currentUser: ReplaySubject<AuthenticatedUser> = new ReplaySubject<AuthenticatedUser>(1);\r\n  public readonly currentUser: Observable<AuthenticatedUser> = this._currentUser.asObservable();\r\n  userToken: AuthToken;\r\n  private LS_TOKEN_KEY = 'hazmapperToken';\r\n  private LS_USER_KEY = 'hazmapperUser';\r\n\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n\r\n  public login() {\r\n    // First, check if the user has a token in localStorage\r\n    const tokenStr = localStorage.getItem(this.LS_TOKEN_KEY);\r\n    if (!tokenStr) {\r\n      this.redirectToauthenticaor();\r\n    } else {\r\n      const token = JSON.parse(tokenStr);\r\n      this.userToken = new AuthToken(token.token, new Date(token.expires));\r\n      if (!this.userToken || this.userToken.isExpired()) {\r\n        this.logout();\r\n        this.redirectToauthenticaor();\r\n      }\r\n      this.getUserInfo();\r\n    }\r\n  }\r\n\r\n  private redirectToauthenticaor() {\r\n    const client_id = environment.clientId;\r\n    const callback = location.origin + environment.baseHref + 'callback';\r\n    const state = Math.random().toString(36);\r\n    const AUTH_URL = `https://agave.designsafe-ci.org/authorize?scope=openid&client_id=${client_id}&response_type=token&redirect_uri=${callback}&state=${state}`;\r\n    window.location.href = AUTH_URL;\r\n  }\r\n\r\n\r\n  /**\r\n   * Checks to make sure that the user has a token and the token is not expired;\r\n   */\r\n  public isLoggedIn(): boolean {\r\n    return this.userToken && !this.userToken.isExpired();\r\n  }\r\n\r\n  public logout(): void {\r\n    this.userToken = null;\r\n    localStorage.removeItem(this.LS_TOKEN_KEY);\r\n    localStorage.removeItem(this.LS_USER_KEY);\r\n  }\r\n\r\n  public setToken(token: string, expires: number): void {\r\n    this.userToken = AuthToken.fromExpiresIn(token, expires);\r\n    localStorage.setItem(this.LS_TOKEN_KEY, JSON.stringify(this.userToken));\r\n    // hit the wso2 api to retrieve the username etc\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  public getUserInfo() {\r\n    const INFO_URL = `https://agave.designsafe-ci.org/oauth2/userinfo?schema=openid`;\r\n    const userStr = localStorage.getItem(this.LS_USER_KEY);\r\n    const user = JSON.parse(userStr);\r\n    if (user !== null) {\r\n      this._currentUser.next(\r\n        new AuthenticatedUser(user.username, user.email)\r\n      );\r\n    } else {\r\n      this.http.get<OpenIDUser>(INFO_URL).subscribe(resp => {\r\n        const u = new AuthenticatedUser(resp.name, resp.email);\r\n        localStorage.setItem(this.LS_USER_KEY, JSON.stringify(u));\r\n        this._currentUser.next(u);\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { INotification } from '../models/notification';\r\nimport { interval, Observable, ReplaySubject } from 'rxjs';\r\nimport { AuthService } from '../services/authentication.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationsService {\r\n  // Interval time to get notifications in millisecs\r\n  private TIMEOUT = 5000;\r\n  private _notifications: ReplaySubject<Array<INotification>> = new ReplaySubject<Array<INotification>>(1);\r\n  public readonly  notifications: Observable<Array<INotification>> = this._notifications.asObservable();\r\n\r\n  constructor(private toastr: ToastrService,\r\n    private http: HttpClient,\r\n    private authService: AuthService ) {\r\n      if (this.authService.isLoggedIn()) {\r\n      const timer = interval(this.TIMEOUT);\r\n      timer.subscribe((next) => {\r\n        this.getRecent();\r\n      });\r\n    }\r\n  }\r\n\r\n  //Sends a request to GeoAPI to retrieve recent notifications\r\n  getRecent(): void {\r\n    let baseUrl = environment.apiUrl + 'notifications/';\r\n    let now = new Date();\r\n    let then = new Date(now.getTime() - this.TIMEOUT);\r\n\r\n    this.http.get<Array<INotification>>(baseUrl + `?startDate=${then.toISOString()}`)\r\n      .subscribe( (notes) => {\r\n        this._notifications.next(notes);\r\n        notes.forEach( (note) => {\r\n          switch (note.status) {\r\n            case 'success':\r\n              this.showSuccessToast(note.message);\r\n              break;\r\n            case 'error':\r\n              this.showErrorToast(note.message);\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        });\r\n      });\r\n  }\r\n\r\n  showSuccessToast(message: string): void {\r\n    this.toastr.success(message);\r\n  }\r\n\r\n  showErrorToast(message: string): void {\r\n    //this.toastr.error(message);\r\n    this.toastr.error(message + \", trying alternate method\")\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ScrollService {\r\n\r\n  constructor() { }\r\n\r\n  public scrollRestored:boolean = true //if true, the scroll was restored to the proper place\r\n  public scrollPosition:number = 0\r\n\r\n  setScrollRestored(change:boolean) { this.scrollRestored = change; }\r\n\r\n  setScrollPosition() { this.scrollPosition = document.documentElement.scrollTop;}\r\n\r\n  scroll() {\r\n    //Attempts to scroll to the specified location\r\n\t\tdocument.documentElement.scroll({top: this.scrollPosition})\r\n\t\t//if it reaches there, marks the check as complete\r\n\t\tif(document.documentElement.scrollTop == this.scrollPosition){\r\n\t\t\tthis.scrollRestored = false\r\n\t\t}\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {BehaviorSubject, Observable, ReplaySubject, Subject} from 'rxjs';\r\nimport {LatLng} from 'leaflet';\r\nimport {AssetFilters, FeatureAsset, IFeatureAsset, IPointCloud, Overlay} from '../models/models';\r\nimport { Feature, FeatureCollection} from '../models/models';\r\nimport { environment } from '../../environments/environment';\r\nimport {Form} from '@angular/forms';\r\nimport {take} from 'rxjs/operators';\r\nimport * as querystring from 'querystring';\r\nimport {RemoteFile} from 'ng-tapis';\r\nimport { NotificationsService } from './notifications.service';\r\nimport { ScrollService } from './scroll.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GeoDataService {\r\n\r\n\r\n  // TODO: clean this up and put the observables up here. Also look into Replay/Behavior\r\n  private _features: BehaviorSubject<FeatureCollection>;\r\n  private features$: Observable<FeatureCollection>;\r\n  private _activeFeature: BehaviorSubject<any>;\r\n  private _mapMouseLocation: BehaviorSubject<any>;\r\n  private _basemap: BehaviorSubject<any>;\r\n  private _overlays: BehaviorSubject<any>;\r\n  private _activeOverlay: BehaviorSubject<any>;\r\n  private _pointClouds: BehaviorSubject<Array<IPointCloud>> = new BehaviorSubject<Array<IPointCloud>>(null);\r\n  public readonly pointClouds: Observable<Array<IPointCloud>> = this._pointClouds.asObservable();\r\n  private fileList: Array<RemoteFile>\r\n\r\n  private _loaded: BehaviorSubject<boolean> = new BehaviorSubject(null);\r\n  public loaded: Observable<boolean> = this._loaded.asObservable();\r\n\r\n  constructor(private http: HttpClient,\r\n\tprivate notificationsService: NotificationsService,\r\n\tprivate scrollService: ScrollService) {\r\n\tthis._features = new BehaviorSubject<FeatureCollection>({type: 'FeatureCollection', features: []});\r\n\tthis.features$ = this._features.asObservable();\r\n\tthis._activeFeature = new BehaviorSubject<any>(null);\r\n\tthis._mapMouseLocation = new BehaviorSubject<any>(null);\r\n\r\n\t// For the style of the basemap, defaults to OpenStreetmap\r\n\tthis._basemap = new BehaviorSubject<any>('roads');\r\n\r\n\t// Holds all of the overlays on a project\r\n\tthis._overlays = new BehaviorSubject<any>(null);\r\n\tthis._activeOverlay = new BehaviorSubject<any>(null);\r\n  }\r\n\r\n  getFeatures(projectId: number, query: AssetFilters = new AssetFilters(), restoreScroll = false): void {\r\n\tconst qstring: string = querystring.stringify(query.toJson());\r\n\tthis._loaded.next(false);\r\n\tthis.http.get<FeatureCollection>(environment.apiUrl + `/projects/${projectId}/features/` + '?' + qstring)\r\n\t  .subscribe( (fc: FeatureCollection) => {\r\n\t\tfc.features = fc.features.map( (feat: Feature) => new Feature(feat));\r\n\t\tthis._features.next(fc);\r\n\t\tthis._loaded.next(true);\r\n\r\n\t\tif ( restoreScroll ) {\r\n\t\t\tthis.scrollService.setScrollRestored(true)\r\n\t\t}\r\n\t  });\r\n  }\r\n\r\n  deleteFeature(feature: Feature) {\r\n\tthis.http.delete(environment.apiUrl + `projects/${feature.project_id}/features/${feature.id}/`)\r\n\t  .subscribe( (resp) => {\r\n\t\tthis.getFeatures(feature.project_id, new AssetFilters(), true);\r\n\t  });\r\n  }\r\n\r\n  getPointClouds(projectId: number) {\r\n\tthis.http.get<Array<IPointCloud>>(environment.apiUrl + `/projects/${projectId}/point-cloud/`)\r\n\t  .subscribe( (resp ) => {\r\n\t// console.log(resp);\r\n\tthis._pointClouds.next(resp);\r\n\t  });\r\n  }\r\n\r\n  addFeature(feat: Feature): void {\r\n\tthis.features$.pipe(take(1)).subscribe( (current: FeatureCollection) => {\r\n\t  current.features.push(feat);\r\n\t  this._features.next(current);\r\n\t});\r\n  }\r\n\r\n  addPointCloud(projectId: number, title: string, conversionParams: string): void {\r\n\tconst payload = {\r\n\t  description: title,\r\n\t  conversion_parameters: conversionParams\r\n\t};\r\n\tthis.http.post(environment.apiUrl + `/projects/${projectId}/point-cloud/`, payload)\r\n\t  .subscribe( (resp) => {\r\n\tthis.getPointClouds(projectId);\r\n\t  }, error => {\r\n\t// TODO: notification\r\n\t  });\r\n  }\r\n\r\n  updateFeatureProperty(projectId: number, featureId: number, groupData: any): void {\r\n\t// const payload = {\r\n\t//   description: title,\r\n\t//   conversion_parameters: conversionParams\r\n\t// };\r\n\tthis.http.post(environment.apiUrl + `projects/${projectId}/features/${featureId}/properties/`, groupData)\r\n\t  .subscribe( (resp) => {\r\n\t\t// this.getFeatures(projectId);\r\n\t  }, error => {\r\n\t// TODO: notification\r\n\t  });\r\n  }\r\n\r\n  updateFeatureStyle(projectId: number, featureId: number, groupData: any): void {\r\n\t// const payload = {\r\n\t//   description: title,\r\n\t//   conversion_parameters: conversionParams\r\n\t// };\r\n\tthis.http.post(environment.apiUrl + `/projects/${projectId}/features/${featureId}/styles/`, groupData)\r\n\t  .subscribe( (resp) => {\r\n\t\t// this.getFeatures(projectId);\r\n\t  }, error => {\r\n\t// TODO: notification\r\n\t  });\r\n  }\r\n\r\n  deletePointCloud(pc: IPointCloud): void {\r\n\tconsole.log(pc);\r\n\tthis.http.delete(environment.apiUrl + `/projects/${pc.project_id}/point-cloud/${pc.id}/`)\r\n\t  .subscribe( (resp) => {\r\n\tthis.getPointClouds(pc.project_id);\r\n\t  });\r\n  }\r\n\r\n  addFileToPointCloud(pc: IPointCloud, file: File) {\r\n\tconst form = new FormData();\r\n\tform.append('file', file);\r\n\tconsole.log(pc);\r\n\tthis.http.post(environment.apiUrl + `/projects/${pc.project_id}/point-cloud/${pc.id}/`, form)\r\n\t  .subscribe( (resp) => {\r\n\tconsole.log(resp);\r\n\t  });\r\n  }\r\n\r\n  importFileFromTapis(projectId: number, files: Array<RemoteFile>): void {\r\n\r\n\tconst tmp = files.map( f => ({system: f.system, path: f.path}));\r\n\tconst payload = {\r\n\t  files: tmp\r\n\t};\r\n\tthis.fileList = tmp\r\n\tthis.http.post(environment.apiUrl + `projects/${projectId}/features/files/import/`, payload)\r\n\t  .subscribe( (resp) => {\r\n\t\tthis.notificationsService.showSuccessToast('Import started!');\r\n\t  }, error => {\r\n\t\tthis.notificationsService.showErrorToast('Import failed! Try again?');\r\n\t  });\r\n  }\r\n\r\n  //An alternate function for importing images with no GPS data. A feature is created elsewhere, and the image is added to the feature\r\n  //Inputs:\r\n  //projectId: Id number of current project\r\n  //features: A pre-created features with user-defined or zeroed out gps data\r\n  //file: A Tapis Remote File containing the image to be imported\r\n  importImage(projectId: number, feature: Feature, path: string): void {\r\n\tlet featureId = feature.id\r\n\tlet file\r\n\tthis.fileList.forEach(remoteFile =>{\r\n\t\tif (remoteFile.path == path) {\r\n\t\t\tfile = remoteFile\r\n\t\t}\r\n\t});\r\n\tlet payload = {system_id: file.system, path: file.path};\r\n\tthis.http.post(environment.apiUrl + `projects/${projectId}/features/${featureId}/assets/`, payload)\r\n\t.subscribe( (resp) => {\r\n\t\tthis.notificationsService.showSuccessToast('Import started!');\r\n\t\t//this.getFeatures(projectId)\r\n\t});\r\n  }\r\n\r\n  //Creates a new feature from an uploaded locally created feature\r\n  uploadNewFeature(projectId: number, feature:Feature, path: string): void {\r\n\tlet payload = feature;\r\n\tlet response\r\n\t//Calls the addFeatureAsset route in GeoAPI, resp is a list of features\r\n\tthis.http.post(environment.apiUrl + `projects/${projectId}/features/`, payload)\r\n\t.subscribe( (resp) => {\r\n\t\t//this.getFeatures(projectId)\r\n\t\tresponse = new Feature(resp[0])\r\n\t\tthis.importImage(projectId, response, path)\r\n\t});\r\n  }\r\n\r\n  downloadGeoJSON(projectId: number, query: AssetFilters = new AssetFilters()) {\r\n\tconst qstring: string = querystring.stringify(query.toJson());\r\n\tconst downloadLink = document.createElement('a');\r\n\r\n\tthis.http.get<FeatureCollection>(environment.apiUrl + `/projects/${projectId}/features/` + '?' + qstring)\r\n\t  .subscribe( (resp) => {\r\n\tconst blob = new Blob([JSON.stringify(resp)], {type: 'application/json'});\r\n\tdownloadLink.href = URL.createObjectURL(blob);\r\n\tdownloadLink.setAttribute('download', 'hazmapper.json');\r\n\tdocument.body.appendChild(downloadLink);\r\n\tdownloadLink.click();\r\n\tdocument.body.removeChild(downloadLink);\r\n\t  });\r\n  }\r\n\r\n  uploadFile(projectId: number, file: File): void {\r\n\tconst form: FormData = new FormData();\r\n\tform.append('file', file, file.name);\r\n\tthis.http.post<Array<Feature>>(environment.apiUrl + `/projects/${projectId}/features/files/`, form)\r\n\t  .subscribe( (feats) => {\r\n\tfeats.forEach( (feat) => {\r\n\t  this.addFeature(new Feature(feat));\r\n\t});\r\n\t  }, error => {\r\n\t// TODO: Add notification\r\n\t  });\r\n  }\r\n\r\n  uploadAssetFile(projectId: number, featureId: number, file: File): void {\r\n\tconst form: FormData = new FormData();\r\n\tform.append('file', file, file.name);\r\n\tthis.http.post<Feature>(environment.apiUrl + `/api/projects/${projectId}/features/${featureId}/assets/`, form)\r\n\t.subscribe( (feature) => {\r\n\t  // TODO workaround to update activeFeature\r\n\t  let f = this._activeFeature.getValue();\r\n\t  if(f && f.id === featureId){\r\n\t\tthis.activeFeature = new Feature(feature);\r\n\t\tthis.getFeatures(projectId);\r\n\t  }\r\n\t}, error => {\r\n\t  // TODO: Add notification\r\n\t});\r\n  }\r\n\r\n  getOverlays(projectId: number): void {\r\n\tthis.http.get(environment.apiUrl + `/projects/${projectId}/overlays/`).subscribe( (ovs: Array<Overlay>) => {\r\n\t  this._overlays.next(ovs);\r\n\t});\r\n  }\r\n\r\n  addOverlay(projectId: number, file: File, label: string, minLat: number, maxLat: number, minLon: number, maxLon: number) {\r\n\tconst payload = new FormData();\r\n\tpayload.append('file', file);\r\n\tpayload.append('label', label);\r\n\tpayload.append('minLat', minLat.toFixed(6));\r\n\tpayload.append('maxLat', maxLat.toFixed(6));\r\n\tpayload.append('minLon', minLon.toFixed(6));\r\n\tpayload.append('maxLon', maxLon.toFixed(6));\r\n\r\n\tthis.http.post(environment.apiUrl + `/projects/${projectId}/overlays/`, payload)\r\n\t  .subscribe((resp) => {\r\n\tthis.getOverlays(projectId);\r\n\t  });\r\n  }\r\n\r\n  public get overlays(): Observable<Array<Overlay>> {\r\n\treturn this._overlays.asObservable();\r\n  }\r\n\r\n  public get features(): Observable<FeatureCollection> {\r\n\treturn this._features.asObservable();\r\n  }\r\n\r\n  public get activeFeature() {\r\n\treturn this._activeFeature.asObservable();\r\n  }\r\n\r\n  // TODO: This is heinous\r\n  public set activeFeature(f: any) {\r\n\tif (f) {\r\n\t  if (f === this._activeFeature.getValue()) {\r\n\tthis._activeFeature.next(null);\r\n\t  } else {\r\n\tthis._activeFeature.next(f);\r\n\t  }\r\n\t} else {\r\n\t  this._activeFeature.next(null);\r\n\t}\r\n\r\n  }\r\n\r\n  public get activeOverlay(): Observable<Overlay> {\r\n\treturn this._activeOverlay.asObservable();\r\n  }\r\n\r\n  public set activeOverlay(ov) {\r\n\tthis._activeOverlay.next(ov);\r\n  }\r\n\r\n\r\n  public get mapMouseLocation(): Observable<LatLng> {\r\n\treturn this._mapMouseLocation.asObservable();\r\n  }\r\n\r\n  public set mapMouseLocation(loc) {\r\n\tthis._mapMouseLocation.next(loc);\r\n  }\r\n\r\n  public set basemap(bmap) {\r\n\tthis._basemap.next(bmap);\r\n  }\r\n\r\n  public get basemap(): any {\r\n\treturn this._basemap.asObservable();\r\n  }\r\n\r\n\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {GeoDataService} from '../../services/geo-data.service';\r\nimport {Feature} from '../../models/models';\r\nimport {AuthenticatedUser, AuthService} from '../../services/authentication.service';\r\nimport {Observable} from 'rxjs';\r\nimport {BsModalRef, BsModalService} from 'ngx-foundation';\r\nimport {ModalFileBrowserComponent} from '../modal-file-browser/modal-file-browser.component';\r\nimport {RemoteFile} from 'ng-tapis';\r\n\r\n@Component({\r\n  selector: 'app-main',\r\n  templateUrl: './main.component.html',\r\n  styleUrls: ['./main.component.scss']\r\n})\r\nexport class MainComponent implements OnInit {\r\n\r\n  // public activeFeature: Feature;\r\n  // public currentUser: AuthenticatedUser;\r\n\r\n  constructor(private geoDataService: GeoDataService, private authService: AuthService, private bsModalService: BsModalService,) {}\r\n\r\n  ngOnInit() {\r\n\t// this.geoDataService.activeFeature.subscribe( next => {\r\n\t//   this.activeFeature = next;\r\n\t// });\r\n\t// this.authService.currentUser.subscribe(next => this.currentUser = next);\r\n  }\r\n\r\n\r\n\r\n}\r\n","import {Component, NgZone, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Router, Route} from '@angular/router';\r\nimport {AuthService} from '../../services/authentication.service';\r\n\r\n@Component({\r\n  selector: 'app-callback',\r\n  templateUrl: './callback.component.html',\r\n  styleUrls: ['./callback.component.scss']\r\n})\r\nexport class CallbackComponent implements OnInit {\r\n\r\n  constructor(private route: ActivatedRoute, private auth: AuthService) { }\r\n\r\n  ngOnInit() {\r\n\t// TODO: For some reason wso2 is sending back a fragment like #access_token=qadad&expires_in=3600\r\n\tconst frag = this.route.snapshot.fragment;\r\n\tconst params = new URLSearchParams(frag);\r\n\tconst token = params.get('access_token');\r\n\tconst expires_in = +params.get('expires_in');\r\n\tthis.auth.setToken(token, expires_in);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport {BehaviorSubject, Observable, ReplaySubject} from 'rxjs';\r\nimport {tap} from 'rxjs/operators';\r\nimport {Project, IProjectUser} from '../models/models';\r\nimport { environment } from '../../environments/environment';\r\nimport {AuthService} from './authentication.service';\r\nimport { validateBBox } from '@turf/helpers';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProjectsService {\r\n\r\n  private _projects: BehaviorSubject<Project[]> = new BehaviorSubject([]);\r\n  public readonly projects: Observable<Project[]> = this._projects.asObservable();\r\n  private _activeProject: ReplaySubject<Project> = new ReplaySubject<Project>(1);\r\n  public readonly  activeProject: Observable<Project> = this._activeProject.asObservable();\r\n  private _projectUsers: ReplaySubject<Array<IProjectUser>> = new ReplaySubject<Array<IProjectUser>>(1);\r\n  public readonly projectUsers$: Observable<Array<IProjectUser>> = this._projectUsers.asObservable();\r\n\r\n  constructor(private http: HttpClient,\r\n    private authService: AuthService) { }\r\n\r\n    testGeoApi():void {\r\n      const data = {\r\n        \"name\": \"Awesome Project\",\r\n      \"description\": \"Cool project\"\r\n      }\r\n      const prom = this.http.post<Project>(`http://localhost:8888/projects/`, data).subscribe( resp => {\r\n        this._projects.next([...this._projects.value, resp]);\r\n      // Set the active project to the one just created?\r\n      this._activeProject.next(resp);\r\n      });\r\n\r\n      this.http.get<Project[]>(`http://localhost:8888/projects/`).subscribe( resp => {\r\n        this._projects.next(resp);\r\n        //DEBUG: outputs results of query\r\n        //console.log(this._projects.getValue())\r\n      });\r\n    }\r\n\r\n  //Queries database for all user projects.\r\n  getProjects(): void {\r\n   this.http.get<Project[]>(environment.apiUrl + `/projects/`).subscribe( resp => {\r\n     this._projects.next(resp);\r\n     //DEBUG: outputs results of query\r\n     //console.log(this._projects.getValue())\r\n   }, error => {\r\n    console.log(\"HAHAHA NOPE\")\r\n  });\r\n  }\r\n\r\n  create(data: Project): Observable<Project> {\r\n    const prom = this.http.post<Project>(environment.apiUrl + `/projects/`, data);\r\n    prom.subscribe(proj => {\r\n      //below code from here to next comment does nothing\r\n      // const p = new Project();\r\n      // p.name = 'test';\r\n      // p.description = 'test';\r\n      // Spread operator, just pushes the new project into the array\r\n      this._projects.next([...this._projects.value, proj]);\r\n      // Set the active project to the one just created?\r\n      this._activeProject.next(proj);\r\n    });\r\n    console.log(this._activeProject)\r\n    return prom;\r\n  }\r\n\r\n  setActiveProject(proj: Project): void {\r\n    //saves change as last visited project\r\n    window.localStorage.setItem(\"lastProj\", JSON.stringify(proj))\r\n    try {\r\n      this._activeProject.next(proj);\r\n    } catch (error) {\r\n      return error\r\n    }\r\n\r\n  }\r\n\r\n  \r\n  update(data: Project): void{\r\n    // console.log(data) \r\n    this.http.put<Project>(environment.apiUrl + `/projects/${data.id}/`, data).subscribe(\r\n      (resp) => {\r\n        this._activeProject.next(resp);\r\n      }\r\n    );\r\n  }\r\n\r\n  //Note: This will delete the project for everyone, if the project is shared.\r\n  delete(data: Project):void{\r\n    window.localStorage.setItem(\"lastProj\", JSON.stringify(\"none\"))\r\n    this.http.delete(environment.apiUrl  + `/projects/${data.id}/`)\r\n      .subscribe( (resp) => {\r\n        window.localStorage.setItem(\"lastProj\", JSON.stringify(\"none\"))\r\n        this.getProjects();\r\n        // this._projects.next([...this._projects.value]);\r\n        // console.log(this._projects.value[0])\r\n        // this._activeProject.next(this._projects.value[0]);\r\n      });\r\n  }\r\n\r\n  getProjectUsers(proj: Project): Observable<Array<IProjectUser>> {\r\n    return this.http.get<Array<IProjectUser>>(environment.apiUrl + `/projects/${proj.id}/users/`).pipe(\r\n      tap(users => {\r\n        this._projectUsers.next(users);\r\n      }));\r\n  }\r\n\r\n  addUserToProject(proj: Project, uname: string): void {\r\n    const payload = {\r\n      username: uname\r\n    };\r\n    this.http.post(environment.apiUrl + `/projects/${proj.id}/users/`, payload)\r\n      .subscribe( (resp) => {\r\n        this.getProjectUsers(proj).subscribe();\r\n      });\r\n  }\r\n\r\n  deleteUserFromProject(proj:Project, user:string): void {\r\n    this.http.delete(environment.apiUrl + `/projects/${proj.id}/users/${user}/`)\r\n    .subscribe((resp)=>{\r\n      this.getProjectUsers(proj).subscribe();\r\n    },error =>{\r\n      //TODO: Create popup for an error message.\r\n      console.log(error)\r\n    })\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {BehaviorSubject, Observable, ReplaySubject, Subject} from 'rxjs';\r\nimport { ProjectsService } from './projects.service';\r\nimport { Feature } from '../models/models';\r\n\r\n// Will inject Projects and GeoData Service to get properties of Feature\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupsService {\r\n  private _groups: BehaviorSubject<any> = new BehaviorSubject([]);\r\n  public groups: Observable<any> = this._groups.asObservable();\r\n  private _forms: BehaviorSubject<any> = new BehaviorSubject([]);\r\n  public forms: Observable<any> = this._forms.asObservable();\r\n  private _tempGroup: BehaviorSubject<any> = new BehaviorSubject([]);\r\n  public tempGroup: Observable<any> = this._tempGroup.asObservable();\r\n  private _showGroup: BehaviorSubject<boolean> = new BehaviorSubject(null);\r\n  public showGroup: Observable<boolean> = this._showGroup.asObservable();\r\n  private _showSidebar: BehaviorSubject<boolean> = new BehaviorSubject(null);\r\n  public showSidebar: Observable<boolean> = this._showSidebar.asObservable();\r\n\r\n  private _activeFeature: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n  public activeFeature: Observable<any> = this._activeFeature.asObservable();\r\n\r\n  private _activeGroup: BehaviorSubject<string> = new BehaviorSubject<string>(null);\r\n  public activeGroup: Observable<string> = this._activeGroup.asObservable();\r\n\r\n  private _activeFeatureNum: BehaviorSubject<number> = new BehaviorSubject<number>(null);\r\n  public activeFeatureNum: Observable<number> = this._activeFeatureNum.asObservable();\r\n\r\n  private _unselectAll: BehaviorSubject<boolean> = new BehaviorSubject(null);\r\n  public unselectAll: Observable<boolean> = this._unselectAll.asObservable();\r\n\r\n  private _featureImagesExist: BehaviorSubject<boolean> = new BehaviorSubject(null);\r\n  public featureImagesExist: Observable<boolean> = this._featureImagesExist.asObservable();\r\n\r\n  private _activeFeatureId: BehaviorSubject<number> = new BehaviorSubject<number>(null);\r\n  public activeFeatureId: Observable<number> = this._activeFeatureId.asObservable();\r\n\r\n  private _activePane: BehaviorSubject<string> = new BehaviorSubject<string>(null);\r\n  public activePane: Observable<string> = this._activePane.asObservable();\r\n\r\n  private _tagFeatureGroup: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n  public tagFeatureGroup: Observable<any> = this._tagFeatureGroup.asObservable();\r\n\r\n  private _itemsSelected: BehaviorSubject<boolean> = new BehaviorSubject(null);\r\n  public itemsSelected: Observable<boolean> = this._itemsSelected.asObservable();\r\n\r\n  constructor(private projectsService: ProjectsService) {\r\n  }\r\n\r\n  // Loop through projects to get a list of Groups\r\n  addGroup(groupList: any): void {\r\n\tthis._groups.next(groupList);\r\n  }\r\n\r\n  setGroupProperties(featureList: any): void {\r\n\t// let tempGroupList = {};\r\n\tlet tempGroupList = {};\r\n\tlet tempFeatList = {};\r\n\tfor (let feat of featureList) {\r\n\t  // Parses if group exists at all in server\r\n\t  if (feat.properties.group) {\r\n\t\t// Loops through all the groups\r\n\t\tfor (let group of feat.properties.group) {\r\n\t\t  // Adds new feature to group\r\n\t\t  // if (!tempFeatList[group.name]) {\r\n\t\t  //\ttempFeatList[group.name] = [];\r\n\t\t  // }\r\n\r\n\t\t  // if (!tempGroupList[group.name]) {\r\n\t\t  //\ttempGroupList[group.name] = [];\r\n\t\t  // }\r\n\r\n\t\t  // TODO for some reason it's limiting itself to only one group per feature...\r\n\r\n\t\t  //if it exist\r\n\t\t  if (!tempGroupList[group.name]) {\r\n\r\n\t\t\ttempGroupList[group.name] = {\r\n\t\t\t  name: group.name,\r\n\t\t\t  features: [],\r\n\t\t\t  color: group.color,\r\n\t\t\t  icon: group.icon\r\n\t\t\t}\r\n\t\t  }\r\n\t\t//   console.log(tempGroupList[group.name].features)\r\n\t\t  let index = tempGroupList[group.name].features.findIndex(item => (item == feat))\r\n\t\t  if(index == -1){\r\n\t\t  tempGroupList[group.name].features.push(feat);\r\n\t\t  }\r\n\r\n\r\n\t\t}\r\n\t  }\r\n\t}\r\n\r\n\t// console.log(tempGroupList);\r\n\tthis._groups.next(Object.values(tempGroupList));\r\n\t// console.log(Object.values(tempGroupList))\r\n\t// this._groups.next(tempGroupList);\r\n  }\r\n\r\n  addForm(formList: any): void {\r\n\tthis._forms.next(formList);\r\n  }\r\n\r\n  addTempGroup(tempGroup: any): void {\r\n\tthis._tempGroup.next(tempGroup);\r\n  }\r\n\r\n  setShowGroup(show: boolean): void {\r\n\tthis._showGroup.next(show);\r\n  }\r\n\r\n  setFeatureImagesExist(feature: boolean): void {\r\n\tthis._featureImagesExist.next(feature);\r\n  }\r\n\r\n  setShowSidebar(show: boolean): void {\r\n\tthis._showSidebar.next(show);\r\n  }\r\n\r\n  setUnselectAll(select: boolean): void {\r\n\tthis._unselectAll.next(select);\r\n\tthis._itemsSelected.next(!select);\r\n  }\r\n\r\n  setItemsSelected(select: boolean): void {\r\n\tthis._itemsSelected.next(select)\r\n  }\r\n\r\n  // TODO Replace this with geo-data.service\r\n  setActiveProject(feat: any): void {\r\n\tthis._activeFeature.next(feat);\r\n  }\r\n\r\n  setActiveGroup(groupName: string): void {\r\n\t// console.log(feat.assets[0].path);\r\n\tthis._activeGroup.next(groupName);\r\n  }\r\n\r\n  setActivePane(pane: string): void {\r\n\t// console.log(feat.assets[0].path);\r\n\tthis._activePane.next(pane);\r\n  }\r\n\r\n  setActiveFeatureNum(num: number): void {\r\n\tthis._activeFeatureNum.next(num);\r\n  }\r\n\r\n  setActiveFeatureId(id: number): void {\r\n\tthis._activeFeatureId.next(id);\r\n  }\r\n\r\n  setTagFeatureGroup(groupName: string, featureId: number, payload: any): void {\r\n\tlet groupFeature : string = groupName + featureId;\r\n\tlet tagFeatureGroupValue : any = this._tagFeatureGroup.value;\r\n\r\n\tif (tagFeatureGroupValue == null) {\r\n\t  tagFeatureGroupValue = {};\r\n\t} else {\r\n\t  tagFeatureGroupValue[groupFeature] = payload;\r\n\t}\r\n\r\n\tthis._tagFeatureGroup.next(tagFeatureGroupValue);\r\n  }\r\n}\r\n","import { Component, Injectable } from '@angular/core';\r\nimport {BehaviorSubject, Observable, ReplaySubject, Subject} from 'rxjs';\r\nimport {Group} from '../models/models';\r\nimport { map, first } from 'rxjs/operators';\r\nimport { GroupsService } from './groups.service';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ProjectsService } from './projects.service';\r\nimport { GeoDataService } from './geo-data.service';\r\nimport { prepareSyntheticListenerFunctionName } from '@angular/compiler/src/render3/util';\r\nimport { fadeInItems } from '@angular/material';\r\nimport { Feature, FeatureCollection } from 'geojson';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FormsService {\r\n  // private _forms: BehaviorSubject<any[]> = new BehaviorSubject([]);\r\n  // public forms: Observable<any[]> = this._forms.asObservable();\r\n\r\n  // private _forms: BehaviorSubject<Group[]> = new BehaviorSubject([]);\r\n  // public forms: Observable<Group[]> = this._forms.asObservable();\r\n\r\n  // private _forms: BehaviorSubject<Group[]> = new BehaviorSubject([]);\r\n  // public forms: Observable<Group[]> = this._forms.asObservable();\r\n\r\n  // private _forms: BehaviorSubject<Group> = new BehaviorSubject([]);\r\n  // private _forms: BehaviorSubject<Group> = new BehaviorSubject<Group>({Type});\r\n  // this._features = new BehaviorSubject<FeatureCollection>({type: 'FeatureCollection', features: []});\r\n\r\n  // this._features = new BehaviorSubject<FeatureCollection>({type: 'FeatureCollection', features: []});\r\n\r\n  private _forms: BehaviorSubject<Group[]> = new BehaviorSubject([]);\r\n  public forms: Observable<Group[]> = this._forms.asObservable();\r\n\r\n  private _activeFormList: BehaviorSubject<any[]> = new BehaviorSubject([]);\r\n  public activeFormList: Observable<any[]> = this._activeFormList.asObservable();\r\n\r\n  private _formGroup: BehaviorSubject<FormGroup> = new BehaviorSubject<FormGroup>(null);\r\n  public formGroup: Observable<FormGroup> = this._formGroup.asObservable();\r\n\r\n  \r\n\r\n  private activeGroup\r\n  private groupList\r\n  private featureList: Array<any> = [];\r\n  features: FeatureCollection;\r\n  private selectedProject\r\n  private selectedFeatureID\r\n  private selectedFeature\r\n  tempGroup: Array<Feature>;\r\n  // THIS TODO\r\n  // private _forms: BehaviorSubject<Group> = new BehaviorSubject<Group>({type: 'Group', formList: [], groupName: []});\r\n  // public forms: Observable<Group> = this._forms.asObservable();\r\n\r\n\r\n  constructor(private groupsService: GroupsService,\r\n\t\t\t  private projectsService: ProjectsService,\r\n\t\t\t  private geoDataService: GeoDataService) {\r\n\r\n\t\t\t\tthis.groupsService.activeGroup.subscribe((next) => {\r\n\t\t\t\t\tthis.activeGroup = next;\r\n\t\t\t\t});\r\n\t\t\t\r\n\t\t\t\tthis.groupsService.groups.subscribe((next) => {\r\n\t\t\t\t\tthis.groupList = next;\r\n\t\t\t\t});\r\n\t\t\t\r\n\t\t\t\tthis.projectsService.activeProject.subscribe(next => {\r\n\t\t\t\t\tthis.selectedProject = next;\r\n\t\t\t\t});\r\n\t\t\t\r\n\t\t\t\tthis.groupsService.activeFeatureId.subscribe(next => {\r\n\t\t\t\t\tthis.selectedFeatureID = next\r\n\t\t\t\t})\r\n\r\n\t\t\t\tthis.groupsService.activeFeature.subscribe(next => {\r\n\t\t\t\t\tthis.selectedFeature = next\r\n\t\t\t\t});\r\n\t\t\t\tthis.geoDataService.features.subscribe( (fc: FeatureCollection) => {\r\n\t\t\t\t\tthis.features = fc;\r\n\t\t\t  \r\n\t\t\t\t\tif (this.features != undefined) {\r\n\t\t\t\t\t  this.featureList = this.features.features;\r\n\t\t\t\t\t}\r\n\t\t\t\t  });\r\n\t\t\t  }\r\n\r\n  // getProjects(): void {\r\n  //  this.http.get<Project[]>(environment.apiUrl + `/projects/`).subscribe( resp => {\r\n  //    this._projects.next(resp);\r\n  //  });\r\n  // }\r\n\r\n  // addForm(formList: Array<any>): void {\r\n  //\tthis._forms.formList.next(formList);\r\n  // }\r\n\r\n  // addForm(formObj: Group[]): void {\r\n  // TODO This should be stored in projects api later on (or not)\r\n  // addForm(groupName: string, formGroup: Group, formList: Array<any>): void {\r\n  // addForm(formObj: Array<Group>): void {\r\n  addForm(groupName: string, formItem: any): void {\r\n\tthis.forms.pipe(\r\n\t  first(),\r\n\t  map(groupList => {\r\n\t\treturn groupList.map(groupObj => {\r\n\t\t  if (groupObj.groupName == groupName) {\r\n\t\t\tgroupObj.formList.push(formItem);\r\n\t\t  }\r\n\t\t  return groupObj;\r\n\t\t});\r\n\t  })).subscribe(current => {this._forms.next(current);/*console.log(\"AYA\"); console.log(this._forms); console.log(current)*/});\r\n\r\n\r\n\tthis.changeGroupForm(groupName);\r\n  }\r\n\r\n  updateFormItem() {\r\n\tlet group: any = {};\r\n\r\n\tif (this._activeFormList.value) {\r\n\t  this._activeFormList.value.forEach(e =>\r\n\t\tgroup[e.label] = e.required ? new FormControl(e.value || '', Validators.required)\r\n\t\t: new FormControl(e.value || '')\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\r\n\t  this._formGroup.next(new FormGroup(group));\r\n\t}\r\n  }\r\n\r\n  changeGroupForm(groupName: string) {\r\n\tthis.forms.pipe(\r\n\t  first(),\r\n\t  map(groupList => groupList.map(groupObj => {\r\n\t\tif (groupObj.groupName == groupName) {\r\n\t\t  return groupObj.formList;\r\n\t\t}\r\n\t  }))).subscribe(current => {this._activeFormList.next(current.find(e => e != undefined))});\r\n\r\n\tthis.updateFormItem();\r\n  }\r\n\r\n  checkDefault(selectedColor:string){\r\n\tif(selectedColor === \"default\") {\r\n\t\ttry {\r\n\t\t\tselectedColor = this.selectedFeature.properties.style.color\r\n\t\t} catch (error) {\r\n\t\t\tselectedColor = \"#00C8FF\"\r\n\t\t}\r\n\t}\r\n\treturn selectedColor\r\n  }\r\n\r\n  //Inputs:\r\n  //color:string A 7 digit hexadecimal string (#RRGGBB) passed in from a color tag\r\n  //This method accesses group services to retrive the current group's icon as well\r\n  saveStyles(selectedColor:string, currentID:number){\r\n\tlet icon:string\r\n\tlet payload\r\n\r\n\t//A check to see if the color isn't supposed to be changed\r\n\tselectedColor = this.checkDefault(selectedColor)\r\n\r\n\t//Cycles through each group until it finds one that matches the active group\r\n\tthis.groupList.forEach(group => {\r\n\t\tif ((group.name === this.activeGroup)) {\r\n\t\t\ticon = group.icon\r\n\r\n\t\t\t//Creates a temporary group with a copy of the current groups info\r\n\t\t\tlet tempGroup = [{\r\n\t\t\t\tname: group.name,\r\n\t\t\t\tcolor: group.color,\r\n\t\t\t\ticon: group.icon\r\n\t\t\t}]\r\n\t\t\t\r\n\t\t\t//And adds the temp group to a payload along with the necessary style infromation\r\n\t\t\tpayload = {\r\n\t\t\t\tgroup: tempGroup,\r\n\t\t\t\tstyle: {\r\n\t\t\t\t\tfaIcon: icon,\r\n\t\t\t\t\tcolor: selectedColor\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tconsole.log(payload)\r\n\t//Finally, sends the payload and projectID to GeoAPI to update the feature\r\n\tthis.geoDataService.updateFeatureProperty(this.selectedProject.id, currentID ,payload)\r\n  }\r\n\r\n  addGroup(groupName: string) {\r\n\tlet groupObject = new Group();\r\n\tgroupObject.formList = [];\r\n\r\n\tgroupObject.groupName = groupName;\r\n\r\n\tthis.forms.pipe(\r\n\t  first()\r\n\t).subscribe(current => {\r\n\t\tcurrent.push(groupObject);\r\n\t\tthis._forms.next(current);\r\n\t});\r\n  }\r\n\r\n  deleteForm(groupName: string, form: any) {\r\n\tthis.forms.pipe(\r\n\t  first(),\r\n\t  map(groupList => groupList.map(groupObj => {\r\n\t\tif (groupObj.groupName == groupName) {\r\n\t\t  groupObj.formList = groupObj.formList.filter(formItem => formItem.label != form.label);\r\n\t\t}\r\n\t\treturn groupObj\r\n\t  }))).subscribe(current => this._forms.next(current));\r\n\r\n\tthis.forms.pipe(\r\n\t  first(),\r\n\t  map(groupList => groupList.map(groupObj => {\r\n\t\tif (groupObj.groupName == groupName) {\r\n\t\t  return groupObj.formList.filter(formItem => formItem.label != form.label);\r\n\t\t}\r\n\t  }))).subscribe(current => {this._activeFormList.next(current.find(e => e != undefined))});\r\n\r\n\tthis.changeGroupForm(groupName);\r\n  };\r\n\r\n  renameForm(groupName: string, form: any, label: string) {\r\n\tthis.forms.pipe(\r\n\t  first(),\r\n\t  map(groupList => groupList.map(groupObj => {\r\n\t\tif (groupObj.groupName == groupName) {\r\n\t\t  groupObj.formList.forEach(formItem => {\r\n\t\t\tif (formItem.label == form.label) {\r\n\t\t\t  formItem.label = label;\r\n\t\t\t}\r\n\t\t  });\r\n\t\t}\r\n\t\treturn groupObj\r\n\t  }))).subscribe(current => {this._forms.next(current);});\r\n\r\n\tthis.forms.pipe(\r\n\t  first(),\r\n\t  map(groupList => groupList.map(groupObj => {\r\n\t\tif (groupObj.groupName == groupName) {\r\n\t\t  groupObj.formList.forEach(formItem => {\r\n\t\t\tif (formItem.label == form.label) {\r\n\t\t\t  formItem.label = label;\r\n\t\t\t}\r\n\t\t  });\r\n\t\t}\r\n\t\treturn groupObj.formList;\r\n\t  }))).subscribe(current => {this._activeFormList.next(current.find(e => e != undefined))});\r\n\r\n\tthis.changeGroupForm(groupName);\r\n  }\r\n\r\n  renameOption(groupName: string, opt: any, form: any, label: string) {\r\n\tthis.forms.pipe(\r\n\t  first(),\r\n\t  map(groupList => groupList.map(groupObj => {\r\n\t\tif (groupObj.groupName == groupName) {\r\n\t\t  groupObj.formList.forEach(formItem => {\r\n\t\t\tif (formItem.label == form.label) {\r\n\t\t\t  formItem.options.forEach(option => {\r\n\t\t\t\tif (option.label == opt.label) {\r\n\t\t\t\t  option.label = label;\r\n\t\t\t\t}\r\n\t\t\t  });\r\n\t\t\t}\r\n\t\t  });\r\n\t\t}\r\n\t\treturn groupObj;\r\n\t  }))).subscribe(current => this._forms.next(current));\r\n\r\n\tthis.forms.pipe(\r\n\t  first(),\r\n\t  map(groupList => groupList.map(groupObj => {\r\n\t\tif (groupObj.groupName == groupName) {\r\n\t\t  groupObj.formList.forEach(formItem => {\r\n\t\t\tif (formItem.label == form.label) {\r\n\t\t\t  formItem.options.forEach(option => {\r\n\t\t\t\tif (option.label == opt.label) {\r\n\t\t\t\t  option.label = label;\r\n\t\t\t\t}\r\n\t\t\t  });\r\n\t\t\t}\r\n\t\t  });\r\n\t\t// return groupList;\r\n\t\t}\r\n\t\treturn groupObj.formList;\r\n\t  }))).subscribe(current => {this._activeFormList.next(current.find(e => e != undefined))});\r\n\t  // }))).subscribe(current => {console.log(current.find(e => e != undefined))});\r\n\r\n\tthis.changeGroupForm(groupName);\r\n  }\r\n\r\n  deleteOption(groupName: string, opt: any, form: any) {\r\n\tthis.forms.pipe(\r\n\t  first(),\r\n\t  map(groupList => groupList.map(groupObj => {\r\n\t\tif (groupObj.groupName == groupName) {\r\n\t\t  groupObj.formList.forEach(formItem => {\r\n\t\t\tif (formItem.label == form.label) {\r\n\t\t\t  formItem.options = formItem.options.filter(option => option.label != opt.label);\r\n\t\t\t}\r\n\t\t  });\r\n\t\t}\r\n\t\treturn groupObj;\r\n\t  }))).subscribe(current => {this._forms.next(current)});\r\n\r\n\tthis.forms.pipe(\r\n\t  first(),\r\n\t  map(groupList => groupList.map(groupObj => {\r\n\t\tif (groupObj.groupName == groupName) {\r\n\t\t  groupObj.formList.forEach(formItem => {\r\n\t\t\tif (formItem.label == form.label) {\r\n\t\t\t  formItem.options = formItem.options.filter(option => option.label != opt.label);\r\n\t\t\t}\r\n\t\t  });\r\n\t\t}\r\n\t\treturn groupObj.formList;\r\n\t  }))).subscribe(current => {this._activeFormList.next(current.find(e => e != undefined))});\r\n\r\n\tthis.changeGroupForm(groupName);\r\n  }\r\n\r\n  getForm(groupName: string, formObj: Array<Group>): Array<any> {\r\n\tlet groupObj = formObj.filter(groupObj => groupObj.groupName === groupName);\r\n\tlet finalArray = [];\r\n\r\n\tif (groupObj[0] != undefined) {\r\n\t  finalArray = groupObj[0].formList;\r\n\t}\r\n\r\n\treturn finalArray;\r\n  }\r\n\r\n  userTag: tags = {type: \"text\", groupName: \"car\", label:\"Title\", options: [], feature: \"\", extra: []};\r\n  tagData = []\r\n  checkedOptions = []\r\n  chosenTag = [{option:\"\", id: 0},\"\",\"\"]; //chosen option of both Radio Buttons and Color tags. Radio info is stored at [0], Color at [1]\r\n  notebook = []; //Var for storing note tags\r\n\r\n  saveTag(gName: string, tag: tags, tLabel: string): void{\r\n\tconst index = this.tagData.findIndex(item => item.groupName === gName  && item.label === tLabel && item.feature === tag.feature);\r\n\r\n\tif (index > -1) {\r\n\t\t// console.log(\"IT WORKED\")\r\n\t\tthis.tagData[index].label = tag.label;\r\n\t\t// this.tagData[index].options = tag.options;\r\n\t}\r\n\telse {\r\n\t\ttag.groupName = gName;\r\n\t\tthis.tagData.push(tag);\r\n\t\tconsole.log(\"IT WORKED\")\r\n\t\t// this.geoDataService.updateFeatureProperty()\r\n\t\t// console.log(\"Tag data:\")\r\n\t\t// console.log(this.tagData)\r\n\t}\r\n}\r\ngetTags(): tags[]{\r\n\treturn this.tagData;\r\n}\r\n\r\nnewTag: object[] = [];\r\ndeleteTag(gName: string, tag: tags): void{\r\n    // for (let tag in this.tagData){\r\n\t// \tconst index = this.tagData.findIndex(item => item.groupName === gName && item.label === tLabel);\r\n\t// \t// if(tag['groupName'] === gName && tag['label'] === tLabel)\r\n\t// \tconsole.log(tag)\r\n\t// \tif (index > -1) {\r\n\t// \t// delete this.exampleNote[index];\r\n\t// \tthis.tagData.splice(index, 1);\r\n\t// \t}\r\n\t// }\r\n\t// const index = this.tagData.findIndex(item => item.groupName === gName && item.label === tLabel);\r\n\t// \t// if(tag['groupName'] === gName && tag['label'] === tLabel)\r\n\t// \tif (index > -1) {\r\n\t// \t// delete this.exampleNote[index];\r\n\t// \tthis.tagData.splice(index, 1);\r\n\t// \t}\r\n\tconsole.log(tag)\r\n\tlet icon:string\r\n\tlet payload\r\n\tthis.groupList.forEach(group => {\r\n\t\tif (group.name == this.activeGroup) {\r\n\t\t\tthis.tempGroup = group.features;\r\n\t\t\t\ticon = group.icon\r\n\t\r\n\t\t\t\t//Creates a temporary group with a copy of the current groups info\r\n\t\t\t\tlet tempGroup = [{\r\n\t\t\t\t\tname: group.name,\r\n\t\t\t\t\tcolor: group.color,\r\n\t\t\t\t\ticon: group.icon\r\n\t\t\t\t}]\r\n\t\t\t\t\r\n\t\t\t\t//And adds the temp group to a payload along with the necessary style infromation\r\n\t\t\t\tpayload = {\r\n\t\t\t\t\tgroup: tempGroup,\r\n\t\t\t\t\tstyle: {\r\n\t\t\t\t\t\tfaIcon: icon,\r\n\t\t\t\t\t\tcolor: '#00C8FF'\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttag: []\r\n\t\t\t\t}\r\n\t\t\t\tconsole.log(payload.tag)\r\n\t\t\t\r\n\t\t}\r\n\t\t});\r\n\r\n\t\tconsole.log(this.tempGroup)\r\n\t\tfor (let feat of this.tempGroup){\r\n\r\n\t\t\tif(feat.properties.tag != undefined || feat.properties.tag != []){\r\n\t\t\t\t// feat.properties.tag.forEach(tag => {\r\n\t\t\t\t//   this.newTag.push(tag)\r\n\t\t\t\t// });\r\n\t\t\t\tconsole.log(feat.properties)\r\n\t\t\t\tconsole.log(this.activeGroup)\r\n\t\t\t\tfeat.properties.group.forEach(group => {\r\n\t\t\t\t\tif(group.name != this.activeGroup){\r\n\t\t\t\t\t\tlet tempGroup = {\r\n\t\t\t\t\t\t\tname: group.name,\r\n\t\t\t\t\t\t\tcolor: group.color,\r\n\t\t\t\t\t\t\ticon: group.icon\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tpayload.group.push(tempGroup)}\r\n\t\t\t\t});\r\n\t\t\t} \r\n\t\t\t\r\n\t\t\tconsole.log(feat)\r\n\t\t\t//   console.log(typeof(feat.properties.tag))\r\n\t\t\tif(feat.properties.tag != undefined){\r\n\t\t\t\tfeat.properties.tag.forEach(tTag => {\r\n\t\t\t\t\tconsole.log(tTag)\r\n\t\t\t\t\tconsole.log(tag)\r\n\t\t\t\t\t// console.log(tTag != tag)\r\n\t\t\t\t\tconsole.log((tTag.groupName === tag.groupName &&  tTag.label === tag.label &&  tag.type === tag.type))\r\n\t\t\t\t\tif((tTag.groupName === tag.groupName && tTag.label === tag.label &&  tag.type === tag.type)){\r\n\t\t\t\t\t// this.newTag.push(tTag)\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tpayload.tag.push(tTag)\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// payload.tag.push(this.newTag)\r\n\t\t\t\t\r\n\t\t\t\t// console.log(payload)\r\n\t\t\t\t// this.newTag = []\r\n\t\t\t}\r\n\t\t\tthis.geoDataService.updateFeatureProperty(this.selectedProject.id, Number(feat.id), payload)\r\n\t\t\tpayload.tag = []\r\n\t\t}\r\n\r\n\r\n\tconsole.log(payload)\r\n\t// this.newTag = []\r\n\t\r\n}\r\n\r\noptData = []\r\ndeleteOpt(gName:string, opt:object, tag: tags): void {\r\n\tconst index = this.optData.findIndex(item => item.groupName === gName && item.label === tag.label);\r\n\tif (index > -1) {\r\n\t\tconst ind = this.optData[index].options.findIndex(item => item === opt)\r\n\t\tif (ind > -1){\r\n\t\t\tthis.optData[index].options.splice(ind,1);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\naddCheckedOpt(opt:object, id: number, group: string, label:string): void {\r\n\tlet option = { key: opt['key'], label: opt['label'], id: id , group: group, title: label}\r\n\tthis.checkedOptions.push(option)\r\n\tconsole.log(this.checkedOptions)\r\n\tlet icon:string\r\n\tlet payload\r\n\t// let formValueFilter = this.activeFormList.filter(e => e.label == this.formLabel);\r\n\t// if (formValueFilter.length == 0 && this.formLabel.length != 0) {\r\n\tthis.groupList.forEach(tGroup => {\r\n\t\tif (tGroup.name == group) {\r\n\t\t\tthis.tempGroup = tGroup.features;\r\n\t\t\t\ticon = tGroup.icon\r\n\t\r\n\t\t\t\t//Creates a temporary group with a copy of the current groups info\r\n\t\t\t\tlet tempGroup = [{\r\n\t\t\t\t\tname: tGroup.name,\r\n\t\t\t\t\tcolor: tGroup.color,\r\n\t\t\t\t\ticon: tGroup.icon\r\n\t\t\t\t}]\r\n\t\t\t\t\r\n\t\t\t\t//And adds the temp group to a payload along with the necessary style infromation\r\n\t\t\t\tpayload = {\r\n\t\t\t\t\tgroup: tempGroup,\r\n\t\t\t\t\tstyle: {\r\n\t\t\t\t\t\tfaIcon: icon,\r\n\t\t\t\t\t\tcolor: '#00C8FF'\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttag:[]\r\n\t\t\t\t}\r\n\t\t\t\tconsole.log(payload)\r\n\t\t\t\r\n\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tconsole.log(this.tempGroup)\r\n\t\tfor (let feat of this.tempGroup) {\r\n\r\n\t\t\tif(feat.properties.tag != undefined || feat.properties.tag != []){\r\n\t\t\t\t// feat.properties.tag.forEach(tag => {\r\n\t\t\t\t//   this.newTag.push(tag)\r\n\t\t\t\t// });\r\n\t\t\t\tconsole.log(feat.properties)\r\n\t\t\t\tconsole.log(this.activeGroup)\r\n\t\t\t\tfeat.properties.group.forEach(group => {\r\n\t\t\t\t\tif(group.name != this.activeGroup){\r\n\t\t\t\t\t\tlet tempGroup = {\r\n\t\t\t\t\t\t\tname: group.name,\r\n\t\t\t\t\t\t\tcolor: group.color,\r\n\t\t\t\t\t\t\ticon: group.icon\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tpayload.group.push(tempGroup)}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t  \r\n\r\n\t\t\t  // code from here is a mess\r\n\t\t\t  if(feat.properties.tag != undefined){\r\n\t\t\t\tfeat.properties.tag.forEach(tag => {\r\n\t\t\t\t\tif(tag.feature === id && tag.groupName === group){\r\n\t\t\t\t\t\ttag.extra.push(option)\r\n\t\t\t\t\t}\r\n\t\t\t\t  payload.tag.push(tag)\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log(payload)\r\n\t\t\t// console.log(typeof(payload.tag))\r\n\t\t\tthis.geoDataService.updateFeatureProperty(this.selectedProject.id, Number(feat.id), payload)\r\n\t\t\t// Clear out the tag section\r\n\t\t\tpayload.tag = []\r\n\t}\r\n}\r\n\r\ndeleteCheckedOpt(opt:object, id:number, group: string, label: string): void{\r\n\tconst index = this.checkedOptions.findIndex(item => item.label === opt['label'] && item.id === id && item.group === group && item.title === label)\r\n\tthis.checkedOptions.splice(index,1)\r\n\tconsole.log(this.checkedOptions)\r\n\r\n\tlet icon:string\r\n\tlet payload\r\n\t// let formValueFilter = this.activeFormList.filter(e => e.label == this.formLabel);\r\n\t// if (formValueFilter.length == 0 && this.formLabel.length != 0) {\r\n\tthis.groupList.forEach(tGroup => {\r\n\t\tif (tGroup.name == group) {\r\n\t\t\tthis.tempGroup = tGroup.features;\r\n\t\t\t\ticon = tGroup.icon\r\n\t\r\n\t\t\t\t//Creates a temporary group with a copy of the current groups info\r\n\t\t\t\tlet tempGroup = [{\r\n\t\t\t\t\tname: tGroup.name,\r\n\t\t\t\t\tcolor: tGroup.color,\r\n\t\t\t\t\ticon: tGroup.icon\r\n\t\t\t\t}]\r\n\t\t\t\t\r\n\t\t\t\t//And adds the temp group to a payload along with the necessary style infromation\r\n\t\t\t\tpayload = {\r\n\t\t\t\t\tgroup: tempGroup,\r\n\t\t\t\t\tstyle: {\r\n\t\t\t\t\t\tfaIcon: icon,\r\n\t\t\t\t\t\tcolor: '#00C8FF'\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttag:[]\r\n\t\t\t\t}\r\n\t\t\t\tconsole.log(payload)\r\n\t\t\t\r\n\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tconsole.log(this.tempGroup)\r\n\t\tfor (let feat of this.tempGroup) {\r\n\r\n\t\t\tif(feat.properties.tag != undefined || feat.properties.tag != []){\r\n\t\t\t\t// feat.properties.tag.forEach(tag => {\r\n\t\t\t\t//   this.newTag.push(tag)\r\n\t\t\t\t// });\r\n\t\t\t\tconsole.log(feat.properties)\r\n\t\t\t\tconsole.log(this.activeGroup)\r\n\t\t\t\tfeat.properties.group.forEach(group => {\r\n\t\t\t\t\tif(group.name != this.activeGroup){\r\n\t\t\t\t\t\tlet tempGroup = {\r\n\t\t\t\t\t\t\tname: group.name,\r\n\t\t\t\t\t\t\tcolor: group.color,\r\n\t\t\t\t\t\t\ticon: group.icon\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tpayload.group.push(tempGroup)}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t  \r\n\r\n\t\t\t  // code from here is a mess\r\n\t\t\t  if(feat.properties.tag != undefined){\r\n\t\t\t\tfeat.properties.tag.forEach(tag => {\r\n\t\t\t\t\tif(tag.feature === id && tag.groupName === group){\r\n\t\t\t\t\t\tconst index = tag.extra.findIndex(item => item.label === opt['label'] && item.id === id && item.group === group && item.title === label)\r\n\t\t\t\t\t\ttag.extra.splice(index,1)\r\n\t\t\t\t\t}\r\n\t\t\t\t  payload.tag.push(tag)\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log(payload)\r\n\t\t\t// console.log(typeof(payload.tag))\r\n\t\t\tthis.geoDataService.updateFeatureProperty(this.selectedProject.id, Number(feat.id), payload)\r\n\t\t\t// Clear out the tag section\r\n\t\t\tpayload.tag = []\r\n\t}\r\n}\r\n\r\nnewOpt: object[] = [];\r\ngetCheckedOpt(): any[]{\r\n\tthis.newOpt = []\r\n\tfor (let feat of this.featureList){\r\n\t\t//   console.log(typeof(feat.properties.tag))\r\n\t\t  if(feat.properties.tag != undefined){\r\n\t\t\t  feat.properties.tag.forEach(tag => {\r\n\t\t\t\t//   console.log(tag)\r\n\t\t\t\tthis.newOpt.push(tag.extra)\r\n\t\t\t  });\r\n\t\t  }\r\n\t  }\r\n\t//   console.log(this.newOpt)\r\n\treturn this.newOpt;\r\n}\r\n// renameTagOpt(gName:string, opt:object, tag: tags): void {\r\n// \tconst index = this.tagData.findIndex(item => item.groupName === gName  && item.label === tag.label);\r\n// \tif(index >-1) {\r\n// \t\tconst ind = this.tagData[index].options.findIndex(item => item === opt)\r\n// \t\tif (ind > -1){\r\n// \t\t\tconsole.log(opt)\r\n// \t\t\tconsole.log(this.tagData[index].options[ind]);\r\n// \t\t}\r\n// \t}\r\n// }\r\n\r\nradioOptions = []\r\n//Functions for radio buttons componentId=0 is for the radio component, componentId=1 is for color\r\nupdateSelectedRadio(selection:string, componentId: number, feature: number, group: string, label: string){ \r\n\r\n\tlet icon:string\r\n\tlet payload\r\n\t// let formValueFilter = this.activeFormList.filter(e => e.label == this.formLabel);\r\n\t// if (formValueFilter.length == 0 && this.formLabel.length != 0) {\r\n\tthis.groupList.forEach(tGroup => {\r\n\t\tconsole.log(tGroup)\r\n\t\tconsole.log(group)\r\n\t\tif (tGroup.name == group) {\r\n\t\t\tthis.tempGroup = tGroup.features;\r\n\t\t\t\ticon = tGroup.icon\r\n\t\r\n\t\t\t\t//Creates a temporary group with a copy of the current groups info\r\n\t\t\t\tlet tempGroup = [{\r\n\t\t\t\t\tname: tGroup.name,\r\n\t\t\t\t\tcolor: tGroup.color,\r\n\t\t\t\t\ticon: tGroup.icon\r\n\t\t\t\t}]\r\n\t\t\t\t\r\n\t\t\t\t//And adds the temp group to a payload along with the necessary style infromation\r\n\t\t\t\tpayload = {\r\n\t\t\t\t\tgroup: tempGroup,\r\n\t\t\t\t\tstyle: {\r\n\t\t\t\t\t\tfaIcon: icon,\r\n\t\t\t\t\t\tcolor: '#00C8FF'\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttag:[]\r\n\t\t\t\t}\r\n\t\t\t\tconsole.log(payload)\r\n\t\t\t\r\n\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tconsole.log(this.tempGroup)\r\n\t\tfor (let feat of this.tempGroup) {\r\n\r\n\t\t\tif(feat.properties.tag != undefined || feat.properties.tag != []){\r\n\t\t\t\t// feat.properties.tag.forEach(tag => {\r\n\t\t\t\t//   this.newTag.push(tag)\r\n\t\t\t\t// });\r\n\t\t\t\tconsole.log(feat.properties)\r\n\t\t\t\tconsole.log(this.activeGroup)\r\n\t\t\t\tfeat.properties.group.forEach(group => {\r\n\t\t\t\t\tif(group.name != this.activeGroup){\r\n\t\t\t\t\t\tlet tempGroup = {\r\n\t\t\t\t\t\t\tname: group.name,\r\n\t\t\t\t\t\t\tcolor: group.color,\r\n\t\t\t\t\t\t\ticon: group.icon\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tpayload.group.push(tempGroup)}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t  \r\n\r\n\t\t\t  // code from here is a mess\r\n\t\t\t  if(feat.properties.tag != undefined){\r\n\t\t\t\tfeat.properties.tag.forEach(tag => {\r\n\t\t\t\t\tif(tag.feature === feature && tag.groupName === group){\r\n\t\t\t\t\t\tconst index = tag.extra.findIndex(item => item['id'] === feature && item['compId'] === componentId && item['groupName'] === group && item['label'] === label);\r\n\t\t\t\t\t\t// const index = tag.extra.findIndex(item => item.label === opt['label'] && item.id === id && item.group === group)\r\n\r\n\t\t\t\t\t\tif(index > -1){\r\n\t\t\t\t\t\t\ttag.extra[index]['option'] = selection\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tlet rOption = {option: selection, id: feature, compId: componentId, groupName: group, label: label}\r\n\t\t\t\t\t\t\ttag.extra.push(rOption)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t  payload.tag.push(tag)\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// console.log(typeof(payload.tag))\r\n\t\t\tthis.geoDataService.updateFeatureProperty(this.selectedProject.id, Number(feat.id), payload)\r\n\t\t\t// Clear out the tag section\r\n\t\t\tpayload.tag = []\r\n\t}\r\n\r\n\t// if (index > -1) {\r\n\t// \t// console.log(\"IT WORKED\")\r\n\t// \tthis.radioOptions[index]['option'] = selection;\r\n\t// \t// this.tagData[index].options = tag.options;\r\n\t// }\r\n\t// else {\r\n\t// \tlet rOption = {option: selection, id: feature, compId: componentId} \r\n\t// \tthis.radioOptions.push(rOption);\r\n\t// \t// console.log(\"Tag data:\")\r\n\t// \t// console.log(this.tagData)\r\n\t// }\r\n\t// this.chosenTag[componentId] = {option: selection, id:id}; \r\n}\r\n\r\ngetSelectedRadio(): any[] { \r\n\tthis.newOpt = []\r\n\tfor (let feat of this.featureList){\r\n\t\t//   console.log(typeof(feat.properties.tag))\r\n\t\t  if(feat.properties.tag != undefined){\r\n\t\t\t  feat.properties.tag.forEach(tag => {\r\n\t\t\t\t//   console.log(tag)\r\n\t\t\t\tthis.newOpt.push(tag.extra)\r\n\t\t\t  });\r\n\t\t  }\r\n\t  }\r\n\t//   console.log(this.newOpt)\r\n\treturn this.newOpt;\r\n }\r\n\r\n//Notes tag functions\r\nupdateNotes(change, componentID: number, feature: number, group:string, label:string){\r\n\t// const index = this.radioOptions.findIndex(item => item['id'] === feature);\r\n\tlet icon:string\r\n\tlet payload\r\n\t// let formValueFilter = this.activeFormList.filter(e => e.label == this.formLabel);\r\n\t// if (formValueFilter.length == 0 && this.formLabel.length != 0) {\r\n\tthis.groupList.forEach(tGroup => {\r\n\t\t// console.log(tGroup)\r\n\t\t// console.log(group)\r\n\t\tif (tGroup.name == group) {\r\n\t\t\tthis.tempGroup = tGroup.features;\r\n\t\t\t\ticon = tGroup.icon\r\n\t\r\n\t\t\t\t//Creates a temporary group with a copy of the current groups info\r\n\t\t\t\tlet tempGroup = [{\r\n\t\t\t\t\tname: tGroup.name,\r\n\t\t\t\t\tcolor: tGroup.color,\r\n\t\t\t\t\ticon: tGroup.icon\r\n\t\t\t\t}]\r\n\t\t\t\t\r\n\t\t\t\t//And adds the temp group to a payload along with the necessary style infromation\r\n\t\t\t\tpayload = {\r\n\t\t\t\t\tgroup: tempGroup,\r\n\t\t\t\t\tstyle: {\r\n\t\t\t\t\t\tfaIcon: icon,\r\n\t\t\t\t\t\tcolor: '#00C8FF'\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttag:[]\r\n\t\t\t\t}\r\n\t\t\t\t// console.log(payload)\r\n\t\t\t\r\n\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tconsole.log(this.tempGroup)\r\n\t\tfor (let feat of this.tempGroup) {\r\n\r\n\t\t\tif(feat.properties.tag != undefined || feat.properties.tag != []){\r\n\t\t\t\t// feat.properties.tag.forEach(tag => {\r\n\t\t\t\t//   this.newTag.push(tag)\r\n\t\t\t\t// });\r\n\t\t\t\tconsole.log(feat.properties)\r\n\t\t\t\tconsole.log(this.activeGroup)\r\n\t\t\t\tfeat.properties.group.forEach(group => {\r\n\t\t\t\t\tif(group.name != this.activeGroup){\r\n\t\t\t\t\t\tlet tempGroup = {\r\n\t\t\t\t\t\t\tname: group.name,\r\n\t\t\t\t\t\t\tcolor: group.color,\r\n\t\t\t\t\t\t\ticon: group.icon\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tpayload.group.push(tempGroup)}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t  \r\n\r\n\t\t\t  // code from here is a mess\r\n\t\t\t  if(feat.properties.tag != undefined){\r\n\t\t\t\tfeat.properties.tag.forEach(tag => {\r\n\t\t\t\t\tif(tag.feature === feature && tag.groupName === group){\r\n\t\t\t\t\t\tconst index = tag.extra.findIndex(item => item['id'] === feature && item['compID'] === componentID && item['groupName'] === group  && item['label'] === label);\r\n\t\t\t\t\t\t// const index = tag.extra.findIndex(item => item.label === opt['label'] && item.id === id && item.group === group)\r\n\r\n\t\t\t\t\t\tif(index > -1){\r\n\t\t\t\t\t\t\tconsole.log(tag.extra)\r\n\t\t\t\t\t\t\tconsole.log(tag.extra[index])\r\n\t\t\t\t\t\t\ttag.extra[index]['option'] = change\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tlet rOption = {option: change, id: feature, groupName: group, compID: componentID, label:label} \r\n\t\t\t\t\t\t\tconsole.log(rOption)\r\n\t\t\t\t\t\t\ttag.extra.push(rOption);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t  payload.tag.push(tag)\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// console.log(typeof(payload.tag))\r\n\t\t\tthis.geoDataService.updateFeatureProperty(this.selectedProject.id, Number(feat.id), payload)\r\n\t\t\t// Clear out the tag section\r\n\t\t\tpayload.tag = []\r\n\t\t}\r\n\t// if (index > -1) {\r\n\t// \t// console.log(\"IT WORKED\")\r\n\t// \tthis.notebook[index]['option'] = change\r\n\t// }\r\n\t// else {\r\n\t// \tlet rOption = {option: change, id: feature, groupName: group} \r\n\t// \tthis.notebook.push(rOption);\r\n\t// \t// console.log(this.tagData)\r\n\t// }\r\n}\r\n\r\ngetNotes(): any[]{ return this.notebook }\r\n}\r\n\r\n\r\n\r\nexport interface tags {\r\n\ttype: string,\r\n\tgroupName: string,\r\n\tlabel: string,\r\n\toptions: Array<Group>,\r\n\tfeature: string | number,\r\n\textra: Array<Group>\r\n}","import { Component, OnInit, TemplateRef, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormsService, tags } from '../../../services/forms.service';\r\nimport { GroupsService } from '../../../services/groups.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { Feature, Project } from 'src/app/models/models';\r\nimport { feature } from '@turf/turf';\r\nimport { GeoDataService } from 'src/app/services/geo-data.service';\r\nimport { ProjectsService } from 'src/app/services/projects.service';\r\nimport { FeatureCollection } from 'geojson';\r\n\r\n\r\n@Component({\r\n  selector: 'app-tag-generator',\r\n  templateUrl: './tag-generator.component.html',\r\n  styleUrls: ['./tag-generator.component.scss']\r\n})\r\nexport class TagGeneratorComponent implements OnInit {\r\n  formLabel: string;\r\n  formOptions: Array<any> = [];\r\n  selectedGroup: string;\r\n  showOpt: string;\r\n  formType: string;\r\n  changed: boolean = false;\r\n  labelFilter: string;\r\n  formItemList: Array<any> = [];\r\n  activeGroup: string;\r\n  optionFilter: string;\r\n  formName: string;\r\n  formValue: string;\r\n  formRequired: boolean;\r\n  openOption: any = {};\r\n  enabledControls: Array<string> = [];\r\n  showSubitem: boolean = true;\r\n  activeFormList: Array<any>;\r\n  groupList: Array<any>;\r\n  groups$: Subscription;\r\n  tempGroup: Array<Feature>;\r\n  private selectedProject;\r\n  featureList: Array<any> = [];\r\n  features: FeatureCollection;\r\n  newTag: object[] = [];\r\n  newGroup:object[] = [];\r\n\r\n  constructor(\r\n\tprivate formsService: FormsService,\r\n\tprivate groupsService: GroupsService,\r\n\tprivate dialog: MatDialog,\r\n\tprivate router: Router,\r\n\tprivate geoDataService: GeoDataService,\r\n\tprivate projectsService: ProjectsService,) { }\r\n\r\n  ngOnInit() {\r\n\tthis.groupsService.activeGroup.subscribe((next) => {\r\n\t  this.activeGroup = next;\r\n\t});\r\n\r\n\tthis.formsService.activeFormList.subscribe((next) => {\r\n\t  this.activeFormList = next;\r\n\t});\r\n\r\n\tthis.groups$ = this.groupsService.groups.subscribe((next) => {\r\n\t\tthis.groupList = next;\r\n\t  });\r\n\r\n\tthis.projectsService.activeProject.subscribe(next => {\r\n\t\tthis.selectedProject = next;\r\n\t\t//retrieves uuid for project, formats result into a link to that Hazmapper map\r\n\t\t// this.hazMapperLink = \"https://hazmapper.tacc.utexas.edu/hazmapper/project/\" + next.uuid\r\n\t});\r\n\r\n\tthis.geoDataService.features.subscribe( (fc: FeatureCollection) => {\r\n\t\tthis.features = fc;\r\n  \r\n\t\tif (this.features != undefined) {\r\n\t\t  this.featureList = this.features.features;\r\n\t\t//   this.groupsService.setActiveProject(this.featureList[0]);\r\n  \r\n\t\t  // TODO This should activate persistence by looping through all features and creating new groups and\r\n\t\t  //\r\n\t\t//   this.groupsService.setGroupProperties(this.featureList);\r\n  \r\n\t\t  // console.log(this.featureList[this.activeFeatureNum].assets[0].path);\r\n\t\t  // this.activeFeature = this.featureList[this.activeFeatureNum];\r\n\t\t}\r\n\t  });\r\n\r\n\r\n\tthis.formOptions = [];\r\n\tthis.formItemList = [];\r\n\tthis.formType = 'text';\r\n\tthis.formName = '';\r\n\tthis.formLabel = '';\r\n\tthis.formValue = '';\r\n\tthis.formRequired = false;\r\n\tthis.enabledControls = [\"Text\", \"Checkbox\", \"Radio\", \"Dropdown\", \"Color\"];\r\n  }\r\n\r\n  inputFormLabel (event: any) {\r\n\t// this.formLabel = event.target.value.toLowerCase();\r\n\tthis.formLabel = event.target.value;\r\n  }\r\n\r\n  addOptionItem(value: string) {\r\n\tif (value) {\r\n\t  let formWithValue = this.formOptions.filter(e => e.label == value);\r\n\t  if (formWithValue.length == 0 && value.length != 0) {\r\n\t\tthis.formOptions.push({\r\n\t\t  key: value[0],\r\n\t\t  label: value,\r\n\t\t});\r\n\t  }\r\n\t}\r\n  }\r\n\r\n  deleteOption(opt: any) {\r\n\tthis.formOptions = this.formOptions.filter(option => option.label != opt.label);\r\n  }\r\n\r\n  openRenameModal(template: TemplateRef<any>, name: string) {\r\n\tthis.selectedGroup = name;\r\n\tthis.dialog.open(template);\r\n  }\r\n\r\n  openRenameOptionModal(template: TemplateRef<any>) {\r\n\tthis.dialog.open(template);\r\n  }\r\n\r\n\r\n  renameOption(opt: any, label: string) {\r\n\tif (this.showOpt == \"show-option\") {\r\n\t  this.showOpt = \"no-show-option\";\r\n\t} else {\r\n\t  this.showOpt = \"show-option\";\r\n\t}\r\n\r\n\tlabel = label.toLowerCase();\r\n\tthis.formOptions.forEach(e => {\r\n\t  if (e.label == opt.label) {\r\n\t\te.label = label;\r\n\t  }\r\n\t});\r\n  }\r\n\r\n  selectInputForm (name: string) {\r\n\tthis.formType = name;\r\n\tthis.formLabel = '';\r\n\tthis.formOptions = [];\r\n  }\r\n\r\n  clearOption() {\r\n\tthis.optionFilter = '';\r\n  }\r\n\r\n  clearLabel() {\r\n\tthis.labelFilter = '';\r\n  }\r\n\r\n  addFormItem() {\r\n\tlet icon:string\r\n\tlet payload\r\n\t// let formValueFilter = this.activeFormList.filter(e => e.label == this.formLabel);\r\n\t// if (formValueFilter.length == 0 && this.formLabel.length != 0) {\r\n\tthis.groupList.forEach(group => {\r\n\t\tif (group.name == this.activeGroup) {\r\n\t\t\tthis.tempGroup = group.features;\r\n\t\t\t\ticon = group.icon\r\n\t\r\n\t\t\t\t//Creates a temporary group with a copy of the current groups info\r\n\t\t\t\tlet tempGroup = [{\r\n\t\t\t\t\tname: group.name,\r\n\t\t\t\t\tcolor: group.color,\r\n\t\t\t\t\ticon: group.icon\r\n\t\t\t\t}]\r\n\t\t\t\t\r\n\t\t\t\t//And adds the temp group to a payload along with the necessary style infromation\r\n\t\t\t\tpayload = {\r\n\t\t\t\t\tgroup: tempGroup,\r\n\t\t\t\t\tstyle: {\r\n\t\t\t\t\t\tfaIcon: icon,\r\n\t\t\t\t\t\tcolor: '#00C8FF'\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttag:[]\r\n\t\t\t\t}\r\n\t\t\t\t// console.log(payload)\r\n\t\t\t\r\n\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tconsole.log(this.groupList)\r\n\r\n\r\n\t\tconsole.log(this.tempGroup)\r\n\t\tfor (let feat of this.tempGroup) {\r\n\r\n\t\t\tconsole.log(this.groupList)\r\n\r\n\t\t\tif(feat.properties.tag != undefined || feat.properties.tag != []){\r\n\t\t\t\t// feat.properties.tag.forEach(tag => {\r\n\t\t\t\t//   this.newTag.push(tag)\r\n\t\t\t\t// });\r\n\t\t\t\t// console.log(feat.properties)\r\n\t\t\t\t// console.log(this.activeGroup)\r\n\t\t\t\tif(feat.properties.group.length > 1){\r\n\t\t\t\t\tfeat.properties.group.forEach(group => {\r\n\t\t\t\t\t\tif(group.name != this.activeGroup){\r\n\t\t\t\t\t\t\tlet tempGroup = {\r\n\t\t\t\t\t\t\t\tname: group.name,\r\n\t\t\t\t\t\t\t\tcolor: group.color,\r\n\t\t\t\t\t\t\t\ticon: group.icon\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpayload.group.push(tempGroup)\r\n\t\t\t\t\t\tconsole.log(this.groupList)\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"duck\")\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// console.log(this.newGroup)\r\n\t\t\t// console.log(this.newTag)\r\n\t\t\t  \r\n\t\t\tlet formItem: tags = {\r\n\t\t\t\ttype: this.formType,\r\n\t\t\t\tgroupName: this.formName,\r\n\t\t\t\tlabel: this.formLabel,\r\n\t\t\t\t// value: this.formValue,\r\n\t\t\t\t// required: this.formRequired,\r\n\t\t\t\toptions: [],\r\n\t\t\t\tfeature: feat.id,\r\n\t\t\t\textra: []\r\n\t\t\t}\r\n\t\t\tthis.openOption[this.formLabel] = false;\r\n\r\n\t\t\tif (this.formType !== \"text\" && this.formOptions.length != 0) {\r\n\t\t\t\tlet myOpts = [];\r\n\t\t\t\tfor (const opt of this.formOptions) {\r\n\t\t\t\t  myOpts.push({\r\n\t\t\t\t\tkey: opt[0],\r\n\t\t\t\t\tlabel: opt,\r\n\t\t\t\t\t// image:\r\n\t\t\t\t  })\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tformItem.options = this.formOptions;\r\n\t\t\t  }\r\n\r\n\t\t\t  // code from here is a mess\r\n\t\t\t  if(feat.properties.tag != undefined){\r\n\t\t\t\tfeat.properties.tag.forEach(tag => {\r\n\t\t\t\t  payload.tag.push(tag)\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// payload.group.push(this.groupList)\r\n\r\n\t\t\t// feat.properties.group.forEach(groupList => {\r\n\t\t\t// \tpayload.group.push(groupList)\r\n\t\t\t// });\r\n\r\n\t\t\tconsole.log(this.groupList)\r\n\r\n\t\t\t//   console.log(payload)\r\n\t\t\t//   console.log(feat.id)\r\n\t\t\t// console.log(typeof(formItem))\r\n\t\t\t// payload.tag.push(this.newTag)\r\n\t\t\t// console.log(payload.tag[0])\r\n\t\t\t// console.log(!payload.tag[0].hasOwnProperty(\"groupName\"))\r\n\t\t\tif(payload.tag[0] == undefined ){\r\n\t\t\t\tpayload.tag[0] = formItem\r\n\t\t\t}else{\r\n\t\t\t\tif(!payload.tag[0].hasOwnProperty(\"groupName\")){payload.tag[0] = formItem}\r\n\t\t\t\telse {payload.tag.push(formItem)}\r\n\t\t\t}\r\n\t\t\t// console.log(typeof(payload.tag))\r\n\t\t\t// console.log(payload)\r\n\r\n\t\t\tconsole.log(this.groupList)\r\n\r\n\t\t\tthis.formItemList.push(formItem);\r\n\t\t\t// this.formsService.addForm(this.activeGroup, formItem);\r\n\t\t\t  this.formsService.saveTag(this.activeGroup, formItem, formItem.label)\r\n\t\t\tthis.geoDataService.updateFeatureProperty(this.selectedProject.id, Number(feat.id), payload)\r\n\t\t\t// Clear out the tag section\r\n\t\t\t\r\n\t\t\tconsole.log(this.groupList)\r\n\t\t\t\r\n\t\t\tpayload.tag = []\r\n\t\t\tthis.newGroup = []\r\n\t}\r\n\r\n\t  this.formLabel = '';\r\n\t  this.formOptions = [];\r\n\t  this.labelFilter = '';\r\n\t  this.changed = true;\r\n\t  \r\n\t  console.log(this.featureList)\r\n\t  \r\n\t  this.groupsService.setActivePane(\"tagger\");\r\n\t  this.router.navigateByUrl('/tagger', {skipLocationChange: true});\r\n\t// }\r\n  }\r\n\r\n  cancelCreate() {\r\n\tthis.groupsService.setActivePane(\"tagger\");\r\n\tthis.router.navigateByUrl('/tagger', {skipLocationChange: true});\r\n  }\r\n\r\n  expandPanel() {\r\n\tthis.showSubitem = !this.showSubitem;\r\n\tif (this.showSubitem) {\r\n\r\n\t} else {\r\n\t}\r\n  }\r\n}\r\n","import { Component, OnInit, OnDestroy, TemplateRef} from '@angular/core';\r\nimport { GroupsService } from '../../../services/groups.service';\r\nimport { FormsService, tags } from '../../../services/forms.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { GeoDataService } from 'src/app/services/geo-data.service';\r\nimport { FeatureCollection } from 'geojson';\r\n\r\n@Component({\r\n  selector: 'app-tag-images',\r\n  templateUrl: './tag-images.component.html',\r\n  styleUrls: ['./tag-images.component.scss']\r\n})\r\nexport class TagImagesComponent implements OnInit {\r\n  activeGroup: string;\r\n  payload: any;\r\n  selectedGroup: string;\r\n  openOption: any = {};\r\n  activeFeatureId: number;\r\n  private formGroup$: Subscription;\r\n  private activeGroup$: Subscription;\r\n  private activeFeatureId$: Subscription;\r\n  form: FormGroup;\r\n  showSubitem: boolean = true;\r\n  tagList: tags[] = this.formsService.getTags();\r\n  newTag: tags[] = [];\r\n  featureList: Array<any> = [];\r\n  features: FeatureCollection;\r\n\r\n  constructor(\r\n\tprivate groupsService: GroupsService,\r\n\tprivate formsService: FormsService,\r\n\tprivate dialog: MatDialog,\r\n\tprivate router: Router,\r\n\tprivate geoDataService: GeoDataService,) { }\r\n\r\n  ngOnInit() {\r\n\tthis.activeGroup$ = this.activeGroup$ = this.groupsService.activeGroup.subscribe((next) => {\r\n\t  this.activeGroup = next;\r\n\t});\r\n\r\n\tthis.activeFeatureId$ = this.groupsService.activeFeatureId.subscribe((next) => {\r\n\t  this.activeFeatureId = next;\r\n\t});\r\n\r\n\tthis.formGroup$ = this.formsService.formGroup.subscribe((next) => {\r\n\t  this.form = next;\r\n\t});\r\n\r\n\tthis.geoDataService.features.subscribe( (fc: FeatureCollection) => {\r\n\t\tthis.features = fc;\r\n  \r\n\t\tif (this.features != undefined) {\r\n\t\t  this.featureList = this.features.features;\r\n\t\t}\r\n\t  });\r\n\r\n\t  // this is to get the list of tags so far\r\n\t  for (let feat of this.featureList){\r\n\t\t//   console.log(typeof(feat.properties.tag))\r\n\t\t  if(feat.properties.tag != undefined){\r\n\t\t\t  feat.properties.tag.forEach(tag => {\r\n\t\t\t\t//   console.log(tag)\r\n\t\t\t\tthis.newTag.push(tag)\r\n\t\t\t  });\r\n\t\t  }\r\n\t  }\r\n\r\n\t//   console.log(this.newTag)\r\n\t//   console.log(this.tagList)\r\n  }\r\n\r\n  openRenameModal(template: TemplateRef<any>, name: string) {\r\n\tthis.selectedGroup = name;\r\n\tthis.dialog.open(template);\r\n  }\r\n\r\n  openRenameOptionModal(template: TemplateRef<any>) {\r\n\tthis.dialog.open(template);\r\n  }\r\n\r\n  openOptionToggle(label: string) {\r\n\tif (this.openOption[label]) {\r\n\t  this.openOption[label] = false;\r\n\t} else {\r\n\t  this.openOption[label] = true;\r\n\t}\r\n  }\r\n\r\n  createNewTag() {\r\n\tconsole.log(this.tagList)\r\n\t  this.groupsService.setActivePane(\"preset\");\r\n\t  this.router.navigateByUrl('/preset', {skipLocationChange: true});\r\n  }\r\n\r\n  onSubmit() {\r\n\tthis.payload = this.form.getRawValue();\r\n\t// console.log(this.payload);\r\n\t// this.groupsService.setTagFeatureGroup(this.activeGroup, this.activeFeatureId, this.payload);\r\n\t// console.log(this.form)\r\n\t// this.formsService.saveTag(this.activeGroup, this.form.value, this.payload)\r\n\tconsole.log(this.tagList)\r\n  }\r\n\r\n  ngOnDestroy() {\r\n\tthis.formGroup$.unsubscribe();\r\n\tthis.activeFeatureId$.unsubscribe();\r\n\tthis.activeGroup$.unsubscribe();\r\n  }\r\n\r\n  expandPanel() {\r\n\tthis.showSubitem = !this.showSubitem;\r\n\tif (this.showSubitem) {\r\n\r\n\t} else {\r\n\t}\r\n  }\r\n}\r\n","import {Injectable, NgModule} from '@angular/core';\r\nimport {Routes, RouterModule, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot} from '@angular/router';\r\nimport { NotFoundComponent} from './components/notfound/notfound.component';\r\nimport {AuthService} from './services/authentication.service';\r\nimport {MainComponent} from './components/main/main.component';\r\nimport { CallbackComponent } from './components/callback/callback.component';\r\nimport { ImageGalleryComponent } from './components/image-gallery/image-gallery.component';\r\n// import { TaggerComponent } from './components/tagger/tagger.component';\r\n// import { PresetGeneratorComponent } from './components/preset-generator/preset-generator.component';\r\nimport { TagGeneratorComponent } from './components/side-bar/tag-generator/tag-generator.component';\r\nimport { TagImagesComponent } from './components/side-bar/tag-images/tag-images.component';\r\n\r\n@Injectable()\r\nexport class Activate implements CanActivate {\r\n  constructor(private authSvc: AuthService) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean  {\r\n\t if (this.authSvc.isLoggedIn()) {\r\n\t   return true;\r\n\t }\r\n\t this.authSvc.login();\r\n  }\r\n}\r\n\r\n\r\nconst routes: Routes = [\r\n  {path: '', component: MainComponent, canActivate: [Activate], children: [\r\n\t// {path: '', redirectTo: '/tagger', pathMatch: 'full'},\r\n\t// TODO IAN cache value on parent route\r\n\t// {path: 'gallery', component: ImageGalleryComponent, canActivateChild: [Activate]},\r\n\t// {path: 'tagger', component: TaggerComponent, canActivateChild: [Activate]},\r\n\t// {path: 'preset', component: PresetGeneratorComponent, canActivateChild: [Activate]}\r\n\r\n\t{path: 'tagger', component: TagImagesComponent, canActivateChild: [Activate]},\r\n\t{path: 'preset', component: TagGeneratorComponent, canActivateChild: [Activate]}\r\n  ]},\r\n\r\n  {path: 'callback', component: CallbackComponent},\r\n  {path: '404', component: NotFoundComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, {onSameUrlNavigation: 'reload'})],\r\n  exports: [RouterModule],\r\n  providers: [Activate]\r\n})\r\nexport class AppRoutingModule { }\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {AuthService} from './services/authentication.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'viewer';\r\n\r\n  constructor(private authService: AuthService) {}\r\n\r\n  ngOnInit() {\r\n\tthis.authService.login();\r\n  }\r\n}\r\n","import {CircleMarker, circleMarker, divIcon, LatLng, Marker, marker} from \"leaflet\";\r\nimport {Feature} from \"../models/models\";\r\n\r\nfunction createCircleMarker (feature: Feature, latlng: LatLng): CircleMarker {\r\n  let options = {\r\n    radius: 8,\r\n    fillColor: \"#d3d3d3\",\r\n    color: \"black\",\r\n    weight: 1,\r\n    opacity: 1,\r\n    fillOpacity: 0.8\r\n  };\r\n  return circleMarker( latlng, options );\r\n}\r\n\r\nfunction createImageMarker (feature: Feature, latlng: LatLng): Marker {\r\n  let divHtml = \"<i class='fas fa-camera-retro fa-2x light-blue'></i>\";\r\n  let ico = divIcon({className: 'leaflet-fa-marker-icon', html: divHtml});\r\n  return marker(latlng, {icon: ico});\r\n}\r\n\r\nfunction createCollectionMarker (feature: Feature, latlng: LatLng) : Marker {\r\n  let divHtml = '<i class=\"fa fa-folder-open fa-2x light-blue\"></i>';\r\n  let ico = divIcon({className: 'icon-marker', html: divHtml});\r\n  return marker(latlng, {icon: ico});\r\n}\r\nfunction createVideoMarker (feature: Feature, latlng: LatLng): Marker {\r\n  let divHtml = \"<i class='fas fa-video fa-2x light-blue'></i>\";\r\n  let ico = divIcon({className: 'leaflet-fa-marker-icon', html: divHtml});\r\n  return marker(latlng, {icon: ico});\r\n}\r\n\r\nexport function createMarker(feature: Feature, latlng: LatLng) : Marker {\r\n  let marker;\r\n  if (feature.featureType() == 'image') {\r\n    marker = createImageMarker(feature, latlng);\r\n  } else if (feature.featureType() == 'collection'){\r\n    marker =  createCollectionMarker(feature, latlng);\r\n  } else if (feature.featureType() == 'video') {\r\n    marker = createVideoMarker(feature, latlng)\r\n  }\r\n  else {\r\n    marker = createCircleMarker(feature, latlng)\r\n  }\r\n  return marker;\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as L from 'leaflet';\r\nimport 'leaflet.markercluster';\r\n\r\nimport { GeoDataService} from '../../services/geo-data.service';\r\nimport { createMarker } from '../../utils/leafletUtils';\r\nimport {Feature} from 'geojson';\r\nimport {FeatureGroup, ImageOverlay, LatLng, LeafletMouseEvent} from 'leaflet';\r\nimport * as turf from '@turf/turf';\r\nimport { AllGeoJSON } from '@turf/helpers';\r\nimport {filter, skip} from 'rxjs/operators';\r\nimport {Overlay} from '../../models/models';\r\nimport {AppEnvironment, environment} from '../../../environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-map',\r\n  templateUrl: './map.component.html',\r\n  styleUrls: ['./map.component.scss']\r\n})\r\nexport class MapComponent implements OnInit {\r\n\r\n  map: L.Map;\r\n  mapType = 'normal';\r\n  activeFeature: Feature;\r\n  activeOverlay: Overlay;\r\n  features: FeatureGroup = new FeatureGroup();\r\n  overlays: Map<number, ImageOverlay>;\r\n  environment: AppEnvironment;\r\n\r\n  constructor(private GeoDataService: GeoDataService,\r\n\t\t\t  private route: ActivatedRoute,\r\n\t\t\t  ) {\r\n\r\n\t// Have to bind these to keep this being this\r\n\tthis.featureClickHandler.bind(this);\r\n\tthis.mouseEventHandler.bind(this);\r\n  }\r\n\r\n  ngOnInit() {\r\n\t// const mapType: string = this.route.snapshot.queryParamMap.get('mapType');\r\n\t// this.projectId = +this.route.snapshot.paramMap.get(\"projectId\");\r\n\t// this.cluster = this.route.snapshot.queryParamMap.get('mapType');\r\n\tthis.environment = environment;\r\n\tthis.overlays = new Map();\r\n\tthis.map = new L.Map('map', {\r\n\t center: [40, -80],\r\n\t zoom: 9\r\n\t});\r\n\r\n\tconst baseOSM = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n\t  maxZoom: 19,\r\n\t  attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n\t});\r\n\tconst satellite = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\r\n\t  attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\r\n\t});\r\n\t// default to streetmap view;\r\n\tthis.map.addLayer(baseOSM);\r\n\r\n\tthis.loadFeatures();\r\n\r\n\t// Publish the mouse location on the mapMouseLocation stream\r\n\tthis.map.on('mousemove', (ev: LeafletMouseEvent) => this.mouseEventHandler(ev));\r\n\tthis.GeoDataService.activeOverlay.pipe(skip(1)).subscribe((next) => {\r\n\t  this.addRemoveOverlay(next);\r\n\t});\r\n\r\n\r\n\t// Listen on the activeFeature stream and zoom map to that feature when it changes\r\n\tthis.GeoDataService.activeFeature.pipe(filter(n => n != null)).subscribe( (next) => {\r\n\t  this.activeFeature = next;\r\n\t  const bbox = turf.bbox(<AllGeoJSON> next);\r\n\t  this.map.fitBounds([[bbox[1], bbox[0]], [bbox[3], bbox[2]]]);\r\n\t});\r\n\r\n\t// Listen for changes to the basemap\r\n\tthis.GeoDataService.basemap.pipe(skip(1)).subscribe((next) => {\r\n\t  if (next == 'sat') {\r\n\t\tthis.map.removeLayer(baseOSM);\r\n\t\tthis.map.addLayer(satellite);\r\n\t  }\r\n\t  if (next == 'roads') {\r\n\t\tthis.map.removeLayer(satellite);\r\n\t\tthis.map.addLayer(baseOSM);\r\n\t  }\r\n\t});\r\n  }\r\n\r\n  addRemoveOverlay(ov: Overlay): void {\r\n\tif (this.overlays.has(ov.id)) {\r\n\t  this.features.removeLayer(this.overlays.get(ov.id));\r\n\t  this.overlays.delete(ov.id);\r\n\t} else {\r\n\t  const overlay = L.imageOverlay(environment.apiUrl + '/assets/' + ov.path, [[ov.minLat, ov.minLon], [ov.maxLat, ov.maxLon]]);\r\n\t  this.overlays.set(ov.id, overlay);\r\n\t  this.features.addLayer(overlay);\r\n\t}\r\n\tthis.map.fitBounds(this.features.getBounds());\r\n  }\r\n\r\n\r\n  mouseEventHandler(ev: any): void {\r\n\tthis.GeoDataService.mapMouseLocation = ev.latlng;\r\n  }\r\n\r\n\r\n  /**\r\n   * Load Features for a project.\r\n   */\r\n  loadFeatures() {\r\n\tconst geojsonOptions = {\r\n\t  pointToLayer: createMarker\r\n\t};\r\n\tthis.GeoDataService.features.subscribe(collection => {\r\n\t  this.features.clearLayers();\r\n\t  const markers = L.markerClusterGroup({\r\n\t\ticonCreateFunction: (cluster) => {\r\n\t\t  return L.divIcon({html: `<div><b>${cluster.getChildCount()}</b></div>`, className: 'marker-cluster'});\r\n\t\t}\r\n\t  });\r\n\t  collection.features.forEach( d => {\r\n\t\tconst feat = L.geoJSON(d, geojsonOptions);\r\n\t\tfeat.on('click', (ev) => { this.featureClickHandler(ev); } );\r\n\r\n\t\tif (d.geometry.type == 'Point') {\r\n\t\t  markers.addLayer(feat);\r\n\t\t} else {\r\n\t\t  this.features.addLayer(feat);\r\n\t\t}\r\n\t  });\r\n\t  this.features.addLayer(markers);\r\n\t  this.map.addLayer(this.features);\r\n\t  try {\r\n\t\tthis.map.fitBounds(this.features.getBounds());\r\n\t  } catch (e) {}\r\n\t});\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param ev\r\n   */\r\n  featureClickHandler(ev: any): void {\r\n\tconst f = ev.layer.feature;\r\n\tthis.GeoDataService.activeFeature = f;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {SystemSummary} from 'ng-tapis';\r\nimport { ApiService } from 'ng-tapis';\r\nimport {Observable, ReplaySubject} from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AgaveSystemsService {\r\n\r\n  private baseUrl = 'https://agave.designsafe-ci.org/systems/v2/';\r\n  private _systems: ReplaySubject<SystemSummary[]> = new ReplaySubject<SystemSummary[]>(1);\r\n  public readonly systems: Observable<SystemSummary[]> = this._systems.asObservable();\r\n  private _projects: ReplaySubject<SystemSummary[]> = new ReplaySubject<SystemSummary[]>(1);\r\n  public readonly projects: Observable<SystemSummary[]> = this._projects.asObservable();\r\n  private systemsList: SystemSummary[];\r\n\r\n  constructor(private tapis: ApiService) { }\r\n\r\n  //list() runs when the file browser is opened, retrieves all files in TACC for given user\r\n  list() {\r\n    this.tapis.systemsList({type: 'STORAGE'})\r\n      .subscribe(resp => {\r\n        this._systems.next(resp.result);\r\n        this._projects.next(resp.result.filter(sys => sys.id.startsWith('project')));\r\n      }, error => {\r\n        this._systems.next(null);\r\n        this._projects.next(null);\r\n      });\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport { ApiService, FileOperationRequest} from 'ng-tapis';\r\nimport {RemoteFile} from 'ng-tapis';\r\nimport {Project} from '../models/models';\r\nimport {share} from 'rxjs/operators';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { environment } from '../../environments/environment';\r\nimport {AuthService} from './authentication.service';\r\nimport {MatSnackBar, MatSnackBarConfig} from '@angular/material/snack-bar';\r\nimport { SystemSummary} from 'ng-tapis';\r\n//import { verify } from 'ts-mockito';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TapisFilesService {\r\n\r\n  private baseUrl = 'https://agave.designsafe-ci.org/files/v2/';\r\n  public currentListing: Array<RemoteFile>;\r\n  private _listing: BehaviorSubject<RemoteFile[]> = new BehaviorSubject<RemoteFile[]>([]);\r\n  public readonly listing: Observable<RemoteFile[]> = this._listing.asObservable();\r\n  public readonly IMPORTABLE_TYPES: Array<string> = ['jpg', 'jpeg', 'las', 'laz', 'json', 'geojson', 'geotiff', 'tiff', 'gpx'];\r\n  public lastSystem:SystemSummary //The last filesystem the user was browsing\r\n  public lastFile:RemoteFile; //The last directory the user was browsing\r\n  public noPreviousSelections:boolean\r\n\r\n  constructor(private tapis: ApiService,\r\n              private http: HttpClient,\r\n              private authService: AuthService,\r\n              private popup: MatSnackBar) { }\r\n\r\n  checkIfSelectable(file: RemoteFile): boolean {\r\n    if (file.type === 'dir') {return false; }\r\n    const ext = this.getFileExtension(file);\r\n    return this.IMPORTABLE_TYPES.includes(ext);\r\n  }\r\n\r\n  private getFileExtension(file: RemoteFile): string {\r\n    return file.name.split('.').pop().toLowerCase();\r\n  }\r\n\r\n  listFiles(system: string, path: string, offset: number, limit: number) {\r\n    return this.tapis.filesList({systemId: system, filePath: path, offset, limit});\r\n  }\r\n\r\n  public getParentPath(path: string): string {\r\n    const cleaned = path.replace('//', '/');\r\n    const arr = cleaned.split('/');\r\n    arr.pop();\r\n    const parentPath = arr.join('/');\r\n    return parentPath;\r\n  }\r\n\r\n  //saves project to a specified format in Design Safe's my Data section\r\n  public export(systemID: string, path: string, fileName: string, extension:string, data:any) {\r\n    //Constructs an object that configures the success/error pop-up\r\n    let snackbarConfig:MatSnackBarConfig = {duration: 3000, horizontalPosition: 'right', verticalPosition: 'top'}\r\n    //construct the full URL that points to where the data will be stored\r\n    let fullURL = `https://agave.designsafe-ci.org/files/v2/media/system/${systemID}${path}`\r\n\r\n    //construct a file to submit\r\n    let fileType = \"plain/text\";\r\n    ((extension == \".csv\")? (fileType = \"text/csv\"): (fileType = \"application/json\"))\r\n    let tmp = new Blob([data], {type: fileType})\r\n    let date = new Date()\r\n    let file = new File([tmp], fileName, {lastModified: date.valueOf()})\r\n\r\n    //Creates a form data object which holds the file to be uploaded\r\n    let form:FormData = new FormData\r\n    form.append(\"fileToUpload\", file)\r\n\r\n    //sends the packaged data to Designsafe. URL its being uploaded to handles authentication\r\n    this.http.post(fullURL, form).subscribe(resp => {\r\n      console.log(resp)\r\n      let msg = \"Successfully saved file to \" + systemID + path\r\n      this.popup.open(msg, '', snackbarConfig)\r\n    }, error => {\r\n      console.log(error)\r\n      let msg = \"Faled to save file to \" + systemID + path\r\n      this.popup.open(msg, '', snackbarConfig)\r\n    })\r\n  }\r\n\r\n  //Saves the current file directory and file system to Local Storage\r\n  saveState() {\r\n    let sysStr = JSON.stringify(this.lastSystem)\r\n    let fileStr = JSON.stringify(this.lastFile)\r\n    window.localStorage.setItem(\"system\", sysStr)\r\n    window.localStorage.setItem(\"file\", fileStr)\r\n  }\r\n\r\n  //Attempts to retrieve the last used state\r\n  getState() {\r\n    try {\r\n      this.lastSystem = JSON.parse(window.localStorage.getItem(\"system\"));\r\n      this.lastFile = JSON.parse(window.localStorage.getItem(\"file\"));\r\n      this.noPreviousSelections = this.lastFile == null;\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\r\nimport {AgaveSystemsService} from '../../services/agave-systems.service';\r\nimport {AuthenticatedUser, AuthService} from '../../services/authentication.service';\r\nimport { RemoteFile} from 'ng-tapis/models/remote-file';\r\nimport { SystemSummary} from 'ng-tapis';\r\nimport { TapisFilesService } from '../../services/tapis-files.service';\r\nimport { BsModalRef } from 'ngx-foundation/modal/bs-modal-ref.service';\r\nimport { Subject, combineLatest} from 'rxjs';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { take } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-modal-file-browser',\r\n  templateUrl: './modal-file-browser.component.html',\r\n  styleUrls: ['./modal-file-browser.component.scss'],\r\n})\r\nexport class ModalFileBrowserComponent implements OnInit {\r\n\r\n  static limit = 200; //Limits maximum amount of files displayed\r\n\r\n  @Output() currentPath: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  public allowedExtensions: Array<string> = this.tapisFilesService.IMPORTABLE_TYPES;\r\n \r\n  private currentUser: AuthenticatedUser;\r\n  public selectedPath;\r\n  public filesList: Array<RemoteFile> = [];\r\n  public inProgress= true;\r\n  public retrievalError = false;\r\n  public selectedFiles: Map<string, RemoteFile> = new Map();\r\n  public onClose: Subject<Array<RemoteFile>> = new Subject<Array<RemoteFile>>();\r\n  public projects: Array<SystemSummary>;\r\n  private selectedSystem: SystemSummary;\r\n  public myDataSystem: SystemSummary;\r\n  public communityDataSystem: SystemSummary;\r\n  public publishedDataSystem: SystemSummary;\r\n  public currentDirectory: RemoteFile;\r\n  private offset:number;\r\n  public firstFileIndex: number;\r\n\r\n  constructor(private tapisFilesService: TapisFilesService,\r\n\t\t  // private modalRef: BsModalRef,\r\n\t\t  public dialogRef: MatDialogRef<ModalFileBrowserComponent>,\r\n\t\t  private dialog: MatDialog,\r\n\t\t  private authService: AuthService,\r\n\t\t  private agaveSystemsService: AgaveSystemsService) { }\r\n\r\n  ngOnInit() {\r\n\t//retrive state data\r\n\t//this.tapisFilesService.getState()\r\n\r\n\t// This finds all the projects, and file systems found from a user \r\n\tthis.agaveSystemsService.list();\r\n\r\n\t// TODO: change those hard coded systemIds to environment vars or some sort of config\r\n\t// wait on the currentUser and systems to resolve\r\n\tcombineLatest([this.authService.currentUser, this.agaveSystemsService.systems, this.agaveSystemsService.projects])\r\n\t\r\n\t// This little thing helped me fix the problem on calling ngOnInit several times\r\n\t.pipe(\r\n        take(1)\r\n      )\r\n\t  .subscribe( ([user, systems, projects]) => {\r\n\t\r\n\t\t// Uses systems to find the different directories that has the files in\r\n\tthis.myDataSystem = systems.find( (sys) => sys.id === 'designsafe.storage.default');\r\n\tthis.communityDataSystem = systems.find( (sys) => sys.id === 'designsafe.storage.community');\r\n\tthis.publishedDataSystem = systems.find( (sys) => sys.id === 'designsafe.storage.published');\r\n\t\r\n\t// This is where they choose which one they start with\r\n\tthis.selectedSystem = this.tapisFilesService.lastSystem\r\n\r\n\tif (this.selectedSystem == null) {\r\n\t\tthis.selectedSystem = this.myDataSystem\r\n\t\tthis.tapisFilesService.lastSystem = this.myDataSystem\r\n\t}\r\n\r\n\t//If the user has already navigated to a folder, restore those options\r\n\tthis.currentDirectory = this.tapisFilesService.lastFile\r\n\r\n\tthis.projects = projects;\r\n\tthis.currentUser = user;\r\n\tconst init = <RemoteFile> {\t\r\n\t\tsystem: this.myDataSystem.id,\r\n\t\ttype: 'dir',\r\n\t\tpath: this.currentUser.username\r\n\t};\r\n\t//If the user hasn't yet opened the file browser, set the last file to an init file.\r\n\tif ( this.tapisFilesService.noPreviousSelections) {\r\n\t\tthis.selectedSystem = this.myDataSystem;\r\n\t\tthis.tapisFilesService.lastFile = init\r\n\t\tthis.tapisFilesService.noPreviousSelections = false\r\n\t}\r\n\tthis.browse(this.tapisFilesService.lastFile);\r\n\t  });\r\n\r\n  }\r\n\r\n  selectSystem(system: SystemSummary): void {\r\n\tlet pth;\r\n\tsystem.id === this.myDataSystem.id ? pth = this.currentUser.username : pth = '/';\r\n\tconst init = <RemoteFile> {\r\n\t  system: system.id,\r\n\t  type: 'dir',\r\n\t  path: pth\r\n\t};\r\n\tthis.selectedSystem = system\r\n\tthis.tapisFilesService.lastSystem = this.selectedSystem\r\n\tthis.browse(init);\r\n  }\r\n\r\n\r\n  browse(file: RemoteFile) {\r\n\tthis.selectedPath = file.path\r\n\tthis.selectedSystem = this.selectedSystem //Self-assignment keeps the system name from disappearing while browsing subfolders\r\n\tif (file.type !== 'dir') { return; }\r\n\tthis.currentDirectory = file;\r\n\tthis.tapisFilesService.lastFile = file //Updates the last directory visted\r\n\t// this.selectedFiles.clear();\r\n\tthis.filesList = [];\r\n\tthis.offset = 0\r\n\tthis.inProgress = false;\r\n\tthis.getFiles();\r\n  }\r\n\r\n  toRoot() {\r\n\tlet pth;\r\n\tthis.selectedSystem.id === this.myDataSystem.id ? pth = this.currentUser.username : pth = '/';\r\n\tconst init = <RemoteFile> {\r\n\t  system: this.selectedSystem.id,\r\n\t  type: 'dir',\r\n\t  path: pth\r\n\t};\r\n\tthis.browse(init)\r\n  }\r\n\r\n  getFiles() {\r\n\tlet hasMoreFiles = (this.offset % ModalFileBrowserComponent.limit) === 0\r\n\r\n\tif (this.inProgress || !hasMoreFiles){\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis.inProgress = true;\r\n\tthis.tapisFilesService.listFiles(this.currentDirectory.system, this.currentDirectory.path, this.offset, ModalFileBrowserComponent.limit)\r\n\t.subscribe(listing => {\r\n\t\tconst files = listing.result;\r\n\r\n\t\tif (files.length && files[0].name === '.') {\r\n\t\t\t// This removes the first item in the listing, which in Agave\r\n\t\t\t// is always a reference to self '.' and replaces with '..'\r\n\t\t\tconst current = files.shift();\r\n\t\t\tthis.currentPath.next(current.path);\r\n\t\t\tcurrent.path = this.tapisFilesService.getParentPath(current.path);\r\n\t\t\tcurrent.name = '..';\r\n\t\t\tfiles.unshift(current);\r\n\t\t  }\r\n\t\t  const newFile = [];\r\n\t\t  const allowedExt = this.allowedExtensions\r\n\t\t  files.forEach(function (value, index) {\r\n          if ((value.type == 'file' && allowedExt.includes(value.path.split('.').pop().toLowerCase()) ) || value.type == 'dir'){\r\n            newFile.push(value);\r\n          }})\r\n\r\n\t\t  this.inProgress = false;\r\n\t\t  this.retrievalError = false;\r\n\t\t  this.filesList = this.filesList.concat(newFile);\r\n\t\t  this.offset = this.offset + files.length\r\n\t},\r\n\terror => {\r\n\t\t//If retrieving the files from DesignSafe bugs out due to the site being down, this is where it ends up\r\n\t\tthis.retrievalError = true;\r\n\t\tthis.inProgress = false;\r\n\t});\r\n  }\r\n\r\n  // TODO: Ian: Error message on incorrect file type?\r\n  select(event: any, file: RemoteFile, index: number) {\r\n\tif (event.shiftKey) {\r\n\t\tthis.selectFilesShiftClick(index, file);\r\n\t  }\r\n\telse {\r\n\t\tif (this.tapisFilesService.checkIfSelectable(file)) {\r\n\t\t\tthis.addSelectedFile(file, index);\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// console.log(\"not selectable\")\r\n\t}\r\n\t}\r\n\t// here?\r\n\t// else {\r\n\t//   Signal Error!\r\n\t// }\r\n  }\r\n\r\n  selectFilesShiftClick(index: number, file: RemoteFile) {\r\n    // this.selectedFiles.clear();\r\n    this.selectShift(index, file);\r\n  }\r\n\r\n\r\n  addSelectedFile(file: RemoteFile, index: number) {\r\n\tif (index != -1) {\r\n\t\tthis.firstFileIndex = index;\r\n\t  }\r\n\r\n\tif(this.tapisFilesService.checkIfSelectable(file)){\r\n\t\tif (this.selectedFiles.has(file.path)) {\r\n\t\t\tthis.selectedFiles.delete(file.path);\r\n\t\t} else {\r\n\t\t\tthis.selectedFiles.set(file.path, file);\r\n\t\t//   console.log(this.selectedFiles + \"GOT HERE\");\r\n\t\t}\r\n\t}\r\n  }\r\n\r\n  chooseFiles() {\r\n\tthis.tapisFilesService.saveState()\r\n\tthis.tapisFilesService.lastSystem = this.selectedSystem\r\n\tconst tmp = Array.from(this.selectedFiles.values());\r\n\tthis.dialogRef.close(tmp)\r\n  }\r\n\r\n  cancel() {\r\n\tthis.tapisFilesService.saveState()\r\n\tthis.tapisFilesService.lastSystem = this.selectedSystem\r\n\tthis.dialogRef.close()\r\n  }\r\n\r\n  selectAll(){\r\n\t  let indexTmp = -1\r\n\t  let count = 0\r\n\t  for(let file of this.filesList){\r\n\t\tif (! this.selectedFiles.has(file.path)) {\r\n\t\t\tthis.select(\"\",file,indexTmp)\r\n\t\t\tcount += 1\r\n\t\t}\r\n\t  }\r\n\t  if (count == 1){\r\n\t\tthis.selectedFiles.clear();\r\n\t  }\r\n  }\r\n\r\n  selectShift(index: number, file: RemoteFile) {\r\n    if (this.firstFileIndex != undefined && this.firstFileIndex != index) {\r\n      this.addRangeFiles(this.firstFileIndex, index, true);\r\n    } else {\r\n      this.addSelectedFile(file, index);\r\n    }\r\n  }\r\n\r\n  addRangeFiles(firstFileIndex: number, lastFileIndex: number, again: boolean) {\r\n    let maxIndex = Math.max(firstFileIndex, lastFileIndex);\r\n    let minIndex = Math.min(firstFileIndex, lastFileIndex);\r\n\r\n    for (let i = minIndex; i < maxIndex + 1; ++i) {\r\n      this.addSelectedFile(this.filesList[i], -1);\r\n    }\r\n\r\n    if (again) {\r\n      this.addSelectedFile(this.filesList[firstFileIndex], -1);\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport {AgaveSystemsService} from '../../services/agave-systems.service';\r\nimport {AuthenticatedUser, AuthService} from '../../services/authentication.service';\r\nimport { RemoteFile} from 'ng-tapis/models/remote-file';\r\nimport { SystemSummary} from 'ng-tapis';\r\nimport { TapisFilesService } from '../../services/tapis-files.service';\r\nimport { BsModalRef } from 'ngx-foundation/modal/bs-modal-ref.service';\r\nimport { Subject, combineLatest} from 'rxjs';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { take } from 'rxjs/operators';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-modal-download-selector',\r\n  templateUrl: './modal-download-selector.component.html',\r\n  styleUrls: ['./modal-download-selector.component.scss']\r\n})\r\nexport class ModalDownloadSelectorComponent implements OnInit {\r\n\t\r\n  static limit = 200; //Limits maximum amount of files displayed\r\n\r\n  @Output() currentPath: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  private downloadSelectForm: FormGroup;\r\n  private currentUser: AuthenticatedUser;\r\n  public filesList: Array<RemoteFile> = [];\r\n  public inProgress= true;\r\n  public selectedFiles: Map<string, RemoteFile> = new Map();\r\n  public onClose: Subject<Array<RemoteFile>> = new Subject<Array<RemoteFile>>();\r\n  public projects: Array<SystemSummary>;\r\n  private selectedSystem: SystemSummary;\r\n  public myDataSystem: SystemSummary;\r\n  public communityDataSystem: SystemSummary;\r\n  public publishedDataSystem: SystemSummary;\r\n  public currentDirectory: RemoteFile;\r\n  public passbackData: Array<string> = [\"\",\"\",\"\",\"\"];\r\n  public fileName:string = \"Custom File Name\"\r\n  public fileExtension:string =\".csv\"\r\n  private offset:number;\r\n\r\n  constructor(private tapisFilesService: TapisFilesService,\r\n\t\t  // private modalRef: BsModalRef,\r\n\t\t  public dialogRef: MatDialogRef<ModalDownloadSelectorComponent>,\r\n\t\t  private dialog: MatDialog,\r\n\t\t  private authService: AuthService,\r\n\t\t  private agaveSystemsService: AgaveSystemsService) { }\r\n\r\n  ngOnInit() {\r\n\r\n  this.downloadSelectForm = new FormGroup( {\r\n    Name: new FormControl(this.fileName),\r\n    Extension: new FormControl(this.fileExtension)\r\n  });\r\n\r\n\t  // This finds all the projects, and file systems found from a user \r\n\tthis.agaveSystemsService.list();\r\n\r\n\t// TODO: change those hard coded systemIds to environment vars or some sort of config\r\n\t// wait on the currentUser and systems to resolve\r\n\tcombineLatest([this.authService.currentUser, this.agaveSystemsService.systems, this.agaveSystemsService.projects])\r\n\t\r\n\t// This little thing helped me fix the problem on calling ngOnInit several times\r\n\t.pipe(\r\n        take(1)\r\n      )\r\n\t  .subscribe( ([user, systems, projects]) => {\r\n\t\r\n\t\t// Uses systems to find the different directories that has the files in\r\n\tthis.myDataSystem = systems.find( (sys) => sys.id === 'designsafe.storage.default');\r\n\tthis.communityDataSystem = systems.find( (sys) => sys.id === 'designsafe.storage.community');\r\n\tthis.publishedDataSystem = systems.find( (sys) => sys.id === 'designsafe.storage.published');\r\n\t\r\n\t// This is where they choose which one they start with\r\n\tthis.selectedSystem = this.myDataSystem;\r\n\r\n\tthis.projects = projects;\r\n\tthis.currentUser = user;\r\n\tconst init = <RemoteFile> {\t\r\n\t\tsystem: this.myDataSystem.id,\r\n\t\ttype: 'dir',\r\n\t\tpath: this.currentUser.username\r\n\t};\r\n\tthis.browse(init);\r\n\t  });\r\n\r\n  }\r\n\r\n  selectSystem(system: SystemSummary): void {\r\n\tlet pth;\r\n\tsystem.id === this.myDataSystem.id ? pth = this.currentUser.username : pth = '/';\r\n\tconst init = <RemoteFile> {\r\n\t  system: system.id,\r\n\t  type: 'dir',\r\n\t  path: pth\r\n\t};\r\n\tthis.browse(init);\r\n  }\r\n\r\n\r\n  browse(file: RemoteFile) {\r\n\tif (file.type !== 'dir') { return; }\r\n\tthis.currentDirectory = file;\r\n\t// this.selectedFiles.clear();\r\n\tthis.filesList = [];\r\n\tthis.offset = 0\r\n\tthis.inProgress = false;\r\n\tthis.getFiles();\r\n  }\r\n\r\n  getFiles() {\r\n\tlet hasMoreFiles = (this.offset % ModalDownloadSelectorComponent.limit) === 0\r\n\r\n\tif (this.inProgress || !hasMoreFiles){\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis.inProgress = true;\r\n\r\n\tthis.tapisFilesService.listFiles(this.currentDirectory.system, this.currentDirectory.path, this.offset, ModalDownloadSelectorComponent.limit)\r\n\t.subscribe(listing => {\r\n\t\tconst files = listing.result;\r\n\r\n\t\tif (files.length && files[0].name === '.') {\r\n\t\t\t// This removes the first item in the listing, which in Agave\r\n\t\t\t// is always a reference to self '.' and replaces with '..'\r\n\t\t\tconst current = files.shift();\r\n\t\t\tthis.currentPath.next(current.path);\r\n      this.passbackData[1] = current.path;\r\n\t\t\tcurrent.path = this.tapisFilesService.getParentPath(current.path);\r\n\t\t\tcurrent.name = '..';\r\n\t\t\tfiles.unshift(current);\r\n\t\t  }\r\n\t\t  const newFile = [];\r\n\t\t  files.forEach(function (value, index) {\r\n          if (value.type == 'file' || value.type == 'dir'){\r\n            newFile.push(value);\r\n          }})\r\n\r\n\t\t  this.inProgress = false;\r\n\t\t  this.filesList = this.filesList.concat(newFile);\r\n\t\t  this.offset = this.offset + files.length\r\n\t},\r\n\terror => {\r\n\t\tthis.inProgress = false;\r\n\t});\r\n  }\r\n\r\n  chooseFiles() {\r\n  this.passbackData[0] = this.selectedSystem.id\r\n \r\n  //checks to see if the input was left unchanged\r\n  if( this.downloadSelectForm.dirty ) {\r\n    //if changed, enter name as specified\r\n    this.passbackData[2] = this.downloadSelectForm.get('Name').value\r\n  } else {\r\n    //if unchanged, enter filename as empty string\r\n    this.passbackData[2] = \"\"\r\n  }\r\n  this.passbackData[3] = this.fileExtension\r\n\tthis.dialogRef.close(this.passbackData)\r\n  }\r\n\r\n  cancel() {\r\n\tthis.dialogRef.close()\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { BsModalService, BsModalRef } from 'ngx-foundation';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { ProjectsService } from '../../services/projects.service';\r\nimport { Project } from '../../models/models';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-modal-create-project',\r\n  templateUrl: './modal-create-project.component.html',\r\n  styleUrls: ['./modal-create-project.component.scss']\r\n})\r\nexport class ModalCreateProjectComponent implements OnInit {\r\n\r\n  projCreateForm: FormGroup;\r\n\r\n  constructor(public dialogRef: MatDialogRef<ModalCreateProjectComponent>,\r\n\t\t\t  private dialog: MatDialog,\r\n\t\t\t  private projectsService: ProjectsService) { }\r\n\r\n  ngOnInit() {\r\n\tthis.projCreateForm = new FormGroup( {\r\n\t  name: new FormControl(''),\r\n\t  description: new FormControl('')\r\n\t});\r\n  }\r\n\r\n  close() {\r\n\tthis.dialogRef.close();\r\n  }\r\n\r\n  submit() {\r\n\tconst p = new Project();\r\n\tp.description = this.projCreateForm.get('description').value;\r\n\tp.name = this.projCreateForm.get('name').value;\r\n\tthis.projectsService.create(p);\r\n\tthis.dialogRef.close();\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { ProjectsService } from '../../services/projects.service';\r\nimport { Project } from '../../models/models';\r\nimport { THIS_EXPR } from '@angular/compiler/src/output/output_ast';\r\n\r\n@Component({\r\n  selector: 'app-modal-share-project',\r\n  templateUrl: './modal-share-project.component.html',\r\n  styleUrls: ['./modal-share-project.component.scss']\r\n})\r\nexport class ModalShareProjectComponent implements OnInit {\r\n\r\n  projShareForm: FormGroup;\r\n  activeProj: Project;\r\n  projectUsers;\r\n\r\n  constructor(public dialogRef: MatDialogRef<ModalShareProjectComponent>,\r\n              private dialog: MatDialog,\r\n              private projectsService: ProjectsService) { }\r\n\r\n  ngOnInit() {\r\n    //creates new form control group to access input value\r\n    this.projShareForm = new FormGroup({\r\n      name: new FormControl(''),\r\n    });\r\n\r\n    //retrieves active project, needed to add users to the project\r\n    this.projectsService.activeProject.subscribe((proj) =>{\r\n      this.activeProj = proj;\r\n    });\r\n\r\n    //retrieves all users currently registered to the active project\r\n    this.projectsService.getProjectUsers(this.activeProj).subscribe((next) =>{\r\n      this.projectUsers = next;\r\n    });\r\n  }\r\n\r\n  //closes modal without submitting anything\r\n  close() {\r\n    this.dialogRef.close();\r\n    }\r\n\r\n  //shares project with specified user\r\n  submit(){\r\n    this.projectsService.addUserToProject(this.activeProj, this.projShareForm.get('name').value)\r\n    this.dialogRef.close()\r\n  }\r\n\r\n  //deletes user from project\r\n  delete(user){\r\n    this.projectsService.deleteUserFromProject(this.activeProj, user)\r\n    this.dialogRef.close()\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { BsModalService, BsModalRef } from 'ngx-foundation';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { ProjectsService } from '../../services/projects.service';\r\nimport { Project } from '../../models/models';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-modal-current-project',\r\n  templateUrl: './modal-current-project.component.html',\r\n  styleUrls: ['./modal-current-project.component.scss']\r\n})\r\nexport class ModalCurrentProjectComponent implements OnInit\r\n{\r\n  projCreateForm: FormGroup;\r\n  activeProject: Project;\r\n\r\n  constructor(public dialogRef: MatDialogRef<ModalCurrentProjectComponent>,\r\n\t\t\t  private dialog: MatDialog,\r\n\t\t\t  private projectsService: ProjectsService,\r\n\t\t\t  @Inject(MAT_DIALOG_DATA) public projData: any) { }\r\n\r\n  ngOnInit() {\r\n\r\n    \r\n    this.projectsService.activeProject.subscribe( (next) => {\r\n      this.activeProject = next;\r\n    });\r\n\r\n    this.projCreateForm = new FormGroup( {\r\n      name: new FormControl(this.activeProject.name),\r\n      description: new FormControl(this.activeProject.description)\r\n    });\r\n\r\n  }\r\n\r\n  close() {\r\n\tthis.dialogRef.close();\r\n  }\r\n\r\n  delete(){\r\n    if(confirm(\"Are you sure you want to delete this project? This will also delete it from HazMapper, and anyone this project was shared with.\")) {\r\n      this.projectsService.delete(this.activeProject);\r\n    }\r\n    this.dialogRef.close();\r\n  }\r\n  \r\n  update() {\r\n    const p = new Project();\r\n    p.description = this.projCreateForm.get('description').value;\r\n    p.name = this.projCreateForm.get('name').value;\r\n    p.id = this.activeProject.id;\r\n    p.uuid = this.activeProject.uuid;\r\n    this.projectsService.update(p);\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Output, TemplateRef } from '@angular/core';\r\nimport { ProjectsService } from '../../services/projects.service';\r\nimport { Feature, Project } from '../../models/models';\r\nimport {FeatureCollection} from 'geojson';\r\nimport { GeoDataService } from '../../services/geo-data.service';\r\nimport {LatLng} from 'leaflet';\r\nimport {skip, startWith} from 'rxjs/operators';\r\nimport {BsModalRef, BsModalService} from 'ngx-foundation';\r\nimport {ModalFileBrowserComponent} from '../modal-file-browser/modal-file-browser.component';\r\nimport {ModalDownloadSelectorComponent} from '../modal-download-selector/modal-download-selector.component';\r\nimport {ModalCreateProjectComponent} from '../modal-create-project/modal-create-project.component';\r\nimport {ModalShareProjectComponent} from '../modal-share-project/modal-share-project.component';\r\nimport {interval, Observable, Subscription} from 'rxjs';\r\nimport {RemoteFile} from 'ng-tapis';\r\nimport {GroupsService} from \"../../services/groups.service\";\r\nimport {FormsService} from \"../../services/forms.service\";\r\nimport {AuthenticatedUser, AuthService} from '../../services/authentication.service';\r\nimport { Router } from '@angular/router';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ModalCurrentProjectComponent } from '../modal-current-project/modal-current-project.component';\r\nimport {AppEnvironment, environment} from '../../../environments/environment';\r\nimport { feature } from '@turf/helpers';\r\nimport { TapisFilesService } from '../../services/tapis-files.service'\r\nimport { element } from 'protractor';\r\nimport { consoleTestResultHandler } from 'tslint/lib/test';\r\nimport { ScrollService } from 'src/app/services/scroll.service';\r\nimport { NotificationsService } from 'src/app/services/notifications.service';\r\n\r\n@Component({\r\n  selector: 'app-control-bar',\r\n  templateUrl: './control-bar.component.html',\r\n  styleUrls: ['./control-bar.component.scss']\r\n})\r\nexport class ControlBarComponent implements OnInit {\r\n\r\n  public activeFeature: Feature;\r\n  features: FeatureCollection;\r\n  featureList: Array<any> = [];\r\n  activeFeatureNum: number;\r\n\r\n  public currentUser: AuthenticatedUser;\r\n  private REFRESHTIME = 6; // 60 secs per reload default, right now it's an hour (6000 sec)\r\n  public projects: Project[];\r\n  public selectedProject: Project;\r\n  public mapMouseLocation: LatLng = new LatLng(0, 0);\r\n  public liveRefresh = true;\r\n  private timer: Observable<number> = interval(this.REFRESHTIME * 1000);\r\n  private timerSubscription: Subscription;\r\n  groupList: Array<any>;\r\n  showGroup: boolean;\r\n  imageName: string;\r\n  showSidebar: boolean;\r\n  groupsExist: boolean;\r\n  groupName: string;\r\n  tempGroup: Array<Feature>;\r\n  modalRef: BsModalRef;\r\n  activeGroup: string;\r\n  activePane: string;\r\n  hazMapperLink: string;\r\n  itemsSelected:boolean = false;\r\n  foundFilePaths = []\r\n\r\n  constructor(private projectsService: ProjectsService,\r\n\t\t\t  private geoDataService: GeoDataService,\r\n\t\t\t  private bsModalService: BsModalService,\r\n\t\t\t  private groupsService: GroupsService,\r\n\t\t\t  private formsService: FormsService,\r\n\t\t\t  private authService: AuthService,\r\n\t\t\t  private filesService: TapisFilesService,\r\n\t\t\t  private router: Router,\r\n\t\t\t  private dialog: MatDialog,\r\n\t\t\t  private scrollService: ScrollService,\r\n\t\t\t  private notificationsService: NotificationsService) {}\r\n\r\n  ngOnInit() {\r\n\t  this.filesService.getState()\r\n\r\n\tthis.geoDataService.features.subscribe( (fc: FeatureCollection) => {\r\n\t  this.features = fc;\r\n\r\n\t  if (this.features != undefined) {\r\n\t\tthis.featureList = this.features.features;\r\n\t\tthis.groupsService.setActiveProject(this.featureList[0]);\r\n\r\n\t\t// TODO This should activate persistence by looping through all features and creating new groups and\r\n\t\t//\r\n\t\tthis.groupsService.setGroupProperties(this.featureList);\r\n\r\n\t\t// console.log(this.featureList[this.activeFeatureNum].assets[0].path);\r\n\t\t// this.activeFeature = this.featureList[this.activeFeatureNum];\r\n\t  }\r\n\t});\r\n\r\n\tthis.groupsService.activeGroup.subscribe((next) => {\r\n\t  this.activeGroup = next;\r\n\t});\r\n\r\n\tthis.groupsService.activePane.subscribe((next) => {\r\n\t  this.activePane = next;\r\n\t});\r\n\r\n\tthis.geoDataService.activeFeature.subscribe((next) => {\r\n\t  this.activeFeature = next;\r\n\t  if (this.activeFeature)\r\n\t\tconsole.log(this.activeFeature.assets[0].path);\r\n\t});\r\n\r\n\t(this.notificationsService.notifications.subscribe(next => {\r\n\t\tlet hasSuccessNotification = next.some(note => note.status === 'success');\r\n\t\tlet hasFailureNotification = next.some(note => note.status === 'error');\r\n\t\tif (hasSuccessNotification) {\r\n\t\t  this.geoDataService.getFeatures(this.selectedProject.id);\r\n\t\t  console.log(\"Features Got\")\r\n\t\t}\r\n\t\tif (hasFailureNotification) {\r\n\t\t\tnext.forEach(item => {\r\n\t\t\t\t//Compiles a list of all necessary files to import via the alt method\r\n\t\t\t\t//The substring from 0 to 16 contains the phrase \"Error importing\", everything after this is the file path\r\n\t\t\t\tif( (item.message.substring(0,16) == \"Error importing \") && !( this.foundFilePaths.some(filePath => filePath === item.message.substring(16)) ) ) {\r\n\t\t\t\t\tlet path = item.message.substring(16)\r\n\t\t\t\t\tthis.geoDataService.uploadNewFeature(this.selectedProject.id, this.createBlankFeature(), path)\r\n\t\t\t\t\tthis.foundFilePaths.push(path)\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.geoDataService.getFeatures(this.selectedProject.id);\r\n\t\t}\r\n\t}));\r\n\r\n\tthis.authService.currentUser.subscribe(next => this.currentUser = next);\r\n\r\n\tthis.projectsService.getProjects();\r\n\tthis.projectsService.projects.subscribe( (projects) => {\r\n\t  this.projects = projects;\r\n\r\n\t  if (this.projects.length) {\r\n\t\tlet lastProj\r\n\t\ttry {\r\n\t\t\t//restores view to the last visited project from local storage\r\n\t\t\tlastProj = JSON.parse(window.localStorage.getItem(\"lastProj\"))\r\n\t\t\tconsole.log(lastProj)\r\n\t\t} catch (error) {\r\n\t\t\tlastProj = this.projectsService.setActiveProject(this.projects[0]);\r\n\t\t}\r\n\r\n\t\t//If lastProj is null, then there is no project saved, or can be found, default to the first project in the list\r\n\t\tif(lastProj == \"none\" || lastProj == null) {\r\n\t\t\tlastProj = this.projects[0]\r\n\t\t}\r\n\r\n\t\tthis.projectsService.setActiveProject(lastProj);\r\n\t  }\r\n\r\n\t  this.groupsService.groups.subscribe((next) => {\r\n\t\tthis.groupList = next;\r\n\r\n\t\tif (this.groupList.length > 0) {\r\n\t\t  this.groupsExist = true;\r\n\t\t} else {\r\n\t\t  this.groupsExist = false;\r\n\t\t}\r\n\t  });\r\n\r\n\t  this.groupsService.activeFeatureNum.pipe(startWith(0)).subscribe((next) => {\r\n\t\tthis.activeFeatureNum = next;\r\n\r\n\t\tthis.groupList.forEach(e => {\r\n\t\t  if (e.name == this.activeGroup) {\r\n\t\t\tif (e.features[next]) {\r\n\t\t\t  if (e.features[next].assets[0].display_path) {\r\n\t\t\t\tthis.imageName = /[^/]*$/.exec(e.features[next].assets[0].display_path)[0];\r\n\t\t\t  } else {\r\n\t\t\t\tthis.imageName = /[^/]*$/.exec(e.features[next].assets[0].path)[0];\r\n\t\t\t  }\r\n\t\t\t}\r\n\t\t  }\r\n\t\t});\r\n\t  });\r\n\r\n\t  this.groupsService.tempGroup.subscribe((next) => {\r\n\t\tthis.tempGroup = next;\r\n\t  });\r\n\r\n\t  this.groupsService.showGroup.subscribe((next) => {\r\n\t\tthis.showGroup = next;\r\n\t  });\r\n\r\n\t  this.groupsService.showSidebar.subscribe((next) => {\r\n\t\tthis.showSidebar = next;\r\n\t  });\r\n\r\n\t  this.groupsService.tempGroup.subscribe((next) => {\r\n\t\tthis.tempGroup = next;\r\n\t  });\r\n\r\n\t  this.groupsService.itemsSelected.subscribe((next) => {\r\n\t\tthis.itemsSelected = next;\r\n\t  })\r\n\t  //this.setLiveRefresh(true)\r\n\t});\r\n\r\n\tthis.projectsService.activeProject.subscribe(next => {\r\n\t  this.selectedProject = next;\r\n\t  this.getDataForProject(this.selectedProject);\r\n\t  //retrieves uuid for project, formats result into a link to that Hazmapper map\r\n\t  this.hazMapperLink = \"https://hazmapper.tacc.utexas.edu/hazmapper/project/\" + next.uuid\r\n\t});\r\n\r\n\tthis.geoDataService.mapMouseLocation.pipe(skip(1)).subscribe( (next) => {\r\n\t  this.mapMouseLocation = next;\r\n\t});\r\n\t// this.timerSubscription = this.timer.subscribe( () => {\r\n\t//   this.reloadFeatures();\r\n\t// });\r\n\r\n\t// FIXME Maybe redundant\r\n\tthis.groupsService.setActiveFeatureNum(0);\r\n  }\r\n\r\n  clearAll(){\r\n\t  this.groupsService.setUnselectAll(true);\r\n\t  this.groupsService.setItemsSelected(false);\r\n  }\r\n\r\n  reloadFeatures() {\r\n\tthis.geoDataService.getFeatures(this.selectedProject.id);\r\n  }\r\n\r\n  setLiveRefresh(option: boolean) {\r\n\toption ? this.timerSubscription = this.timer.subscribe(() => { this.reloadFeatures(); }) : this.timerSubscription.unsubscribe();\r\n  }\r\n\r\n  //Similar to setLiveRefresh, but it runs the time out once and then unsubscribes from the timer\r\n  startRefreshTimer(option: boolean) {\r\n\toption ? this.timerSubscription = this.timer.subscribe(() => { this.reloadFeatures(); this.setLiveRefresh(false)}) : this.timerSubscription.unsubscribe();\r\n  }\r\n\r\n  selectProject(p: Project): void {\r\n\tthis.projectsService.setActiveProject(p);\r\n\tthis.getDataForProject(p);\r\n  }\r\n\r\n  getDataForProject(p: Project): void {\r\n\tthis.geoDataService.getFeatures(p.id);\r\n\tthis.geoDataService.getOverlays(p.id);\r\n\tthis.geoDataService.getPointClouds(p.id);\r\n  }\r\n\r\n  openFilePicker() {\r\n\t//Refreshes the list of found paths used in importing images without Geo tagging\r\n\tthis.foundFilePaths = []\r\n\tconst modal = this.dialog.open(ModalFileBrowserComponent);\r\n\tmodal.afterClosed().subscribe( (files: Array<RemoteFile>) => {\r\n\t\tif (files != null) {this.geoDataService.importFileFromTapis(this.selectedProject.id, files);}\r\n\t\t/*if (files != null) {\r\n\t\t\tfiles.forEach( (file) => {\r\n\t\t\t\tthis.geoDataService.uploadNewFeature(this.selectedProject.id, this.createBlankFeature(), file)\r\n\t\t\t})};*/\r\n\t\t}\r\n\t);\r\n\r\n\t// const modal: BsModalRef = this.bsModalService.show(ModalFileBrowserComponent);\r\n\t// modal.content.onClose.subscribe( (files: Array<RemoteFile>) => {\r\n\t//   this.geoDataService.importFileFromTapis(this.selectedProject.id, files);\r\n\t// });\r\n  }\r\n\r\n  //Creates a feature with a long/lat value of 0,0 and no associated image.\r\n  createBlankFeature() {\r\n\tlet blankFeature:Feature = {\r\n\t\t\"type\": \"Feature\",\r\n\t\t\"geometry\": {\r\n\t\t  \"type\": \"Point\",\r\n\t\t  \"coordinates\": [0, 0]\r\n\t\t},\r\n\t\t\"properties\": {\r\n\t\t}\r\n\t  }\r\n\treturn blankFeature\r\n  }\r\n\r\n  openDownloadSelector(fileName:string){\r\n\tconst modal = this.dialog.open(ModalDownloadSelectorComponent);\r\n\tlet path: Array<string>\r\n\tmodal.afterClosed().subscribe( (passbackData: Array<string>) => {\r\n\t\tconsole.log(passbackData)\r\n\t\tpath = passbackData\r\n\t\tthis.saveFile(path[3] == \".json\", true, path[0], path[1], path[2])\r\n\t});\r\n  }\r\n\r\n  // nameGroup(event: any) {\r\n  //\tthis.groupName = event;\r\n  //\tthis.groupsService.setActiveGroup(event.toLowerCase());\r\n  // }\r\n\r\n  openCreateProjectModal() {\r\n\tthis.dialog.open(ModalCreateProjectComponent, {\r\n\t  height: '400px',\r\n\t  width: '600px',\r\n\t});\r\n\r\n\t// modal.afterClosed().subscribe( (files: Array<RemoteFile>) => {\r\n\t//   this.geoDataService.importFileFromTapis(this.selectedProject.id, files);\r\n\t// });\r\n  }\r\n\r\n  openShareProjectModal(){\r\n\t  this.dialog.open(ModalShareProjectComponent, {\r\n\t\t  height: '400px',\r\n\t\t  width: '600px',\r\n\t  })\r\n  }\r\n\r\n  openProjectModal(project) {\r\n\t// console.log(project);\r\n\tlet modal = this.dialog.open(ModalCurrentProjectComponent, {\r\n\t  height: '400px',\r\n\t  width: '600px',\r\n\t  data: {\r\n\t\tid: project.id,\r\n\t\tname: project.name,\r\n\t\tdescription: project.description,\r\n\t\tuuid: project.uuid\r\n\t  }\r\n\t});\r\n\r\n\tmodal.afterClosed().subscribe( (passbackData: Array<string>) => {\r\n\t\tthis.projectsService.setActiveProject(this.projects[0])\r\n\t});\r\n}\r\n\r\n  // TODO This should add color\r\n  addToGroupService(name: string) {\r\n\t// TODO: add group data (name) to Individual Feature property\r\n\t// for (this.featureIds) {\r\n\t//   for this.projectsService.features {\r\n\t//\tif project feature id = this.fatureids {\r\n\t//\t  project feature.properties[groupName] = this.groupName;\r\n\t//\t}\r\n\t//   }\r\n\t// }\r\n\r\n\tthis.groupName = name;\r\n\t// this.groupsService.setActiveGroup(name.toLowerCase());\r\n\tthis.groupsService.setActiveGroup(name);\r\n\r\n\r\n\t// let activeGroup = this.groupList.filter(group => group.name == name);\r\n\r\n\t// if (activeGroup[0].features.length == 0) {\r\n\t//   this.groupsService.setFeatureImagesExist(false);\r\n\t// } else {\r\n\t//   this.groupsService.setFeatureImagesExist(true);\r\n\t// }\r\n\r\n\tif (this.groupList.length != 1000) {\r\n\t  // TODO Make this better\r\n\t  if (!name || 0 === name.length) {\r\n\t\tconsole.log(\"Invalid Name\");\r\n\t  } else if (this.groupList.filter(e => e.name === name).length) {\r\n\t\tconsole.log(\"Existing Name\");\r\n\t  } else {\r\n\t\tlet myRandColor: string = this.getRandomColor();\r\n\t\tthis.groupList.push({\r\n\t\t  name: name,\r\n\t\t  features: this.tempGroup,\r\n\t\t  color: myRandColor,\r\n\t\t  icon: \"fa-house-damage\"\r\n\t\t  // featureIds: Object.keys(this.tempGroup),\r\n\t\t});\r\n\t\tthis.groupsService.addGroup(this.groupList);\r\n\t\tthis.formsService.addGroup(this.groupName);\r\n\r\n\t\tconsole.log(this.groupList)\r\n\t\tconsole.log(this.tempGroup)\r\n\r\n\t\t// TODO make this work for persistence\r\n\t\tfor (let feat of this.tempGroup) {\r\n\t\t  // this should be a shared group of\r\n\t\t  // all the currently created objects of a particular feature\r\n\r\n\t\t  // let featProp = {group: []};\r\n\r\n\t\t  let featProp = feat.properties;\r\n\t\t  console.log(feat.properties)\r\n\r\n\t\t  if (featProp.group) {\r\n\t\t\tconsole.log(\"nope\");\r\n\t\t\tfeatProp.group.push({\r\n\t\t\t  name: name,\r\n\t\t\t  color: myRandColor,\r\n\t\t\t  icon: \"fa-house-damage\"\r\n\t\t\t});\r\n\t\t  } else {\r\n\t\t\tconsole.log(\"This is actually happening\");\r\n\t\t\tlet featPropList = featProp.group = [];\r\n\t\t\tfeatPropList.push({\r\n\t\t\t  name: name,\r\n\t\t\t  color: myRandColor,\r\n\t\t\t  icon: \"fa-house-damage\"\r\n\t\t\t});\r\n\t\t  }\r\n\r\n\t\t  this.geoDataService.updateFeatureProperty(this.selectedProject.id,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tNumber(feat.id),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfeatProp);\r\n\t\t  console.log(\"In control-bar\");\r\n\t\t  console.log(\"Current feat: \" + feat.id);\r\n\t\t  console.log(\"featProp: what gets sent to server\");\r\n\t\t  console.log(featProp);\r\n\t\t  console.log(\"groupList: internal listing\");\r\n\t\t  // console.log(this.groupList);\r\n\t\t}\r\n\t\t// TODO Also should create parser that loops through all features and generates groups in an object\r\n\t  }\r\n\t}\r\n\r\n\t// TODO Clear input value\r\n\t// this.filterName = '';\r\n\t// Also clear selection\r\n\tthis.tempGroup = [];\r\n\tthis.groupsService.addTempGroup(this.tempGroup);\r\n\tthis.groupsService.setUnselectAll(true);\r\n\tthis.groupsService.setShowGroup(false);\r\n  }\r\n\r\n  openAddGroupModal(template: TemplateRef<any>) {\r\n\tthis.dialog.open(template);\r\n\t// this.modalRef = this.bsModalService.show(template, {class: 'tiny'});\r\n  }\r\n\r\n  openSidebar() {\r\n\tif( !this.showSidebar) {\r\n\t\tthis.scrollService.setScrollPosition()\r\n\t} else {\r\n\t\tthis.scrollService.setScrollRestored(true)\r\n\t}\r\n\tlet showSidebar = !this.showSidebar;\r\n\tlet showGroup = false;\r\n\t// let showGroupButton = !this.showGroupButton;\r\n\tthis.groupsService.setActiveGroup(this.groupList[0].name);\r\n\r\n\tlet activeGroup = this.groupList.filter(group => group.name == this.activeGroup);\r\n\r\n\tif (activeGroup[0].features.length == 0) {\r\n\t  this.groupsService.setFeatureImagesExist(false);\r\n\t} else {\r\n\t  this.groupsService.setFeatureImagesExist(true);\r\n\t}\r\n\r\n\tthis.groupsService.setActiveFeatureNum(0);\r\n\tthis.groupsService.setShowSidebar(showSidebar);\r\n\tthis.groupsService.setShowGroup(showGroup);\r\n\tthis.router.navigateByUrl('/tagger', { skipLocationChange: true });\r\n\r\n\tthis.tempGroup = [];\r\n\tthis.groupsService.addTempGroup(this.tempGroup);\r\n\tthis.groupsService.setUnselectAll(true);\r\n\tthis.groupsService.setActivePane('tagger');\r\n  }\r\n\r\n  // TODO Make it prettier\r\n  otherPath(dir: boolean) {\r\n\tlet activeGroupObj = this.groupList.filter(realGroup => realGroup.name === this.activeGroup);\r\n\r\n\t// right\r\n\tif (dir) {\r\n\t  this.activeFeatureNum += 1;\r\n\t  this.activeFeatureNum = this.activeFeatureNum % activeGroupObj[0].features.length;\r\n\t  // this.activeFeature = this.tempGroup[this.activeFeatureNum];\r\n\t} else {\r\n\t  if (this.activeFeatureNum == 0) {\r\n\t\tthis.activeFeatureNum = activeGroupObj[0].features.length;\r\n\t  }\r\n\t  this.activeFeatureNum -= 1;\r\n\t  // this.activeFeature = this.tempGroup[this.activeFeatureNum];\r\n\t}\r\n\r\n\t// console.log(this.activeFeatureNum);\r\n\t// console.log(this.activeFeature.assets[0].path);\r\n\r\n\tthis.groupsService.setActiveFeatureNum(this.activeFeatureNum);\r\n\t// console.log(this.activeGroup);\r\n  }\r\n\r\n  getRandomColor() {\r\n\tvar letters = '0123456789ABCDEF';\r\n\tvar color = '#';\r\n\tfor (var i = 0; i < 6; i++) {\r\n\t  color += letters[Math.floor(Math.random() * 16)];\r\n\t}\r\n\treturn color;\r\n  }\r\n\r\n  // TODO\r\n  goToRoute() {\r\n\tif (this.activePane == \"preset\") {\r\n\t  this.groupsService.setActivePane(\"tagger\");\r\n\t  this.router.navigateByUrl('/tagger', {skipLocationChange: true});\r\n\t} else {\r\n\t  this.groupsService.setActivePane(\"preset\");\r\n\t  this.router.navigateByUrl('/preset', {skipLocationChange: true});\r\n\t}\r\n\tthis.groupsService.setActiveGroup(this.activeGroup);\r\n\r\n\t// let activeGroup = this.groupList.filter(what => what.name == this.activeGroup);\r\n\r\n\t// if (activeGroup[0].features.length == 0) {\r\n\t//   this.groupsService.setFeatureImagesExist(false);\r\n\t// } else {\r\n\t//   this.groupsService.setFeatureImagesExist(true);\r\n\t// }\r\n\r\n  }\r\n\r\n  // TODO\r\n  clearAndUnselect() {\r\n\r\n  }\r\n\r\n  //saves project as a CSV file by first organizing a JSON or a CSV and converting it. Saves to either MyData or local\r\n  saveFile(isJSON:Boolean, forExport:Boolean = false, systemID = \"\", path = \"\", fileName) {\r\n\t  let CSVHolder = \"longitude,latitude,src,groupName,groupColor\\r\\n\"\r\n\t  let JSONHolder: Array<object> = []\r\n\t  let projID = \"\"\r\n\r\n\t  this.featureList.forEach(element => {\r\n\t\t\t//Retrieves project ID for building a filename\r\n\t\t\tprojID = element.project_id\r\n\r\n\t\t  \t//retrieves longitude and latitude values as an array\r\n\t\t\tlet coordinates = element.geometry['coordinates']\r\n\r\n\t\t\t//creates image source URL from environment and cleans up URL to a usable link\r\n\t\t\tlet featureSource = environment.apiUrl + '/assets/' + element.assets[0].path;\r\n\t\t\tfeatureSource = featureSource.replace(/([^:])(\\/{2,})/g, '$1/');\r\n\r\n\t\t\t//Grabs group data\r\n\t\t\t//Group data can be accessed from the feature, through the properties element\r\n\t\t\t//If the image doesn't have a group, a placeholder is given\r\n\t\t\t//NOTE: future group properties can be accessed in the same way\r\n\t\t\tlet groupName:String = \"\"\r\n\t\t\tlet groupColor:String = \"\"\r\n\t\t\ttry {\r\n\t\t\t\tgroupName = element.properties['group'][0].name\r\n\t\t\t\tgroupColor = element.properties['group'][0].color\t\r\n\t\t\t} catch (error) {\r\n\t\t\t\tgroupName = \"N/A\"\r\n\t\t\t\tgroupColor = \"#000000\"\r\n\t\t\t}\r\n\r\n\t\t\tif (isJSON) {\r\n\t\t\t\t//Alternately compiles it into a JSON\r\n\t\t\t\tlet transferJSON = {\r\n\t\t\t\t\t\"longitude\": coordinates[0],\r\n\t\t\t\t\t\"latitude\": coordinates[1],\r\n\t\t\t\t\t\"src\": featureSource,\r\n\t\t\t\t\t\"groupName\": groupName,\r\n\t\t\t\t\t\"groupColor\": groupColor\r\n\t\t\t\t}\r\n\t\t\t\t//And adds it to a growing list of JSON objects\r\n\t\t\t\tJSONHolder.push(transferJSON)\r\n\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\t//Compiles the attributes into a CSV format\r\n\t\t\t\tlet tempCSV = coordinates[0] + \",\" + coordinates[1] + \",\" + featureSource + \",\" + groupName + \",\" + groupColor + \"\\r\\n\"\r\n\t\t\t\t//And adds it to a growing full CSV file\r\n\t\t\t\tCSVHolder += tempCSV\r\n\t\t\t}\r\n\t  });\r\n\t  let content\r\n\t  let extension\r\n\t  //determine whether the file is wanted as a JSON or a CSV\r\n\t\tif (isJSON) {\r\n\t\t\tcontent = JSONHolder\r\n\t\t\textension = \".json\"\r\n\t\t} else {\r\n\t\t\tcontent = CSVHolder\r\n\t\t\textension = \".csv\"\r\n\t\t}\r\n\r\n\t\t//If the function is marked for export to Design Safe, route through export, otherwise, download the file\r\n\t\tif(forExport){\r\n\t\t\t((fileName == \"\")? (fileName = projID + extension): (fileName += extension))\r\n\t\t\tthis.filesService.export(systemID, path, fileName, extension, content)\r\n\t\t}else{\r\n\t\t\tthis.download(content,extension,projID)\r\n\t\t}\r\n\r\n  }\r\n\t\r\n\tdownload(content, extension, projID){\r\n\t  //Creates a download link in typescript through a blob\r\n\t\tlet blob = new Blob(['\\ufeff' + content], {type: 'text/csv;charset=utf-8;' })\r\n\t\tlet download = document.createElement(\"a\")\r\n\t\tlet url = URL.createObjectURL(blob)\r\n\t\tlet filename = \"taggit-proj-\" + projID\r\n\r\n\t\t//checks if the browser is Safari or otherwise, if so open download in new window\r\n\t\tif (navigator.userAgent.indexOf('Safari')!= -1 && navigator.userAgent.indexOf('Chrome') == -1) {\r\n\t\t\tdownload.setAttribute(\"target\", \"_blank\")\r\n\t\t}\r\n\t\t//Sets up the link, and simulates a click\r\n\t\tdownload.setAttribute(\"href\", url)\r\n\t\tdownload.setAttribute(\"download\", filename + extension)\r\n\t\tdownload.style.visibility = \"hidden\"\r\n\t\tdocument.body.appendChild(download)\r\n\t\tdownload.click()\r\n\t\tdocument.body.removeChild(download)\r\n  \t}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport {Observable, throwError} from 'rxjs';\r\nimport { AuthService} from './services/authentication.service';\r\nimport {catchError} from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n    constructor(private authService: AuthService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).pipe(catchError(err => {\r\n            if (err.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                this.authService.logout();\r\n                location.reload();\r\n            }\r\n\r\n            const error = err.error.message || err.statusText;\r\n            return throwError(error);\r\n        }));\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n    constructor(private authSvc: AuthService) {}\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        if (request.url.indexOf('https://agave.designsafe-ci.org') > -1) {\r\n            if (this.authSvc.isLoggedIn()) {\r\n                request = request.clone({\r\n                    setHeaders: {\r\n                        Authorization: 'Bearer ' + this.authSvc.userToken.token\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return next.handle(request);\r\n    }\r\n}\r\n","import {AfterViewChecked, Component, OnInit, Renderer2} from '@angular/core';\r\nimport {FeatureCollection} from 'geojson';\r\nimport {GeoDataService} from '../../services/geo-data.service';\r\nimport {FeatureAsset, Feature, Project} from '../../models/models';\r\nimport {AppEnvironment, environment} from '../../../environments/environment';\r\nimport {ProjectsService} from \"../../services/projects.service\";\r\nimport { ScrollService } from 'src/app/services/scroll.service';\r\nimport {GroupsService} from \"../../services/groups.service\";\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport {startWith} from 'rxjs/operators';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ModalCreateProjectComponent } from '../modal-create-project/modal-create-project.component';\r\n\r\n@Component({\r\n  selector: 'app-image-gallery',\r\n  templateUrl: './image-gallery.component.html',\r\n  styleUrls: ['./image-gallery.component.scss']\r\n})\r\n\r\nexport class ImageGalleryComponent implements OnInit, AfterViewChecked {\r\n  environment: AppEnvironment;\r\n  // features: FeatureCollection;\r\n  // FIXME feature collection giving me an error when trying to access assets\r\n  // features: any;\r\n  tempGroup: Array<Feature>;\r\n  groupList: Array<any>;\r\n  // showGroupBar: boolean;\r\n\r\n  public projects: Project[];\r\n  showGroup: boolean;\r\n  groupName: string;\r\n  showSidebar: boolean;\r\n  scrolling: boolean = false;\r\n  status: boolean;\r\n  groupExist: boolean;\r\n  imagesExist: boolean;\r\n  projectsExist: boolean;\r\n  featureList: Array<any> = [];\r\n  featureListScroll: Array<any>;\r\n  scrollSum: number = 15;\r\n  activeGroup: string;\r\n  activeFeature: Feature;\r\n  activeFeatureNum: number;\r\n  featurePath: string;\r\n  loaded: boolean;\r\n\r\n  constructor(private geoDataService: GeoDataService,\r\n\t\t\t  private projectsService: ProjectsService,\r\n\t\t\t  private groupsService: GroupsService,\r\n\t\t\t  private renderer: Renderer2,\r\n\t\t\t  private spinner: NgxSpinnerService,\r\n\t\t\t  private dialog: MatDialog,\r\n\t\t\t  private scrollService: ScrollService) { }\r\n\r\n  \r\n\r\n  ngAfterViewChecked() {\r\n\tif ( this.scrollService.scrollRestored) {\r\n\t\tthis.scrollService.scroll()\r\n\t}\r\n  }\r\n\r\n  ngOnInit() {\r\n\t//console.log(\"GOT HERE- PLS\")\r\n\tthis.environment = environment;\r\n\r\n\r\n\t// this.activeFeatureNum = 0;\r\n\t// FIXME feature collection giving me an error when trying to access assets\r\n\t// this.geoDataService.features.subscribe( (fc: FeatureCollection) => {\r\n\r\n\tthis.geoDataService.loaded.subscribe(e => {\r\n\t\t//console.log(\"loading should work?\")\r\n\t  this.loaded = e;\r\n\t}, error => {\r\n\t\t//console.log(\"GOT HERE- NO PROJ FOUND\")\r\n\t\tthis.projectsExist = false;\r\n\t  });\r\n\r\n\t//I think doing a more natural refresh in here will cause a dynamic reload\r\n\tthis.geoDataService.features.subscribe( (fc: any) => {\r\n\t  if (fc) {\r\n\t\tif (fc.features.length > 0) {\r\n\t\t  this.imagesExist = true;\r\n\t\t  try {\r\n\t\t\tthis.featureList = fc.features.filter(feature => {\r\n\t\t\t\treturn feature.assets[0].asset_type == \"image\";\r\n\t\t\t  });\r\n\t\t  } catch (error) {\r\n\t\t\t  console.log(error)\r\n\t\t  }\r\n\r\n\t\t\tthis.featureListScroll = this.featureList.slice(0, this.scrollSum);\r\n\t\t} else {\r\n\t\t\t//console.log(\"This didn't work\")\r\n\t\t  this.imagesExist = false;\r\n\t\t}\r\n\t  }\r\n\t});\r\n\r\n\tthis.projectsService.projects.subscribe((projects) => {\r\n\t  this.projects = projects;\r\n\t  if (this.projects.length) {\r\n\t\tthis.projectsExist = true;\r\n\t  } else {\r\n\t\tthis.projectsExist = false;\r\n\t  }\r\n\t});\r\n\r\n\tthis.geoDataService.activeFeature.subscribe((next) => {\r\n\t  if (next) {\r\n\t\tthis.activeFeature = next;\r\n\t  }\r\n\t});\r\n\r\n\tthis.groupsService.groups.subscribe((next) => {\r\n\t  this.groupList = next;\r\n\t});\r\n\r\n\tthis.groupsService.activeGroup.subscribe((next) => {\r\n\t  this.activeGroup = next;\r\n\t});\r\n\r\n\tthis.groupsService.featureImagesExist.subscribe((next) => {\r\n\t  this.groupExist = next;\r\n\t});\r\n\r\n\tthis.groupsService.tempGroup.subscribe((next) => {\r\n\t  this.tempGroup = next;\r\n\t});\r\n\r\n\tthis.groupsService.showGroup.subscribe((next) => {\r\n\t  this.showGroup = next;\r\n\t});\r\n\r\n\tthis.groupsService.activeFeatureNum.pipe(startWith(0)).subscribe((next) => {\r\n\t  this.activeFeatureNum = next;\r\n\t});\r\n\r\n\tthis.groupsService.showSidebar.subscribe((next) => {\r\n\t  this.showSidebar = next;\r\n\t  // this.status = !this.status;\r\n\t  if (next) {\r\n\t\tthis.status = true;\r\n\t  } else {\r\n\t\tthis.status = false;\r\n\t  }\r\n\t});\r\n\r\n\tthis.groupsService.setActiveFeatureNum(0);\r\n  }\r\n\r\n  getPath(): string {\r\n\t// let featureSource = this.environment.apiUrl + '/assets/' + this.activeFeature.assets[0].path;\r\n\tlet activeGroupObj = this.groupList.filter(realGroup => realGroup.name === this.activeGroup);\r\n\tif (activeGroupObj[0] != undefined) {\r\n\t  if (activeGroupObj[0].features[this.activeFeatureNum].assets[0].path == undefined) {\r\n\t\tthis.groupsService.setActiveFeatureNum(0);\r\n\t\t// this.groupsService.setActiveFeatureNum(0);\r\n\t\tif (activeGroupObj[0].features[this.activeFeatureNum] == undefined) {\r\n\t\t  this.groupsService.setActiveGroup(this.groupList[0].name);\r\n\t\t}\r\n\t  }\r\n\t}\r\n\tlet featureSource = this.environment.apiUrl + '/assets/' + activeGroupObj[0].features[this.activeFeatureNum].assets[0].path;\r\n\tthis.groupsService.setActiveFeatureId(activeGroupObj[0].features[this.activeFeatureNum].id);\r\n\tfeatureSource = featureSource.replace(/([^:])(\\/{2,})/g, '$1/');\r\n\treturn featureSource;\r\n  }\r\n\r\n  appendSum() {\r\n\tif (this.featureList.length != 0) {\r\n\t  if (this.scrollSum == this.featureList.length) {\r\n\t\tthis.spinner.hide();\r\n\t\tthis.scrolling = false;\r\n\t\treturn;\r\n\t  }\r\n\t\t//If scrollSum is larger than the length of the feature list, curtail it to just be the length\r\n\t  if (this.scrollSum > this.featureList.length) {\r\n\t\tthis.scrollSum = this.featureList.length;\r\n\t  }\r\n\t}\r\n\tthis.featureListScroll = this.featureList.slice(0, this.scrollSum);\r\n\tsetTimeout(() => {\r\n\t  this.spinner.hide();\r\n\t  this.scrolling = false;\r\n\t}, 1300);\r\n  }\r\n\r\n  onScroll() {\r\n\tif (!this.scrolling) {\r\n\t  this.spinner.show();\r\n\t  this.scrollSum += 10;\r\n\t  this.appendSum();\r\n\t  this.scrolling = true;\r\n\t}\r\n\t// if (this.notscrolly && this.notEmptyPost) {\r\n\t//   this.spinner.show();\r\n\t//   this.notscrolly = false;\r\n\t//   this.loadNextPost();\r\n\t// }\r\n\t// console.log('scrolled!!');\r\n  }\r\n\r\n  \r\n  openCreateProjectModal() {\r\n\tthis.dialog.open(ModalCreateProjectComponent, {\r\n\t  height: '400px',\r\n\t  width: '600px',\r\n\t});\r\n\r\n\t// modal.afterClosed().subscribe( (files: Array<RemoteFile>) => {\r\n\t//   this.geoDataService.importFileFromTapis(this.selectedProject.id, files);\r\n\t// });\r\n  }\r\n\r\n}\r\n","import {Component, OnInit, EventEmitter, Input, TemplateRef} from '@angular/core';\r\nimport {Feature, Project} from '../../models/models';\r\nimport {GeoDataService} from '../../services/geo-data.service';\r\nimport {AppEnvironment, environment} from '../../../environments/environment';\r\nimport {GroupsService} from \"../../services/groups.service\";\r\nimport {ProjectsService} from \"../../services/projects.service\";\r\nimport { BsModalService } from 'ngx-foundation/modal';\r\nimport { BsModalRef } from 'ngx-foundation/modal/bs-modal-ref.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FormsService, tags } from 'src/app/services/forms.service';\r\nimport { ScrollService } from 'src/app/services/scroll.service';\r\n\r\n@Component({\r\n  selector: 'app-image-box',\r\n  templateUrl: './image-box.component.html',\r\n  styleUrls: ['./image-box.component.scss']\r\n})\r\n\r\nexport class ImageBoxComponent implements OnInit {\r\n  @Input() feature: Feature;\r\n  // @Output() clickRequest = new EventEmitter<Feature>();\r\n  environment: AppEnvironment;\r\n  featureSource: string;\r\n  featurePath: string;\r\n  status: boolean = false; //Controls the whether or not an image box is selected or not\r\n  hasGroup: boolean = false;\r\n  colors: Array<string> = [];\r\n  groupList: Array<any>;\r\n  coordinates: Array<any>;\r\n  containingGroupList: Array<any>;\r\n  currentGroup: string = \"hello\";\r\n  tempGroup: Array<Feature>;\r\n  modalRef: BsModalRef;\r\n  activeGroup: string;\r\n\r\n  public selectedProject: Project;\r\n\r\n  unselectAll: boolean = false;\r\n\r\n  tagList: tags[] = this.formsService.getTags();\r\n\r\n  // FIXME Bad\r\n  imageCollection: any = {};\r\n\r\n  constructor( private geoDataService: GeoDataService,\r\n\t\t\t   private groupsService: GroupsService,\r\n\t\t\t   private projectsService: ProjectsService,\r\n\t\t\t   private modalService: BsModalService,\r\n\t\t\t   private formsService: FormsService,\r\n\t\t\t   private dialog: MatDialog,\r\n\t\t\t   private scrollService: ScrollService\r\n\t\t\t ){ }\r\n\r\n  ngOnInit() {\r\n\tthis.environment = environment;\r\n\tlet featureSource = this.environment.apiUrl + '/assets/' + this.feature.assets[0].path;\r\n\tfeatureSource = featureSource.replace(/([^:])(\\/{2,})/g, '$1/');\r\n\tthis.featureSource = featureSource;\r\n\tthis.coordinates = this.feature.geometry['coordinates'];\r\n\t// console.log(coordinates[0]);\r\n\r\n\tthis.projectsService.activeProject.subscribe(next => {\r\n\t  this.selectedProject = next;\r\n\t});\r\n\r\n\tthis.groupsService.groups.subscribe((next) => {\r\n\t  this.groupList = next;\r\n\r\n\t//   console.log(this.groupList)\r\n\t//   console.log(\"HELLOOOOOOO\")\r\n\t  if (this.groupList != null && this.groupList.length > 0 && this.featureSource != null) {\r\n\t\t// console.log(this.groupList)\r\n\t\t\r\n\t\tthis.groupList.forEach(e => {\r\n\t\t\t// console.log(e)\r\n\t\t\te.features.forEach(c => {\r\n\r\n\t\t\tif (c.id == this.feature.id) {\r\n\t\t\t  if (!this.colors.includes(e.color)) {\r\n\t\t\t\tthis.colors.push(e.color);\r\n\t\t\t\t//console.log(e.color);\r\n\t\t\t  }\r\n\t\t\t  this.hasGroup = true;\r\n\t\t\t}\r\n\t\t  });\r\n\t\t});\r\n\t  }\r\n\t});\r\n\r\n\tthis.groupsService.tempGroup.subscribe((next) => {\r\n\t  this.tempGroup = next;\r\n\t});\r\n\r\n\tthis.groupsService.activeGroup.subscribe((next) => {\r\n\t  this.activeGroup = next;\r\n\t});\r\n\r\n\r\n\tthis.groupsService.unselectAll.subscribe((next) => {\r\n\t  this.unselectAll = next;\r\n\t  if (this.unselectAll == true) {\r\n\t\tthis.status = false;\r\n\t  }\r\n\t});\r\n\tlet featurePath = this.feature.assets[0].display_path\r\n\tfeaturePath = this.feature.assets[0].display_path\r\n\tthis.featurePath = featurePath\r\n  }\r\n\r\n  // click() {\r\n  //   this.clickRequest.emit(this.feature);\r\n\r\n  // // imageSelect(event: any) {\r\n  // //   if (event.target.classList.contains('img-selected')) {\r\n  // //     this.renderer.removeClass(event.target, \"img-selected\");\r\n  // //     this.renderer.addClass(event.target, \"img-unselected\");\r\n  // //   } else {\r\n  // //     this.renderer.removeClass(event.target, \"img-unselected\");\r\n  // //     this.renderer.addClass(event.target, \"img-selected\");\r\n  // //   }\r\n  // // }\r\n\r\n  // }\r\n  // delete() {\r\n  //   this.geoDataService.deleteFeature(this.feature);\r\n  // }\r\n\r\n\r\n  imageSelect() {\r\n\tif (this.unselectAll == true) {\r\n\t  this.unselectAll = false;\r\n\t  this.groupsService.setUnselectAll(false);\r\n\t  this.tempGroup = []\r\n\t}\r\n\tthis.status = !this.status;\r\n\tif(this.status) {\r\n\t\tthis.groupsService.setItemsSelected(this.status)\r\n\t}\r\n\r\n\tif (this.tempGroup.filter(v => v.assets[0].id == this.feature.assets[0].id).length > 0) {\r\n\t  this.tempGroup = this.tempGroup.filter(v => v.assets[0].id != this.feature.assets[0].id);\r\n\t} else {\r\n\t  this.tempGroup.push(this.feature);\r\n\t}\r\n\r\n\tthis.groupsService.addTempGroup(this.tempGroup);\r\n\t// console.log(this.tempGroup.filter(v => v.assets[0].id == feature.assets[0].id).length > 0)\r\n\r\n\t// Hide group-bar\r\n\tif (this.tempGroup.length == 0) {\r\n\t  this.groupsService.setShowGroup(false);\r\n\t  this.groupsService.setItemsSelected(false);\r\n\t} else {\r\n\t  this.groupsService.setShowGroup(true);\r\n\t}\r\n\r\n  }\r\n\r\n  imageZoom(template: TemplateRef<any>) {\r\n\t// this.modalRef = this.modalService.show(template, {class: 'full'});\r\n\tthis.dialog.open(template);\r\n  }\r\n\r\n  imageDelete() {\r\n\tconst geoData = this.geoDataService;\r\n\tthis.tempGroup.forEach(function (value) {\r\n\t\tgeoData.deleteFeature(value);\r\n\t})\r\n\t//Resets contents of temp group\r\n\tthis.groupsService.addTempGroup([])\r\n\tthis.scrollService.setScrollRestored(true)\r\n  }\r\n\r\n  openMoreGroupsModal(template: TemplateRef<any>) {\r\n\t// this.modalRef = this.modalService.show(template, {class: 'tiny'});\r\n\tthis.dialog.open(template);\r\n  }\r\n\r\n  openImageDeleteModal(template: TemplateRef<any>) {\r\n\tthis.scrollService.setScrollPosition()\r\n\t// this.modalRef = this.modalService.show(template, {class: 'tiny'});\r\n\tthis.dialog.open(template);\r\n  }\r\n\r\n  deleteFromGroup(color: string) {\r\n\t// console.log(this.groupList);\r\n\tthis.groupList.forEach(e => {\r\n\t  // When it is the sole feature\r\n\t  if (e.features.length <= 1) {\r\n\t\tthis.groupList = this.groupList.filter(e => e.color != color);\r\n\t  } else {\r\n\t\tif (e.color == color) {\r\n\t\t  e.features = e.features.filter(i => i.id != this.feature.id);\r\n\t\t}\r\n\t  }\r\n\t});\r\n\r\n\tlet featProp = this.feature.properties;\r\n\r\n\tfeatProp.group = featProp.group.filter(e => e.color != color);\r\n\r\n\tthis.geoDataService.updateFeatureProperty(this.selectedProject.id,\r\n\t\t\t\t\t\t\t\t\t\t\t  Number(this.feature.id),\r\n\t\t\t\t\t\t\t\t\t\t\t  featProp);\r\n\r\n\tthis.groupsService.addGroup(this.groupList);\r\n\tthis.colors = this.colors.filter(e => e != color);\r\n  }\r\n\r\n  openImageAddModal(template: TemplateRef<any>) {\r\n\t// this.modalRef = this.modalService.show(template, {class: 'tiny'});\r\n\tthis.dialog.open(template);\r\n  }\r\n\r\n  selectGroupForm (name: string, feat: Feature) {\r\n\tlet color = \"\";\r\n\tthis.groupsService.setActiveFeatureNum(0);\r\n\tthis.groupList.forEach(e => {\r\n\t  if (e.name == name) {\r\n\t\t//   console.log(this.feature)\r\n\t\te.features.push(this.feature);\r\n\t\tcolor = e.color;\r\n\t  }\r\n\t});\r\n\r\n\tlet featProp = feat.properties;\r\n\tif (featProp.group) {\r\n\t  let featGroupList = featProp.group.map(e => {\r\n\t\treturn e.name;\r\n\t  });\r\n\r\n\t  if (!featGroupList.includes(name)) {\r\n\t\tfeatProp.group.push({\r\n\t\t  name: name,\r\n\t\t  color: color,\r\n\t\t});\r\n\t  }\r\n\t} else {\r\n\t  featProp.group = [];\r\n\t  featProp.group.push({\r\n\t\tname: name,\r\n\t\tcolor: color,\r\n\t  });\r\n\t}\r\n\r\n\tthis.groupList.forEach(e => {\r\n\t\tif (e.name == this.activeGroup) {\r\n\t\t\tthis.tempGroup = e.features;\t\r\n\t\t}\r\n\t\t});\r\n\t// console.log(this.tagList)\r\n\t\r\n\tfor (let tag of this.tagList){\r\n\t\tif (tag.feature === this.tempGroup[0].id && tag.groupName === name){\r\n\t\t\tlet formItem: tags = {\r\n\t\t\t\ttype: tag.type,\r\n\t\t\t\tgroupName: name,\r\n\t\t\t\tlabel: tag.label,\r\n\t\t\t\t// value: this.formValue,\r\n\t\t\t\t// required: this.formRequired,\r\n\t\t\t\toptions: tag.options,\r\n\t\t\t\tfeature: this.feature.id,\r\n\t\t\t\textra: []\r\n\t\t\t}\r\n\t\t\tthis.formsService.saveTag(this.activeGroup, formItem, formItem.label)\r\n\t\t}\r\n\t}\r\n\r\n\t// console.log(name)\r\n\t// console.log(featProp)\r\n\t// console.log(this.tempGroup[0].id)\r\n\tthis.geoDataService.updateFeatureProperty(this.selectedProject.id,\r\n\t\t\t\t\t\t\t\t\t\t\t  Number(feat.id),\r\n\t\t\t\t\t\t\t\t\t\t\t  featProp);\r\n\r\n\tthis.groupsService.addGroup(this.groupList);\r\n  }\r\n\r\n  addGroups(name: string) {\r\n\t  this.tempGroup.forEach( (feat) => {\r\n\t\t  this.selectGroupForm(name, feat)\r\n\t  })\r\n\t}\r\n\r\n  getGroupNameFromColor(color: string) {\r\n\tthis.groupList.forEach(e => {\r\n\t  if (e.color == color) {\r\n\t\tthis.currentGroup = e.name;\r\n\t  }\r\n\t});\r\n  }\r\n\r\n}\r\n","import { Component, Input, OnInit, OnDestroy, OnChanges, Output, EventEmitter } from '@angular/core';\r\nimport { FormsService } from '../../../../services/forms.service';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { consoleTestResultHandler } from 'tslint/lib/test';\r\nimport { connectableObservableDescriptor } from 'rxjs/internal/observable/ConnectableObservable';\r\n\r\n@Component({\r\n  selector: 'app-form-generator',\r\n  templateUrl: './form-generator.component.html',\r\n  styleUrls: ['./form-generator.component.scss']\r\n})\r\n\r\nexport class FormGeneratorComponent implements OnInit, OnDestroy {\r\n  @Input() field: any;\r\n  private formGroup$: Subscription;\r\n  form: FormGroup;\r\n  checked: boolean = false;\r\n  checkedOpt: object [] = this.formsService.getCheckedOpt();\r\n  colorArray: Array<string> = []\r\n\r\n  constructor(private formsService: FormsService) { }\r\n\r\n  ngOnInit() {\r\n\r\n\tthis.formGroup$ = this.formsService.formGroup.subscribe((next) => {\r\n\t  this.form = next;\r\n\t});\r\n\r\n  // console.log(this.formsService.getCheckedOpt())\r\n  // this.formsService.addCheckedOpt(this.field.options[0]);\r\n\r\n  // this.field.options.forEach(function (value) {\r\n    \r\n  // console.log(\"GOT HERE\")\r\n  //   if(this.formsService.getCheckedOpt().length != 0){\r\n  //     console.log(\"GOT HERE\")\r\n  //     const index = this.formsService.getCheckedOpt().findIndex(item => item === value);\r\n  //     if (index > -1){\r\n  //       this.checked = true\r\n  //     }\r\n  //   }});\r\n\r\n  //   console.log(\"GOT HERE\")\r\n  \r\n    this.generateColors()\r\n  }\r\n \r\n  //Generates a key:value list of colors ranging from green (#00FF00) to red (#FF0000) based on passed in info\r\n  generateColors(){\r\n    let itemCount = this.field.options.length\r\n    let isOdd = false\r\n    if( itemCount % 2 === 1 ) {\r\n      //if there are an odd number of items in the collection, mark it and decriment the counter\r\n      isOdd = true\r\n      itemCount --\r\n    }\r\n    //Subtract 2 from item count (first entry is always green, #00FF00, last entry is always red, #FF0000\r\n    //Then half the item count, and use it to divide 255, this gives the amount we have to increment the colors\r\n    itemCount = (itemCount - 2)/2\r\n    let incrementVal = Math.floor(255/itemCount)\r\n    if (incrementVal === 255) { incrementVal = Math.floor(incrementVal/2) }\r\n    this.colorArray.push(\"#00FF00\")\r\n    let baseNum = 0\r\n    let temp\r\n    //First loop, counts up from zero towards 255\r\n    for (let index = 0; index < itemCount; index++) {\r\n      baseNum = baseNum + incrementVal\r\n      temp = baseNum.toString(16)\r\n      this.colorArray.push(`#${temp}FF00`)\r\n    }\r\n    //if there is an odd number of selections, push full yellow as a midpoint in the gradient\r\n    if( isOdd ) { this.colorArray.push(\"#FFFF00\"); }\r\n    baseNum = 255 //Resets baseNum to 255 for the count down\r\n    //Second loop, counts down from 255 towards zero\r\n    for (let index = 0; index < itemCount; index++) {\r\n      baseNum = baseNum - incrementVal\r\n      temp = baseNum.toString(16)\r\n      if (temp.length != 2) { temp = \"0\" + temp; }\r\n      this.colorArray.push(`#FF${temp}00`)\r\n    }\r\n    //Finally, pushes the color code for red onto the stack for the last entry\r\n    this.colorArray.push('#FF0000')\r\n  }\r\n\r\n// export class FormGeneratorComponent implements OnInit, OnChanges {\r\n  name = new FormControl('');\r\n\r\n  // get isValid() { return this.form.controls[this.field.label].valid; }\r\n\r\n  ngOnDestroy() {\r\n\tthis.formGroup$.unsubscribe();\r\n  }\r\n\r\n  // @Output() onSubmit = new EventEmitter();\r\n  // @Input() fields: any[] = [];\r\n  // form: FormGroup;\r\n\r\n  // ngOnInit() {\r\n  //\tthis.generateFields();\r\n  //\t// let fieldsCtrls = {};\r\n  //\t// for (let f of this.fields) {\r\n  //\t//   if (f.type != 'checkbox') {\r\n  //\t// fieldsCtrls[f.name] = new FormControl(f.value || '', Validators.required)\r\n  //\t//   } else {\r\n  //\t// let opts = {};\r\n  //\t// for (let opt of f.options) {\r\n  //\t//   opts[opt.key] = new FormControl(opt.value);\r\n  //\t// }\r\n  //\t// fieldsCtrls[f.name] = new FormGroup(opts)\r\n  //\t//   }\r\n  //\t// }\r\n  //\t// this.form = new FormGroup(fieldsCtrls);\r\n  // }\r\n\r\n  // // Combine this with\r\n  // ngOnChanges() {\r\n  //\tthis.generateFields();\r\n  // }\r\n\r\n  // generateFields() {\r\n  //\tlet fieldsCtrls = {};\r\n\r\n  //\tfor (let f of this.fields) {\r\n  //\t  // if (f.type != 'checkbox') {\r\n  //\t\tfieldsCtrls[f.name] = new FormControl(f.value || '', Validators.required)\r\n  //\t  // } else {\r\n  //\t\t// let opts = {};\r\n  //\t\t// for (let opt of f.options) {\r\n  //\t\t//   opts[opt.key] = new FormControl(opt.value);\r\n  //\t\t// }\r\n  //\t\t// fieldsCtrls[f.name] = new FormGroup(opts)\r\n  //\t  // }\r\n  //\t}\r\n\r\n  //\tthis.form = new FormGroup(fieldsCtrls);\r\n  // }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-side-bar',\r\n  templateUrl: './side-bar.component.html',\r\n  styleUrls: ['./side-bar.component.scss']\r\n})\r\nexport class SideBarComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, OnDestroy, TemplateRef} from '@angular/core';\r\nimport {FeatureCollection} from 'geojson';\r\nimport { Project } from '../../../models/models';\r\nimport { ProjectsService } from '../../../services/projects.service';\r\nimport { FormsService } from '../../../services/forms.service';\r\nimport { GroupsService} from '../../../services/groups.service';\r\nimport { GeoDataService } from '../../../services/geo-data.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Subscription } from 'rxjs';\r\nimport { templateJitUrl } from '@angular/compiler';\r\nimport { Feature } from '@turf/turf';\r\n\r\n@Component({\r\n  selector: 'app-select-group',\r\n  templateUrl: './select-group.component.html',\r\n  styleUrls: ['./select-group.component.scss']\r\n})\r\nexport class SelectGroupComponent implements OnInit, OnDestroy {\r\n\r\n  featureList: Array<any> = [];\r\n  features: FeatureCollection;\r\n\r\n  groups$: Subscription;\r\n  activeGroup$: Subscription;\r\n\r\n  public selectedProject: Project;\r\n\r\n  selectedGroup: string;\r\n  groupList: Array<any>;\r\n  showSidebar: boolean\r\n  activeGroup: string;\r\n  showSubitem: boolean = true;\r\n  \r\n  currentIcon: string = \"fa-house-damage\";\r\n  choice: string;\r\n  tempGroup: Array<Feature>;\r\n\r\n  iconList: Array<any> = [{\"id\":\"fa-house-damage\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf6f1; house-damage\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-car\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf1b9; car\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-tree\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf1bb; tree\"},\r\n\r\n\t\t\t\t\t\t\t{\"id\":\"fa-school\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf549; school\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-archway\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf557; archway\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-building\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf1ad; building\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-bus\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf207; bus\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-church\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf51d; church\"},\r\n\r\n\t\t\t\t\t\t\t{\"id\":\"fa-helicopter\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf533; helicopter\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-hospital-alt\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf47d; hospital\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-hotel\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf594; hotel\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-igloo\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf7ae; igloo\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-motorcycle\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf21c; motorcycle\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-place-of-worship\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf67f; place-of-worship\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-plane\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf072; plane\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-school\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf549; school\"},\r\n\r\n\r\n\t\t\t\t\t\t\t{\"id\":\"fa-rocket\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf135; rocket\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-ship\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf21a; ship\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-shopping-cart\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf07a; shopping-cart\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-shuttle-van\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf5b6; shuttle-van\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-monument\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf5a6; monument\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-store\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf54e; store\"},\r\n\r\n\t\t\t\t\t\t\t{\"id\":\"fa-subway\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf239; subway\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-taxi\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf1ba; taxi\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-train\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf238; train\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-truck\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf0d1; truck\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-truck-pickup\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf63c; truck-pickup\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-university\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf19c; university\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-warehouse\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf494; warehouse\"},\r\n\t\t\t\t\t\t\t{\"id\":\"fa-bolt\",\r\n\t\t\t\t\t\t\t\"unicode\": \"&#xf0e7; bolt\"},\r\n\t\t\t\t\t\t\t// {\"id\":\"fa-tree\",\r\n\t\t\t\t\t\t\t// \"unicode\": \"&#xf1bb; tree\"},\r\n\t\t\t\t\t\t\t// {\"id\":\"fa-tree\",\r\n\t\t\t\t\t\t\t// \"unicode\": \"&#xf1bb; tree\"},\r\n\t\t\t\t\t\t\t// {\"id\":\"fa-tree\",\r\n\t\t\t\t\t\t\t// \"unicode\": \"&#xf1bb; tree\"},\r\n\t\t\t\t\t\t\t// {\"id\":\"fa-tree\",\r\n\t\t\t\t\t\t\t// \"unicode\": \"&#xf1bb; tree\"},\r\n\t\t\t\t\t\t\t// {\"id\":\"fa-tree\",\r\n\t\t\t\t\t\t\t// \"unicode\": \"&#xf1bb; tree\"},\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t];\r\n\r\n  constructor(private formsService: FormsService,\r\n\t\t\t  private groupsService: GroupsService,\r\n\t\t\t  private geoDataService: GeoDataService,\r\n\t\t\t  private projectsService: ProjectsService,\r\n\t\t\t  private dialog: MatDialog) { }\r\n\r\n  ngOnInit() {\r\n\r\n\t// this.geoDataService.features.subscribe( (fc: FeatureCollection) => {\r\n\t//   if (fc) {\r\n\t// \tthis.featureList = fc.features;\r\n\t//   }\r\n\t// });\r\n\tthis.geoDataService.features.subscribe( (fc: FeatureCollection) => {\r\n\t\tthis.features = fc;\r\n  \r\n\t\tif (this.features != undefined) {\r\n\t\t  this.featureList = this.features.features;\r\n\t\t//   this.groupsService.setActiveProject(this.featureList[0]);\r\n  \r\n\t\t  // TODO This should activate persistence by looping through all features and creating new groups and\r\n\t\t  //\r\n\t\t//   this.groupsService.setGroupProperties(this.featureList);\r\n  \r\n\t\t  // console.log(this.featureList[this.activeFeatureNum].assets[0].path);\r\n\t\t  // this.activeFeature = this.featureList[this.activeFeatureNum];\r\n\t\t}\r\n\t  });\r\n\r\n\t  this.groupsService.tempGroup.subscribe((next) => {\r\n\t\tthis.tempGroup = next;\r\n\t  });\r\n\t//   console.log(this.tempGroup)\r\n\r\n\tthis.projectsService.activeProject.subscribe(next => {\r\n\t  this.selectedProject = next;\r\n\t});\r\n\r\n\tthis.groups$ = this.groupsService.groups.subscribe((next) => {\r\n\t  this.groupList = next;\r\n\t});\r\n\r\n\t// console.log(this.groupList)\r\n\r\n\tthis.activeGroup$ = this.groupsService.activeGroup.subscribe((next) => {\r\n\t  this.activeGroup = next;\r\n\t});\r\n  }\r\n\r\n  selectGroupForm(group: string) {\r\n\tthis.groupsService.setActiveGroup(group);\r\n\r\n\tlet activeGroup = this.groupList.filter(what => what.name == this.activeGroup);\r\n\r\n\tif (activeGroup[0].features.length == 0) {\r\n\t  this.groupsService.setFeatureImagesExist(false);\r\n\t} else {\r\n\t  this.groupsService.setFeatureImagesExist(true);\r\n\t}\r\n\tthis.groupsService.setActiveFeatureNum(0);\r\n\tthis.formsService.changeGroupForm(group);\r\n  }\r\n\r\n  openRenameOptionModal(template: TemplateRef<any>) {\r\n\tthis.dialog.open(template);\r\n  }\r\n\r\n  deleteGroup() {\r\n\tthis.groupsService.addGroup(this.groupList.filter(what => what.name != this.activeGroup))\r\n\r\n\tfor (let feat of this.featureList) {\r\n\t  // this should be a shared group of\r\n\t  // all the currently created objects of a particular feature\r\n\r\n\t  let featProp = feat.properties;\r\n\t  featProp.group = featProp.group.filter(e => e.name != this.activeGroup);\r\n\r\n\t  this.geoDataService.updateFeatureProperty(this.selectedProject.id,\r\n\t\t\t\t\t\t\t\t\t\t\t\tNumber(feat.id),\r\n\t\t\t\t\t\t\t\t\t\t\t\tfeatProp);\r\n\t}\r\n\tif (this.groupList.length <= 0) {\r\n\t  this.showSidebar = false;\r\n\t  this.groupsService.setShowSidebar(this.showSidebar);\r\n\t} else {\r\n\t  this.groupsService.setActiveGroup(this.groupList[0].name);\r\n\r\n\t  // let activeGroup = this.groupList.filter(what => what.name == this.activeGroup[0].name);\r\n\r\n\t  // if (activeGroup[0].features.length == 0) {\r\n\t  //\tthis.groupsService.setFeatureImagesExist(false);\r\n\t  // } else {\r\n\t  //\tthis.groupsService.setFeatureImagesExist(true);\r\n\t  // }\r\n\t}\r\n  }\r\n\r\n  openRenameModal(template: TemplateRef<any>, name: string) {\r\n\tthis.selectedGroup = name;\r\n\tthis.dialog.open(template);\r\n  }\r\n\r\n  openIconSelection(template: TemplateRef<any>, name:string){\r\n\tthis.selectedGroup =  name;\r\n\tthis.dialog.open(template);\r\n\r\n  }\r\n\r\n  saveIcon(icon: string){\r\n\tthis.groupList.forEach(e => {\r\n\t  if (e.name == this.activeGroup) {\r\n\t\te.icon = icon;\r\n\t\tthis.tempGroup = e.features;\t\r\n\t  }\r\n\t});\r\n\tthis.groupsService.addGroup(this.groupList);\r\n\r\n\tlet index = 0\r\n\tfor (let feat of this.tempGroup) {\r\n\t\tlet featProp = feat.properties;\r\n\t\t console.log(feat.id)/*\r\n\t\t// console.log(this.selectedGroup)\r\n\t\tindex = this.groupList.findIndex(item => item.features[index].id == feat.id);\r\n\t\tfeatProp.group = featProp.group.filter(e => e.name != this.selectedGroup);\r\n\t\t// console.log(index)\r\n\t\tif (featProp.group) {\r\n\t\t\tconsole.log(\"nope\");\r\n\t\t\tfeatProp.group.push({\r\n\t\t\t  name: this.groupList[index].name,\r\n\t\t\t  color: this.groupList[index].color,\r\n\t\t\t  icon: icon\r\n\t\t\t});\r\n\t\t  }\r\n\t\tthis.geoDataService.updateFeatureProperty(this.selectedProject.id, Number(feat.id), featProp );*/\r\n\t\t\r\n\tthis.groupsService.setActiveGroup(this.activeGroup);\r\n\t\tthis.formsService.saveStyles(\"default\", Number(feat.id))\r\n\t}\r\n\r\n\r\n\t//   this.currentIcon = icon;\r\n\t//   this.groupList.forEach(e => {\r\n\t// \tif (e.name == this.selectedGroup) {\r\n\t// \t  e.icon = icon;\r\n\t// \t}\r\n\t//   });\r\n\t//   this.groupsService.addGroup(this.groupList);\r\n\t//   for (let feat of this.featureList) {\r\n\t// \tlet featProp = feat.properties;\r\n\t// \tlet groupProp = this.tempGroup\r\n\t// \tconsole.log(featProp)\r\n\t// \tfeatProp.group = featProp.group.filter(e => e.name != this.activeGroup);\r\n\t// \tif (featProp.group) {\r\n\t// \t\tconsole.log(\"nope\");\r\n\t// \t\tfeatProp.group.push({\r\n\t// \t\t  name: featProp.name,\r\n\t// \t\t  color: featProp.color,\r\n\t// \t\t  icon: icon\r\n\t// \t\t});\r\n\t// \t  }\r\n\t// \tthis.geoDataService.updateFeatureProperty(this.selectedProject.id, Number(feat.id), featProp );\r\n\t// \tthis.groupsService.setActiveGroup(this.selectedGroup);\r\n\t// }\r\n\r\n  }\r\n\r\n  isChecked(name: string) {\r\n\tif (this.activeGroup == name) {\r\n\t  return \"checked\";\r\n\t} else {\r\n\t  return \"\";\r\n\t}\r\n  }\r\n\r\n\r\n  renameGroup(name: string) {\r\n\tconsole.log(this.activeGroup)\r\n\tthis.groupList.forEach(e => {\r\n\t  if (e.name == this.activeGroup) {\r\n\t\te.name = name;\r\n\t\tthis.tempGroup = e.features;\t\r\n\t  }\r\n\t});\r\n\r\n\t// console.log(this.tempGroup)\r\n\t//  console.log(this.groupList)\r\n\tthis.groupsService.addGroup(this.groupList);\r\n\r\n\t\r\n\r\n\t// for (let feat of this.tempGroup){\r\n\t// \tconsole.log(feat)\r\n\t// \tlet featProp = feat.properties;\r\n\t// \tconsole.log(featProp)\r\n\t// \tif (featProp.group) {\r\n\t// \t\tconsole.log(\"nope\");\r\n\t// \t\tfeatProp.group.push({\r\n\t// \t\t  name: name,\r\n\t// \t\t//   color: ,\r\n\t// \t\t//   icon: \"fa-house-damage\"\r\n\t// \t\t});\r\n\t// \t  }#23E99E #473FB4\r\n\tfor (let feat of this.tempGroup) {\r\n\t\tlet featProp = feat.properties;\r\n\t\t// console.log(feat.id)\r\n\t\t// console.log(this.selectedGroup)\r\n\t\tconst index = this.groupList.findIndex(item => item.features[0].id == feat.id);\r\n\t\tfeatProp.group = featProp.group.filter(e => e.name != this.selectedGroup);\r\n\t\t// console.log(index)\r\n\t\tif (featProp.group) {\r\n\t\t\tconsole.log(\"nope\");\r\n\t\t\tfeatProp.group.push({\r\n\t\t\t  name: name,\r\n\t\t\t  color: this.groupList[index].color,\r\n\t\t\t  icon: this.groupList[index].icon\r\n\t\t\t});\r\n\t\t  }\r\n\t\tthis.geoDataService.updateFeatureProperty(this.selectedProject.id, Number(feat.id), featProp );\r\n\t\t\r\n\tthis.groupsService.setActiveGroup(name);\r\n\t}\r\n\t// console.log(this.selectedProject.id)\r\n\t// console.log(this.tempGroup[0])\r\n\r\n\r\n\r\n\t// let activeGroup = this.groupList.filter(what => what.name == this.activeGroup[0].name);\r\n\r\n\t// if (activeGroup[0].features.length == 0) {\r\n\t//   this.groupsService.setFeatureImagesExist(false);\r\n\t// } else {\r\n\t//   this.groupsService.setFeatureImagesExist(true);\r\n\t// }\r\n  }\r\n\r\n  expandPanel() {\r\n\tthis.showSubitem = !this.showSubitem;\r\n\tif (this.showSubitem) {\r\n\r\n\t} else {\r\n\t}\r\n  }\r\n\r\n  ngOnDestroy() {\r\n\tthis.groups$.unsubscribe();\r\n\tthis.activeGroup$.unsubscribe();\r\n  }\r\n}\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport {FeatureCollection} from 'geojson';\r\nimport { Project } from '../../../models/models';\r\nimport { ProjectsService } from '../../../services/projects.service';\r\nimport { GeoDataService } from '../../../services/geo-data.service';\r\nimport { FormsService } from '../../../services/forms.service';\r\nimport { GroupsService } from '../../../services/groups.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-select-image',\r\n  templateUrl: './select-image.component.html',\r\n  styleUrls: ['./select-image.component.scss']\r\n})\r\n\r\nexport class SelectImageComponent implements OnInit, OnDestroy {\r\n  groups$: Subscription;\r\n  activeFeatureNum$: Subscription;\r\n  activeGroup$: Subscription;\r\n\r\n  featureList: Array<any> = [];\r\n  public selectedProject: Project;\r\n  groupList: Array<any> = [];\r\n  activeGroup: string;\r\n  activeFeatureNum: number;\r\n  showSidebar: boolean\r\n  showSubitem: boolean = true;\r\n\r\n  constructor(private formsService: FormsService,\r\n\t\t\t  private groupsService: GroupsService,\r\n\t\t\t  private geoDataService: GeoDataService,\r\n\t\t\t  private projectsService: ProjectsService) {}\r\n\r\n  ngOnInit() {\r\n\tthis.geoDataService.features.subscribe( (fc: FeatureCollection) => {\r\n\t  if (fc) {\r\n\t\tthis.featureList = fc.features;\r\n\t  }\r\n\t});\r\n\r\n\tthis.projectsService.activeProject.subscribe(next => {\r\n\t  this.selectedProject = next;\r\n\t});\r\n\r\n\tthis.groups$ = this.groupsService.groups.subscribe((next) => {\r\n\t  this.groupList = next;\r\n\t});\r\n\r\n\tthis.activeFeatureNum$ = this.groupsService.activeFeatureNum.subscribe((next) => {\r\n\t  this.activeFeatureNum = next;\r\n\t});\r\n\r\n\tthis.activeGroup$ = this.groupsService.activeGroup.subscribe((next) => {\r\n\t  this.activeGroup = next;\r\n\t});\r\n  }\r\n\r\n  getActiveFeatures() {\r\n\tlet activeGroupObj = this.groupList.filter(realGroup => realGroup.name === this.activeGroup);\r\n\treturn activeGroupObj[0].features;\r\n  }\r\n\r\n  jumpToImage(asset: any) {\r\n\tlet index = 0;\r\n\tthis.groupList.forEach(e => {\r\n\t  if (e.name == this.activeGroup) {\r\n\t\tindex = e.features.indexOf(asset)\r\n\t  }\r\n\t});\r\n\tthis.groupsService.setActiveFeatureNum(index);\r\n  }\r\n\r\n  isActiveFeature(asset: any) {\r\n\tlet index = 0;\r\n\tthis.groupList.forEach(e => {\r\n\t  if (e.name == this.activeGroup) {\r\n\t\tindex = e.features.indexOf(asset)\r\n\t  }\r\n\t});\r\n\treturn this.activeFeatureNum == index;\r\n  }\r\n\r\n  deleteGroup() {\r\n\tthis.groupsService.addGroup(this.groupList.filter(what => what.name != this.activeGroup))\r\n\r\n\tfor (let feat of this.featureList) {\r\n\t  // this should be a shared group of\r\n\t  // all the currently created objects of a particular feature\r\n\r\n\t  let featProp = feat.properties;\r\n\t  featProp.group = featProp.group.filter(e => e.name != this.activeGroup);\r\n\r\n\t  this.geoDataService.updateFeatureProperty(this.selectedProject.id,\r\n\t\t\t\t\t\t\t\t\t\t\t\tNumber(feat.id),\r\n\t\t\t\t\t\t\t\t\t\t\t\tfeatProp);\r\n\t}\r\n\r\n\tif (this.groupList.length <= 0) {\r\n\t  this.showSidebar = false;\r\n\t  this.groupsService.setShowSidebar(this.showSidebar);\r\n\t} else {\r\n\t  this.groupsService.setActiveGroup(this.groupList[0].name);\r\n\t}\r\n  }\r\n\r\n  deleteAsset(assetId: any) {\r\n\tthis.groupList.forEach(group => {\r\n\t  if (group.name === this.activeGroup) {\r\n\t\tif (group.features.length == 1) {\r\n\t\t  this.deleteGroup();\r\n\t\t} else {\r\n\t\t  group.features = group.features.filter(asset => asset.id != assetId);\r\n\t\t  this.groupsService.addGroup(this.groupList);\r\n\t\t}\r\n\t  }\r\n\t});\r\n\r\n\tlet featProp = this.getActiveFeatures();\r\n\tfeatProp.group = featProp.filter(e => e.properties.group.name != this.activeGroup);\r\n\r\n\tthis.geoDataService.updateFeatureProperty(this.selectedProject.id,\r\n\t\t\t\t\t\t\t\t\t\t\t  Number(this.getActiveFeatures()[0].id),\r\n\t\t\t\t\t\t\t\t\t\t\t  featProp);\r\n  }\r\n\r\n  getAssetDisplay(asset: any) {\r\n\tif (asset.assets[0].display_path) {\r\n\t  return /[^/]*$/.exec(asset.assets[0].display_path)[0];\r\n\t} else {\r\n\t  let apath = /[^/]*$/.exec(asset.assets[0].path)[0];\r\n\t  return apath.slice(0, 15) + \"...\"\r\n\t}\r\n  }\r\n\r\n  ngOnDestroy() {\r\n\tthis.groups$.unsubscribe();\r\n\tthis.activeFeatureNum$.unsubscribe();\r\n\tthis.activeGroup$.unsubscribe();\r\n  }\r\n\r\n  expandPanel() {\r\n\tthis.showSubitem = !this.showSubitem;\r\n\tif (this.showSubitem) {\r\n\r\n\t} else {\r\n\t}\r\n  }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-form-fields',\r\n  templateUrl: './form-fields.component.html',\r\n})\r\nexport class FormFieldsComponent implements OnInit {\r\n  @Input() field:any;\r\n  @Input() form:any;\r\n\r\n  get isValid() { return this.form.controls[this.field.name].valid; }\r\n  get isDirty() { return this.form.controls[this.field.name].dirty; }\r\n\r\n  // get isValid() { return true }\r\n  // get isDirty() { return false }\r\n\r\n\r\n  constructor() { }\r\n\r\n  // This file and the HTML connected to this is useless so don't worry about it \r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { FormsService } from 'src/app/services/forms.service';\r\nimport { GroupsService } from 'src/app/services/groups.service';\r\n\r\n@Component({\r\n  selector: 'app-form-checkbox',\r\n  templateUrl: 'form-checkbox.component.html'\r\n})\r\nexport class FormCheckBoxComponent {\r\n  @Input() field:any;\r\n  @Input() form:FormGroup;\r\n  isChecked: boolean = false;\r\n  private activeFeatureId$: Subscription;\r\n  activeFeatureId: number;\r\n  private activeGroup$: Subscription;\r\n  activeGroup: string;\r\n  // get isValid() { return this.form.controls[this.field.name].valid; }\r\n  // get isDirty() { return this.form.controls[this.field.name].dirty; }\r\n\r\n  constructor(private formsService: FormsService,\r\n    private groupsService: GroupsService) { }\r\n\r\n  checkedOpt: any [] = this.formsService.getCheckedOpt()\r\n\r\n  ngOnInit() {\r\n    // console.log(this.field)\r\n    // console.log(this.form)\r\n    this.activeFeatureId$ = this.groupsService.activeFeatureId.subscribe((next) => {\r\n      this.activeFeatureId = next;\r\n    \r\n      this.activeGroup$ = this.activeGroup$ = this.groupsService.activeGroup.subscribe((next) => {\r\n      this.activeGroup = next;\r\n    });\r\n    });\r\n\r\n    // this code checks if the option has been checked or not\r\n    if(this.formsService.getCheckedOpt().length != 0){\r\n      // console.log(this.checkedOpt)\r\n      let index \r\n      this.checkedOpt.forEach(opt => {      \r\n        console.log(\"what\")\r\n        // console.log(opt)\r\n        if(opt != undefined){index = opt.findIndex(item => item.id === this.activeFeatureId && item.label === this.field.label && item.group === this.activeGroup && item.title === this.form['label']);\r\n          // console.log(index)\r\n          if (index > -1){\r\n            this.isChecked = true\r\n          }}\r\n      })\r\n      // const index = this.checkedOpt.findIndex(item => item.id === this.activeFeatureId && item.label === this.field.label );\r\n\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.activeFeatureId$.unsubscribe();\r\n    }\r\n\r\n  // adds/deletes to/from the list of checked options\r\n  selected(e:any, option:object){\r\n    if(e.target.checked){\r\n      console.log(\"Checked\")\r\n      this.formsService.addCheckedOpt(option, this.activeFeatureId, this.activeGroup, this.form['label']);\r\n\r\n    }else{\r\n      console.log(\"Unchecked\")\r\n      this.formsService.deleteCheckedOpt(option, this.activeFeatureId, this.activeGroup, this.form['label']);\r\n    }\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { FormsService } from 'src/app/services/forms.service';\r\nimport { GroupsService } from 'src/app/services/groups.service';\r\n\r\n@Component({\r\n  selector: 'app-form-dropdown',\r\n  templateUrl: './form-dropdown.component.html',\r\n})\r\n\r\nexport class FormDropDownComponent {\r\n  @Input() field:any = {};\r\n  @Input() form:FormGroup;\r\n  chosenTag:string;\r\n  private activeFeatureId$: Subscription;\r\n  activeFeatureId: number;\r\n\r\n  activeGroup: string;\r\n  private activeGroup$: Subscription;\r\n\r\n  constructor(private formsService: FormsService,\r\n    private groupsService: GroupsService) { }\r\n\r\n  //The problem is that I don't actually know the shape of the data here, I've never actually looked at the dropdown box, so I don't know how\r\n  //it operates. Is it one value? A list of values? How should I access them? What should be accessed? \r\n  ngOnInit() {\r\n    this.activeFeatureId$ = this.groupsService.activeFeatureId.subscribe((next) => {\r\n      this.activeFeatureId = next;\r\n    });\r\n\r\n    this.activeGroup$ = this.activeGroup$ = this.groupsService.activeGroup.subscribe((next) => {\r\n      this.activeGroup = next;\r\n    });\r\n\r\n    let index\r\n    this.formsService.getSelectedRadio().forEach(opt=> {\r\n      // console.log(opt)\r\n      if(opt != undefined){\r\n        index = opt.findIndex(item => item.id === this.activeFeatureId && item.compId === 2 && item.groupName === this.activeGroup && item.title === this.form['label']);\r\n        // console.log(index)\r\n        if (index > -1){\r\n          // console.log(opt[index].option)\r\n          this.chosenTag = opt[index].option\r\n        }}\r\n      \r\n      \r\n    });\r\n\r\n    // const index = this.formsService.getSelectedRadio().findIndex(item => item.id === this.activeFeatureId && item.compId === 2);\r\n    // if (index > -1){\r\n    //   this.chosenTag = this.formsService.getSelectedRadio()[index]['option']\r\n    // }\r\n    \r\n    // console.log(this.chosenTag)\r\n  }\r\n\r\n  updateCheckedTag(){ console.log(this.chosenTag); this.formsService.updateSelectedRadio(this.chosenTag, 2, this.activeFeatureId, this.activeGroup, this.form['label']);}\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n// text,email,tel,textarea,password,\r\n@Component({\r\n  selector: 'app-form-file',\r\n  templateUrl: './form-file.component.html',\r\n  styleUrls: ['./form-file.component.scss'],\r\n})\r\nexport class FormFileComponent {\r\n\t@Input() field:any = {};\r\n\t@Input() form:FormGroup;\r\n\tget isValid() { return this.form.controls[this.field.name].valid; }\r\n\tget isDirty() { return this.form.controls[this.field.name].dirty; }\r\n\r\n\tconstructor() {\r\n\r\n\t}\r\n\r\n\tngOnChange(){\r\n\t  console.log(this.field.value);\r\n\t  // this.field.value.\r\n\t}\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { FormsService } from 'src/app/services/forms.service';\r\nimport { GroupsService } from 'src/app/services/groups.service';\r\n\r\n@Component({\r\n  selector: 'app-form-radio',\r\n  templateUrl: './form-radio.component.html',\r\n})\r\nexport class FormRadioComponent {\r\n  @Input() field:any = {};\r\n  @Input() form:FormGroup;\r\n  public chosenTag: string;\r\n  private activeFeatureId$: Subscription;\r\n  activeFeatureId: number;\r\n\r\n  activeGroup: string;\r\n  private activeGroup$: Subscription;\r\n\r\n  constructor(private formsService: FormsService,\r\n    private groupsService: GroupsService) { }\r\n\r\n  ngOnInit() {\r\n    this.activeFeatureId$ = this.groupsService.activeFeatureId.subscribe((next) => {\r\n      this.activeFeatureId = next;\r\n    });\r\n\r\n    this.activeGroup$ = this.activeGroup$ = this.groupsService.activeGroup.subscribe((next) => {\r\n      this.activeGroup = next;\r\n    });\r\n\r\n\r\n    // console.log(this.formsService.getSelectedRadio() )\r\n\r\n    let index\r\n    this.formsService.getSelectedRadio().forEach(opt=> {\r\n      // console.log(opt)\r\n      if(opt != undefined){\r\n        index = opt.findIndex(item => item.id === this.activeFeatureId && item.compId === 0 && item.groupName === this.activeGroup && item.label === this.form['label']);\r\n        // console.log(index)\r\n        if (index > -1){\r\n          // console.log(opt[index].option)\r\n          this.chosenTag = opt[index].option\r\n        }}\r\n      \r\n      \r\n    });\r\n    // if(this.formsService.getSelectedRadio(0)['id'] === this.activeFeatureId){\r\n    // const index = this.formsService.getSelectedRadio().findIndex(item => item.id === this.activeFeatureId && item.compId === 0);\r\n    // console.log(index)\r\n    // if (index > -1){\r\n    //   this.chosenTag = this.formsService.getSelectedRadio()[index]['option']\r\n    // }\r\n  // }\r\n  }\r\n\r\n  updateCheckedTag(){ this.formsService.updateSelectedRadio(this.chosenTag, 0, this.activeFeatureId, this.activeGroup,this.form['label']);}\r\n}","import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { FormsService } from 'src/app/services/forms.service';\r\nimport { GroupsService } from 'src/app/services/groups.service';\r\n\r\n// text,email,tel,textarea,password,\r\n@Component({\r\n  selector: 'app-form-textbox',\r\n  templateUrl: './form-textbox.component.html',\r\n})\r\nexport class FormTextBoxComponent {\r\n  @Input() field:any = {};\r\n  @Input() form:FormGroup;\r\n  note:string;\r\n  notes:string = \"notes\";\r\n  private activeFeatureId$: Subscription;\r\n  activeFeatureId: number;\r\n\r\n  activeGroup: string;\r\n  private activeGroup$: Subscription;\r\n\r\n  get isValid() { return this.form.controls[this.field.name].valid; }\r\n  get isDirty() { return this.form.controls[this.field.name].dirty; }\r\n\r\n  constructor(private formsService: FormsService,\r\n    private groupsService: GroupsService) { }\r\n\r\n  ngOnInit() {\r\n    this.activeFeatureId$ = this.groupsService.activeFeatureId.subscribe((next) => {\r\n      this.activeFeatureId = next;\r\n    });\r\n\r\n    this.activeGroup$ = this.activeGroup$ = this.groupsService.activeGroup.subscribe((next) => {\r\n      this.activeGroup = next;\r\n    });\r\n\r\n    let index\r\n    this.formsService.getSelectedRadio().forEach(opt=> {\r\n      // console.log(opt)\r\n      if(opt != undefined){\r\n        index = opt.findIndex(item => item.id === this.activeFeatureId && item.compID === 3&&item.groupName === this.activeGroup && item.label === this.form['label']);\r\n        // console.log(index)\r\n        if (index > -1){\r\n          // console.log(opt[index].option)\r\n          this.note = opt[index].option\r\n        }\r\n      }\r\n      \r\n      \r\n    });\r\n\r\n    // const index = this.formsService.getNotes().findIndex(item => item.id === this.activeFeatureId);\r\n    // if (index > -1){\r\n    //   this.note = this.formsService.getNotes()[index]['option']\r\n    // }\r\n  }\r\n\r\n  updateNotes(){ \r\n    // console.log(this.form['label'])\r\n    // console.log(this.form.name)\r\n    this.formsService.updateNotes(this.note, 3, this.activeFeatureId, this.activeGroup, this.form['label']); }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { FormsService } from 'src/app/services/forms.service';\r\nimport { GroupsService } from 'src/app/services/groups.service';\r\n\r\n@Component({\r\n  selector: 'app-form-color',\r\n  templateUrl: './form-color.component.html',\r\n  styleUrls: ['./form-color.component.scss']\r\n})\r\nexport class FormColorComponent implements OnInit {\r\n  @Input() field:any = {};\r\n  @Input() form:FormGroup;\r\n  @Input() color:string;\r\n\r\n  public chosenTag: string;\r\n  public chosenColor = \"#ffffff\";\r\n  private activeFeatureId$: Subscription;\r\n  activeFeatureId: number;\r\n\r\n  activeGroup: string;\r\n  private activeGroup$: Subscription;\r\n\r\n  constructor(private formsService: FormsService,\r\n    private groupsService: GroupsService) { }\r\n\r\n  ngOnInit() {\r\n    this.activeFeatureId$ = this.groupsService.activeFeatureId.subscribe((next) => {\r\n      this.activeFeatureId = next;\r\n    });\r\n\r\n    this.activeGroup$ = this.activeGroup$ = this.groupsService.activeGroup.subscribe((next) => {\r\n      this.activeGroup = next;\r\n    });\r\n\r\n    let index\r\n    this.formsService.getSelectedRadio().forEach(opt=> {\r\n      console.log(opt)\r\n      if(opt != undefined){\r\n        index = opt.findIndex(item => item.id === this.activeFeatureId && item.compId === 1 && item.groupName === this.activeGroup && item.label === this.form['label']);\r\n      console.log(index)\r\n      if (index > -1){\r\n        console.log(opt[index].option)\r\n        this.chosenTag = opt[index].option\r\n      }\r\n      }\r\n      \r\n      this.chosenColor = this.color \r\n      \r\n    });\r\n  }\r\n\r\n  updateCheckedTag(){ \r\n    this.formsService.saveStyles(this.chosenColor, this.activeFeatureId)\r\n    this.formsService.updateSelectedRadio(this.chosenTag, 1, this.activeFeatureId, this.activeGroup, this.form['label']); }\r\n\r\n}","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\n// CommonModule for dynamic field\r\nimport {APP_BASE_HREF, CommonModule} from '@angular/common';\r\n\r\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\r\nimport { NgxSpinnerModule } from 'ngx-spinner';\r\nimport {ModalModule, BsDropdownModule, AccordionModule} from 'ngx-foundation';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport { NgxMasonryModule } from 'ngx-masonry';\r\nimport { ToastrModule } from 'ngx-toastr';\r\n\r\n\r\nimport { FileSizeModule } from 'ngx-filesize';\r\nimport { ApiModule} from 'ng-tapis';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { MapComponent} from './components/map/map.component';\r\nimport { MainComponent } from './components/main/main.component';\r\nimport { NotFoundComponent } from './components/notfound/notfound.component';\r\nimport { ControlBarComponent } from './components/control-bar/control-bar.component';\r\nimport { AuthService } from './services/authentication.service';\r\nimport { CallbackComponent } from './components/callback/callback.component';\r\nimport {AuthInterceptor, TokenInterceptor} from './app.interceptors';\r\nimport {ReactiveFormsModule, FormsModule} from '@angular/forms';\r\nimport { ModalFileBrowserComponent } from './components/modal-file-browser/modal-file-browser.component';\r\nimport {environment} from '../environments/environment';\r\nimport { ImageGalleryComponent } from './components/image-gallery/image-gallery.component';\r\n// import { TaggerComponent } from './components/tagger/tagger.component';\r\n// import { PresetGeneratorComponent } from './components/preset-generator/preset-generator.component';\r\nimport { ImageBoxComponent } from './components/image-box/image-box.component';\r\nimport { FormGeneratorComponent } from './components/side-bar/tag-images/form-generator/form-generator.component';\r\nimport { SideBarComponent } from './components/side-bar/side-bar.component';\r\n// import { ImageListComponent } from './components/image-list/image-list.component';\r\nimport { SelectGroupComponent } from './components/side-bar/select-group/select-group.component';\r\nimport { SelectImageComponent } from './components/side-bar/select-image/select-image.component';\r\nimport { TagGeneratorComponent } from './components/side-bar/tag-generator/tag-generator.component';\r\nimport { TagImagesComponent } from './components/side-bar/tag-images/tag-images.component';\r\nimport { ModalCreateProjectComponent } from './components/modal-create-project/modal-create-project.component';\r\nimport { ModalCurrentProjectComponent } from './components/modal-current-project/modal-current-project.component';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner'\r\nimport {MatTreeModule} from '@angular/material/tree';\r\nimport { MatProgressBar } from '@angular/material';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport { ModalDownloadSelectorComponent } from './components/modal-download-selector/modal-download-selector.component';\r\nimport { FormFieldsComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-fields.component';\r\nimport { FormCheckBoxComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-checkbox/form-checkbox.component';\r\nimport { FormDropDownComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-dropdown/form-dropdown.component';\r\nimport { FormFileComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component';\r\nimport { FormRadioComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-radio/form-radio.component';\r\nimport { FormTextBoxComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-textbox/form-textbox.component';\r\nimport { FormColorComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component';\r\nimport { ModalShareProjectComponent } from './components/modal-share-project/modal-share-project.component';\r\nimport {MatCardModule} from '@angular/material/card';\r\n\r\n@NgModule({\r\n  declarations: [\r\n\tAppComponent, MapComponent, NotFoundComponent, MainComponent,\r\n\tControlBarComponent,\r\n\tCallbackComponent,\r\n\tModalFileBrowserComponent,\r\n\tImageGalleryComponent,\r\n\t// TaggerComponent,\r\n\t// PresetGeneratorComponent,\r\n\tImageBoxComponent,\r\n\tFormGeneratorComponent,\r\n\tSideBarComponent,\r\n\t// ImageListComponent,\r\n\tSelectGroupComponent,\r\n\tSelectImageComponent,\r\n\tTagGeneratorComponent,\r\n\tTagImagesComponent,\r\n\tModalCreateProjectComponent,\r\n\tModalCurrentProjectComponent,\r\n\tMatProgressBar,\r\n\tModalDownloadSelectorComponent,\r\n\tFormFieldsComponent,\r\n\tFormCheckBoxComponent,\r\n\tFormDropDownComponent,\r\n\tFormFileComponent,\r\n\tFormRadioComponent,\r\n\tFormTextBoxComponent,\r\n\tModalShareProjectComponent,\r\n\tFormColorComponent\r\n\r\n  ],\r\n  imports: [\r\n\t// this is for the ng-tapis library\r\n\tApiModule.forRoot({rootUrl: 'https://agave.designsafe-ci.org/'}),\r\n\tBrowserModule,\r\n\tAppRoutingModule,\r\n\tHttpClientModule,\r\n\tBrowserAnimationsModule,\r\n\tInfiniteScrollModule,\r\n\tNgxSpinnerModule,\r\n\tNgxMasonryModule,\r\n\tToastrModule.forRoot(),\r\n\tModalModule.forRoot(),\r\n\tMatMenuModule,\r\n\tMatToolbarModule,\r\n\tMatButtonModule,\r\n\tMatDialogModule,\r\n\tMatTooltipModule,\r\n\tMatInputModule,\r\n\tMatCheckboxModule,\r\n\tMatSelectModule,\r\n\tMatRadioModule,\r\n\tMatIconModule,\r\n\tAccordionModule.forRoot(),\r\n\tReactiveFormsModule,\r\n\tFormsModule,\r\n\tFileSizeModule,\r\n\tBsDropdownModule.forRoot(),\r\n\tCommonModule,\r\n\tMatProgressSpinnerModule,\r\n\tScrollingModule,\r\n\tMatTreeModule,\r\n\tMatSnackBarModule,\r\n\tMatCardModule\r\n  ],\r\n  providers: [\r\n\tAuthService,\r\n\t{\r\n\t  provide: HTTP_INTERCEPTORS,\r\n\t  multi: true,\r\n\t  useClass: AuthInterceptor\r\n\t},\r\n\t{\r\n\t  provide: HTTP_INTERCEPTORS,\r\n\t  multi: true,\r\n\t  useClass: TokenInterceptor\r\n\t},\r\n\t{\r\n\t  provide: APP_BASE_HREF,\r\n\t  useValue: environment.baseHref\r\n\t}\r\n  ],\r\n  bootstrap: [AppComponent],\r\n  entryComponents: [ModalFileBrowserComponent, ModalDownloadSelectorComponent, ModalCreateProjectComponent, ModalCurrentProjectComponent, ModalShareProjectComponent]\r\n})\r\nexport class AppModule { }\r\n","import 'hammerjs';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","export default \"<div class=\\\"tag-forms\\\">\\r\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">\\r\\n\\t<span>\\r\\n\\t  Tag Images\\r\\n\\t</span>\\r\\n\\t<span>\\r\\n\\t  <span style=\\\"cursor: pointer\\\"\\r\\n\\t\\t\\tmatTooltip=\\\"Export Tags\\\"\\r\\n\\t\\t\\tstyle=\\\"cursor: pointer; margin-right: 10px\\\"\\r\\n\\t\\t\\tmatTooltipPosition=\\\"above\\\">\\r\\n\\t\\t<i class=\\\"fas fa-file-download\\\"></i>\\r\\n\\t  </span>\\r\\n\\r\\n\\t  <span style=\\\"cursor: pointer\\\"\\r\\n\\t\\t\\t(click)=\\\"createNewTag()\\\"\\r\\n\\t\\t\\tmatTooltip=\\\"Add New Tag\\\"\\r\\n\\t\\t\\tstyle=\\\"cursor: pointer; margin-right: 10px\\\"\\r\\n\\t\\t\\tmatTooltipPosition=\\\"above\\\">\\r\\n\\t\\t<i class=\\\"fas fa-plus\\\"></i>\\r\\n\\t  </span>\\r\\n\\r\\n\\t  <span style=\\\"cursor: pointer; margin-right: 20px\\\"\\r\\n\\t\\t\\tmatTooltip=\\\"Save Tags\\\"\\r\\n\\t\\t\\tmatTooltipPosition=\\\"above\\\">\\r\\n\\t\\t<i class=\\\"fas fa-save\\\"></i>\\r\\n\\t  </span>\\r\\n\\t</span>\\r\\n  </div> <!-- subitem-title -->\\r\\n\\r\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem\\\">\\r\\n\\t  <div class=\\\"subitem-scroll\\\">\\r\\n\\t\\t  <div *ngFor = \\\"let tag of newTag\\\">\\r\\n\\t\\t\\t<div *ngIf = \\\"tag.groupName == activeGroup\\\">\\r\\n\\t\\t\\t\\t<div *ngIf = \\\"tag.feature == activeFeatureId\\\">\\r\\n\\t\\t\\t<div class=\\\"form-item-container\\\">  \\r\\n\\t\\t\\t\\t<div class=\\\"name-group\\\"> {{tag.label}} ({{tag.type}})</div>\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t<div class=\\\"button-group\\\">\\r\\n\\t\\t\\t\\t\\t<div (click)=\\\"formsService.deleteTag(activeGroup, tag)\\\">\\r\\n\\t\\t\\t\\t\\t\\t<i class=\\\"fas fa-minus\\\"\\r\\n\\t\\t\\t\\t\\t\\t   matTooltip=\\\"Delete\\\"\\r\\n\\t\\t\\t\\t\\t\\t   matTooltipPosition=\\\"above\\\"\\r\\n\\t\\t\\t\\t\\t\\t   style=\\\"cursor: pointer\\\">\\r\\n\\t\\t\\t\\t\\t\\t</i>\\r\\n\\t\\t\\t\\t\\t  </div> <!-- delete button -->\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t<!-- <div (click)=\\\"openRenameOptionModal(renameFormItemModal)\\\">\\r\\n\\t\\t\\t\\t\\t\\t<i class=\\\"fas fa-edit\\\"\\r\\n\\t\\t\\t\\t\\t\\t   matTooltip=\\\"Rename\\\"\\r\\n\\t\\t\\t\\t\\t\\t   matTooltipPosition=\\\"above\\\"\\r\\n\\t\\t\\t\\t\\t\\t   style=\\\"cursor: pointer\\\">\\r\\n\\t\\t\\t\\t\\t\\t</i>\\r\\n\\t\\t\\t\\t\\t</div> rename button -->\\r\\n\\r\\n\\t\\t\\t\\t\\t<!-- <div *ngIf=\\\"tag.type != 'text'\\\">\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<div (click)=\\\"openOptionToggle(tag.label)\\\">\\r\\n\\t\\t\\t\\t\\t\\t  <i class=\\\"fas fa-ellipsis-h\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t style=\\\"cursor: pointer\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t matTooltip=\\\"More Options\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t matTooltipPosition=\\\"above\\\">\\r\\n\\t\\t\\t\\t\\t\\t  </i>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t  \\r\\n\\t\\t\\t\\t\\t  </div> three dots -->\\r\\n\\r\\n\\t\\t\\t\\t\\t<ng-template #renameFormItemModal>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput #formItemRename\\r\\n\\t\\t\\t\\t\\t\\t\\t[(ngModel)]=\\\"tag.label\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\tplaceholder=\\\"Rename Form Item\\\">\\r\\n\\t\\t\\t\\t\\t\\t<br/>\\r\\n\\t\\t\\t\\t\\t\\t<br/>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"button-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t  <button matDialogClose\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t  mat-raised-button\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t  color=\\\"primary\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t  >Rename</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t  <!-- (click)=\\\"formsService.saveTag(activeGroup, tag, tag.label)\\\" -->\\r\\n\\t\\t\\t\\t\\t\\t  <button matDialogClose\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t  mat-button>Cancel</button>\\r\\n\\t\\t\\t\\t\\t\\t</div> \\r\\n\\t\\t\\t\\t\\t  </ng-template> <!-- rename modal -->\\r\\n\\r\\n\\t\\t\\t\\t</div> <!-- button group -->\\r\\n\\t\\t\\t</div> <!-- form-item-container -->\\r\\n\\r\\n\\t\\t\\t<div *ngIf=\\\"tag.type != 'text' && openOption[tag.label]\\\" class=\\\"options-container\\\">\\r\\n\\t\\t\\t\\t<div *ngFor=\\\"let opt of tag.options\\\" class=\\\"list-group list-suboptions\\\">\\r\\n\\t\\t\\t\\t\\t<div>\\r\\n\\t\\t\\t\\t\\t\\t{{opt.label}}\\r\\n\\t\\t\\t\\t\\t  </div>\\r\\n\\r\\n\\t\\t\\t\\t\\t  <div class=\\\"button-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t<div (click)=\\\"formsService.deleteOpt(activeGroup, opt, tag)\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<i class=\\\"fas fa-minus\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   style=\\\"cursor: pointer\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   matTooltip=\\\"Delete\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   matTooltipPosition=\\\"below\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t</i>\\r\\n\\t\\t\\t\\t\\t\\t  </div>\\r\\n\\t\\t\\t\\t\\t  </div>  <!-- delete opt button -->\\r\\n\\r\\n\\t\\t\\t\\t\\t  <div (click)=\\\"openRenameOptionModal(renameDeeperOptionModal)\\\">\\r\\n\\t\\t\\t\\t\\t\\t<i class=\\\"fas fa-edit\\\"\\r\\n\\t\\t\\t\\t\\t\\t   matTooltip=\\\"Rename\\\"\\r\\n\\t\\t\\t\\t\\t\\t   style=\\\"cursor: pointer\\\"\\r\\n\\t\\t\\t\\t\\t\\t   matTooltipPosition=\\\"below\\\">\\r\\n\\t\\t\\t\\t\\t\\t</i>\\r\\n\\t\\t\\t\\t\\t  </div> <!-- rename opt button -->\\r\\n\\r\\n\\t\\t\\t\\t\\t  <ng-template #renameDeeperOptionModal>\\r\\n\\t\\t\\t\\t\\t\\t<input matInput #optionDeeperRename\\r\\n\\t\\t\\t\\t\\t\\t[(ngModel)]=\\\"opt.label\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   placeholder=\\\"Rename Option\\\">\\r\\n\\t\\t\\t\\t\\t\\t<br/>\\r\\n\\t\\t\\t\\t\\t\\t<br/>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"button-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t  <button matDialogClose\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t  mat-raised-button\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t  color=\\\"primary\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t  >Rename</button>\\r\\n\\t\\t\\t\\t\\t\\t  <button matDialogClose\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t  mat-button>Cancel</button>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t  </ng-template> <!-- rename opt modal -->\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t</div> <!-- opt loop-->\\r\\n\\t\\t\\t  </div> <!-- opt container-->\\r\\n\\t\\t\\t  <!-- <app-form-generator [field]=\\\"tagList\\\"></app-form-generator> -->\\r\\n\\t\\t\\t  <app-form-generator [field]=\\\"tag\\\"></app-form-generator>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t\\t\\r\\n\\t</div>\\r\\n\\t</div> <!-- subitem scroll -->\\r\\n  </div> <!--subitem -->\\r\\n\\r\\n  <ng-template #elseBlock>\\r\\n\\tNo tag presets for this Group!\\r\\n  </ng-template>\\r\\n\\r\\n</div> <!-- tag-forms -->\\r\\n\"","export default \"<!-- <label for=\\\"\\\"> -->\\r\\n<!--   Name: -->\\r\\n<!--   <\\\\!-- {{field.label}} -\\\\-> -->\\r\\n<!--   <input name=\\\"\\\" [formControl]=\\\"name\\\"/> -->\\r\\n<!-- </label> -->\\r\\n\\r\\n<!-- <div [formGroup]=\\\"form\\\"> -->\\r\\n<div>\\r\\n  <!-- <label [attr.for]=\\\"field.label\\\">{{field.label}}</label> -->\\r\\n\\r\\n  <div [ngSwitch]=\\\"field.type\\\" class=\\\"form-controls\\\">\\r\\n\\t<ng-container *ngSwitchCase=\\\"'text'\\\">\\r\\n\\t  \\t<app-form-textbox [field]=\\\"field.options\\\" [form]=\\\"field\\\"></app-form-textbox>\\r\\n\\t</ng-container>\\r\\n\\r\\n\\t<ng-container *ngSwitchCase=\\\"'dropdown'\\\">\\r\\n\\t  \\t<app-form-dropdown [field]=\\\"field.options\\\" [form]=\\\"field\\\"></app-form-dropdown>\\r\\n\\t</ng-container>\\r\\n\\r\\n\\t<ng-container *ngSwitchCase=\\\"'radio'\\\">\\r\\n\\t  <div *ngFor=\\\"let opt of field.options\\\" [id]=\\\"field.label\\\" class=\\\"input-group\\\">\\t\\r\\n\\t  \\t<app-form-radio [field]=\\\"opt\\\" [form]=\\\"field\\\"></app-form-radio>\\r\\n\\t  </div>\\r\\n\\t</ng-container>\\r\\n\\r\\n\\t<ng-container *ngSwitchCase=\\\"'checkbox'\\\">\\r\\n\\t  <div *ngFor=\\\"let opt of field.options\\\" [id]=\\\"field.label\\\" class=\\\"input-group\\\">\\r\\n\\t\\t<app-form-checkbox [field]=\\\"opt\\\" [form]=\\\"field\\\"></app-form-checkbox>\\r\\n\\t  </div>\\r\\n\\t</ng-container>\\r\\n\\r\\n\\t<ng-container *ngSwitchCase=\\\"'color'\\\">\\r\\n\\t\\t<div *ngFor=\\\"let opt of field.options\\\" [id]=\\\"field.label\\\" class=\\\"input-group\\\">\\r\\n\\t\\t\\t<app-form-color [field]=\\\"opt\\\" [form]=\\\"field\\\" [color]=\\\"colorArray[field.options.indexOf(opt)]\\\"></app-form-color>\\r\\n\\t\\t</div>\\r\\n\\t</ng-container>\\r\\n\\r\\n  </div>\\r\\n\\r\\n  <!-- <div class=\\\"errorMessage\\\" *ngIf=\\\"!isValid\\\"></div> -->\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<!-- <form (ngSubmit)=\\\"onSubmit.emit(this.form.value)\\\" [formGroup]=\\\"form\\\" class=\\\"form-horizontal\\\"> -->\\r\\n<!--   <div *ngFor=\\\"let field of formsService.activeFormList | async\\\"> -->\\r\\n<!--   <\\\\!-- <div *ngFor=\\\"let field of fields\\\"> -\\\\-> -->\\r\\n<!--\\t<\\\\!-- <app-form-fields [field]=\\\"field\\\" [form]=\\\"form\\\"></app-form-fields> -\\\\-> -->\\r\\n<!--   </div> -->\\r\\n<!-- </form> -->\\r\\n\""]}