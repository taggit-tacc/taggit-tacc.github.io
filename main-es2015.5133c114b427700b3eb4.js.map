{"version":3,"sources":["webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-dropdown/form-dropdown.component.html","webpack:///src/app/components/side-bar/select-image/select-image.component.html","webpack:///src/app/components/modal-file-browser/modal-file-browser.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component.html","webpack:///src/app/components/notfound/notfound.component.scss","webpack:///src/app/components/modal-download-selector/modal-download-selector.component.html","webpack:///src/app/components/main/main.component.scss","webpack:///src/app/components/main/main.component.html","webpack:///src/app/components/notfound/notfound.component.html","webpack:///src/app/components/modal-download-selector/modal-download-selector.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component.scss","webpack:///src/app/components/side-bar/select-group/select-group.component.scss","webpack:///src/app/components/side-bar/side-bar.component.scss","webpack:///src/app/components/side-bar/tag-generator/tag-generator.component.html","webpack:///src/app/components/image-gallery/image-gallery.component.scss","webpack:///src/app/components/modal-share-project/modal-share-project.component.html","webpack:///src/app/components/image-gallery/image-gallery.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-fields.component.html","webpack:///src/app/components/side-bar/select-image/select-image.component.scss","webpack:///src/app/app.component.html","webpack:///src/app/components/callback/callback.component.html","webpack:///src/app/components/image-box/image-box.component.html","webpack:///src/app/components/side-bar/side-bar.component.html","webpack:///src/$_lazy_route_resource lazy namespace object","webpack:///src/app/components/side-bar/tag-generator/tag-generator.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-textbox/form-textbox.component.html","webpack:///src/app/components/modal-share-project/modal-share-project.component.scss","webpack:///src/app/components/map/map.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-radio/form-radio.component.html","webpack:///src/app/components/modal-create-project/modal-create-project.component.scss","webpack:///src/app/components/image-box/image-box.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-generator.component.scss","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component.html","webpack:///src/app/components/modal-current-project/modal-current-project.component.html","webpack:///src/app/components/modal-create-project/modal-create-project.component.html","webpack:///src/app/components/map/map.component.scss","webpack:///src/app/components/side-bar/tag-images/tag-images.component.scss","webpack:///src/app/components/side-bar/select-group/select-group.component.html","webpack:///src/app/components/modal-current-project/modal-current-project.component.scss","webpack:///src/app/components/callback/callback.component.scss","webpack:///src/app/components/modal-file-browser/modal-file-browser.component.scss","webpack:///src/app/components/control-bar/control-bar.component.scss","webpack:///src/app/components/control-bar/control-bar.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-checkbox/form-checkbox.component.html","webpack:///src/app/app.component.scss","webpack:///src/app/components/notfound/notfound.component.ts","webpack:///src/app/models/models.ts","webpack:///src/environments/environmentType.ts","webpack:///src/environments/environment.ts","webpack:///src/app/services/authentication.service.ts","webpack:///src/app/services/notifications.service.ts","webpack:///src/app/services/scroll.service.ts","webpack:///src/app/services/geo-data.service.ts","webpack:///src/app/utils/randomColor.ts","webpack:///src/app/components/main/main.component.ts","webpack:///src/app/components/callback/callback.component.ts","webpack:///src/app/services/forms.service.ts","webpack:///src/app/services/groups.service.ts","webpack:///src/app/services/projects.service.ts","webpack:///src/app/components/side-bar/tag-generator/tag-generator.component.ts","webpack:///src/app/components/side-bar/tag-images/tag-images.component.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/utils/leafletUtils.ts","webpack:///src/app/components/map/map.component.ts","webpack:///src/app/services/agave-systems.service.ts","webpack:///src/app/services/tapis-files.service.ts","webpack:///src/app/components/modal-file-browser/modal-file-browser.component.ts","webpack:///src/app/components/modal-download-selector/modal-download-selector.component.ts","webpack:///src/app/components/modal-create-project/modal-create-project.component.ts","webpack:///src/app/components/modal-share-project/modal-share-project.component.ts","webpack:///src/app/components/modal-current-project/modal-current-project.component.ts","webpack:///src/app/services/feature.service.ts","webpack:///src/app/components/control-bar/control-bar.component.ts","webpack:///src/app/app.interceptors.ts","webpack:///src/app/components/image-gallery/image-gallery.component.ts","webpack:///src/app/components/image-box/image-box.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-generator.component.ts","webpack:///src/app/components/side-bar/side-bar.component.ts","webpack:///src/app/utils/groups.ts","webpack:///src/app/components/side-bar/select-group/select-group.component.ts","webpack:///src/app/components/side-bar/select-image/select-image.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-fields.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-checkbox/form-checkbox.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-dropdown/form-dropdown.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-radio/form-radio.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-textbox/form-textbox.component.ts","webpack:///src/app/components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component.ts","webpack:///src/app/app.module.ts","webpack:///src/main.ts","webpack:///src/app/components/side-bar/tag-images/tag-images.component.html","webpack:///src/app/components/side-bar/tag-images/form-generator/form-generator.component.html"],"names":["__webpack_require__","r","__webpack_exports__","default","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","NotFoundComponent","[object Object]","tslib_es6","a","Object","core","n","selector","template","b","GroupForm","AssetFilters","this","bbox","assetType","Set","has","delete","add","Project","ProjectRequest","AuthToken","token","expires","Date","expires_in","getTime","Feature","f","geometry","properties","type","assets","styles","project_id","length","initialAsset","asset_type","display_path","path","toString","exec","slice","EnvironmentType","Production","Staging","Local","environment","production","apiUrl","clientId","baseHref","backend","AuthenticatedUser","username","email","authentication_service_AuthService","http","router","_currentUser","ReplaySubject","currentUser","asObservable","LS_TOKEN_KEY","LS_USER_KEY","tokenStr","localStorage","getItem","JSON","parse","userToken","isExpired","logout","redirectToauthenticaor","getUserInfo","AUTH_URL","location","origin","Math","random","window","href","removeItem","fromExpiresIn","setItem","stringify","navigate","userStr","user","next","get","subscribe","resp","u","name","fesm2015_http","fesm2015_router","C","providedIn","notifications_service_NotificationsService","toastr","authService","TIMEOUT","_notifications","notifications","isLoggedIn","interval","getRecent","baseUrl","now","toISOString","notes","forEach","note","status","showSuccessToast","message","showErrorToast","success","error","ngx_toastr","ScrollService","scrollRestored","scrollPosition","change","document","documentElement","scrollTop","scroll","top","geo_data_service_GeoDataService","notificationsService","scrollService","_pointClouds","BehaviorSubject","pointClouds","_loaded","loaded","_activeGroupId","activeGroupId","_activeGroup","activeGroup","_activeGroupFeature","activeGroupFeature","_groups","groups","_groupsFeatures","groupsFeatures","_features","features","features$","_activeFeature","_mapMouseLocation","_basemap","_overlays","_activeOverlay","projectId","feature","query","restoreScroll","qstring","querystring","toJson","fc","map","feat","getGroups","setScrollRestored","getFeatures","group","groupFeatures","value","some","gf","setActiveGroupFeature","pipe","take","current","push","title","conversionParams","payload","description","conversion_parameters","post","getPointClouds","featureId","groupData","pc","file","form","FormData","append","console","log","files","tmp","system","fileList","showImportErrorToast","remoteFile","system_id","response","importImage","downloadLink","createElement","blob","Blob","URL","createObjectURL","setAttribute","body","appendChild","click","removeChild","feats","addFeature","getValue","activeFeature","ovs","label","minLat","maxLat","minLon","maxLon","toFixed","getOverlays","featureList","Map","filter","set","setActiveGroup","groupName","grp","style","groupProp","getGroupFeatures","uuid","v4","myRandColor","color","i","floor","icon","faIcon","createGroupFeatures","createGroup","updateFeatureProperty","deleteGroup","updateGroup","renamedGroup","assign","updateGroupFeatures","reiconedGroup","reiconedStyle","overlays","activeOverlay","ov","mapMouseLocation","loc","basemap","bmap","MainComponent","geoDataService","bsModalService","ngx_foundation","c","CallbackComponent","route","auth","frag","snapshot","fragment","params","URLSearchParams","setToken","forms_service_FormsService","featureGroups","taggedGroup","forms","t","targetForm","newName","selectedColor","activeProject","tagValue","tagProp","tags","tag","formList","newValues","tagValueObj","find","featTag","groups_service_GroupsService","_selectedImages","selectedImages","_showTagger","showTagger","_showTagGenerator","showTagGenerator","_groupToAdd","undefined","groupToAdd","currentFeatures","newFeatures","imageSelected","projects_service_ProjectsService","_projects","projects","_activeProject","_projectUsers","projectUsers$","_deletingProjects","deletingProjects","myProjs","p","deletingProj","dp","updateProjectsList","data","prom","proj","setActiveProject","put","project","deleting","getProjects","deletingFailed","tap","users","uname","getProjectUsers","TagGeneratorComponent","formsService","groupsService","dialog","projectsService","formOptions","optionColorFilter","openOption","enabledControls","showSubitem","formType","formName","formLabel","formValue","formRequired","event","target","formColor","opt","option","selectedGroup","open","toLowerCase","optionFilter","labelFilter","clearLabel","clearOptionColor","clearOption","formItem","options","myOpts","createForm","setShowTagGenerator","clear","esm2015_dialog","tag_images_component_TagImagesComponent","tagName","tagValues","combineLatest","grpFts","grps","deleteForm","renameForm","closeAll","updateTagValues","Activate","authSvc","state","login","routes","component","canActivate","children","canActivateChild","AppRoutingModule","K","imports","forRoot","onSameUrlNavigation","providers","AppComponent","createMarker","latlng","marker","featureType","ico","leaflet_src","divIcon","className","html","circleMarker","radius","fillColor","weight","opacity","fillOpacity","map_component_MapComponent","GeoDataService","mapType","FeatureGroup","featureClickHandler","bind","mouseEventHandler","center","zoom","baseOSM","tileLayer","maxZoom","attribution","satellite","addLayer","loadFeatures","on","ev","skip","addRemoveOverlay","turf_min","fitBounds","removeLayer","overlay","imageOverlay","getBounds","geojsonOptions","pointToLayer","collection","clearLayers","markers","markerClusterGroup","iconCreateFunction","cluster","getChildCount","d","geoJSON","layer","agave_systems_service_AgaveSystemsService","tapis","_systems","systems","systemsList","result","sys","startsWith","ng_tapis","tapis_files_service_TapisFilesService","popup","_listing","listing","IMPORTABLE_TYPES","ext","getFileExtension","includes","split","pop","offset","limit","filesList","systemId","filePath","arr","replace","join","systemID","fileName","extension","snackbarConfig","duration","horizontalPosition","verticalPosition","fullURL","fileType","date","File","lastModified","valueOf","msg","sysStr","lastSystem","fileStr","lastFile","noPreviousSelections","snack_bar","modal_file_browser_component_ModalFileBrowserComponent","ModalFileBrowserComponent_1","tapisFilesService","dialogRef","agaveSystemsService","currentPath","w","allowedExtensions","inProgress","retrievalError","selectedFiles","onClose","Subject","list","myDataSystem","communityDataSystem","publishedDataSystem","selectedSystem","currentDirectory","init","browse","pth","selectedPath","getFiles","hasMoreFiles","listFiles","shift","getParentPath","unshift","newFile","allowedExt","index","concat","shiftKey","selectFilesShiftClick","checkIfSelectable","addSelectedFile","selectShift","firstFileIndex","saveState","Array","from","values","close","count","select","addRangeFiles","lastFileIndex","again","maxIndex","max","min","R","modal_download_selector_component_ModalDownloadSelectorComponent","ModalDownloadSelectorComponent_1","passbackData","fileExtension","downloadSelectForm","fesm2015_forms","Name","Extension","dirty","modal_create_project_component_ModalCreateProjectComponent","projCreateForm","projRqst","create","modal_share_project_component_ModalShareProjectComponent","projShareForm","activeProj","projectUsers","onlyOne","addUserToProject","deleteUserFromProject","modal_current_project_component_ModalCurrentProjectComponent","projData","confirm","update","B","args","feature_service_FeatureService","featureCollection","featListfeat","deleteFeature","delFeats","featListFeature","Number","featProp","saveFeature","control_bar_component_ControlBarComponent","cdr","filesService","featureService","LatLng","invalidNameError","existingNameError","foundFilePaths","getState","groupsExist","size","activeGroupFeatures","activeGroupFeaturesRotate","hasSuccessNotification","hasFailureNotification","selectedProject","item","substring","uploadNewFeature","createBlankFeature","lastProj","getDataForProject","hazmapperLink","detectChanges","unselectAllImages","setGroupToAdd","afterClosed","importFileFromTapis","coordinates","saveFile","height","width","createNewGroup","setScrollPosition","initialGroupName","toggleTagger","featureShortPath","dir","isJSON","forExport","content","CSVHolder","JSONHolder","projID","tagsPresent","headerComplete","headerTagOptions","element","featureSource","_a","_b","_c","tempTagOptionNum","compileJSON","tempCSV","extra","export","download","featureID","transferJSON","compiledJSON","longitude","latitude","src","groupColor","icon color","tag name","tag type","tag selection","url","filename","navigator","userAgent","indexOf","visibility","k","app_interceptors_AuthInterceptor","request","handle","catchError","err","reload","statusText","throwError","app_interceptors_TokenInterceptor","clone","setHeaders","Authorization","X-JWT-Assertion-designsafe","jwt","image_gallery_component_ImageGalleryComponent","renderer","spinner","scrolling","scrollSum","projectsExist","imagesExist","featureListScroll","scrollStatus","hide","setTimeout","show","appendSum","Z","ngx_spinner","image_box_component_ImageBoxComponent","hasGroup","colors","featurePath","toggleImageSelect","deleteGroupFeatures","F","form_generator_component_FormGeneratorComponent","newValue","checked","colorArray","generateColors","itemCount","isOdd","incrementVal","temp","baseNum","emit","SideBarComponent","groupIcons","unicode","select_group_component_SelectGroupComponent","iconList","selectedIcon","groups$","activeGroup$","reiconGroup","renameGroup","unsubscribe","SelectImageComponent","nextGroup","FormFieldsComponent","form_checkbox_component_FormCheckBoxComponent","getTagValue","val","form_dropdown_component_FormDropDownComponent","field","FormFileComponent","form_radio_component_FormRadioComponent","String","form_textbox_component_FormTextBoxComponent","form_color_component_FormColorComponent","chosenColor","chosenTag","saveStyles","AppModule","declarations","progress_bar","rootUrl","platform_browser","animations","ngx_infinite_scroll","ngx_masonry","menu","toolbar","esm2015_button","tooltip","input","esm2015_checkbox","esm2015_select","esm2015_radio","j","dist","common","progress_spinner","tree","card","provide","multi","useClass","useValue","bootstrap","entryComponents","sb","platform_browser_dynamic","bootstrapModule","catch"],"mappings":"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","file":"main-es2015.5133c114b427700b3eb4.js","sourcesContent":["export default \"<div>\\n  <select\\n    class=\\\"form-control\\\"\\n    [(ngModel)]=\\\"value\\\"\\n    id=\\\"field.name\\\"\\n    name=\\\"field.name\\\"\\n    (change)=\\\"updateCheckedTag()\\\"\\n  >\\n    <option *ngFor=\\\"let opt of field\\\" [value]=\\\"opt.label\\\">\\n      {{ opt.label }}\\n    </option>\\n  </select>\\n</div>\\n\"","export default \"<div class=\\\"asset-list\\\">\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">Image List</div>\\n\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem asset-subitem\\\">\\n    <div\\n      *ngFor=\\\"let feature of getActiveFeatures()\\\"\\n      (click)=\\\"jumpToImage(feature)\\\"\\n      class=\\\"asset-container\\\"\\n      [ngClass]=\\\"{ highlight: isActiveFeature(feature) }\\\"\\n    >\\n      <div class=\\\"name-group\\\">\\n        {{ getFeaturePath(feature) }}\\n      </div>\\n\\n      <div class=\\\"button-group\\\">\\n        <div (click)=\\\"deleteFeature(feature)\\\">\\n          <i\\n            class=\\\"fas fa-minus\\\"\\n            matTooltip=\\\"Delete\\\"\\n            matTooltipPosition=\\\"above\\\"\\n          >\\n          </i>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"<h4>Select Files</h4>\\n<small\\n  ><em>\\n    Note: Only files are selectable, not folders. Double click on a folder to\\n    navigate into it.\\n  </em></small\\n>\\n<hr />\\n<select (ngModelChange)=\\\"selectSystem($event)\\\" [(ngModel)]=\\\"selectedSystem\\\">\\n  <option [ngValue]=\\\"myDataSystem\\\">My Data</option>\\n  <option [ngValue]=\\\"communityDataSystem\\\">Community Data</option>\\n  <option [ngValue]=\\\"publishedDataSystem\\\">Published Data</option>\\n  <optgroup label=\\\"My Projects\\\">\\n    <option *ngFor=\\\"let project of projects\\\" [ngValue]=\\\"project\\\">\\n      {{ project.description }}\\n    </option>\\n  </optgroup>\\n</select>\\n\\n<div\\n  class=\\\"fileslisting\\\"\\n  infiniteScroll\\n  [infiniteScrollDistance]=\\\"2\\\"\\n  [infiniteScrollThrottle]=\\\"100\\\"\\n  [scrollWindow]=\\\"false\\\"\\n  (scrolled)=\\\"getFiles()\\\"\\n>\\n  <div class=\\\"clickable\\\" class=\\\"grid-x file-row\\\" (dblclick)=\\\"toRoot()\\\">\\n    <i class=\\\"fas fa-folder\\\"></i>\\n    <span> Home </span>\\n  </div>\\n  <div class=\\\"clickable\\\" class=\\\"grid-x file-row\\\">\\n    <i class=\\\"fas fa-folder-open\\\"></i>\\n    <span class=\\\"lineBreak\\\"> {{ selectedPath }} </span>\\n  </div>\\n  <div *ngIf=\\\"retrievalError\\\" class=\\\"grid-x file-row\\\" class=\\\"error\\\">\\n    Error retrieving files\\n  </div>\\n  <div\\n    class=\\\"grid-x file-row\\\"\\n    *ngFor=\\\"let file of filesList; let fileIndex = index\\\"\\n    [ngClass]=\\\"{ selected: selectedFiles.has(file.path) }\\\"\\n  >\\n    <div\\n      class=\\\"clickable\\\"\\n      (click)=\\\"select($event, file, fileIndex)\\\"\\n      (dblclick)=\\\"browse(file)\\\"\\n    >\\n      <i class=\\\"fas fa-folder\\\" *ngIf=\\\"file.type === 'dir'\\\"></i>\\n      <i class=\\\"far fa-file\\\" *ngIf=\\\"file.type !== 'dir'\\\"></i>\\n      <span> {{ file.name }} </span>\\n    </div>\\n    <div class=\\\"size\\\">\\n      {{ file.length | filesize }}\\n    </div>\\n  </div>\\n  <div class=\\\"grid-x\\\" *ngIf=\\\"inProgress\\\">\\n    <div class=\\\"cell medium-12\\\">\\n      <i class=\\\"fas fa-spin fa-atom\\\"></i>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"button-group\\\">\\n  <button mat-raised-button color=\\\"basic\\\" (click)=\\\"selectAll()\\\">\\n    Select all\\n  </button>\\n  <button\\n    mat-raised-button\\n    color=\\\"warn\\\"\\n    class=\\\"button warning\\\"\\n    (click)=\\\"cancel()\\\"\\n  >\\n    Done\\n  </button>\\n  <button\\n    mat-raised-button\\n    color=\\\"primary\\\"\\n    class=\\\"button\\\"\\n    [disabled]=\\\"!selectedFiles.size\\\"\\n    (click)=\\\"chooseFiles()\\\"\\n  >\\n    Import\\n  </button>\\n</div>\\n\"","export default \":host .drop-container {\\n  background: #fff;\\n  border-radius: 6px;\\n  height: 150px;\\n  width: 100%;\\n  box-shadow: 1px 2px 20px rgba(10, 10, 10, 0.1);\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  border: 2px dashed #c0c4c7;\\n}\\n:host p {\\n  font-size: 16px;\\n  font-weight: 400;\\n  color: #c0c4c7;\\n}\\n:host .upload-button {\\n  display: inline-block;\\n  border: none;\\n  outline: none;\\n  cursor: pointer;\\n  color: #5754a3;\\n}\\n:host .upload-button input {\\n  display: none;\\n}\\n:host .dropzone {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  flex-direction: column;\\n  border-radius: 5px;\\n  background: white;\\n  margin: 10px 0;\\n}\\n:host .dropzone.hovering {\\n  border: 2px solid #f16624;\\n  color: #dadada !important;\\n}\\n:host progress::-webkit-progress-value {\\n  transition: width 0.1s ease;\\n}\"","export default \"<div [formGroup]=\\\"form\\\">\\n  <div\\n    *ngIf=\\\"!field.value\\\"\\n    class=\\\"drop-container dropzone\\\"\\n    dropZone\\n    (hovered)=\\\"toggleHover($event)\\\"\\n    (dropped)=\\\"field.onUpload($event)\\\"\\n    [class.hovering]=\\\"isHovering\\\"\\n  >\\n    <p class=\\\"m-0\\\">\\n      Drag a file here or\\n      <label class=\\\"upload-button\\\">\\n        <input\\n          type=\\\"file\\\"\\n          multiple=\\\"\\\"\\n          (change)=\\\"field.onUpload($event.target.files)\\\"\\n        />\\n        browse\\n      </label>\\n      to upload.\\n    </p>\\n  </div>\\n  <div *ngIf=\\\"field.value\\\">\\n    <!-- <button type=\\\"button\\\" class=\\\"btn btn-primary\\\">Change</button> -->\\n    <div class=\\\"card\\\">\\n      <img class=\\\"card-img-top\\\" [src]=\\\"field.value\\\" />\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"\"","export default \"<h4>Select Files</h4>\\n<small\\n  ><em>\\n    If no folder is selected, the file will be saved in the root of your\\n    selected system.\\n  </em></small\\n>\\n<hr />\\n<select (ngModelChange)=\\\"selectSystem($event)\\\" [(ngModel)]=\\\"selectedSystem\\\">\\n  <option [ngValue]=\\\"myDataSystem\\\">My Data</option>\\n  <option [ngValue]=\\\"communityDataSystem\\\">Community Data</option>\\n  <option [ngValue]=\\\"publishedDataSystem\\\">Published Data</option>\\n  <optgroup label=\\\"My Galleries\\\">\\n    <option *ngFor=\\\"let project of projects\\\" [ngValue]=\\\"project\\\">\\n      {{ project.description }}\\n    </option>\\n  </optgroup>\\n</select>\\n<div\\n  class=\\\"fileslisting\\\"\\n  infiniteScroll\\n  [infiniteScrollDistance]=\\\"2\\\"\\n  [infiniteScrollThrottle]=\\\"100\\\"\\n  [scrollWindow]=\\\"false\\\"\\n  (scrolled)=\\\"getFiles()\\\"\\n>\\n  <div\\n    class=\\\"grid-x file-row\\\"\\n    *ngFor=\\\"let file of filesList\\\"\\n    [ngClass]=\\\"{ selected: selectedFiles.has(file.path) }\\\"\\n  >\\n    <div class=\\\"clickable\\\" (dblclick)=\\\"browse(file)\\\">\\n      <i class=\\\"fas fa-folder\\\" *ngIf=\\\"file.type === 'dir'\\\"></i>\\n      <i class=\\\"far fa-file\\\" *ngIf=\\\"file.type !== 'dir'\\\"></i>\\n      <span> {{ file.name }} </span>\\n    </div>\\n    <div class=\\\"size\\\">\\n      {{ file.length | filesize }}\\n    </div>\\n  </div>\\n  <div class=\\\"grid-x\\\" *ngIf=\\\"inProgress\\\">\\n    <div class=\\\"cell medium-12\\\">\\n      <i class=\\\"fas fa-spin fa-atom\\\"></i>\\n    </div>\\n  </div>\\n</div>\\n\\n<form\\n  [formGroup]=\\\"downloadSelectForm\\\"\\n  (ngSubmit)=\\\"update()\\\"\\n  id=\\\"current-project-form\\\"\\n>\\n  <div>\\n    <small\\n      ><em>\\n        If no filename is specified, it will default to the Gallery ID number.\\n      </em></small\\n    >\\n  </div>\\n\\n  <mat-form-field>\\n    <input\\n      matInput\\n      type=\\\"text\\\"\\n      formControlName=\\\"Name\\\"\\n      appearance=\\\"filled\\\"\\n      required=\\\"false\\\"\\n    />\\n  </mat-form-field>\\n</form>\\n<span class=\\\"radio-box\\\">\\n  <mat-radio-group [(ngModel)]=\\\"fileExtension\\\">\\n    <mat-radio-button value=\\\".csv\\\">.csv</mat-radio-button>\\n    <mat-radio-button value=\\\".json\\\">.json</mat-radio-button>\\n  </mat-radio-group>\\n</span>\\n\\n<div class=\\\"button-group\\\">\\n  <button\\n    mat-raised-button\\n    color=\\\"warn\\\"\\n    class=\\\"button warning\\\"\\n    (click)=\\\"cancel()\\\"\\n  >\\n    Cancel\\n  </button>\\n  <button\\n    mat-raised-button\\n    color=\\\"primary\\\"\\n    class=\\\"button\\\"\\n    (click)=\\\"chooseFiles()\\\"\\n  >\\n    Save\\n  </button>\\n</div>\\n\"","export default \":host .top-bar {\\n  height: 40px;\\n  padding: 5px;\\n  padding-left: 0.5em;\\n  flex-wrap: nowrap;\\n  position: fixed;\\n  overflow: hidden;\\n  width: 100%;\\n  z-index: 999;\\n}\\n:host .top-bar-right .top-bar-left {\\n  -webkit-box-flex: 0;\\n  flex-wrap: nowrap;\\n  flex: 0 1 auto;\\n  max-width: 100%;\\n}\\n@media print, screen and (min-width: 40em) {\\n  :host .top-bar {\\n    flex-wrap: nowrap;\\n    flex: 0 1 auto;\\n  }\\n}\"","export default \"<!-- <div class=\\\"grid-x\\\"> -->\\n\\n<!--   <div class=\\\"top-bar\\\" style=\\\"background-color: black\\\" id=\\\"navbar\\\"> -->\\n\\n<!--\\t<div class=\\\"top-bar-left\\\"> -->\\n<!--\\t  <img src=\\\"assets/logo.svg\\\" width=\\\"30PX\\\"> -->\\n<!--\\t  <span style=\\\"color: white\\\">Taggit</span> -->\\n<!--\\t</div> -->\\n\\n<!--\\t<div class=\\\"top-bar-right\\\"> -->\\n<!--\\t  <div class=\\\"light-blue\\\" *ngIf=\\\"currentUser\\\">{{ currentUser.username }}</div> -->\\n<!--\\t</div> -->\\n\\n<!--   </div> -->\\n\\n<!--   <\\\\!-- <div class=\\\"cell control-bar\\\"> -\\\\-> -->\\n<!--   <\\\\!--\\t<app-control-bar></app-control-bar> -\\\\-> -->\\n<!--   <\\\\!-- </div> -\\\\-> -->\\n<!-- </div> -->\\n\\n<app-control-bar></app-control-bar>\\n<!-- NOTE Router Outlet was here -->\\n<app-image-gallery></app-image-gallery>\\n\\n<!-- NOTE Leaflet was here -->\\n\"","export default \"<p>notfound works!</p>\\n\"","export default \":host {\\n  min-height: 20em;\\n}\\n:host .fileslisting {\\n  height: 20em;\\n  overflow-y: scroll;\\n  padding: 0px 20px;\\n}\\n:host .file-row {\\n  display: flex;\\n  background: #f9f9f9;\\n  border: 1px solid transparent;\\n  user-select: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n}\\n:host .clickable {\\n  flex: 1;\\n  max-width: 20em;\\n}\\n:host .size {\\n  align-items: flex-end;\\n}\\n:host .file-row:hover {\\n  border: 1px solid;\\n}\\n:host .file-row.selected {\\n  background: #d3d3d3;\\n}\\n:host .mat-radio-button ~ .mat-radio-button {\\n  margin-left: 16px;\\n}\\n:host .radio-box {\\n  position: relative;\\n  bottom: 45px;\\n  left: 45%;\\n}\"","export default \"\"","export default \":host {\\n  overflow-y: scroll;\\n}\\n:host .select-group {\\n  overflow: hidden;\\n  max-height: 20%;\\n}\\n:host .subitem-title {\\n  text-align: left;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #f1f1f1;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #f1f1f1;\\n  border-style: solid;\\n  overflow-y: scroll;\\n  background-color: #ffffff;\\n  height: 100%;\\n}\\n:host .group-subitem {\\n  height: 100px;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .boxed input[type=radio] {\\n  display: none;\\n}\\n:host .boxed label {\\n  background-color: #fff;\\n  transition: all 0.3s;\\n}\\n:host .boxed input[type=radio]:checked + label {\\n  background-color: #b3e5ff;\\n}\\n:host .group-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .name-group {\\n  display: inline-block;\\n  padding: 3px;\\n}\\n:host .button-group {\\n  margin: 0;\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n}\\n:host .fa {\\n  font-weight: 900;\\n  display: inline-block;\\n  font-style: normal;\\n  font-variant: normal;\\n  text-rendering: auto;\\n  font-family: \\\"FontAwesome\\\";\\n  line-height: 1;\\n}\\n:host .fa option {\\n  font-weight: 900;\\n}\"","export default \":host {\\n  background-color: #f1f1f1;\\n}\"","export default \"<div class=\\\"create-prompt\\\">\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">\\n    <span> Create Tag </span>\\n  </div>\\n  <!-- subitem-title -->\\n\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem\\\">\\n    <form class=\\\"form-type-form\\\">\\n      <div\\n        *ngFor=\\\"let control of enabledControls; let idx = index\\\"\\n        class=\\\"box form\\\"\\n      >\\n        <input\\n          type=\\\"radio\\\"\\n          [id]=\\\"control\\\"\\n          value=\\\"control.toLowerCase()\\\"\\n          name=\\\"form-type\\\"\\n          [checked]=\\\"idx === 0\\\"\\n          (change)=\\\"selectInputForm(control.toLowerCase())\\\"\\n        />\\n        <label\\n          style=\\\"cursor: pointer; margin: 3px; padding: 3px; font-size: 10px\\\"\\n          [for]=\\\"control\\\"\\n          >{{ control }}</label\\n        >\\n      </div>\\n      <!-- form-type-form -->\\n    </form>\\n\\n    <div class=\\\"form-name\\\">\\n      <mat-form-field class=\\\"input-label-group\\\">\\n        <mat-label>Label</mat-label>\\n        <input\\n          matInput\\n          placeholder=\\\"Label\\\"\\n          #labelValue\\n          [(ngModel)]=\\\"labelFilter\\\"\\n          (keyup)=\\\"inputFormLabel($event)\\\"\\n          name=\\\"labelFilter\\\"\\n          class=\\\"tiny\\\"\\n          type=\\\"text\\\"\\n        />\\n      </mat-form-field>\\n\\n      <ng-container *ngIf=\\\"formType != 'text'\\\">\\n        <ng-container *ngIf=\\\"formType == 'color'\\\">\\n          <mat-form-field class=\\\"input-label-group\\\">\\n            <mat-label>Option Color</mat-label>\\n            <input\\n              matInput\\n              #optionColorValue\\n              placeholder=\\\"Option Color\\\"\\n              #labelValue\\n              [(ngModel)]=\\\"optionColorFilter\\\"\\n              (change)=\\\"inputFormColor($event)\\\"\\n              name=\\\"optionColorilter\\\"\\n              class=\\\"tiny\\\"\\n              type=\\\"color\\\"\\n            />\\n          </mat-form-field>\\n        </ng-container>\\n\\n        <mat-form-field class=\\\"input-label-group\\\">\\n          <mat-label>Options</mat-label>\\n          <div class=\\\"input-group\\\">\\n            <input\\n              matInput\\n              #optionValue\\n              class=\\\"input-group-field\\\"\\n              placeholder=\\\"Option\\\"\\n              type=\\\"text\\\"\\n              [(ngModel)]=\\\"optionFilter\\\"\\n              name=\\\"optionFilter\\\"\\n              (keyup.enter)=\\\"\\n                addOptionItem(optionValue.value);\\n                optionValue.value = '';\\n                optionColorValue.value = '';\\n                clearOption();\\n                clearOptionColor()\\n              \\\"\\n            />\\n          </div>\\n          <!-- input-group -->\\n        </mat-form-field>\\n\\n        <div class=\\\"input-group-button\\\">\\n          <button\\n            mat-button\\n            color=\\\"accent\\\"\\n            class=\\\"button\\\"\\n            (click)=\\\"\\n              addOptionItem(optionValue.value);\\n              optionValue.value = '';\\n              clearOption()\\n            \\\"\\n          >\\n            <i class=\\\"fas fa-plus\\\"></i>\\n          </button>\\n        </div>\\n        <!-- input-group-button -->\\n\\n        <ul class=\\\"form-option-container\\\">\\n          <li *ngFor=\\\"let opt of formOptions\\\" class=\\\"list-group\\\">\\n            <div>\\n              {{ opt.label }}\\n              <ng-container *ngIf=\\\"formType == 'color'\\\">\\n                <svg class=\\\"box\\\" width=\\\"10px\\\" height=\\\"10px\\\">\\n                  <rect width=\\\"10px\\\" height=\\\"10px\\\" style=\\\"fill: #ffffff\\\" />\\n                  <rect\\n                    width=\\\"8px\\\"\\n                    height=\\\"8px\\\"\\n                    x=\\\"1px\\\"\\n                    y=\\\"1px\\\"\\n                    [style.fill]=\\\"opt.color\\\"\\n                  />\\n                </svg>\\n              </ng-container>\\n            </div>\\n            <!-- showopt -->\\n            <div class=\\\"button-group\\\">\\n              <div (click)=\\\"deleteOption(opt)\\\">\\n                <i\\n                  class=\\\"fas fa-minus\\\"\\n                  matTooltip=\\\"Delete\\\"\\n                  matTooltipPosition=\\\"above\\\"\\n                  style=\\\"cursor: pointer\\\"\\n                >\\n                </i>\\n              </div>\\n              <!-- delete opt -->\\n\\n              <div (click)=\\\"openRenameOptionModal(renameOptionModal)\\\">\\n                <i\\n                  class=\\\"fas fa-edit\\\"\\n                  style=\\\"cursor: pointer\\\"\\n                  matTooltip=\\\"Rename\\\"\\n                  matTooltipPosition=\\\"above\\\"\\n                >\\n                </i>\\n              </div>\\n\\n              <ng-template #renameOptionModal>\\n                <input matInput #optionRename placeholder=\\\"Rename Option\\\" />\\n                <br />\\n                <br />\\n                <div class=\\\"button-group\\\">\\n                  <button\\n                    matDialogClose\\n                    mat-raised-button\\n                    color=\\\"primary\\\"\\n                    (click)=\\\"renameOption(opt, optionRename.value)\\\"\\n                  >\\n                    Rename\\n                  </button>\\n                  <button matDialogClose mat-button>Cancel</button>\\n                </div>\\n              </ng-template>\\n            </div>\\n            <!-- button group -->\\n          </li>\\n        </ul>\\n      </ng-container>\\n    </div>\\n    <!-- form-name -->\\n\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"addFormItem()\\\">\\n      Save\\n    </button>\\n    <button mat-button color=\\\"primary\\\" (click)=\\\"cancelCreate()\\\">Cancel</button>\\n  </div>\\n  <!-- subitem -->\\n</div>\\n<!-- create-group -->\\n\"","export default \":host .img-list-container {\\n  display: grid;\\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\\n  grid-gap: 1em;\\n  height: 100%;\\n  padding: 1em;\\n}\\n:host #no-img {\\n  font-size: 32px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 70vh;\\n}\\n:host #no-proj {\\n  font-size: 32px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 70vh;\\n}\\n:host #new-proj {\\n  font-size: 32px;\\n  display: flex;\\n  height: 100vh;\\n  justify-content: center;\\n  align-items: center;\\n}\\n:host app-image-box {\\n  height: 100%;\\n}\\n:host .masonry-item {\\n  width: 200px;\\n}\\n:host img-spin {\\n  position: relative;\\n  bottom: 0px;\\n  left: 0px;\\n  width: 100%;\\n  height: 100px;\\n  background: #fff;\\n}\\n:host load-spin {\\n  position: relative;\\n  width: 100%;\\n  height: 100px;\\n  background: #fff;\\n}\\n:host .side-bar-container {\\n  background-color: #f1f1f1;\\n  position: fixed;\\n  width: 25%;\\n  margin-right: 0px;\\n  height: calc(100vh - 50px);\\n  right: 0;\\n}\\n:host .success {\\n  margin-right: 20%;\\n}\\n:host .danger {\\n  margin-right: 0%;\\n}\\n:host #gallery-container-container {\\n  position: relative;\\n  width: 100%;\\n  height: auto;\\n  text-align: center;\\n  display: flex;\\n  flex-direction: column;\\n  margin-top: 0px;\\n}\\n:host #loading-load {\\n  position: relative;\\n  width: 100%;\\n  height: auto;\\n  text-align: center;\\n  flex-direction: column;\\n  margin-top: 50px;\\n}\\n:host #gallery-container {\\n  position: relative;\\n  width: 100%;\\n  height: auto;\\n  text-align: center;\\n  display: flex;\\n  flex-direction: column;\\n}\\n:host #gallery-container .gallery-image {\\n  height: 100%;\\n  display: inline-flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n:host #gallery-container .gallery-image img {\\n  max-width: 100%;\\n  max-height: 100%;\\n  margin: 0 auto;\\n}\\n:host .imager {\\n  width: 75%;\\n  height: calc(100vh - 50px);\\n  background-color: #fefefe;\\n}\\n:host .view-image {\\n  max-width: 100%;\\n  height: auto;\\n}\\n:host .gallery-btn {\\n  width: 35px;\\n  height: 35px;\\n  background: #000;\\n  color: #fff;\\n  text-align: center;\\n  line-height: 35px;\\n  cursor: pointer;\\n  transition: all 0.4s ease;\\n  font-size: 20px;\\n  box-sizing: border-box;\\n  padding-left: 2px;\\n  position: fixed;\\n  bottom: 10px;\\n}\\n:host .gallery-btn:hover {\\n  background: #222;\\n}\\n:host .gallery-close {\\n  top: 10px;\\n}\\n:host .gallery-close .gallery-next {\\n  right: 10px;\\n}\\n:host .gallery-prev {\\n  right: 50px;\\n}\\n:host .gallery-prev .gallery-next {\\n  bottom: 10px;\\n}\\n@media (min-width: 478px) {\\n  :host .img-list-container img:nth-child(3n):not(last-of-type) {\\n    grid-row-end: span 2;\\n  }\\n}\\n@media (max-width: 768px) {\\n  :host .img-list-container {\\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\\n  }\\n}\\n@media (max-width: 450px) {\\n  :host .img-list-container {\\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\\n  }\\n}\"","export default \"<h4>Share this project</h4>\\n<small\\n  ><em>\\n    People you share your project with will have full ability to edit and delete\\n    this project on Taggit and on HazMapper.\\n  </em></small\\n>\\n\\n<form [formGroup]=\\\"projShareForm\\\" (ngSubmit)=\\\"submit()\\\" id=\\\"share-project-form\\\">\\n  <mat-form-field>\\n    <mat-label>Username:</mat-label>\\n    <input matInput type=\\\"text\\\" formControlName=\\\"name\\\" required=\\\"true\\\" />\\n  </mat-form-field>\\n\\n  <div class=\\\"button-group small\\\">\\n    <button\\n      mat-raised-button\\n      color=\\\"warn\\\"\\n      class=\\\"button small warning\\\"\\n      type=\\\"button\\\"\\n      (click)=\\\"close()\\\"\\n    >\\n      Close\\n    </button>\\n    <button\\n      mat-raised-button\\n      color=\\\"primary\\\"\\n      class=\\\"button small align-right\\\"\\n      type=\\\"submit\\\"\\n      [disabled]=\\\"!projShareForm.valid\\\"\\n    >\\n      Add Member\\n    </button>\\n  </div>\\n\\n  <br />\\n  <h5>Current Users</h5>\\n  <div *ngFor=\\\"let user of projectUsers\\\">\\n    <br />\\n    <mat-card class=\\\"card-container\\\">\\n      <span class=\\\"card-item\\\">\\n        {{ user.username }}\\n      </span>\\n      <span class=\\\"card-buttons\\\">\\n        <button\\n          mat-raised-button\\n          color=\\\"warn\\\"\\n          class=\\\"button small warning\\\"\\n          type=\\\"button\\\"\\n          [disabled]=\\\"onlyOne\\\"\\n          (click)=\\\"delete(user.username)\\\"\\n        >\\n          <i class=\\\"fas fa-trash\\\"></i>\\n        </button>\\n      </span>\\n    </mat-card>\\n  </div>\\n</form>\\n\"","export default \"<div *ngIf=\\\"loaded; else loader\\\" id=\\\"loading-load\\\">\\n  <div *ngIf=\\\"projectsExist; else noProjWarn\\\" id=\\\"gallery-container\\\">\\n    <div *ngIf=\\\"imagesExist; else noImgWarn\\\" id=\\\"gallery-container-container\\\">\\n      <div\\n        [ngClass]=\\\"scrollStatus\\\"\\n        infiniteScroll\\n        [infiniteScrollDistance]=\\\"1\\\"\\n        [infiniteScrollThrottle]=\\\"1500\\\"\\n        (scrolled)=\\\"onScroll()\\\"\\n        class=\\\"img-list-container\\\"\\n        *ngIf=\\\"!showTagger; else tagger\\\"\\n      >\\n        <app-image-box *ngFor=\\\"let feat of featureListScroll\\\" [feature]=\\\"feat\\\">\\n        </app-image-box>\\n      </div>\\n\\n      <ngx-spinner\\n        bdOpacity=\\\"0.9\\\"\\n        bdColor=\\\"\\\"\\n        size=\\\"default\\\"\\n        color=\\\"#3ADB76\\\"\\n        type=\\\"line-scale-pulse-out\\\"\\n        id=\\\"img-spin\\\"\\n        [fullScreen]=\\\"false\\\"\\n      >\\n      </ngx-spinner>\\n      <ng-template #tagger>\\n        <div>\\n          <div class=\\\"imager\\\">\\n            <img class=\\\"view-image\\\" [src]=\\\"getPath()\\\" />\\n          </div>\\n        </div>\\n      </ng-template>\\n      <div *ngIf=\\\"showTagger\\\" class=\\\"side-bar-container\\\">\\n        <app-side-bar></app-side-bar>\\n      </div>\\n    </div>\\n    <ng-template #noImgWarn>\\n      <div id=\\\"no-img\\\">\\n        No images have been imported!<br />Please import images through the\\n        menu.\\n      </div>\\n    </ng-template>\\n  </div>\\n\\n  <ng-template #noProjWarn>\\n    <div id=\\\"no-proj\\\">\\n      No project has been created!<br />Please create a project through the\\n      menu.\\n    </div>\\n  </ng-template>\\n</div>\\n\\n<ng-template #loader>\\n  <div *ngIf=\\\"projectsExist; else createProj\\\" id=\\\"loader\\\">Loading...</div>\\n\\n  <ng-template #createProj>\\n    <div id=\\\"new-proj\\\" (click)=\\\"openCreateProjectModal()\\\">\\n      Start a new project\\n    </div>\\n  </ng-template>\\n</ng-template>\\n\"","export default \"<div class=\\\"form-group row\\\" *ngFor=\\\"let tag of field\\\">\\n  <label class=\\\"col-md-3 form-control-label\\\" [attr.for]=\\\"tag.label\\\">\\n    {{ field.label }}\\n    <strong class=\\\"text-danger\\\" *ngIf=\\\"tag.required\\\">*</strong>\\n  </label>\\n  <div class=\\\"col-md-9\\\" [ngSwitch]=\\\"tag.type\\\">\\n    <app-form-color\\n      *ngSwitchCase=\\\"'color'\\\"\\n      [field]=\\\"field\\\"\\n      [form]=\\\"form\\\"\\n    ></app-form-color>\\n    <app-form-textbox\\n      *ngSwitchCase=\\\"'text'\\\"\\n      [field]=\\\"field\\\"\\n      [form]=\\\"form\\\"\\n    ></app-form-textbox>\\n    <app-form-dropdown\\n      *ngSwitchCase=\\\"'dropdown'\\\"\\n      [field]=\\\"field\\\"\\n      [form]=\\\"form\\\"\\n    ></app-form-dropdown>\\n    <app-form-checkbox\\n      *ngSwitchCase=\\\"'checkbox'\\\"\\n      [field]=\\\"field\\\"\\n      [form]=\\\"form\\\"\\n    ></app-form-checkbox>\\n    <app-form-radio\\n      *ngSwitchCase=\\\"'radio'\\\"\\n      [field]=\\\"field\\\"\\n      [form]=\\\"form\\\"\\n    ></app-form-radio>\\n  </div>\\n</div>\\n\"","export default \":host .subitem-title {\\n  text-align: left;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #f1f1f1;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #f1f1f1;\\n  border-style: solid;\\n  overflow-y: scroll;\\n  background-color: #ffffff;\\n  height: 100%;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .asset-list {\\n  max-height: 20%;\\n  overflow: hidden;\\n}\\n:host .asset-subitem {\\n  height: 100px;\\n}\\n:host .asset-container {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  cursor: pointer;\\n}\\n:host .highlight {\\n  background-color: #b3e5ff;\\n}\\n:host .name-group {\\n  display: inline-block;\\n  padding: 3px;\\n}\\n:host .button-group {\\n  margin: 0;\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n  padding-right: 5px;\\n}\"","export default \"<!--The content below is only a placeholder and can be replaced.-->\\n<router-outlet></router-outlet>\\n\"","export default \"<div id=\\\"callback\\\">\\n  <div>\\n    <i class=\\\"fas fa-spinner\\\"></i>\\n  </div>\\n</div>\\n\"","export default \"<div class=\\\"img-container\\\">\\n  <img\\n    [ngClass]=\\\"imageSelected\\\"\\n    [src]=\\\"featureSource\\\"\\n    (click)=\\\"imageSelect()\\\"\\n    class=\\\"img-responsive img-target\\\"\\n    title=\\\"{{ featurePath }}\\\"\\n  />\\n  <div class=\\\"top-overlay\\\">\\n    <div\\n      class=\\\"image-option\\\"\\n      matTooltip=\\\"Zoom\\\"\\n      matTooltipPosition=\\\"below\\\"\\n      (click)=\\\"imageZoom(diffSizes)\\\"\\n    >\\n      <i class=\\\"fas fa-search-plus\\\"></i>\\n    </div>\\n\\n    <ng-template #diffSizes>\\n      <div class=\\\"zoom-content\\\">\\n        <div class=\\\"img-container\\\">\\n          <img [src]=\\\"featureSource\\\" title=\\\"{{ featurePath }}\\\" />\\n        </div>\\n        <div class=\\\"img-details\\\">\\n          <div class=\\\"detail-container\\\">\\n            <div class=\\\"title\\\">Coordinates</div>\\n            <div class=\\\"detail-contents\\\">\\n              <div class=\\\"detail-item\\\">{{ coordinates[0] }},</div>\\n              <div class=\\\"detail-item\\\">\\n                {{ coordinates[1] }}\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"detail-container\\\">\\n            <div class=\\\"title\\\">Image Source</div>\\n            <div class=\\\"detail-contents\\\">\\n              <div class=\\\"detail-item\\\">\\n                {{ featurePath }}\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <button\\n          mat-button\\n          class=\\\"close-button\\\"\\n          matDialogClose\\n          aria-label=\\\"Close modal\\\"\\n          type=\\\"button\\\"\\n        >\\n          <span aria-hidden=\\\"true\\\">&times;</span>\\n        </button>\\n      </div>\\n    </ng-template>\\n\\n    <div\\n      class=\\\"image-option\\\"\\n      matTooltip=\\\"Remove\\\"\\n      matTooltipPosition=\\\"below\\\"\\n      (click)=\\\"openPreserveScrollModal(deleteImage)\\\"\\n    >\\n      <i class=\\\"fas fa-trash\\\"></i>\\n    </div>\\n\\n    <ng-template #deleteImage>\\n      <div *ngIf=\\\"selectedImages.length === 1\\\">\\n        This image will be deleted from the current project. It will not be\\n        deleted from the Data Depot.\\n      </div>\\n\\n      <div *ngIf=\\\"selectedImages.length > 1\\\">\\n        {{ selectedImages.length }} images will be deleted from the current\\n        project. They will not be deleted from the Data Depot.\\n      </div>\\n\\n      <button\\n        mat-raised-button\\n        color=\\\"primary\\\"\\n        matDialogClose\\n        (click)=\\\"imageDelete()\\\"\\n      >\\n        Delete Image\\n      </button>\\n      <button mat-button matDialogClose>Cancel</button>\\n    </ng-template>\\n\\n    <div\\n      class=\\\"image-option\\\"\\n      matTooltip=\\\"Add To Group\\\"\\n      matTooltipPosition=\\\"below\\\"\\n      (click)=\\\"openPreserveScrollModal(addMoreToGroup)\\\"\\n    >\\n      <i class=\\\"fas fa-plus\\\"></i>\\n    </div>\\n\\n    <ng-template #addMoreToGroup>\\n      <mat-form-field appearance=\\\"fill\\\">\\n        <mat-label>Groups</mat-label>\\n        <mat-select\\n          matNativeControl\\n          required\\n          [value]=\\\"groupToAdd\\\"\\n          [compareWith]=\\\"compareGroup\\\"\\n          (selectionChange)=\\\"changeGroupToAdd($event)\\\"\\n        >\\n          <mat-option\\n            *ngFor=\\\"let group of groups | keyvalue\\\"\\n            [value]=\\\"group.value\\\"\\n          >\\n            {{ group.key }}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <p>\\n        <button\\n          mat-raised-button\\n          color=\\\"primary\\\"\\n          matDialogClose\\n          (click)=\\\"addGroup(groupToAdd)\\\"\\n          [disabled]=\\\"!groupToAdd\\\"\\n        >\\n          Add To Group\\n        </button>\\n        <button mat-button color=\\\"secondary\\\" matDialogClose>Cancel</button>\\n      </p>\\n    </ng-template>\\n  </div>\\n\\n  <div class=\\\"bottom-overlay\\\">\\n    <div\\n      *ngIf=\\\"feature.properties.group && feature.properties.group.length > 0\\\"\\n    >\\n      <div\\n        *ngIf=\\\"feature.properties.group.length < 5; else dotdot\\\"\\n        class=\\\"group-tags\\\"\\n      >\\n        <div\\n          *ngFor=\\\"let group of feature.properties.group\\\"\\n          class=\\\"center\\\"\\n          (mouseover)=\\\"(group.name)\\\"\\n          [matTooltip]=\\\"group.name\\\"\\n          matTooltipPosition=\\\"above\\\"\\n        >\\n          <svg\\n            class=\\\"box\\\"\\n            width=\\\"25px\\\"\\n            height=\\\"75px\\\"\\n            (click)=\\\"deleteFromGroup(feature, group)\\\"\\n          >\\n            <rect\\n              width=\\\"15px\\\"\\n              height=\\\"15px\\\"\\n              x=\\\"5\\\"\\n              y=\\\"30\\\"\\n              [style.fill]=\\\"group.color\\\"\\n            />\\n            <rect\\n              class=\\\"inner-del\\\"\\n              width=\\\"25px\\\"\\n              height=\\\"15px\\\"\\n              rx=\\\"3\\\"\\n              x=\\\"0\\\"\\n              y=\\\"0\\\"\\n              style=\\\"fill: #ffffff\\\"\\n            />\\n            <rect\\n              class=\\\"inner-del\\\"\\n              width=\\\"15px\\\"\\n              height=\\\"5px\\\"\\n              x=\\\"5\\\"\\n              y=\\\"5\\\"\\n              style=\\\"fill: #de6363\\\"\\n            />\\n          </svg>\\n        </div>\\n      </div>\\n\\n      <ng-template #dotdot class=\\\"text\\\">\\n        <div\\n          class=\\\"image-option\\\"\\n          (click)=\\\"openModal(moreGroupsModal)\\\"\\n        >\\n          <i class=\\\"fas fa-ellipsis-h\\\"></i>\\n        </div>\\n      </ng-template>\\n\\n      <!-- TODO Should close modal once zero groups -->\\n      <ng-template #moreGroupsModal>\\n        <div\\n          style=\\\"display: flex; justify-content: center; align-items: center\\\"\\n        >\\n          <div\\n            *ngFor=\\\"let group of feature.properties.group\\\"\\n            class=\\\"center-temp\\\"\\n            style=\\\"display: flex\\\"\\n            (mouseover)=\\\"(group.name)\\\"\\n            [matTooltip]=\\\"group.name\\\"\\n            matTooltipPosition=\\\"right\\\"\\n          >\\n            <svg\\n              style=\\\"padding: 1\\\"\\n              (click)=\\\"deleteFromGroup(feature, group)\\\"\\n              width=\\\"15px\\\"\\n              height=\\\"15px\\\"\\n            >\\n              <rect width=\\\"15px\\\" height=\\\"15px\\\" [style.fill]=\\\"group.color\\\" />\\n              <rect\\n                class=\\\"inner-del-temp\\\"\\n                width=\\\"8px\\\"\\n                height=\\\"4px\\\"\\n                x=\\\"3.3\\\"\\n                y=\\\"5.5\\\"\\n                style=\\\"fill: #000\\\"\\n              />\\n            </svg>\\n          </div>\\n        </div>\\n      </ng-template>\\n    </div>\\n  </div>\\n</div>\\n\"","export default \"<app-select-group></app-select-group>\\n<app-select-image></app-select-image>\\n\\n<app-tag-generator *ngIf=\\\"showTagGenerator; else tagImages\\\"></app-tag-generator>\\n<ng-template #tagImages>\\n  <app-tag-images></app-tag-images>\\n</ng-template>\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"crnd\";","export default \":host {\\n  display: block;\\n  font-size: 0.8em;\\n  height: calc(100vh - 50px);\\n}\\n:host .lat-lon-label {\\n  font-size: 0.8em;\\n  color: #4d4d4d;\\n}\\n:host .active-project {\\n  background-color: #1aff8c;\\n}\\n:host .menu button.dropdown.button {\\n  padding: 0.85em 1em;\\n}\\n:host .switch {\\n  margin: 0;\\n}\\n:host .button.tiny {\\n  margin: 0;\\n}\\n:host .create-prompt {\\n  max-height: 500px;\\n  height: 500px;\\n}\\n:host .select-group {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .subitem-title {\\n  text-align: left;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #f1f1f1;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n:host .input-label-group {\\n  padding: 10px;\\n  display: block;\\n}\\n:host .input-group {\\n  display: inline-block;\\n}\\n:host .form-name {\\n  text-align: center;\\n}\\n:host .input-group-button {\\n  display: inline-block;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #f1f1f1;\\n  border-style: solid;\\n  overflow-y: auto;\\n  background-color: #ffffff;\\n  height: 40vh;\\n  padding: 20px;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .preset-descriptions {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .boxed input[type=radio] {\\n  display: none;\\n}\\n:host .boxed label {\\n  background-color: #fff;\\n  transition: all 0.3s;\\n}\\n:host .boxed input[type=radio]:checked + label {\\n  background-color: #b3e5ff;\\n}\\n:host .group-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .button-group {\\n  margin: 0;\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .form-option-container {\\n  padding: 0px;\\n}\\n:host .list-group {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .list-suboptions {\\n  background-color: #f0f0f0;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n}\\n:host .name-group {\\n  display: inline-block;\\n  padding: 3px;\\n}\\n:host .form-item-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .form-type-form {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  margin: 5px;\\n  margin-bottom: 15px;\\n}\\n:host .form-type-form input[type=radio] {\\n  display: none;\\n}\\n:host .form-type-form label {\\n  border-style: solid;\\n  border-width: 1px;\\n  border-color: #ddd;\\n  transition: all 0.3s;\\n}\\n:host .form-type-form input[type=radio]:checked + label {\\n  border-style: solid;\\n  border-width: 1px;\\n  border-color: #000;\\n}\\n:host .changed {\\n  color: #f07575;\\n}\\n:host .unchanged {\\n  color: #555555;\\n}\\n:host .asset-list {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .asset-container {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  cursor: pointer;\\n}\\n:host .highlight {\\n  background-color: #b3e5ff;\\n}\"","export default \"<div>\\n  <textarea\\n    [id]=\\\"field.name\\\"\\n    rows=\\\"9\\\"\\n    class=\\\"form-control\\\"\\n    [placeholder]=\\\"'notes'\\\"\\n    [(ngModel)]=\\\"value\\\"\\n    (keyup)=\\\"updateValue()\\\"\\n  ></textarea>\\n</div>\\n\"","export default \":host #share-project-form {\\n  display: flex;\\n  flex-direction: column;\\n  text-align: center;\\n  padding: 5em;\\n}\\n\\n.card-container {\\n  display: flex;\\n  justify-content: space-between;\\n  width: 99%;\\n}\\n\\n.card-item {\\n  text-align: center;\\n  align-items: center;\\n}\\n\\n.card-buttons {\\n  align-items: flex-end;\\n}\"","export default \"<div id=\\\"map\\\" style=\\\"min-height: calc(100vh - 67px)\\\"></div>\\n\"","export default \"<div *ngFor=\\\"let opt of form.options\\\" [id]=\\\"form.label\\\" class=\\\"input-group\\\">\\n  <div class=\\\"form-check form-check\\\">\\n    <label class=\\\"form-check-label\\\">\\n      <input\\n        class=\\\"form-check-input\\\"\\n        [(ngModel)]=\\\"value\\\"\\n        type=\\\"radio\\\"\\n        id=\\\"inlineCheckbox2\\\"\\n        name=\\\"{{ label }}\\\"\\n        value=\\\"{{ opt.label }}\\\"\\n        (change)=\\\"updateCheckedTag()\\\"\\n      />\\n      {{ opt.label }}\\n    </label>\\n  </div>\\n</div>\\n\"","export default \":host #create-project-form {\\n  display: flex;\\n  flex-direction: column;\\n  text-align: center;\\n  padding: 5em;\\n}\"","export default \":host .img-container {\\n  position: relative;\\n}\\n:host .img-container img {\\n  -o-object-fit: cover;\\n     object-fit: cover;\\n  cursor: default;\\n  width: 100%;\\n  height: 100%;\\n  transition: opacity 0.3s ease;\\n  backface-visibility: hidden;\\n  max-width: 100%;\\n  max-height: 100%;\\n  margin: 0 auto;\\n}\\n:host .top-overlay {\\n  display: flex;\\n  flex-direction: row;\\n  transition: 0.3s ease;\\n  opacity: 0;\\n  position: absolute;\\n  right: 10px;\\n  top: 10px;\\n  cursor: pointer;\\n  text-align: center;\\n}\\n:host .bottom-overlay {\\n  display: flex;\\n  flex-direction: row;\\n  transition: 0.3s ease;\\n  opacity: 1;\\n  position: absolute;\\n  right: 10px;\\n  bottom: 10px;\\n  text-align: center;\\n}\\n:host .img-container:hover img {\\n  opacity: 0.9;\\n}\\n:host .img-container:hover .top-overlay {\\n  opacity: 0.9;\\n}\\n:host .img-container:hover .top-overlay:hover {\\n  opacity: 1;\\n}\\n:host .image-option {\\n  opacity: 0.9;\\n  background-color: white;\\n  display: flex;\\n  color: black;\\n  width: 40px;\\n  height: 30px;\\n  border-radius: 5px;\\n  font-size: 16px;\\n  margin: 3px;\\n  justify-content: center;\\n  align-items: center;\\n}\\n:host .image-option:hover {\\n  opacity: 1;\\n}\\n:host .image-option .fas {\\n  top: 5px;\\n}\\n:host .img-selected {\\n  border: solid #0191ff;\\n  border-width: 5px;\\n}\\n:host .img-unselected {\\n  border: solid #fff;\\n  border-width: 5px;\\n}\\n:host .group-tags {\\n  opacity: 0.9;\\n  background-color: white;\\n  display: flex;\\n  flex-direction: row;\\n  width: auto;\\n  height: 30px;\\n  border-radius: 5px;\\n  padding: 5px;\\n  justify-content: center;\\n  align-items: center;\\n  z-index: 999;\\n}\\n:host .center {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: center;\\n  transition: 0.3s ease;\\n  align-items: center;\\n}\\n:host .center .inner-del {\\n  opacity: 0;\\n  transition: 0.3s ease;\\n  cursor: pointer;\\n}\\n:host .center:hover .inner-del {\\n  opacity: 1;\\n}\\n:host .box {\\n  padding: 1px;\\n}\\n.center-temp {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: center;\\n  align-items: center;\\n}\\n.center-temp .inner-del-temp {\\n  opacity: 0;\\n  transition: 0.3s ease;\\n  cursor: pointer;\\n}\\n.center-temp:hover .inner-del-temp {\\n  opacity: 0.5;\\n}\\n.zoom-content {\\n  display: flex;\\n  flex-direction: column;\\n  max-height: 700px;\\n}\\n.zoom-content .img-container {\\n  overflow-y: scroll;\\n  width: 100%;\\n  height: 100%;\\n  background-color: #e7e7e7;\\n}\\n.zoom-content .img-details {\\n  display: flex;\\n  flex-direction: row;\\n  margin-top: 24px;\\n  background-color: #e7e7e7;\\n  align-items: center;\\n  text-align: center;\\n}\\n.zoom-content .title {\\n  background-color: #ccc;\\n  padding: 5px;\\n}\\n.zoom-content .detail-container {\\n  display: flex;\\n  flex-grow: 1;\\n  flex-direction: column;\\n  padding: 5px;\\n}\\n.zoom-content .detail-contents {\\n  display: flex;\\n  flex-direction: row;\\n  padding: 5px;\\n  background-color: #fff;\\n}\\n.zoom-content .detail-item {\\n  padding: 5px;\\n}\"","export default \":host {\\n  text-align: left;\\n}\\n:host .mat-form-field {\\n  width: 100%;\\n  text-align: left;\\n}\\n:host .input-group {\\n  padding: 5px;\\n}\\n:host label {\\n  padding: 5px;\\n}\\n:host input {\\n  padding: 5px;\\n  vertical-align: middle;\\n}\\n:host .radio-group {\\n  display: flex;\\n  flex-direction: column;\\n}\\n:host .form-controls {\\n  padding: 20px;\\n}\"","export default \"<div *ngFor=\\\"let opt of form.options\\\" [id]=\\\"form.label\\\" class=\\\"input-group\\\">\\n  <div class=\\\"form-check form-check\\\">\\n    <label class=\\\"form-check-label\\\">\\n      <input\\n        class=\\\"form-check-input\\\"\\n        [(ngModel)]=\\\"chosenTag\\\"\\n        type=\\\"radio\\\"\\n        id=\\\"inlineCheckbox3\\\"\\n        name=\\\"{{ label }}\\\"\\n        value=\\\"{{ opt.label }}\\\"\\n        (change)=\\\"updateCheckedTag()\\\"\\n      />\\n      {{ opt.label }}\\n\\n      <svg class=\\\"box\\\" width=\\\"10px\\\" height=\\\"10px\\\">\\n        <rect width=\\\"10px\\\" height=\\\"10px\\\" style=\\\"fill: #ffffff\\\" />\\n        <rect\\n          width=\\\"8px\\\"\\n          height=\\\"8px\\\"\\n          x=\\\"1px\\\"\\n          y=\\\"1px\\\"\\n          [style.fill]=\\\"opt.color\\\"\\n        />\\n      </svg>\\n    </label>\\n  </div>\\n</div>\\n\"","export default \"<h4>Current Gallery</h4>\\n<form\\n  [formGroup]=\\\"projCreateForm\\\"\\n  (ngSubmit)=\\\"update()\\\"\\n  id=\\\"current-project-form\\\"\\n>\\n  <mat-form-field>\\n    <mat-label>Name:</mat-label>\\n    <input\\n      matInput\\n      type=\\\"text\\\"\\n      formControlName=\\\"name\\\"\\n      appearance=\\\"filled\\\"\\n      required=\\\"true\\\"\\n    />\\n  </mat-form-field>\\n\\n  <mat-form-field>\\n    <mat-label>Description</mat-label>\\n    <textarea matInput formControlName=\\\"description\\\" required=\\\"true\\\"></textarea>\\n  </mat-form-field>\\n\\n  <div class=\\\"button-group small\\\">\\n    <button\\n      mat-raised-button\\n      color=\\\"basic\\\"\\n      class=\\\"button small warning\\\"\\n      type=\\\"button\\\"\\n      (click)=\\\"close()\\\"\\n    >\\n      Close\\n    </button>\\n    <button\\n      *ngIf=\\\"activeProject.deletable\\\"\\n      mat-raised-button\\n      color=\\\"warn\\\"\\n      class=\\\"button small warning\\\"\\n      type=\\\"delete\\\"\\n      (click)=\\\"delete()\\\"\\n    >\\n      Delete\\n    </button>\\n    <button\\n      mat-raised-button\\n      color=\\\"primary\\\"\\n      class=\\\"button small align-right\\\"\\n      type=\\\"submit\\\"\\n      [disabled]=\\\"!projCreateForm.valid\\\"\\n    >\\n      Update\\n    </button>\\n  </div>\\n</form>\\n\"","export default \"<h4>Create a new Gallery</h4>\\n<form\\n  [formGroup]=\\\"projCreateForm\\\"\\n  (ngSubmit)=\\\"submit()\\\"\\n  id=\\\"create-project-form\\\"\\n>\\n  <mat-form-field>\\n    <mat-label>Name:</mat-label>\\n    <input matInput type=\\\"text\\\" formControlName=\\\"name\\\" required=\\\"true\\\" />\\n  </mat-form-field>\\n\\n  <mat-form-field>\\n    <mat-label>Description</mat-label>\\n    <textarea matInput formControlName=\\\"description\\\" required=\\\"true\\\"></textarea>\\n  </mat-form-field>\\n\\n  <div class=\\\"button-group small\\\">\\n    <button\\n      mat-raised-button\\n      color=\\\"warn\\\"\\n      class=\\\"button small warning\\\"\\n      type=\\\"button\\\"\\n      (click)=\\\"close()\\\"\\n    >\\n      Close\\n    </button>\\n    <button\\n      mat-raised-button\\n      color=\\\"primary\\\"\\n      class=\\\"button small align-right\\\"\\n      type=\\\"submit\\\"\\n      [disabled]=\\\"!projCreateForm.valid\\\"\\n    >\\n      Submit\\n    </button>\\n  </div>\\n</form>\\n\"","export default \"\"","export default \":host {\\n  font-size: 0.8em;\\n  display: block;\\n}\\n:host .subitem-title {\\n  text-align: left;\\n  display: flex;\\n  justify-content: space-between;\\n  color: #555;\\n  font-size: 14px;\\n  padding: 10px;\\n  background-color: #f1f1f1;\\n}\\n:host .subitem {\\n  border-width: 0px 10px;\\n  border-color: #f1f1f1;\\n  border-style: solid;\\n  padding: 10px;\\n  overflow-y: auto;\\n  background-color: #ffffff;\\n  height: 40vh;\\n}\\n:host .main-form-container {\\n  padding: 10px;\\n}\\n:host .subitem-scroll {\\n  padding: 10px;\\n}\\n:host .subitem-scroll {\\n  border-width: 5px;\\n}\\n:host .highlight {\\n  background-color: #b3e5ff;\\n}\\n:host .boxed input[type=radio] {\\n  display: none;\\n}\\n:host .boxed label {\\n  background-color: #fff;\\n  transition: all 0.3s;\\n}\\n:host .boxed input[type=radio]:checked + label {\\n  background-color: #b3e5ff;\\n}\\n:host .group-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .select-group {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .tag-forms {\\n  height: 500px;\\n}\\n:host .asset-list {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .asset-container {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  cursor: pointer;\\n}\\n:host .preset-descriptions {\\n  max-height: 20%;\\n  height: 20%;\\n}\\n:host .form-item-container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .button-group {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n}\\n:host .button-group div {\\n  padding: 3px;\\n}\\n:host .name-group {\\n  padding: 3px;\\n  font-size: 17px;\\n  font-weight: bold;\\n}\\n:host .list-group {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0;\\n  justify-content: space-between;\\n}\\n:host .list-suboptions {\\n  background-color: #f0f0f0;\\n}\"","export default \"<div class=\\\"select-group\\\">\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">Groups</div>\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem group-subitem\\\">\\n    <!-- TODO redundant functionality radio is just for style -->\\n    <form class=\\\"boxed\\\">\\n      <div\\n        *ngFor=\\\"let group of groups | keyvalue\\\"\\n        (click)=\\\"selectGroupForm(group.value)\\\"\\n        class=\\\"box form\\\"\\n      >\\n        <input\\n          type=\\\"radio\\\"\\n          [id]=\\\"group.key\\\"\\n          [value]=\\\"group.key\\\"\\n          name=\\\"skills\\\"\\n          [checked]=\\\"isChecked(group.key)\\\"\\n        />\\n        <label\\n          class=\\\"group-container\\\"\\n          style=\\\"cursor: pointer\\\"\\n          [for]=\\\"group.key\\\"\\n        >\\n          <div class=\\\"name-group\\\">\\n            {{ group.key }}\\n            <svg class=\\\"box\\\" width=\\\"10px\\\" height=\\\"10px\\\">\\n              <rect width=\\\"10px\\\" height=\\\"10px\\\" style=\\\"fill: #ffffff\\\" />\\n              <rect\\n                width=\\\"8px\\\"\\n                height=\\\"8px\\\"\\n                x=\\\"1px\\\"\\n                y=\\\"1px\\\"\\n                [style.fill]=\\\"group.value.color\\\"\\n              />\\n            </svg>\\n          </div>\\n          <div class=\\\"button-group\\\">\\n            <div (click)=\\\"deleteGroup(group.value)\\\">\\n              <i\\n                class=\\\"fas fa-minus\\\"\\n                matTooltip=\\\"Delete\\\"\\n                matTooltipPosition=\\\"below\\\"\\n              >\\n              </i>\\n            </div>\\n            <div (click)=\\\"openRenameModal(renameModal, group.value)\\\">\\n              <i\\n                class=\\\"fas fa-edit\\\"\\n                matTooltip=\\\"Rename\\\"\\n                matTooltipPosition=\\\"below\\\"\\n              >\\n              </i>\\n            </div>\\n            <div (click)=\\\"openIconSelection(iconModal, group.value)\\\">\\n              <span\\n                class=\\\"fa {{ group.value.icon }}\\\"\\n                matTooltip=\\\"icons\\\"\\n                matTooltipPosition=\\\"below\\\"\\n              ></span>\\n            </div>\\n          </div>\\n        </label>\\n      </div>\\n    </form>\\n\\n    <ng-template #renameModal>\\n      <input\\n        matInput\\n        #groupRename\\n        placeholder=\\\"Rename Group\\\"\\n        (keyup.enter)=\\\"renameGroup(groupRename.value)\\\"\\n      />\\n      <br />\\n      <br />\\n      <div class=\\\"button-group\\\">\\n        <button\\n          matDialogClose\\n          color=\\\"primary\\\"\\n          mat-raised-button\\n          (click)=\\\"renameGroup(groupRename.value)\\\"\\n        >\\n          Rename\\n        </button>\\n        <button matDialogClose mat-button>Cancel</button>\\n      </div>\\n    </ng-template>\\n\\n    <ng-template #iconModal>\\n      <div class=\\\"iconDropdown\\\">\\n        <select class=\\\"fa\\\" [(ngModel)]=\\\"selectedIcon\\\">\\n          <option\\n            class=\\\"fa\\\"\\n            *ngFor=\\\"let icon of iconList\\\"\\n            value=\\\"{{ icon.id }}\\\"\\n            [innerHTML]=\\\"icon.unicode\\\"\\n          ></option>\\n        </select>\\n        <br />\\n        <br />\\n        <div class=\\\"button-group\\\">\\n          <button\\n            matDialogClose\\n            color=\\\"primary\\\"\\n            mat-raised-button\\n            (click)=\\\"saveIcon(selectedIcon)\\\"\\n          >\\n            Save\\n          </button>\\n          <button matDialogClose mat-button>Cancel</button>\\n        </div>\\n      </div>\\n    </ng-template>\\n  </div>\\n  <!-- subitem -->\\n</div>\\n<!-- select-group -->\\n\"","export default \":host #current-project-form {\\n  display: flex;\\n  flex-direction: column;\\n  text-align: center;\\n  padding: 5em;\\n}\"","export default \"\"","export default \":host {\\n  min-height: 20em;\\n}\\n:host .fileslisting {\\n  height: 20em;\\n  overflow-y: scroll;\\n  padding: 0px 20px;\\n}\\n:host .file-row {\\n  display: flex;\\n  background: #f9f9f9;\\n  border: 1px solid transparent;\\n  user-select: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n}\\n:host .clickable {\\n  flex: 1;\\n  max-width: 20em;\\n}\\n:host .size {\\n  align-items: flex-end;\\n}\\n:host .file-row:hover {\\n  border: 1px solid;\\n}\\n:host .file-row.selected {\\n  background: #d3d3d3;\\n}\\n.error {\\n  background-color: red;\\n  color: white;\\n}\\n.lineBreak {\\n  max-width: 350px;\\n  word-break: break-word;\\n}\"","export default \":host .active-project {\\n  background-color: #1aff8c;\\n}\\n:host .menu button.dropdown.button {\\n  padding: 0.85em 1em;\\n}\\n:host .button.tiny {\\n  margin: 0;\\n}\\n:host .current-project {\\n  padding: 30px;\\n  font-size: 14px;\\n}\\n:host .goods {\\n  height: 27px;\\n  margin: 0px;\\n  padding: 0px;\\n}\\n:host .toggler {\\n  margin-left: 10px;\\n}\\n:host .picker {\\n  display: inline-block;\\n}\\n:host .group-bar {\\n  display: flex;\\n  flex-direction: row;\\n}\\n:host .path-buttons {\\n  text-align: center;\\n}\\n:host .project-menu {\\n  margin-left: 10px;\\n}\\n:host .top-bar {\\n  position: fixed;\\n  margin-top: -50px;\\n  height: 50px;\\n  z-index: 999;\\n}\\n:host .top-bar-right .top-bar-left {\\n  -webkit-box-flex: 0;\\n  flex-wrap: nowrap;\\n  flex: 0 1 auto;\\n  max-width: 100%;\\n}\\n:host .my-button {\\n  border-radius: 5px;\\n  padding: 5px;\\n}\\n:host .button-spacing {\\n  margin-right: 15px;\\n}\\n@media print, screen and (min-width: 40em) {\\n  :host .top-bar {\\n    flex-wrap: nowrap;\\n    flex: 0 1 auto;\\n  }\\n}\\n:host .example-spacer {\\n  flex: 1 1 auto;\\n}\"","export default \"<mat-toolbar class=\\\"top-bar\\\" color=\\\"primary\\\">\\n  <img src=\\\"assets/logo.svg\\\" width=\\\"40PX\\\" />\\n  <span style=\\\"color: white\\\">Taggit</span>\\n\\n  <button\\n    mat-icon-button\\n    [matMenuTriggerFor]=\\\"project\\\"\\n    color=\\\"foreground\\\"\\n    class=\\\"project-menu\\\"\\n  >\\n    <mat-icon>menu</mat-icon>\\n  </button>\\n\\n  <mat-menu #project=\\\"matMenu\\\">\\n    <span\\n      mat-menu-item\\n      *ngIf=\\\"selectedProject\\\"\\n      (click)=\\\"openProjectModal(selectedProject)\\\"\\n    >\\n      Current Gallery : {{ selectedProject.name }}\\n    </span>\\n    <button mat-menu-item (click)=\\\"openCreateProjectModal()\\\">\\n      Create Gallery\\n    </button>\\n    <button mat-menu-item [matMenuTriggerFor]=\\\"projectList\\\">\\n      Select Gallery\\n    </button>\\n    <button mat-menu-item (click)=\\\"openFilePicker(test)\\\">File Browser</button>\\n    <button mat-menu-item [matMenuTriggerFor]=\\\"saveOptions\\\">Save as</button>\\n  </mat-menu>\\n\\n  <mat-menu #projectList=\\\"matMenu\\\">\\n    <button\\n      mat-menu-item\\n      class=\\\"clickable\\\"\\n      *ngFor=\\\"let p of projects\\\"\\n      (click)=\\\"selectProject(p)\\\"\\n      [ngClass]=\\\"{ 'active-project': p === selectedProject }\\\"\\n    >\\n      {{ p.name }}\\n    </button>\\n  </mat-menu>\\n\\n  <mat-menu #saveOptions=\\\"matMenu\\\">\\n    <button mat-menu-item (click)=\\\"saveFile(0)\\\">CSV file</button>\\n    <button mat-menu-item (click)=\\\"saveFile(1)\\\">JSON file</button>\\n    <button mat-menu-item (click)=\\\"openDownloadSelector()\\\">\\n      Export to DesignSafe\\n    </button>\\n  </mat-menu>\\n\\n  <span class=\\\"example-spacer\\\"></span>\\n\\n  <div *ngIf=\\\"showTagger\\\" class=\\\"path-buttons\\\">\\n    <div class=\\\"slides\\\" style=\\\"line-height: 1; font-size: 12px\\\">\\n      {{ getAssetDisplay() }}\\n      <div class=\\\"lr-buttons\\\" style=\\\"margin-top: 5px\\\">\\n        <i\\n          (click)=\\\"otherPath(false)\\\"\\n          style=\\\"margin-right: 10px; cursor: pointer\\\"\\n          class=\\\"fas fa-angle-left\\\"\\n        ></i>\\n        <i\\n          (click)=\\\"otherPath(true)\\\"\\n          style=\\\"margin-left: 10px; cursor: pointer\\\"\\n          class=\\\"fas fa-angle-right\\\"\\n        ></i>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <span class=\\\"example-spacer\\\"></span>\\n\\n  <div class=\\\"group-bar grid-x align-right\\\">\\n    <button\\n      mat-raised-button\\n      class=\\\"button-spacing\\\"\\n      [disabled]=\\\"selectedImages.length === 0\\\"\\n      (click)=\\\"clearAll()\\\"\\n    >\\n      Clear Selected\\n    </button>\\n\\n    <!-- A link that looks like a button, links to Hazmapper-->\\n    <a\\n      class=\\\"button-spacing\\\"\\n      mat-raised-button\\n      href=\\\"{{ hazmapperLink }}\\\"\\n      title=\\\"Open your gallery in HazMapper\\\"\\n      target=\\\"_blank\\\"\\n    >\\n      <img src=\\\"assets/hazmapper-header-logo.png\\\" width=\\\"100PX\\\" />\\n    </a>\\n\\n    <button\\n      mat-raised-button\\n      (click)=\\\"openAddGroupModal(addToGroupModal)\\\"\\n      *ngIf=\\\"selectedImages.length > 0 && groupsExist && !showTagger\\\"\\n      class=\\\"button-spacing\\\"\\n    >\\n      Add To Group\\n    </button>\\n\\n    <button\\n      mat-raised-button\\n      (click)=\\\"openAddGroupModal(addGroupModal)\\\"\\n      *ngIf=\\\"selectedImages.length > 0 && !showTagger\\\"\\n    >\\n      Create Group\\n    </button>\\n\\n\\n    <ng-template #addGroupModal>\\n      <mat-form-field>\\n        <mat-label>Group Name</mat-label>\\n        <input\\n          matInput\\n          placeholder=\\\"Group Name\\\"\\n          (keyup.enter)=\\\"addGroup(groupInput.value)\\\"\\n          #groupInput\\n        />\\n      </mat-form-field>\\n\\n      <div style=\\\"color: #ff0000\\\" *ngIf=\\\"invalidNameError\\\">Invalid Name!</div>\\n      <div style=\\\"color: #ff0000\\\" *ngIf=\\\"existingNameError\\\">Existing Name!</div>\\n      <br />\\n      <br />\\n      <button\\n        mat-raised-button\\n        color=\\\"primary\\\"\\n        (click)=\\\"addGroup(groupInput.value)\\\"\\n      >\\n        Add Group\\n      </button>\\n      <button mat-button matDialogClose color=\\\"secondary\\\">Cancel</button>\\n    </ng-template>\\n\\n    <ng-template #addToGroupModal>\\n      <mat-form-field appearance=\\\"fill\\\">\\n        <mat-label>Groups</mat-label>\\n        <mat-select\\n          matNativeControl\\n          required\\n          [value]=\\\"groupToAdd\\\"\\n          [compareWith]=\\\"compareGroup\\\"\\n          (selectionChange)=\\\"changeGroupToAdd($event)\\\"\\n        >\\n          <mat-option\\n            *ngFor=\\\"let group of groups | keyvalue\\\"\\n            [value]=\\\"group.value\\\"\\n          >\\n            {{ group.key }}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <p>\\n        <button\\n          mat-raised-button\\n          color=\\\"primary\\\"\\n          matDialogClose\\n          (click)=\\\"addToGroup(groupToAdd)\\\"\\n          [disabled]=\\\"!groupToAdd\\\"\\n        >\\n          Add To Group\\n        </button>\\n        <button mat-button color=\\\"secondary\\\" matDialogClose>Cancel</button>\\n      </p>\\n    </ng-template>\\n  </div>\\n\\n  <button\\n    *ngIf=\\\"groupsExist && !showTagger\\\"\\n    mat-raised-button\\n    style=\\\"margin-left: 15px\\\"\\n    (click)=\\\"toggleTagger()\\\"\\n  >\\n    Taggit!\\n  </button>\\n\\n  <button\\n    *ngIf=\\\"showTagger\\\"\\n    mat-raised-button\\n    style=\\\"margin-left: 15px\\\"\\n    (click)=\\\"toggleTagger()\\\"\\n  >\\n    Gallery\\n  </button>\\n</mat-toolbar>\\n\"","export default \"<div *ngFor=\\\"let opt of form.options\\\" [id]=\\\"form.label\\\" class=\\\"input-group\\\">\\n  <div class=\\\"form-check form-check\\\">\\n    <label class=\\\"form-check-label\\\">\\n      <input\\n        class=\\\"form-check-input\\\"\\n        type=\\\"checkbox\\\"\\n        [checked]=\\\"isChecked(opt)\\\"\\n        id=\\\"inlineCheckbox1\\\"\\n        value=\\\"{{ opt.label }}\\\"\\n        (change)=\\\"selected($event, opt)\\\"\\n      />\\n      {{ opt.label }}\\n    </label>\\n  </div>\\n</div>\\n\"","export default \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-notfound',\n  templateUrl: './notfound.component.html',\n  styleUrls: ['./notfound.component.scss'],\n})\nexport class NotFoundComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import {\n  Feature as GeoJSONFeature,\n  GeoJsonProperties,\n  Geometry,\n  FeatureCollection as IFeatureCollection,\n} from 'geojson';\n\n// TODO: break these out into their own files\n\nexport interface IPointCloud {\n  id: number;\n  description: string;\n  conversion_parameters: string;\n  feature_id?: number;\n  task_id?: string;\n  project_id: number;\n}\n\n// export interface Group {\n//   groupName: Array<string>;\n//   formList: Array<any>;\n//   // type: any;\n// }\n\n// export interface Group {\n//   groupName: Array<string>;\n//   formList: Array<any>;\n//   // type: any;\n// }\n\nexport interface Group {\n  groupName: string;\n  formList: Array<any>;\n  color: string;\n  // type: any;\n}\n\nexport class Group implements Group {}\n\nexport interface TagGroup {\n  name: string;\n  id?: number;\n  color?: string;\n  icon?: string;\n  forms?: GroupForm[];\n}\n\nexport class TagGroup implements TagGroup {}\n\nexport interface GroupForm {\n  id?: string;\n  groupName?: string;\n  label?: string;\n  color?: string;\n  type?: string;\n  options?: Array<any>;\n}\n\nexport class GroupForm implements GroupForm {}\n\nexport interface Tag {\n  id?: string;\n  value?: any;\n}\n\nexport class Tag implements Tag {}\n\n// NOTE: For geojson/tag\nexport interface TagValue {\n  id: number;\n  featureId?: number;\n  tagId?: number;\n  groupId?: string;\n  value?: Array<any> | string | number;\n}\n\nexport class TagValue implements TagValue {}\n\nexport class AssetFilters {\n  // bbox has the following format: [sw_lng, sw_lat, ne_lng, ne_lat], the same as leaflet\n  bbox: Array<number> = [];\n  assetType: Set<string> = new Set<string>();\n\n  updateAssetTypes(assetType: string) {\n    this.assetType.has(assetType)\n      ? this.assetType.delete(assetType)\n      : this.assetType.add(assetType);\n  }\n\n  updateBBox(bbox: Array<number>): void {\n    this.bbox = bbox;\n  }\n\n  toJson() {\n    return {\n      assetType: [...this.assetType],\n      bbox: this.bbox,\n    };\n  }\n}\n\nexport interface Project {\n  description: string;\n  id?: number;\n  name: string;\n  ds_id?: string;\n  title?: string;\n  uuid?: string;\n  public?: boolean;\n  system_file?: string;\n  system_id?: string;\n  system_path?: string;\n  deletable?: boolean;\n  deleting?: boolean;\n  deletingFailed?: boolean;\n}\n\nexport class Project implements Project {}\n\nexport interface ProjectRequest {\n  project: Project;\n  observable?: boolean;\n  watch_content?: boolean;\n}\n\nexport class ProjectRequest implements ProjectRequest {}\n\nexport class AuthToken {\n  token: string;\n  expires: Date;\n  /**\n   *\n   * @param token : String\n   * @param expires: Date\n   */\n  constructor(token: string, expires: Date) {\n    this.token = token;\n    this.expires = new Date(expires);\n  }\n\n  static fromExpiresIn(token: string, expires_in: number) {\n    const expires = new Date(new Date().getTime() + expires_in * 1000);\n    return new AuthToken(token, expires);\n  }\n\n  /**\n   * Checks if the token is expired or not\n   */\n  public isExpired(): boolean {\n    return new Date().getTime() > this.expires.getTime();\n  }\n}\n\nexport interface IFeatureAsset {\n  id?: number;\n  path?: string;\n  uuid?: string;\n  feature_id?: number;\n  asset_type?: string;\n  display_path?: string;\n}\n\nexport class FeatureAsset implements IFeatureAsset {\n  id: number;\n  path: string;\n  uuid: string;\n  feature_id: number;\n  asset_type: string;\n  display_path: string;\n\n  // TODO: Implenent this\n  get assetPath(): string {\n    return '';\n  }\n}\n\nexport interface FeatureStyles {\n  // [key: string]?: string | number;\n  faIcon?: string;\n  color?: string;\n}\n\nexport class FeatureStyles implements FeatureStyles {}\n\nexport interface Overlay {\n  id: number;\n  path: string;\n  uuid: string;\n  minLon: number;\n  minLat: number;\n  maxLon: number;\n  maxLat: number;\n  project_id: number;\n  label: string;\n}\n\ninterface AppGeoJSONFeature extends GeoJSONFeature {\n  assets?: Array<IFeatureAsset>;\n  styles?: FeatureStyles;\n  project_id?: number;\n  // featureType?(): String\n}\n\nexport class FeatureCollection implements IFeatureCollection {\n  features: Feature[];\n  type: any;\n}\n\nexport class Feature implements AppGeoJSONFeature {\n  geometry: Geometry;\n  // Taggit specific:\n  // properties.tags: Tag[]\n  // properties.groups: Group[]\n  // properties.values: TagValue[]\n  properties: GeoJsonProperties;\n  id?: string | number;\n  type: any;\n  assets?: Array<IFeatureAsset>;\n  styles?: FeatureStyles;\n  project_id?: number;\n\n  constructor(f: AppGeoJSONFeature) {\n    this.geometry = f.geometry;\n    this.properties = f.properties;\n    this.id = f.id;\n    this.type = f.type;\n    this.assets = f.assets;\n    this.styles = f.styles;\n    this.project_id = f.project_id;\n  }\n\n  initialAsset?() {\n    return this.assets[0];\n  }\n\n  featureType?(): string {\n    if (this.assets && this.assets.length === 1) {\n      return this.initialAsset().asset_type;\n    }\n\n    if (this.assets && this.assets.length > 1) {\n      return 'collection';\n    }\n\n    if (!this.assets.length) {\n      return this.geometry.type;\n    }\n  }\n\n  featurePath?(): string {\n    const initialAsset = this.initialAsset();\n    if (initialAsset.display_path) {\n      return initialAsset.display_path;\n    } else if (initialAsset.path) {\n      return initialAsset.path;\n    } else {\n      return this.id.toString();\n    }\n  }\n\n  featureShortPath?(): string {\n    const [initialAsset] = this.assets;\n    if (initialAsset.display_path) {\n      return /[^/]*$/.exec(initialAsset.display_path)[0];\n    } else if (initialAsset.path) {\n      const path = /[^/]*$/.exec(initialAsset.path)[0];\n      return path.slice(0, 15) + '...';\n    } else {\n      return this.id.toString();\n    }\n  }\n}\n\nexport interface IProjectUser {\n  id: number;\n  username: string;\n}\n","export enum EnvironmentType {\n  Production = 'production',\n  Staging = 'staging',\n  Local = 'local',\n}\n","import { EnvironmentType } from './environmentType';\n\nexport interface AppEnvironment {\n  production: boolean;\n  apiUrl: string;\n  jwt?: string;\n  clientId: string;\n  baseHref: string;\n  backend: EnvironmentType;\n}\n\nexport const environment: AppEnvironment = {\n  production: true,\n  apiUrl: 'https://agave.designsafe-ci.org/geo/v2/',\n  clientId: 'jHXnvsmQQcmP43qlrG7ATaxFXHQa',\n  baseHref: '/',\n  backend: EnvironmentType.Production,\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { AuthToken } from '../models/models';\nimport { environment } from '../../environments/environment';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { Router } from '@angular/router';\n\nexport class AuthenticatedUser {\n  public readonly username: string;\n  public readonly email: string;\n  private _token: AuthToken;\n\n  constructor(username: string, email: string) {\n    this.username = username;\n    this.email = email;\n  }\n}\n\ninterface OpenIDUser {\n  name: string;\n  email: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private _currentUser: ReplaySubject<AuthenticatedUser> =\n    new ReplaySubject<AuthenticatedUser>(1);\n  public readonly currentUser: Observable<AuthenticatedUser> =\n    this._currentUser.asObservable();\n  userToken: AuthToken;\n  private LS_TOKEN_KEY = 'hazmapperToken';\n  private LS_USER_KEY = 'hazmapperUser';\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  public login() {\n    // First, check if the user has a token in localStorage\n    const tokenStr = localStorage.getItem(this.LS_TOKEN_KEY);\n    if (!tokenStr) {\n      this.redirectToauthenticaor();\n    } else {\n      const token = JSON.parse(tokenStr);\n      this.userToken = new AuthToken(token.token, new Date(token.expires));\n      if (!this.userToken || this.userToken.isExpired()) {\n        this.logout();\n        this.redirectToauthenticaor();\n      }\n      this.getUserInfo();\n    }\n  }\n\n  private redirectToauthenticaor() {\n    const client_id = environment.clientId;\n    const callback = location.origin + environment.baseHref + 'callback';\n    const state = Math.random().toString(36);\n    const AUTH_URL = `https://agave.designsafe-ci.org/authorize?scope=openid&client_id=${client_id}&response_type=token&redirect_uri=${callback}&state=${state}`;\n    window.location.href = AUTH_URL;\n  }\n\n  /**\n   * Checks to make sure that the user has a token and the token is not expired;\n   */\n  public isLoggedIn(): boolean {\n    return this.userToken && !this.userToken.isExpired();\n  }\n\n  public logout(): void {\n    this.userToken = null;\n    localStorage.removeItem(this.LS_TOKEN_KEY);\n    localStorage.removeItem(this.LS_USER_KEY);\n  }\n\n  public setToken(token: string, expires: number): void {\n    this.userToken = AuthToken.fromExpiresIn(token, expires);\n    localStorage.setItem(this.LS_TOKEN_KEY, JSON.stringify(this.userToken));\n    // hit the wso2 api to retrieve the username etc\n    this.router.navigate(['/']);\n  }\n\n  public getUserInfo() {\n    const INFO_URL = `https://agave.designsafe-ci.org/oauth2/userinfo?schema=openid`;\n    const userStr = localStorage.getItem(this.LS_USER_KEY);\n    const user = JSON.parse(userStr);\n    if (user !== null) {\n      this._currentUser.next(new AuthenticatedUser(user.username, user.email));\n    } else {\n      this.http.get<OpenIDUser>(INFO_URL).subscribe((resp) => {\n        const u = new AuthenticatedUser(resp.name, resp.email);\n        localStorage.setItem(this.LS_USER_KEY, JSON.stringify(u));\n        this._currentUser.next(u);\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { ToastrService } from 'ngx-toastr';\nimport { HttpClient } from '@angular/common/http';\nimport { INotification } from '../models/notification';\nimport { interval, Observable, ReplaySubject } from 'rxjs';\nimport { AuthService } from '../services/authentication.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationsService {\n  // Interval time to get notifications in millisecs\n  private TIMEOUT = 5000;\n  private _notifications: ReplaySubject<Array<INotification>> =\n    new ReplaySubject<Array<INotification>>(1);\n  public readonly notifications: Observable<Array<INotification>> =\n    this._notifications.asObservable();\n\n  constructor(\n    private toastr: ToastrService,\n    private http: HttpClient,\n    private authService: AuthService\n  ) {\n    if (this.authService.isLoggedIn()) {\n      const timer = interval(this.TIMEOUT);\n      timer.subscribe((next) => {\n        this.getRecent();\n      });\n    }\n  }\n\n  // Sends a request to GeoAPI to retrieve recent notifications\n  getRecent(): void {\n    const baseUrl = environment.apiUrl + 'notifications/';\n    const now = new Date();\n    const then = new Date(now.getTime() - this.TIMEOUT);\n\n    this.http\n      .get<Array<INotification>>(baseUrl + `?startDate=${then.toISOString()}`)\n      .subscribe((notes) => {\n        this._notifications.next(notes);\n        notes.forEach((note) => {\n          switch (note.status) {\n            case 'success':\n              this.showSuccessToast(note.message);\n              break;\n            case 'error':\n              this.showErrorToast(note.message);\n              break;\n            default:\n              break;\n          }\n        });\n      });\n  }\n\n  showSuccessToast(message: string): void {\n    this.toastr.success(message);\n  }\n\n  showImportErrorToast(message: string): void {\n    this.toastr.error(message + ', trying alternate method');\n  }\n\n  showErrorToast(message: string): void {\n    this.toastr.error(message);\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScrollService {\n  constructor() {}\n\n  public scrollRestored = true; // if true, the scroll was restored to the proper place\n  public scrollPosition = 0;\n\n  setScrollRestored(change: boolean) {\n    this.scrollRestored = change;\n  }\n\n  setScrollPosition() {\n    this.scrollPosition = document.documentElement.scrollTop;\n  }\n\n  scroll() {\n    // Attempts to scroll to the specified location\n    document.documentElement.scroll({ top: this.scrollPosition });\n    // if it reaches there, marks the check as complete\n    if (document.documentElement.scrollTop == this.scrollPosition) {\n      this.scrollRestored = false;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { LatLng } from 'leaflet';\nimport {\n  AssetFilters,\n  FeatureAsset,\n  FeatureStyles,\n  IFeatureAsset,\n  IPointCloud,\n  Overlay,\n  TagGroup,\n  Tag,\n  TagValue,\n  GroupForm,\n} from '../models/models';\nimport { Feature, FeatureCollection } from '../models/models';\nimport { environment } from '../../environments/environment';\nimport { Form } from '@angular/forms';\nimport { take } from 'rxjs/operators';\nimport * as querystring from 'querystring';\nimport { RemoteFile } from 'ng-tapis';\nimport { NotificationsService } from './notifications.service';\nimport { ScrollService } from './scroll.service';\nimport { getRandomColor } from '../utils/randomColor';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GeoDataService {\n  // TODO: clean this up and put the observables up here. Also look into Replay/Behavior\n  // TODO: Go over this and remove all unused functions, a lot of this was copy/pasted over from Hazmapper without a second thought\n  private _features: BehaviorSubject<FeatureCollection>;\n  private features$: Observable<FeatureCollection>;\n  private _activeFeature: BehaviorSubject<any>;\n  private _mapMouseLocation: BehaviorSubject<any>;\n  private _basemap: BehaviorSubject<any>;\n  private _overlays: BehaviorSubject<any>;\n  private _activeOverlay: BehaviorSubject<any>;\n  private _pointClouds: BehaviorSubject<Array<IPointCloud>> =\n    new BehaviorSubject<Array<IPointCloud>>(null);\n  public readonly pointClouds: Observable<Array<IPointCloud>> =\n    this._pointClouds.asObservable();\n  private fileList: Array<RemoteFile>;\n\n  private _loaded: BehaviorSubject<boolean> = new BehaviorSubject(null);\n  public loaded: Observable<boolean> = this._loaded.asObservable();\n\n  private _activeGroupId: BehaviorSubject<number> = new BehaviorSubject(null);\n  public activeGroupId: Observable<number> = this._activeGroupId.asObservable();\n\n  private _activeGroup: BehaviorSubject<TagGroup> = new BehaviorSubject(null);\n  public activeGroup: Observable<TagGroup> = this._activeGroup.asObservable();\n\n  private _activeGroupFeature: BehaviorSubject<any> = new BehaviorSubject<any>(\n    null\n  );\n  public activeGroupFeature: Observable<any> =\n    this._activeGroupFeature.asObservable();\n\n  private _groups: BehaviorSubject<Map<string, TagGroup>> = new BehaviorSubject(\n    null\n  );\n  public groups: Observable<Map<string, TagGroup>> =\n    this._groups.asObservable();\n\n  private _groupsFeatures: BehaviorSubject<Map<string, Feature[]>> =\n    new BehaviorSubject(null);\n  public groupsFeatures: Observable<Map<string, Feature[]>> =\n    this._groupsFeatures.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private notificationsService: NotificationsService,\n    private scrollService: ScrollService\n  ) {\n    this._features = new BehaviorSubject<FeatureCollection>({\n      type: 'FeatureCollection',\n      features: [],\n    });\n    this.features$ = this._features.asObservable();\n    this._activeFeature = new BehaviorSubject<any>(null);\n    this._mapMouseLocation = new BehaviorSubject<any>(null);\n\n    // For the style of the basemap, defaults to OpenStreetmap\n    this._basemap = new BehaviorSubject<any>('roads');\n\n    // Holds all of the overlays on a project\n    this._overlays = new BehaviorSubject<any>(null);\n    this._activeOverlay = new BehaviorSubject<any>(null);\n  }\n\n  getFeature(\n    projectId: number,\n    feature: Feature\n  ): Observable<FeatureCollection> {\n    return this.http.get<FeatureCollection>(\n      environment.apiUrl + `/projects/${projectId}/features/${feature.id}/`\n    );\n  }\n\n  getFeatures(\n    projectId: number,\n    query: AssetFilters = new AssetFilters(),\n    restoreScroll = false\n  ): void {\n    const qstring: string = querystring.stringify(query.toJson());\n    this.http\n      .get<FeatureCollection>(\n        environment.apiUrl + `/projects/${projectId}/features/` + '?' + qstring\n      )\n      .subscribe(\n        (fc: FeatureCollection) => {\n          fc.features = fc.features.map((feat: Feature) => new Feature(feat));\n          this.getGroups(fc.features);\n          this._features.next(fc);\n          this._loaded.next(true);\n\n          if (restoreScroll) {\n            this.scrollService.setScrollRestored(true);\n          }\n        },\n        (error) => {\n          this.notificationsService.showErrorToast(\n            'Failed to retrieve project data! Geoapi might be down.'\n          );\n        }\n      );\n  }\n\n  deleteFeature(feature: Feature) {\n    this.http\n      .delete(\n        environment.apiUrl +\n          `projects/${feature.project_id}/features/${feature.id}/`\n      )\n      .subscribe((resp) => {\n        this.getFeatures(feature.project_id, new AssetFilters(), true);\n      });\n  }\n\n  getPointClouds(projectId: number) {\n    this.http\n      .get<Array<IPointCloud>>(\n        environment.apiUrl + `/projects/${projectId}/point-cloud/`\n      )\n      .subscribe((resp) => {\n        this._pointClouds.next(resp);\n      });\n  }\n\n  setActiveGroup(group: TagGroup): void {\n    this._activeGroup.next(group);\n    if (group) {\n      const groupFeatures = this._groupsFeatures.value.get(group.name);\n      if (\n        !this._activeGroupFeature.value ||\n        !groupFeatures.some((gf) => this._activeGroupFeature.value.id === gf.id)\n      ) {\n        this.setActiveGroupFeature(groupFeatures[0]);\n      }\n    } else {\n      this.setActiveGroupFeature(null);\n    }\n  }\n\n  setActiveGroupFeature(feat: any): void {\n    this._activeGroupFeature.next(feat);\n  }\n\n  addFeature(feat: Feature): void {\n    this.features$.pipe(take(1)).subscribe((current: FeatureCollection) => {\n      current.features.push(feat);\n      this._features.next(current);\n    });\n  }\n\n  addPointCloud(\n    projectId: number,\n    title: string,\n    conversionParams: string\n  ): void {\n    const payload = {\n      description: title,\n      conversion_parameters: conversionParams,\n    };\n    this.http\n      .post(environment.apiUrl + `/projects/${projectId}/point-cloud/`, payload)\n      .subscribe(\n        (resp) => {\n          this.getPointClouds(projectId);\n        },\n        (error) => {\n          this.notificationsService.showErrorToast(\n            'Failed to update image property!'\n          );\n        }\n      );\n  }\n\n  updateFeatureProperty(\n    projectId: number,\n    featureId: string | number,\n    groupData: any\n  ): void {\n    this.http\n      .post(\n        environment.apiUrl +\n          `projects/${projectId}/features/${featureId}/properties/`,\n        groupData\n      )\n      .subscribe(\n        (resp) => {\n          this.getFeatures(projectId);\n        },\n        (error) => {\n          this.notificationsService.showErrorToast(\n            'Failed to save tag values!'\n          );\n        }\n      );\n  }\n\n  // NOTE: unused for now\n  updateFeatureStyles(\n    projectId: number,\n    featureId: string | number,\n    styles: FeatureStyles\n  ): void {\n    this.http\n      .post(\n        environment.apiUrl +\n          `/projects/${projectId}/features/${featureId}/styles/`,\n        styles\n      )\n      .subscribe(\n        (resp) => {\n          this.getFeatures(projectId);\n        },\n        (error) => {\n          this.notificationsService.showErrorToast(\n            'Failed to update image style!'\n          );\n        }\n      );\n  }\n\n  deletePointCloud(pc: IPointCloud): void {\n    this.http\n      .delete(\n        environment.apiUrl + `/projects/${pc.project_id}/point-cloud/${pc.id}/`\n      )\n      .subscribe((resp) => {\n        this.getPointClouds(pc.project_id);\n      });\n  }\n\n  addFileToPointCloud(pc: IPointCloud, file: File) {\n    const form = new FormData();\n    form.append('file', file);\n    this.http\n      .post(\n        environment.apiUrl + `/projects/${pc.project_id}/point-cloud/${pc.id}/`,\n        form\n      )\n      .subscribe((resp) => {\n        console.log(resp);\n      });\n  }\n\n  // This function updates the underlying observable, so changes naturally flow to feature service\n  importFileFromTapis(projectId: number, files: Array<RemoteFile>): void {\n    const tmp = files.map((f) => ({ system: f.system, path: f.path }));\n    const payload = {\n      files: tmp,\n    };\n    this.fileList = tmp;\n    this.http\n      .post(\n        environment.apiUrl + `projects/${projectId}/features/files/import/`,\n        payload\n      )\n\n      .subscribe(\n        (resp) => {\n          this.notificationsService.showSuccessToast('Import started!');\n        },\n        (error) => {\n          this.notificationsService.showImportErrorToast(\n            'Import failed! Try again?'\n          );\n        }\n      );\n  }\n\n  // An alternate function for importing images with no GPS data. A feature is created elsewhere, and the image is added to the feature\n  // Inputs:\n  // projectId: Id number of current project\n  // features: A pre-created feature with user-defined or zeroed out gps data\n  // file: A Tapis Remote File containing the image to be imported\n  importImage(projectId: number, feature: Feature, path: string): void {\n    const featureId = feature.id;\n    let file;\n    this.fileList.forEach((remoteFile) => {\n      if (remoteFile.path == path) {\n        file = remoteFile;\n      }\n    });\n    const payload = { system_id: file.system, path: file.path };\n    this.http\n      .post(\n        environment.apiUrl +\n          `projects/${projectId}/features/${featureId}/assets/`,\n        payload\n      )\n      .subscribe((resp) => {\n        this.notificationsService.showSuccessToast('Import started!');\n        // this.getFeatures(projectId)\n      });\n  }\n\n  // Creates a new feature from an uploaded locally created feature\n  uploadNewFeature(projectId: number, feature: Feature, path: string): void {\n    const payload = feature;\n    let response;\n    // Calls the addFeatureAsset route in GeoAPI, resp is a list of features\n    this.http\n      .post(environment.apiUrl + `projects/${projectId}/features/`, payload)\n      .subscribe((resp) => {\n        response = new Feature(resp[0]);\n        this.importImage(projectId, response, path);\n      });\n  }\n\n  downloadGeoJSON(projectId: number, query: AssetFilters = new AssetFilters()) {\n    const qstring: string = querystring.stringify(query.toJson());\n    const downloadLink = document.createElement('a');\n\n    this.http\n      .get<FeatureCollection>(\n        environment.apiUrl + `/projects/${projectId}/features/` + '?' + qstring\n      )\n      .subscribe((resp) => {\n        const blob = new Blob([JSON.stringify(resp)], {\n          type: 'application/json',\n        });\n        downloadLink.href = URL.createObjectURL(blob);\n        downloadLink.setAttribute('download', 'hazmapper.json');\n        document.body.appendChild(downloadLink);\n        downloadLink.click();\n        document.body.removeChild(downloadLink);\n      });\n  }\n\n  uploadFile(projectId: number, file: File): void {\n    const form: FormData = new FormData();\n    form.append('file', file, file.name);\n    this.http\n      .post<Array<Feature>>(\n        environment.apiUrl + `/projects/${projectId}/features/files/`,\n        form\n      )\n      .subscribe(\n        (feats) => {\n          feats.forEach((feat) => {\n            this.addFeature(new Feature(feat));\n          });\n        },\n        (error) => {\n          // TODO: Add notification\n        }\n      );\n  }\n\n  uploadAssetFile(projectId: number, featureId: number, file: File): void {\n    const form: FormData = new FormData();\n    form.append('file', file, file.name);\n    this.http\n      .post<Feature>(\n        environment.apiUrl +\n          `/api/projects/${projectId}/features/${featureId}/assets/`,\n        form\n      )\n      .subscribe(\n        (feature) => {\n          // TODO workaround to update activeFeature\n          const f = this._activeFeature.getValue();\n          if (f && f.id === featureId) {\n            this.activeFeature = new Feature(feature);\n            this.getFeatures(projectId);\n          }\n        },\n        (error) => {\n          // TODO: Add notification\n        }\n      );\n  }\n\n  getOverlays(projectId: number): void {\n    this.http\n      .get(environment.apiUrl + `/projects/${projectId}/overlays/`)\n      .subscribe((ovs: Array<Overlay>) => {\n        this._overlays.next(ovs);\n      });\n  }\n\n  addOverlay(\n    projectId: number,\n    file: File,\n    label: string,\n    minLat: number,\n    maxLat: number,\n    minLon: number,\n    maxLon: number\n  ) {\n    const payload = new FormData();\n    payload.append('file', file);\n    payload.append('label', label);\n    payload.append('minLat', minLat.toFixed(6));\n    payload.append('maxLat', maxLat.toFixed(6));\n    payload.append('minLon', minLon.toFixed(6));\n    payload.append('maxLon', maxLon.toFixed(6));\n\n    this.http\n      .post(environment.apiUrl + `/projects/${projectId}/overlays/`, payload)\n      .subscribe((resp) => {\n        this.getOverlays(projectId);\n      });\n  }\n\n  // Call on getFeatures (each time feature update)\n  getGroups(featureList: Feature[]): void {\n    const groups = new Map<string, TagGroup>();\n    const groupsFeatures = new Map<string, Feature[]>();\n    featureList\n      .filter(\n        (feat: Feature) =>\n          feat.properties.group && feat.properties.group.length > 0\n      )\n      .forEach((feat: Feature) => {\n        feat.properties.group.forEach((group: TagGroup) => {\n          groupsFeatures.set(\n            group.name,\n            groupsFeatures.has(group.name)\n              ? [...groupsFeatures.get(group.name), feat]\n              : [feat]\n          );\n          groups.set(group.name, group);\n        });\n      });\n    this._groups.next(groups);\n    this._groupsFeatures.next(groupsFeatures);\n    const activeGroup = this._activeGroup.value;\n    if (activeGroup) {\n      this.setActiveGroup(groups.get(activeGroup.name));\n    }\n  }\n\n  getGroup(groupName: string) {\n    return this._groups.value.get(groupName);\n  }\n\n  getGroupFeatures(featureList: Feature[], group: TagGroup) {\n    return featureList.filter(\n      (feat: Feature) =>\n        feat.properties.group &&\n        feat.properties.group.length &&\n        feat.properties.group.some((grp: TagGroup) => grp.id === group.id)\n    );\n  }\n\n  private createGroup(\n    featureList: Feature[],\n    group: TagGroup,\n    style?: FeatureStyles\n  ): Feature[] {\n    return featureList.map((feat: Feature) => {\n      let groupProp = feat.properties.group ? feat.properties.group : [];\n      groupProp = groupProp.filter((grp: TagGroup) => grp.id !== group.id);\n      groupProp.push(group);\n      feat.properties.group = groupProp;\n      feat.properties.style = style\n        ? style\n        : feat.properties.style\n        ? feat.properties.style\n        : {};\n\n      return feat;\n    });\n  }\n\n  private updateGroup(\n    featureList: Feature[],\n    group: TagGroup,\n    style?: FeatureStyles\n  ): Feature[] {\n    return this.getGroupFeatures(featureList, group).map((feat: Feature) => {\n      const groupProp = feat.properties.group.filter(\n        (grp: TagGroup) => grp.id !== group.id\n      );\n      groupProp.push(group);\n      feat.properties.group = groupProp;\n      feat.properties.style = style\n        ? style\n        : feat.properties.style\n        ? feat.properties.style\n        : {};\n\n      return feat;\n    });\n  }\n\n  private deleteGroup(featureList: Feature[], group: TagGroup): Feature[] {\n    return this.getGroupFeatures(featureList, group).map((feat: Feature) => {\n      feat.properties.group = feat.properties.group.filter(\n        (grp: TagGroup) => grp.id !== group.id\n      );\n      return feat;\n    });\n  }\n\n  createNewGroup(projectId: number, featureList: Feature[], name: string) {\n    const id = uuidv4();\n    const myRandColor: string = getRandomColor();\n    const group: TagGroup = {\n      id,\n      name,\n      color: myRandColor,\n      icon: 'fa-house-damage',\n    };\n    const style = {\n      color: myRandColor,\n      faIcon: 'fa-house-damage',\n    };\n    this.createGroupFeatures(projectId, featureList, group, style);\n    return group;\n  }\n\n  createGroupFeatures(\n    projectId: number,\n    featureList: Feature[],\n    group: TagGroup,\n    style?: FeatureStyles\n  ) {\n    if (style) {\n      this.createGroup(featureList, group, style).forEach((feat: Feature) => {\n        this.updateFeatureProperty(projectId, feat.id, feat.properties);\n      });\n    } else {\n      this.createGroup(featureList, group).forEach((feat: Feature) => {\n        this.updateFeatureProperty(projectId, feat.id, feat.properties);\n      });\n    }\n  }\n\n  deleteGroupFeatures(\n    projectId: number,\n    featureList: Feature[],\n    group: TagGroup\n  ) {\n    this.deleteGroup(featureList, group).forEach((feat: Feature) => {\n      this.updateFeatureProperty(projectId, feat.id, feat.properties);\n    });\n  }\n\n  updateGroupFeatures(\n    projectId: number,\n    featureList: Feature[],\n    group: TagGroup,\n    style?: FeatureStyles\n  ) {\n    if (style) {\n      this.updateGroup(featureList, group, style).forEach((feat: Feature) => {\n        this.updateFeatureProperty(projectId, feat.id, feat.properties);\n      });\n    } else {\n      this.updateGroup(featureList, group).forEach((feat: Feature) => {\n        this.updateFeatureProperty(projectId, feat.id, feat.properties);\n      });\n    }\n  }\n\n  renameGroup(\n    projectId: number,\n    featureList: Feature[],\n    group: TagGroup,\n    name: string\n  ): void {\n    const renamedGroup = {\n      ...group,\n      name,\n    };\n\n    this.updateGroupFeatures(projectId, featureList, renamedGroup);\n  }\n\n  reiconGroup(\n    projectId: number,\n    featureList: Feature[],\n    group: TagGroup,\n    icon: string\n  ): void {\n    const reiconedGroup = {\n      ...group,\n      icon,\n    };\n\n    const reiconedStyle = {\n      faIcon: icon,\n      color: group.color ? group.color : '#00C8FF',\n    };\n\n    this.updateGroupFeatures(\n      projectId,\n      featureList,\n      reiconedGroup,\n      reiconedStyle\n    );\n  }\n\n  public get overlays(): Observable<Array<Overlay>> {\n    return this._overlays.asObservable();\n  }\n\n  public get features(): Observable<FeatureCollection> {\n    return this._features.asObservable();\n  }\n\n  public get activeFeature() {\n    return this._activeFeature.asObservable();\n  }\n\n  // TODO: This is heinous\n  public set activeFeature(f: any) {\n    if (f) {\n      if (f === this._activeFeature.getValue()) {\n        this._activeFeature.next(null);\n      } else {\n        this._activeFeature.next(f);\n      }\n    } else {\n      this._activeFeature.next(null);\n    }\n  }\n\n  public get activeOverlay(): Observable<Overlay> {\n    return this._activeOverlay.asObservable();\n  }\n\n  public set activeOverlay(ov) {\n    this._activeOverlay.next(ov);\n  }\n\n  public get mapMouseLocation(): Observable<LatLng> {\n    return this._mapMouseLocation.asObservable();\n  }\n\n  public set mapMouseLocation(loc) {\n    this._mapMouseLocation.next(loc);\n  }\n\n  public set basemap(bmap) {\n    this._basemap.next(bmap);\n  }\n\n  public get basemap(): any {\n    return this._basemap.asObservable();\n  }\n}\n","export function getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n","import { Component, OnInit } from '@angular/core';\nimport { GeoDataService } from '../../services/geo-data.service';\nimport { Feature } from '../../models/models';\nimport {\n  AuthenticatedUser,\n  AuthService,\n} from '../../services/authentication.service';\nimport { Observable } from 'rxjs';\nimport { BsModalRef, BsModalService } from 'ngx-foundation';\nimport { ModalFileBrowserComponent } from '../modal-file-browser/modal-file-browser.component';\nimport { RemoteFile } from 'ng-tapis';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss'],\n})\nexport class MainComponent implements OnInit {\n  // public activeFeature: Feature;\n  // public currentUser: AuthenticatedUser;\n\n  constructor(\n    private geoDataService: GeoDataService,\n    private authService: AuthService,\n    private bsModalService: BsModalService\n  ) {}\n\n  ngOnInit() {\n    // this.geoDataService.activeFeature.subscribe( next => {\n    //   this.activeFeature = next;\n    // });\n    // this.authService.currentUser.subscribe(next => this.currentUser = next);\n  }\n}\n","import { Component, NgZone, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router, Route } from '@angular/router';\nimport { AuthService } from '../../services/authentication.service';\n\n@Component({\n  selector: 'app-callback',\n  templateUrl: './callback.component.html',\n  styleUrls: ['./callback.component.scss'],\n})\nexport class CallbackComponent implements OnInit {\n  constructor(private route: ActivatedRoute, private auth: AuthService) {}\n\n  ngOnInit() {\n    // TODO: For some reason wso2 is sending back a fragment like #access_token=qadad&expires_in=3600\n    const frag = this.route.snapshot.fragment;\n    const params = new URLSearchParams(frag);\n    const token = params.get('access_token');\n    const expires_in = +params.get('expires_in');\n    this.auth.setToken(token, expires_in);\n  }\n}\n","import { Component, Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { Group, TagGroup, GroupForm, Tag, Project } from '../models/models';\nimport { map, first } from 'rxjs/operators';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { GeoDataService } from './geo-data.service';\nimport { prepareSyntheticListenerFunctionName } from '@angular/compiler/src/render3/util';\nimport { fadeInItems } from '@angular/material';\nimport { Feature, FeatureCollection } from 'geojson';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FormsService {\n  constructor(private geoDataService: GeoDataService) {}\n\n  deleteForm(\n    projectId: number,\n    form: GroupForm,\n    activeGroup: TagGroup,\n    featureGroups: Feature[]\n  ): void {\n    const taggedGroup: TagGroup = {\n      ...activeGroup,\n      forms: activeGroup.forms.filter((t: GroupForm) => t.id !== form.id),\n    };\n\n    this.geoDataService.updateGroupFeatures(\n      projectId,\n      featureGroups,\n      taggedGroup\n    );\n  }\n\n  renameForm(\n    projectId: number,\n    targetForm: GroupForm,\n    activeGroup: TagGroup,\n    featureGroups: Feature[],\n    newName: string\n  ): void {\n    const taggedGroup: TagGroup = {\n      ...activeGroup,\n      forms: [\n        ...activeGroup.forms.filter((form) => form.id !== targetForm.id),\n        { ...targetForm, label: newName },\n      ],\n    };\n\n    this.geoDataService.updateGroupFeatures(\n      projectId,\n      featureGroups,\n      taggedGroup\n    );\n  }\n\n  createForm(\n    projectId: number,\n    form: GroupForm,\n    activeGroup: TagGroup,\n    featureGroups: Feature[]\n  ): void {\n    const id = uuidv4();\n    form = { ...form, id };\n    const taggedGroup: TagGroup = {\n      ...activeGroup,\n      forms: activeGroup.forms ? [...activeGroup.forms, form] : [form],\n    };\n    this.geoDataService.updateGroupFeatures(\n      projectId,\n      featureGroups,\n      taggedGroup\n    );\n  }\n\n  checkDefault(selectedColor: string, feature: any) {\n    if (selectedColor === 'default') {\n      try {\n        selectedColor = feature.styles.color;\n      } catch (error) {\n        selectedColor = '#00C8FF';\n      }\n    }\n    return selectedColor;\n  }\n\n  // Inputs:\n  // color:string A 7 digit hexadecimal string (#RRGGBB) passed in from a color tag\n  // This method accesses group services to retrive the current group's icon as well\n  saveStyles(\n    projectId: number,\n    featureList: Feature[],\n    group: TagGroup,\n    color?: string,\n    icon?: string\n  ) {\n    const style = {\n      color: color ? color : '#00C8FF',\n      faIcon: icon ? icon : group.icon,\n    };\n\n    this.geoDataService.updateGroupFeatures(\n      projectId,\n      featureList,\n      group,\n      style\n    );\n  }\n\n  updateTagValue(\n    activeProject: Project,\n    feature: Feature,\n    form: GroupForm,\n    tagValue: any\n  ) {\n    let tagProp = feature.properties.tags ? feature.properties.tags : [];\n    tagProp = tagProp.filter((tag: Tag) => form.id !== tag.id);\n\n    const tag = {\n      id: form.id,\n      value: tagValue,\n    };\n\n    feature.properties.tags = [...tagProp, tag];\n\n    this.geoDataService.updateFeatureProperty(\n      activeProject.id,\n      feature.id,\n      feature.properties\n    );\n  }\n\n  updateTagValues(\n    activeProject: Project,\n    feature: Feature,\n    formList: GroupForm[],\n    newValues: any[]\n  ) {\n    feature.properties.tags = newValues;\n    this.geoDataService.updateFeatureProperty(\n      activeProject.id,\n      feature.id,\n      feature.properties\n    );\n  }\n\n  getTagValue(feature: Feature, form: GroupForm): any {\n    if (feature.properties.tags) {\n      const tagValueObj = feature.properties.tags.find(\n        (featTag: any) => featTag.id && featTag.id === form.id\n      );\n\n      if (tagValueObj) {\n        return tagValueObj.value;\n      }\n    }\n    if (form.type === 'checkbox') {\n      return [];\n    } else {\n      return '';\n    }\n  }\n}\n\n// TODO: put this in models so we can reference it like we do the Features type\nexport interface tags {\n  type: string;\n  groupName: string;\n  label: string;\n  options: Array<Group>;\n  feature: string | number;\n  extra: Array<Group>;\n  id?: string;\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { ProjectsService } from './projects.service';\nimport { Feature, TagGroup } from '../models/models';\n\n// Will inject Projects and GeoData Service to get properties of Feature\n@Injectable({\n  providedIn: 'root',\n})\nexport class GroupsService {\n  private _selectedImages: BehaviorSubject<Array<any>> = new BehaviorSubject(\n    []\n  );\n  public selectedImages: Observable<Array<any>> =\n    this._selectedImages.asObservable();\n\n  private _showTagger: BehaviorSubject<boolean> = new BehaviorSubject(false);\n  public showTagger: Observable<boolean> = this._showTagger.asObservable();\n\n  private _showTagGenerator: BehaviorSubject<boolean> =\n    new BehaviorSubject<boolean>(false);\n  public showTagGenerator: Observable<boolean> =\n    this._showTagGenerator.asObservable();\n\n  private _groupToAdd: BehaviorSubject<TagGroup> = new BehaviorSubject({name: undefined});\n  public groupToAdd: Observable<TagGroup> = this._groupToAdd.asObservable();\n\n  constructor() {}\n\n  imageSelected(feature: Feature): boolean {\n    const currentFeatures = this._selectedImages.value;\n    return currentFeatures.some((feat) => feat.id === feature.id);\n  }\n\n  unselectAllImages() {\n    this._selectedImages.next([]);\n  }\n\n  toggleImageSelect(feature: Feature): void {\n    const currentFeatures = this._selectedImages.value;\n    const newFeatures = this.imageSelected(feature)\n      ? currentFeatures.filter((feat) => feat.id !== feature.id)\n      : [feature, ...currentFeatures];\n\n    this._selectedImages.next(newFeatures);\n  }\n\n  setSelectedImages(selectedImages: any): void {\n    this._selectedImages.next(selectedImages);\n  }\n\n  setGroupToAdd(group: TagGroup): void {\n    this._groupToAdd.next(group);\n  }\n\n  toggleTagger(): void {\n    this._showTagger.next(!this._showTagger.value);\n  }\n\n  setShowTagGenerator(value: boolean): void {\n    this._showTagGenerator.next(value);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Project, IProjectUser, ProjectRequest } from '../models/models';\nimport { environment } from '../../environments/environment';\nimport { AuthService } from './authentication.service';\nimport { validateBBox } from '@turf/helpers';\nimport { NotificationsService } from './notifications.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProjectsService {\n  private _projects: BehaviorSubject<Project[]> = new BehaviorSubject([]);\n  public readonly projects: Observable<Project[]> =\n    this._projects.asObservable();\n  private _activeProject: ReplaySubject<Project> = new ReplaySubject<Project>(\n    1\n  );\n  public readonly activeProject: Observable<Project> =\n    this._activeProject.asObservable();\n  private _projectUsers: ReplaySubject<Array<IProjectUser>> = new ReplaySubject<\n    Array<IProjectUser>\n  >(1);\n  public readonly projectUsers$: Observable<Array<IProjectUser>> =\n    this._projectUsers.asObservable();\n\n  private _deletingProjects: BehaviorSubject<Project[]> = new BehaviorSubject<\n    Project[]\n  >([]);\n  public deletingProjects: Observable<Project[]> =\n    this._deletingProjects.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService,\n    private notificationsService: NotificationsService\n  ) {}\n\n  testGeoApi(): void {\n    const data = {\n      name: 'Awesome Project',\n      description: 'Cool project',\n    };\n    const prom = this.http\n      .post<Project>(`http://localhost:8888/projects/`, data)\n      .subscribe((resp) => {\n        this._projects.next([...this._projects.value, resp]);\n        // Set the active project to the one just created?\n        this._activeProject.next(resp);\n      });\n\n    this.http\n      .get<Project[]>(`http://localhost:8888/projects/`)\n      .subscribe((resp) => {\n        this._projects.next(resp);\n      });\n  }\n\n  updateProjectsList(resp: Project[] = []) {\n    const myProjs = resp.length !== 0 ? resp : this._projects.value;\n\n    this._deletingProjects.value.length !== 0\n      ? this._projects.next(\n          myProjs.map((p) => {\n            const deletingProj = this._deletingProjects.value.find(\n              (dp) => dp.id === p.id\n            );\n            return deletingProj ? deletingProj : p;\n          })\n        )\n      : this._projects.next(myProjs);\n  }\n\n  // Queries database for all user projects.\n  getProjects(): void {\n    this.http.get<Project[]>(environment.apiUrl + `/projects/`).subscribe(\n      (resp) => {\n        this.updateProjectsList(resp);\n      },\n      (error) => {\n        this.notificationsService.showErrorToast(\n          'Error importing files Design Safe, GeoAPI might be down'\n        );\n      }\n    );\n  }\n\n  create(data: ProjectRequest): Observable<Project> {\n    const prom = this.http.post<Project>(\n      environment.apiUrl + `/projects/`,\n      data\n    );\n    prom.subscribe((proj) => {\n      this._projects.next([...this._projects.value, proj]);\n\n      // Awkward as hell, but this ensures we actually transition to the newly created project\n      // Without this, the screen flickers briefly to the new project, but ends up stuck on the old project\n      this.setActiveProject(proj);\n      this.setActiveProject(proj);\n    });\n    return prom;\n  }\n\n  setActiveProject(proj: Project): void {\n    // saves change as last visited project\n    window.localStorage.setItem('lastProj', JSON.stringify(proj));\n    try {\n      this._activeProject.next(proj);\n    } catch (error) {\n      return error;\n    }\n  }\n\n  update(data: ProjectRequest): void {\n    this.http\n      .put<Project>(environment.apiUrl + `/projects/${data.project.id}/`, data)\n      .subscribe((resp) => {\n        this._activeProject.next(resp);\n      });\n  }\n\n  // Note: This will delete the project for everyone, if the project is shared.\n  delete(data: Project): void {\n    this._deletingProjects.next([\n      ...this._deletingProjects.value,\n      { ...data, deleting: true },\n    ]);\n    this.updateProjectsList();\n\n    this.http.delete(environment.apiUrl + `projects/${data.id}/`).subscribe(\n      (resp) => {\n        window.localStorage.setItem('lastProj', JSON.stringify('none'));\n\n        this._deletingProjects.next(\n          this._deletingProjects.value.filter((p) => p.id !== data.id)\n        );\n        // These next two lines might be causing problems. Adding getProjects causes duplicates during project creation,\n        // So I'm thinking that calling these here might be the root of my delete woes, as they're restoring the project I just\n        // deleted...\n        this.updateProjectsList();\n        this.getProjects();\n        // As elegant as a brick to the face, but this solves the delete issues...\n        window.localStorage.setItem('lastProj', JSON.stringify('none'));\n      },\n      (error) => {\n        window.localStorage.setItem('lastProj', JSON.stringify('none'));\n\n        this._deletingProjects.next(\n          this._deletingProjects.value.map((p) => {\n            return p.id === data.id\n              ? { ...p, deleting: false, deletingFailed: true }\n              : p;\n          })\n        );\n        this.updateProjectsList();\n\n        this.getProjects();\n\n        this.notificationsService.showErrorToast('Could not delete project!');\n        console.error(error);\n      }\n    ); // end of error\n  }\n\n  getProjectUsers(proj: Project): Observable<Array<IProjectUser>> {\n    return this.http\n      .get<Array<IProjectUser>>(\n        environment.apiUrl + `/projects/${proj.id}/users/`\n      )\n      .pipe(\n        tap((users) => {\n          this._projectUsers.next(users);\n        })\n      );\n  }\n\n  addUserToProject(proj: Project, uname: string): void {\n    const payload = {\n      username: uname,\n    };\n    this.http\n      .post(environment.apiUrl + `/projects/${proj.id}/users/`, payload)\n      .subscribe((resp) => {\n        this.getProjectUsers(proj).subscribe();\n      });\n  }\n\n  deleteUserFromProject(proj: Project, user: string): void {\n    this.http\n      .delete(environment.apiUrl + `/projects/${proj.id}/users/${user}/`)\n      .subscribe(\n        (resp) => {\n          this.getProjectUsers(proj).subscribe();\n        },\n        (error) => {\n          // TODO: Create popup for an error message.\n          console.log(error);\n        }\n      );\n  }\n}\n","import {\n  Component,\n  OnInit,\n  TemplateRef,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { FormsService, tags } from '../../../services/forms.service';\nimport { GroupsService } from '../../../services/groups.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { Feature, Project, TagGroup, GroupForm } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\nimport { ProjectsService } from 'src/app/services/projects.service';\n\n@Component({\n  selector: 'app-tag-generator',\n  templateUrl: './tag-generator.component.html',\n  styleUrls: ['./tag-generator.component.scss'],\n})\nexport class TagGeneratorComponent implements OnInit {\n  formLabel: string;\n  formColor: string;\n  formOptions: Array<any> = [];\n  selectedGroup: string;\n  formType: string;\n  labelFilter: string;\n  optionColorFilter = '#000000';\n  activeGroup: TagGroup;\n  optionFilter: string;\n  formName: string;\n  formValue: string;\n  formRequired: boolean;\n  openOption: any = {};\n  enabledControls: Array<string> = [];\n  showSubitem = true;\n  groups: Map<string, TagGroup>;\n  groupsFeatures: Map<string, any>;\n  groups$: Subscription;\n  private activeProject: Project;\n\n  constructor(\n    private formsService: FormsService,\n    private groupsService: GroupsService,\n    private dialog: MatDialog,\n    private router: Router,\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroup.subscribe((next) => {\n      this.activeGroup = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.geoDataService.groupsFeatures.subscribe((next) => {\n      this.groupsFeatures = next;\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n\n    this.formOptions = [];\n    this.formType = 'text';\n    this.formName = '';\n    this.formLabel = '';\n    this.formValue = '';\n    this.formRequired = false;\n    this.enabledControls = ['Text', 'Checkbox', 'Radio', 'Dropdown', 'Color'];\n  }\n\n  inputFormLabel(event: any) {\n    this.formLabel = event.target.value;\n  }\n\n  inputFormColor(event: any) {\n    this.formColor = event.target.value;\n  }\n\n  addOptionItem(value: string) {\n    if (value) {\n      const formWithValue = this.formOptions.filter((e) => e.label == value);\n      if (formWithValue.length == 0 && value.length != 0) {\n        this.formOptions.push({\n          label: value,\n          color: this.optionColorFilter,\n        });\n      }\n    }\n  }\n\n  deleteOption(opt: any) {\n    this.formOptions = this.formOptions.filter(\n      (option) => option.label != opt.label\n    );\n  }\n\n  openRenameModal(template: TemplateRef<any>, name: string) {\n    this.selectedGroup = name;\n    this.dialog.open(template);\n  }\n\n  openRenameOptionModal(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  renameOption(opt: any, label: string) {\n    label = label.toLowerCase();\n    this.formOptions.forEach((e) => {\n      if (e.label == opt.label) {\n        e.label = label;\n      }\n    });\n  }\n\n  selectInputForm(name: string) {\n    this.formType = name;\n    this.formLabel = '';\n    this.formOptions = [];\n  }\n\n  clearOption() {\n    this.optionFilter = '';\n  }\n\n  clearLabel() {\n    this.labelFilter = '';\n  }\n\n  clearOptionColor() {\n    this.optionColorFilter = '#000000';\n  }\n\n  clear() {\n    this.clearLabel();\n    this.clearOptionColor();\n    this.clearOption();\n  }\n\n  addFormItem() {\n    // Assemble the new tag\n    const formItem: GroupForm = {\n      type: this.formType,\n      groupName: this.activeGroup.name,\n      label: this.formLabel,\n      options: [],\n    };\n    this.openOption[this.formLabel] = false;\n    // Adds the options for drop down, checklist, and radio buttons\n    if (this.formType !== 'text' && this.formOptions.length != 0) {\n      const myOpts = [];\n      for (const opt of this.formOptions) {\n        myOpts.push({\n          label: opt,\n        });\n      }\n      formItem.options = this.formOptions;\n    }\n\n    this.formsService.createForm(\n      this.activeProject.id,\n      formItem,\n      this.groups.get(this.activeGroup.name),\n      this.groupsFeatures.get(this.activeGroup.name)\n    );\n\n    // Reset user-defined fields to blank options\n    this.formLabel = '';\n    this.formColor = '';\n    this.formOptions = [];\n    this.groupsService.setShowTagGenerator(false);\n    this.clear();\n  }\n\n  cancelCreate() {\n    this.groupsService.setShowTagGenerator(false);\n    this.clear();\n  }\n\n  expandPanel() {\n    this.showSubitem = !this.showSubitem;\n  }\n}\n","import { Component, OnInit, TemplateRef } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Feature } from 'geojson';\nimport { combineLatest } from 'rxjs';\nimport { GroupForm, TagGroup } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { FormsService } from '../../../services/forms.service';\nimport { GroupsService } from '../../../services/groups.service';\n\n@Component({\n  selector: 'app-tag-images',\n  templateUrl: './tag-images.component.html',\n  styleUrls: ['./tag-images.component.scss'],\n})\nexport class TagImagesComponent implements OnInit {\n  private activeProject;\n  payload: any;\n  selectedGroup: string;\n  activeGroup: TagGroup;\n  showSubitem = true;\n  formList: GroupForm[] = [];\n  tagName = '';\n  groups: Map<string, TagGroup>;\n  groupsFeatures: Map<string, Feature[]>;\n  activeGroupFeature: Feature;\n  tagValues = [];\n\n  constructor(\n    private groupsService: GroupsService,\n    private formsService: FormsService,\n    private dialog: MatDialog,\n    private projectsService: ProjectsService,\n    private geoDataService: GeoDataService\n  ) {}\n\n  ngOnInit() {\n    combineLatest(\n      this.geoDataService.activeGroup,\n      this.geoDataService.groupsFeatures,\n      this.geoDataService.groups\n    ).subscribe(([grp, grpFts, grps]) => {\n      this.activeGroup = grp;\n      this.groupsFeatures = grpFts;\n      this.groups = grps;\n      if (grp) {\n        this.formList = grp.forms;\n      }\n    });\n\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n  }\n\n  openRenameModal(template: TemplateRef<any>, name: string) {\n    this.selectedGroup = name;\n    this.dialog.open(template);\n  }\n\n  // Takes the name of the tag's group, and the tag itself to delete\n  deleteForm(tag: GroupForm) {\n    this.formsService.deleteForm(\n      this.activeProject.id,\n      tag,\n      this.groups.get(this.activeGroup.name),\n      this.groupsFeatures.get(this.activeGroup.name)\n    );\n  }\n\n  // submits a tag's name change to geoAPI\n  renameForm(tag: GroupForm) {\n    this.formsService.renameForm(\n      this.activeProject.id,\n      tag,\n      this.groups.get(this.activeGroup.name),\n      this.groupsFeatures.get(this.activeGroup.name),\n      this.tagName\n    );\n    // Reset newTagValue for the next rename\n    this.tagName = '';\n    this.dialog.closeAll(); // Ensures the window closes when using enter-submission\n  }\n\n  showTagGenerator() {\n    this.groupsService.setShowTagGenerator(true);\n  }\n\n  saveTags() {\n    this.formsService.updateTagValues(\n      this.activeProject,\n      this.activeGroupFeature,\n      this.formList,\n      this.tagValues\n    );\n  }\n\n  setValue(formValue) {\n    this.tagValues = this.tagValues.filter(\n      (value) => value.id !== formValue.id\n    );\n    this.tagValues.push(formValue);\n  }\n\n  expandPanel() {\n    this.showSubitem = !this.showSubitem;\n  }\n}\n","import { Injectable, NgModule } from '@angular/core';\nimport {\n  Routes,\n  RouterModule,\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { NotFoundComponent } from './components/notfound/notfound.component';\nimport { AuthService } from './services/authentication.service';\nimport { MainComponent } from './components/main/main.component';\nimport { CallbackComponent } from './components/callback/callback.component';\nimport { TagGeneratorComponent } from './components/side-bar/tag-generator/tag-generator.component';\nimport { TagImagesComponent } from './components/side-bar/tag-images/tag-images.component';\n\n@Injectable()\nexport class Activate implements CanActivate {\n  constructor(private authSvc: AuthService) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (this.authSvc.isLoggedIn()) {\n      return true;\n    }\n    this.authSvc.login();\n  }\n}\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MainComponent,\n    canActivate: [Activate],\n    children: [\n      {\n        path: 'tagger',\n        component: TagImagesComponent,\n        canActivateChild: [Activate],\n      },\n      {\n        path: 'preset',\n        component: TagGeneratorComponent,\n        canActivateChild: [Activate],\n      },\n    ],\n  },\n  { path: 'callback', component: CallbackComponent },\n  { path: '404', component: NotFoundComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { onSameUrlNavigation: 'reload' })],\n  exports: [RouterModule],\n  providers: [Activate],\n})\nexport class AppRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './services/authentication.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  title = 'viewer';\n\n  constructor(private authService: AuthService) {}\n\n  ngOnInit() {\n    this.authService.login();\n  }\n}\n","import {\n  CircleMarker,\n  circleMarker,\n  divIcon,\n  LatLng,\n  Marker,\n  marker,\n} from 'leaflet';\nimport { Feature } from '../models/models';\n\nfunction createCircleMarker(feature: Feature, latlng: LatLng): CircleMarker {\n  const options = {\n    radius: 8,\n    fillColor: '#d3d3d3',\n    color: 'black',\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 0.8,\n  };\n  return circleMarker(latlng, options);\n}\n\nfunction createImageMarker(feature: Feature, latlng: LatLng): Marker {\n  const divHtml = '<i class=\\'fas fa-camera-retro fa-2x light-blue\\'></i>';\n  const ico = divIcon({ className: 'leaflet-fa-marker-icon', html: divHtml });\n  return marker(latlng, { icon: ico });\n}\n\nfunction createCollectionMarker(feature: Feature, latlng: LatLng): Marker {\n  const divHtml = '<i class=\"fa fa-folder-open fa-2x light-blue\"></i>';\n  const ico = divIcon({ className: 'icon-marker', html: divHtml });\n  return marker(latlng, { icon: ico });\n}\nfunction createVideoMarker(feature: Feature, latlng: LatLng): Marker {\n  const divHtml = '<i class=\\'fas fa-video fa-2x light-blue\\'></i>';\n  const ico = divIcon({ className: 'leaflet-fa-marker-icon', html: divHtml });\n  return marker(latlng, { icon: ico });\n}\n\nexport function createMarker(feature: Feature, latlng: LatLng): Marker {\n  let marker;\n  if (feature.featureType() == 'image') {\n    marker = createImageMarker(feature, latlng);\n  } else if (feature.featureType() == 'collection') {\n    marker = createCollectionMarker(feature, latlng);\n  } else if (feature.featureType() == 'video') {\n    marker = createVideoMarker(feature, latlng);\n  } else {\n    marker = createCircleMarker(feature, latlng);\n  }\n  return marker;\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport * as L from 'leaflet';\nimport 'leaflet.markercluster';\n\nimport { GeoDataService } from '../../services/geo-data.service';\nimport { createMarker } from '../../utils/leafletUtils';\nimport { Feature } from 'geojson';\nimport { FeatureGroup, ImageOverlay, LatLng, LeafletMouseEvent } from 'leaflet';\nimport * as turf from '@turf/turf';\nimport { AllGeoJSON } from '@turf/helpers';\nimport { filter, skip } from 'rxjs/operators';\nimport { Overlay } from '../../models/models';\nimport { AppEnvironment, environment } from '../../../environments/environment';\n\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.scss'],\n})\nexport class MapComponent implements OnInit {\n  map: L.Map;\n  mapType = 'normal';\n  activeFeature: Feature;\n  activeOverlay: Overlay;\n  features: FeatureGroup = new FeatureGroup();\n  overlays: Map<number, ImageOverlay>;\n  environment: AppEnvironment;\n\n  constructor(\n    private GeoDataService: GeoDataService,\n    private route: ActivatedRoute\n  ) {\n    // Have to bind these to keep this being this\n    this.featureClickHandler.bind(this);\n    this.mouseEventHandler.bind(this);\n  }\n\n  ngOnInit() {\n    // const mapType: string = this.route.snapshot.queryParamMap.get('mapType');\n    // this.projectId = +this.route.snapshot.paramMap.get(\"projectId\");\n    // this.cluster = this.route.snapshot.queryParamMap.get('mapType');\n    this.environment = environment;\n    this.overlays = new Map();\n    this.map = new L.Map('map', {\n      center: [40, -80],\n      zoom: 9,\n    });\n\n    const baseOSM = L.tileLayer(\n      'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n      {\n        maxZoom: 19,\n        attribution:\n          '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n      }\n    );\n    const satellite = L.tileLayer(\n      'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n      {\n        attribution:\n          'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n      }\n    );\n    // default to streetmap view;\n    this.map.addLayer(baseOSM);\n\n    this.loadFeatures();\n\n    // Publish the mouse location on the mapMouseLocation stream\n    this.map.on('mousemove', (ev: LeafletMouseEvent) =>\n      this.mouseEventHandler(ev)\n    );\n    this.GeoDataService.activeOverlay.pipe(skip(1)).subscribe((next) => {\n      this.addRemoveOverlay(next);\n    });\n\n    // Listen on the activeFeature stream and zoom map to that feature when it changes\n    this.GeoDataService.activeFeature\n      .pipe(filter((n) => n != null))\n      .subscribe((next) => {\n        this.activeFeature = next;\n        const bbox = turf.bbox(<AllGeoJSON> next);\n        this.map.fitBounds([\n          [bbox[1], bbox[0]],\n          [bbox[3], bbox[2]],\n        ]);\n      });\n\n    // Listen for changes to the basemap\n    this.GeoDataService.basemap.pipe(skip(1)).subscribe((next) => {\n      if (next == 'sat') {\n        this.map.removeLayer(baseOSM);\n        this.map.addLayer(satellite);\n      }\n      if (next == 'roads') {\n        this.map.removeLayer(satellite);\n        this.map.addLayer(baseOSM);\n      }\n    });\n  }\n\n  addRemoveOverlay(ov: Overlay): void {\n    if (this.overlays.has(ov.id)) {\n      this.features.removeLayer(this.overlays.get(ov.id));\n      this.overlays.delete(ov.id);\n    } else {\n      const overlay = L.imageOverlay(\n        environment.apiUrl + '/assets/' + ov.path,\n        [\n          [ov.minLat, ov.minLon],\n          [ov.maxLat, ov.maxLon],\n        ]\n      );\n      this.overlays.set(ov.id, overlay);\n      this.features.addLayer(overlay);\n    }\n    this.map.fitBounds(this.features.getBounds());\n  }\n\n  mouseEventHandler(ev: any): void {\n    this.GeoDataService.mapMouseLocation = ev.latlng;\n  }\n\n  /**\n   * Load Features for a project.\n   */\n  loadFeatures() {\n    const geojsonOptions = {\n      pointToLayer: createMarker,\n    };\n    this.GeoDataService.features.subscribe((collection) => {\n      this.features.clearLayers();\n      const markers = L.markerClusterGroup({\n        iconCreateFunction: (cluster) => {\n          return L.divIcon({\n            html: `<div><b>${cluster.getChildCount()}</b></div>`,\n            className: 'marker-cluster',\n          });\n        },\n      });\n      collection.features.forEach((d) => {\n        const feat = L.geoJSON(d, geojsonOptions);\n        feat.on('click', (ev) => {\n          this.featureClickHandler(ev);\n        });\n\n        if (d.geometry.type == 'Point') {\n          markers.addLayer(feat);\n        } else {\n          this.features.addLayer(feat);\n        }\n      });\n      this.features.addLayer(markers);\n      this.map.addLayer(this.features);\n      try {\n        this.map.fitBounds(this.features.getBounds());\n      } catch (e) {}\n    });\n  }\n\n  /**\n   *\n   * @param ev\n   */\n  featureClickHandler(ev: any): void {\n    const f = ev.layer.feature;\n    this.GeoDataService.activeFeature = f;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { SystemSummary } from 'ng-tapis';\nimport { ApiService } from 'ng-tapis';\nimport { Observable, ReplaySubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AgaveSystemsService {\n  private baseUrl = 'https://agave.designsafe-ci.org/systems/v2/';\n  private _systems: ReplaySubject<SystemSummary[]> = new ReplaySubject<\n    SystemSummary[]\n  >(1);\n  public readonly systems: Observable<SystemSummary[]> =\n    this._systems.asObservable();\n  private _projects: ReplaySubject<SystemSummary[]> = new ReplaySubject<\n    SystemSummary[]\n  >(1);\n  public readonly projects: Observable<SystemSummary[]> =\n    this._projects.asObservable();\n  private systemsList: SystemSummary[];\n\n  constructor(private tapis: ApiService) {}\n\n  // list() runs when the file browser is opened, retrieves all files in TACC for given user\n  list() {\n    this.tapis.systemsList({ type: 'STORAGE' }).subscribe(\n      (resp) => {\n        this._systems.next(resp.result);\n        this._projects.next(\n          resp.result.filter((sys) => sys.id.startsWith('project'))\n        );\n      },\n      (error) => {\n        this._systems.next(null);\n        this._projects.next(null);\n      }\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ApiService, FileOperationRequest } from 'ng-tapis';\nimport { RemoteFile } from 'ng-tapis';\nimport { Project } from '../models/models';\nimport { share } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { AuthService } from './authentication.service';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\nimport { SystemSummary } from 'ng-tapis';\n// import { verify } from 'ts-mockito';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TapisFilesService {\n  private baseUrl = 'https://agave.designsafe-ci.org/files/v2/';\n  public currentListing: Array<RemoteFile>;\n  private _listing: BehaviorSubject<RemoteFile[]> = new BehaviorSubject<\n    RemoteFile[]\n  >([]);\n  public readonly listing: Observable<RemoteFile[]> =\n    this._listing.asObservable();\n  public readonly IMPORTABLE_TYPES: Array<string> = [\n    'jpg',\n    'jpeg',\n    'las',\n    'laz',\n    'json',\n    'geojson',\n    'geotiff',\n    'tiff',\n    'gpx',\n  ];\n  public lastSystem: SystemSummary; // The last filesystem the user was browsing\n  public lastFile: RemoteFile; // The last directory the user was browsing\n  public noPreviousSelections: boolean;\n\n  constructor(\n    private tapis: ApiService,\n    private http: HttpClient,\n    private authService: AuthService,\n    private popup: MatSnackBar\n  ) {}\n\n  checkIfSelectable(file: RemoteFile): boolean {\n    if (file.type === 'dir') {\n      return false;\n    }\n    const ext = this.getFileExtension(file);\n    return this.IMPORTABLE_TYPES.includes(ext);\n  }\n\n  private getFileExtension(file: RemoteFile): string {\n    return file.name.split('.').pop().toLowerCase();\n  }\n\n  listFiles(system: string, path: string, offset: number, limit: number) {\n    return this.tapis.filesList({\n      systemId: system,\n      filePath: path,\n      offset,\n      limit,\n    });\n  }\n\n  public getParentPath(path: string): string {\n    const cleaned = path.replace('//', '/');\n    const arr = cleaned.split('/');\n    arr.pop();\n    const parentPath = arr.join('/');\n    return parentPath;\n  }\n\n  // saves project to a specified format in Design Safe's my Data section\n  public export(\n    systemID: string,\n    path: string,\n    fileName: string,\n    extension: string,\n    data: any\n  ) {\n    // Constructs an object that configures the success/error pop-up\n    const snackbarConfig: MatSnackBarConfig = {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    };\n    // construct the full URL that points to where the data will be stored\n    const fullURL = `https://agave.designsafe-ci.org/files/v2/media/system/${systemID}${path}`;\n\n    // construct a file to submit\n    let fileType = 'plain/text';\n    extension == '.csv'\n      ? (fileType = 'text/csv')\n      : (fileType = 'application/json');\n    const tmp = new Blob([data], { type: fileType });\n    const date = new Date();\n    const file = new File([tmp], fileName, { lastModified: date.valueOf() });\n\n    // Creates a form data object which holds the file to be uploaded\n    const form: FormData = new FormData();\n    form.append('fileToUpload', file);\n\n    // sends the packaged data to Designsafe. URL its being uploaded to handles authentication\n    this.http.post(fullURL, form).subscribe(\n      (resp) => {\n        console.log(resp);\n        const msg = 'Successfully saved file to ' + systemID + path;\n        this.popup.open(msg, '', snackbarConfig);\n      },\n      (error) => {\n        console.log(error);\n        const msg = 'Faled to save file to ' + systemID + path;\n        this.popup.open(msg, '', snackbarConfig);\n      }\n    );\n  }\n\n  // Saves the current file directory and file system to Local Storage\n  saveState() {\n    const sysStr = JSON.stringify(this.lastSystem);\n    const fileStr = JSON.stringify(this.lastFile);\n    window.localStorage.setItem('system', sysStr);\n    window.localStorage.setItem('file', fileStr);\n  }\n\n  // Attempts to retrieve the last used state\n  getState() {\n    try {\n      this.lastSystem = JSON.parse(window.localStorage.getItem('system'));\n      this.lastFile = JSON.parse(window.localStorage.getItem('file'));\n      this.noPreviousSelections = this.lastFile == null;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n","import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\nimport { AgaveSystemsService } from '../../services/agave-systems.service';\nimport {\n  AuthenticatedUser,\n  AuthService,\n} from '../../services/authentication.service';\nimport { RemoteFile } from 'ng-tapis/models/remote-file';\nimport { SystemSummary } from 'ng-tapis';\nimport { TapisFilesService } from '../../services/tapis-files.service';\nimport { BsModalRef } from 'ngx-foundation/modal/bs-modal-ref.service';\nimport { Subject, combineLatest } from 'rxjs';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { take } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-modal-file-browser',\n  templateUrl: './modal-file-browser.component.html',\n  styleUrls: ['./modal-file-browser.component.scss'],\n})\nexport class ModalFileBrowserComponent implements OnInit {\n  static limit = 200; // Limits maximum amount of files displayed\n\n  @Output() currentPath: EventEmitter<string> = new EventEmitter<string>();\n\n  public allowedExtensions: Array<string> =\n    this.tapisFilesService.IMPORTABLE_TYPES;\n\n  private currentUser: AuthenticatedUser;\n  public selectedPath;\n  public filesList: Array<RemoteFile> = [];\n  public inProgress = true;\n  public retrievalError = false;\n  public selectedFiles: Map<string, RemoteFile> = new Map();\n  public onClose: Subject<Array<RemoteFile>> = new Subject<Array<RemoteFile>>();\n  public projects: Array<SystemSummary>;\n  private selectedSystem: SystemSummary;\n  public myDataSystem: SystemSummary;\n  public communityDataSystem: SystemSummary;\n  public publishedDataSystem: SystemSummary;\n  public currentDirectory: RemoteFile;\n  private offset: number;\n  public firstFileIndex: number;\n\n  constructor(\n    private tapisFilesService: TapisFilesService,\n    // private modalRef: BsModalRef,\n    public dialogRef: MatDialogRef<ModalFileBrowserComponent>,\n    private dialog: MatDialog,\n    private authService: AuthService,\n    private agaveSystemsService: AgaveSystemsService\n  ) {}\n\n  ngOnInit() {\n    // retrive state data\n    // this.tapisFilesService.getState()\n\n    // This finds all the projects, and file systems found from a user\n    this.agaveSystemsService.list();\n\n    // TODO: change those hard coded systemIds to environment vars or some sort of config\n    // wait on the currentUser and systems to resolve\n    combineLatest([\n      this.authService.currentUser,\n      this.agaveSystemsService.systems,\n      this.agaveSystemsService.projects,\n    ])\n      // This little thing helped me fix the problem on calling ngOnInit several times\n      .pipe(take(1))\n      .subscribe(([user, systems, projects]) => {\n        // Uses systems to find the different directories that has the files in\n        this.myDataSystem = systems.find(\n          (sys) => sys.id === 'designsafe.storage.default'\n        );\n        this.communityDataSystem = systems.find(\n          (sys) => sys.id === 'designsafe.storage.community'\n        );\n        this.publishedDataSystem = systems.find(\n          (sys) => sys.id === 'designsafe.storage.published'\n        );\n\n        // This is where they choose which one they start with\n        this.selectedSystem = this.tapisFilesService.lastSystem;\n\n        if (this.selectedSystem == null) {\n          this.selectedSystem = this.myDataSystem;\n          this.tapisFilesService.lastSystem = this.myDataSystem;\n        }\n\n        // If the user has already navigated to a folder, restore those options\n        this.currentDirectory = this.tapisFilesService.lastFile;\n\n        this.projects = projects;\n        this.currentUser = user;\n        const init = <RemoteFile> {\n          system: this.myDataSystem.id,\n          type: 'dir',\n          path: this.currentUser.username,\n        };\n        // If the user hasn't yet opened the file browser, set the last file to an init file.\n        if (this.tapisFilesService.noPreviousSelections) {\n          this.selectedSystem = this.myDataSystem;\n          this.tapisFilesService.lastFile = init;\n          this.tapisFilesService.noPreviousSelections = false;\n        }\n        this.browse(this.tapisFilesService.lastFile);\n      });\n  }\n\n  selectSystem(system: SystemSummary): void {\n    let pth;\n    system.id === this.myDataSystem.id\n      ? (pth = this.currentUser.username)\n      : (pth = '/');\n    const init = <RemoteFile> {\n      system: system.id,\n      type: 'dir',\n      path: pth,\n    };\n    this.selectedSystem = system;\n    this.tapisFilesService.lastSystem = this.selectedSystem;\n    this.browse(init);\n  }\n\n  browse(file: RemoteFile) {\n    this.selectedPath = file.path;\n    this.selectedSystem = this.selectedSystem; // Self-assignment keeps the system name from disappearing while browsing subfolders\n    if (file.type !== 'dir') {\n      return;\n    }\n    this.currentDirectory = file;\n    this.tapisFilesService.lastFile = file; // Updates the last directory visted\n    // this.selectedFiles.clear();\n    this.filesList = [];\n    this.offset = 0;\n    this.inProgress = false;\n    this.getFiles();\n  }\n\n  toRoot() {\n    let pth;\n    this.selectedSystem.id === this.myDataSystem.id\n      ? (pth = this.currentUser.username)\n      : (pth = '/');\n    const init = <RemoteFile> {\n      system: this.selectedSystem.id,\n      type: 'dir',\n      path: pth,\n    };\n    this.browse(init);\n  }\n\n  getFiles() {\n    const hasMoreFiles = this.offset % ModalFileBrowserComponent.limit === 0;\n\n    if (this.inProgress || !hasMoreFiles) {\n      return;\n    }\n\n    this.inProgress = true;\n    this.tapisFilesService\n      .listFiles(\n        this.currentDirectory.system,\n        this.currentDirectory.path,\n        this.offset,\n        ModalFileBrowserComponent.limit\n      )\n      .subscribe(\n        (listing) => {\n          const files = listing.result;\n\n          if (files.length && files[0].name === '.') {\n            // This removes the first item in the listing, which in Agave\n            // is always a reference to self '.' and replaces with '..'\n            const current = files.shift();\n            this.currentPath.next(current.path);\n            current.path = this.tapisFilesService.getParentPath(current.path);\n            current.name = '..';\n            files.unshift(current);\n          }\n          const newFile = [];\n          const allowedExt = this.allowedExtensions;\n          files.forEach(function(value, index) {\n            if (\n              (value.type == 'file' &&\n                allowedExt.includes(\n                  value.path.split('.').pop().toLowerCase()\n                )) ||\n              value.type == 'dir'\n            ) {\n              newFile.push(value);\n            }\n          });\n\n          this.inProgress = false;\n          this.retrievalError = false;\n          this.filesList = this.filesList.concat(newFile);\n          this.offset = this.offset + files.length;\n        },\n        (error) => {\n          // If retrieving the files from DesignSafe bugs out due to the site being down, this is where it ends up\n          this.retrievalError = true;\n          this.inProgress = false;\n        }\n      );\n  }\n\n  // TODO: Ian: Error message on incorrect file type?\n  select(event: any, file: RemoteFile, index: number) {\n    if (event.shiftKey) {\n      this.selectFilesShiftClick(index, file);\n    } else {\n      if (this.tapisFilesService.checkIfSelectable(file)) {\n        this.addSelectedFile(file, index);\n      } else {\n      }\n    }\n  }\n\n  selectFilesShiftClick(index: number, file: RemoteFile) {\n    // this.selectedFiles.clear();\n    this.selectShift(index, file);\n  }\n\n  addSelectedFile(file: RemoteFile, index: number) {\n    if (index != -1) {\n      this.firstFileIndex = index;\n    }\n\n    if (this.tapisFilesService.checkIfSelectable(file)) {\n      if (this.selectedFiles.has(file.path)) {\n        this.selectedFiles.delete(file.path);\n      } else {\n        this.selectedFiles.set(file.path, file);\n      }\n    }\n  }\n\n  chooseFiles() {\n    this.tapisFilesService.saveState();\n    this.tapisFilesService.lastSystem = this.selectedSystem;\n    const tmp = Array.from(this.selectedFiles.values());\n    this.dialogRef.close(tmp);\n  }\n\n  cancel() {\n    this.tapisFilesService.saveState();\n    this.tapisFilesService.lastSystem = this.selectedSystem;\n    this.dialogRef.close();\n  }\n\n  selectAll() {\n    const indexTmp = -1;\n    let count = 0;\n    for (const file of this.filesList) {\n      if (!this.selectedFiles.has(file.path)) {\n        this.select('', file, indexTmp);\n        count += 1;\n      }\n    }\n    if (count == 1) {\n      this.selectedFiles.clear();\n    }\n  }\n\n  selectShift(index: number, file: RemoteFile) {\n    if (this.firstFileIndex != undefined && this.firstFileIndex != index) {\n      this.addRangeFiles(this.firstFileIndex, index, true);\n    } else {\n      this.addSelectedFile(file, index);\n    }\n  }\n\n  addRangeFiles(firstFileIndex: number, lastFileIndex: number, again: boolean) {\n    const maxIndex = Math.max(firstFileIndex, lastFileIndex);\n    const minIndex = Math.min(firstFileIndex, lastFileIndex);\n\n    for (let i = minIndex; i < maxIndex + 1; ++i) {\n      this.addSelectedFile(this.filesList[i], -1);\n    }\n\n    if (again) {\n      this.addSelectedFile(this.filesList[firstFileIndex], -1);\n    }\n  }\n}\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { AgaveSystemsService } from '../../services/agave-systems.service';\nimport {\n  AuthenticatedUser,\n  AuthService,\n} from '../../services/authentication.service';\nimport { RemoteFile } from 'ng-tapis/models/remote-file';\nimport { SystemSummary } from 'ng-tapis';\nimport { TapisFilesService } from '../../services/tapis-files.service';\nimport { BsModalRef } from 'ngx-foundation/modal/bs-modal-ref.service';\nimport { Subject, combineLatest } from 'rxjs';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { take } from 'rxjs/operators';\nimport { FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-modal-download-selector',\n  templateUrl: './modal-download-selector.component.html',\n  styleUrls: ['./modal-download-selector.component.scss'],\n})\nexport class ModalDownloadSelectorComponent implements OnInit {\n  static limit = 200; // Limits maximum amount of files displayed\n\n  @Output() currentPath: EventEmitter<string> = new EventEmitter<string>();\n\n  private downloadSelectForm: FormGroup;\n  private currentUser: AuthenticatedUser;\n  public filesList: Array<RemoteFile> = [];\n  public inProgress = true;\n  public selectedFiles: Map<string, RemoteFile> = new Map();\n  public onClose: Subject<Array<RemoteFile>> = new Subject<Array<RemoteFile>>();\n  public projects: Array<SystemSummary>;\n  private selectedSystem: SystemSummary;\n  public myDataSystem: SystemSummary;\n  public communityDataSystem: SystemSummary;\n  public publishedDataSystem: SystemSummary;\n  public currentDirectory: RemoteFile;\n  public passbackData: Array<string> = ['', '', '', ''];\n  public fileName = 'Custom File Name';\n  public fileExtension = '.csv';\n  private offset: number;\n\n  constructor(\n    private tapisFilesService: TapisFilesService,\n    // private modalRef: BsModalRef,\n    public dialogRef: MatDialogRef<ModalDownloadSelectorComponent>,\n    private dialog: MatDialog,\n    private authService: AuthService,\n    private agaveSystemsService: AgaveSystemsService\n  ) {}\n\n  ngOnInit() {\n    this.downloadSelectForm = new FormGroup({\n      Name: new FormControl(this.fileName),\n      Extension: new FormControl(this.fileExtension),\n    });\n\n    // This finds all the projects, and file systems found from a user\n    this.agaveSystemsService.list();\n\n    // TODO: change those hard coded systemIds to environment vars or some sort of config\n    // wait on the currentUser and systems to resolve\n    combineLatest([\n      this.authService.currentUser,\n      this.agaveSystemsService.systems,\n      this.agaveSystemsService.projects,\n    ])\n      // This little thing helped me fix the problem on calling ngOnInit several times\n      .pipe(take(1))\n      .subscribe(([user, systems, projects]) => {\n        // Uses systems to find the different directories that has the files in\n        this.myDataSystem = systems.find(\n          (sys) => sys.id === 'designsafe.storage.default'\n        );\n        this.communityDataSystem = systems.find(\n          (sys) => sys.id === 'designsafe.storage.community'\n        );\n        this.publishedDataSystem = systems.find(\n          (sys) => sys.id === 'designsafe.storage.published'\n        );\n\n        // This is where they choose which one they start with\n        this.selectedSystem = this.myDataSystem;\n\n        this.projects = projects;\n        this.currentUser = user;\n        const init = <RemoteFile> {\n          system: this.myDataSystem.id,\n          type: 'dir',\n          path: this.currentUser.username,\n        };\n        this.browse(init);\n      });\n  }\n\n  selectSystem(system: SystemSummary): void {\n    let pth;\n    system.id === this.myDataSystem.id\n      ? (pth = this.currentUser.username)\n      : (pth = '/');\n    const init = <RemoteFile> {\n      system: system.id,\n      type: 'dir',\n      path: pth,\n    };\n    this.browse(init);\n  }\n\n  browse(file: RemoteFile) {\n    if (file.type !== 'dir') {\n      return;\n    }\n    this.currentDirectory = file;\n    // this.selectedFiles.clear();\n    this.filesList = [];\n    this.offset = 0;\n    this.inProgress = false;\n    this.getFiles();\n  }\n\n  getFiles() {\n    const hasMoreFiles =\n      this.offset % ModalDownloadSelectorComponent.limit === 0;\n\n    if (this.inProgress || !hasMoreFiles) {\n      return;\n    }\n\n    this.inProgress = true;\n\n    this.tapisFilesService\n      .listFiles(\n        this.currentDirectory.system,\n        this.currentDirectory.path,\n        this.offset,\n        ModalDownloadSelectorComponent.limit\n      )\n      .subscribe(\n        (listing) => {\n          const files = listing.result;\n\n          if (files.length && files[0].name === '.') {\n            // This removes the first item in the listing, which in Agave\n            // is always a reference to self '.' and replaces with '..'\n            const current = files.shift();\n            this.currentPath.next(current.path);\n            this.passbackData[1] = current.path;\n            current.path = this.tapisFilesService.getParentPath(current.path);\n            current.name = '..';\n            files.unshift(current);\n          }\n          const newFile = [];\n          files.forEach(function(value, index) {\n            if (value.type == 'file' || value.type == 'dir') {\n              newFile.push(value);\n            }\n          });\n\n          this.inProgress = false;\n          this.filesList = this.filesList.concat(newFile);\n          this.offset = this.offset + files.length;\n        },\n        (error) => {\n          this.inProgress = false;\n        }\n      );\n  }\n\n  chooseFiles() {\n    this.passbackData[0] = this.selectedSystem.id;\n\n    // checks to see if the input was left unchanged\n    if (this.downloadSelectForm.dirty) {\n      // if changed, enter name as specified\n      this.passbackData[2] = this.downloadSelectForm.get('Name').value;\n    } else {\n      // if unchanged, enter filename as empty string\n      this.passbackData[2] = '';\n    }\n    this.passbackData[3] = this.fileExtension;\n    this.dialogRef.close(this.passbackData);\n  }\n\n  cancel() {\n    this.dialogRef.close();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalService, BsModalRef } from 'ngx-foundation';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ProjectsService } from '../../services/projects.service';\nimport { Project, ProjectRequest } from '../../models/models';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-modal-create-project',\n  templateUrl: './modal-create-project.component.html',\n  styleUrls: ['./modal-create-project.component.scss'],\n})\nexport class ModalCreateProjectComponent implements OnInit {\n  public readonly onClose: Subject<any> = new Subject<any>();\n\n  projCreateForm: FormGroup;\n\n  constructor(\n    public dialogRef: MatDialogRef<ModalCreateProjectComponent>,\n    private dialog: MatDialog,\n    private projectsService: ProjectsService\n  ) {}\n\n  ngOnInit() {\n    this.projCreateForm = new FormGroup({\n      name: new FormControl(''),\n      description: new FormControl(''),\n    });\n  }\n\n  close(project: Project) {\n    this.dialogRef.close();\n  }\n\n  submit() {\n    // Watch content we can set to false, for our project, we don't need this yet.\n    // Watch content refers to syncing files created in a folder with a hazmapper map\n    // Set observable to true, Hazmapper doesn't let users define that value for some reason.\n    const proj = new Project();\n    const projRqst = new ProjectRequest();\n\n    // Retrieve project name and description\n    proj.description = this.projCreateForm.get('description').value;\n    proj.name = this.projCreateForm.get('name').value;\n\n    projRqst.project = proj;\n\n    this.projectsService.create(projRqst);\n    this.dialogRef.close();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ProjectsService } from '../../services/projects.service';\nimport { Project } from '../../models/models';\nimport { THIS_EXPR } from '@angular/compiler/src/output/output_ast';\n\n@Component({\n  selector: 'app-modal-share-project',\n  templateUrl: './modal-share-project.component.html',\n  styleUrls: ['./modal-share-project.component.scss'],\n})\nexport class ModalShareProjectComponent implements OnInit {\n  projShareForm: FormGroup;\n  activeProj: Project;\n  projectUsers;\n  onlyOne: boolean; // if only one user is present == TRUE\n\n  constructor(\n    public dialogRef: MatDialogRef<ModalShareProjectComponent>,\n    private dialog: MatDialog,\n    private projectsService: ProjectsService\n  ) {}\n\n  ngOnInit() {\n    // creates new form control group to access input value\n    this.projShareForm = new FormGroup({\n      name: new FormControl(''),\n    });\n\n    // retrieves active project, needed to add users to the project\n    this.projectsService.activeProject.subscribe((proj) => {\n      this.activeProj = proj;\n    });\n\n    // retrieves all users currently registered to the active project\n    this.projectsService.getProjectUsers(this.activeProj).subscribe((next) => {\n      this.projectUsers = next;\n      this.onlyOne = this.projectUsers.length == 1;\n    });\n  }\n\n  // closes modal without submitting anything\n  close() {\n    this.dialogRef.close();\n  }\n\n  // shares project with specified user\n  submit() {\n    this.projectsService.addUserToProject(\n      this.activeProj,\n      this.projShareForm.get('name').value\n    );\n    this.dialogRef.close();\n  }\n\n  // deletes user from project\n  delete(user) {\n    this.projectsService.deleteUserFromProject(this.activeProj, user);\n    this.dialogRef.close();\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { BsModalService, BsModalRef } from 'ngx-foundation';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ProjectsService } from '../../services/projects.service';\nimport { Project, ProjectRequest } from '../../models/models';\nimport {\n  MAT_DIALOG_DATA,\n  MatDialog,\n  MatDialogRef,\n} from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-modal-current-project',\n  templateUrl: './modal-current-project.component.html',\n  styleUrls: ['./modal-current-project.component.scss'],\n})\nexport class ModalCurrentProjectComponent implements OnInit {\n  projCreateForm: FormGroup;\n  activeProject: Project;\n\n  constructor(\n    public dialogRef: MatDialogRef<ModalCurrentProjectComponent>,\n    private dialog: MatDialog,\n    private projectsService: ProjectsService,\n    @Inject(MAT_DIALOG_DATA) public projData: any\n  ) {}\n\n  ngOnInit() {\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n\n    this.projCreateForm = new FormGroup({\n      name: new FormControl(this.activeProject.name),\n      description: new FormControl(this.activeProject.description),\n    });\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n\n  delete() {\n    if (\n      confirm(\n        'Are you sure you want to delete this project? This will also delete it from HazMapper, and anyone this project was shared with.'\n      )\n    ) {\n      this.projectsService.delete(this.activeProject);\n    }\n    this.dialogRef.close();\n  }\n\n  update() {\n    // The project is being properly assembled, but the problem is that the returned project isn't updating.\n    // Do I need more data in my projects?\n    /*\n      export interface Project {\n      description: string;\n      id?: number;\n      name: string;\n      ds_id?: string;\n      title?: string;\n      uuid?: string;\n      public?: boolean;\n      system_file?: string;\n      system_id?: string;\n      system_path?: string;\n      deleting?: boolean;\n      deletingFailed?: boolean;\n    }\n     */\n    const p = new Project();\n    const projRqst = new ProjectRequest();\n\n    p.description = this.projCreateForm.get('description').value;\n    p.name = this.projCreateForm.get('name').value;\n    p.id = this.activeProject.id;\n    p.uuid = this.activeProject.uuid;\n\n    projRqst.project = p;\n\n    this.projectsService.update(projRqst);\n    this.dialogRef.close();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Feature, FeatureCollection } from '../models/models';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { GeoDataService } from './geo-data.service';\nimport { feature } from '@turf/turf';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureService {\n  private featureCollection: FeatureCollection;\n  private _features: BehaviorSubject<FeatureCollection>;\n  public features$: Observable<FeatureCollection>;\n\n  constructor(private geoDataService: GeoDataService) {\n    this._features = new BehaviorSubject<FeatureCollection>({\n      type: 'FeatureCollection',\n      features: [],\n    });\n    this.features$ = this._features.asObservable();\n\n    this.geoDataService.features.subscribe((fc: FeatureCollection) => {\n      this._features.next(fc);\n      this.featureCollection = fc;\n    });\n  }\n\n  // Takes the feature to be deleted, and filters it out of the feature list\n  deleteFeature(feat: Feature): void {\n    this.featureCollection.features = this.featureCollection.features.filter(\n      (featListfeat) => featListfeat.id != feat.id\n    );\n    this._features.next(this.featureCollection); // Update the observable\n    this.geoDataService.deleteFeature(feat);\n  }\n\n  // Takes a list of features, and deletes them from the observable in a more efficient manner\n  bulkFeatureDelete(delFeats: Array<Feature>): void {\n    delFeats.forEach((feat) => {\n      // Filter out every feature in delFeats from the master list\n      this.featureCollection.features = this.featureCollection.features.filter(\n        (featListFeature) => featListFeature.id != feat.id\n      );\n      this.geoDataService.deleteFeature(feat);\n    });\n    this._features.next(this.featureCollection); // Update the observable with the filtered list\n  }\n\n  saveFeature(feat: Feature): void {\n    this.geoDataService.updateFeatureProperty(\n      feat.project_id,\n      Number(feat.id),\n      feat.properties\n    );\n  }\n\n  // Takes a feature, and optionally an updated property section\n  // If featprop is null, it assumes the passed in feature was already updated with the new properties\n  updateFeatureProperties(feature: Feature, featProp = null): void {\n    // If featprop has a value, update the feature's properties to the new section\n    if (featProp != null) {\n      feature.properties = featProp;\n    }\n    // Update and save the list\n    this.featureCollection.features.forEach((feat) => {\n      if (feat.id == feature.id) {\n        feat = feature;\n      }\n    });\n    this.saveFeature(feature);\n  }\n}\n","import {\n  Component,\n  OnInit,\n  Output,\n  TemplateRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { ProjectsService } from '../../services/projects.service';\nimport { Feature, Project, TagGroup } from '../../models/models';\nimport { FeatureCollection } from 'geojson';\nimport { GeoDataService } from '../../services/geo-data.service';\nimport { LatLng } from 'leaflet';\nimport { skip, startWith } from 'rxjs/operators';\nimport { BsModalRef, BsModalService } from 'ngx-foundation';\nimport { ModalFileBrowserComponent } from '../modal-file-browser/modal-file-browser.component';\nimport { ModalDownloadSelectorComponent } from '../modal-download-selector/modal-download-selector.component';\nimport { ModalCreateProjectComponent } from '../modal-create-project/modal-create-project.component';\nimport { ModalShareProjectComponent } from '../modal-share-project/modal-share-project.component';\nimport { interval, Observable, Subscription, combineLatest } from 'rxjs';\nimport { RemoteFile } from 'ng-tapis';\nimport { GroupsService } from '../../services/groups.service';\nimport { FormsService } from '../../services/forms.service';\nimport {\n  AuthenticatedUser,\n  AuthService,\n} from '../../services/authentication.service';\nimport { Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ModalCurrentProjectComponent } from '../modal-current-project/modal-current-project.component';\nimport { AppEnvironment, environment } from '../../../environments/environment';\nimport { feature } from '@turf/helpers';\nimport { TapisFilesService } from '../../services/tapis-files.service';\nimport { element } from 'protractor';\nimport { consoleTestResultHandler } from 'tslint/lib/test';\nimport { ScrollService } from 'src/app/services/scroll.service';\nimport { NotificationsService } from 'src/app/services/notifications.service';\nimport { FeatureService } from 'src/app/services/feature.service';\n\n@Component({\n  selector: 'app-control-bar',\n  templateUrl: './control-bar.component.html',\n  styleUrls: ['./control-bar.component.scss'],\n})\nexport class ControlBarComponent implements OnInit {\n  public activeFeature: Feature;\n  features: FeatureCollection;\n  featureList: Array<any> = [];\n\n  public currentUser: AuthenticatedUser;\n  public projects: Project[];\n  public selectedProject: Project;\n  public mapMouseLocation: LatLng = new LatLng(0, 0);\n  imageName: string;\n  groupsExist: boolean;\n  groupName: string;\n  showTagger = false;\n  selectedImages: Array<any>;\n  modalRef: BsModalRef;\n  activeGroup: TagGroup;\n  groups: Map<string, TagGroup>;\n  groupsFeatures: Map<string, any>;\n  activeGroupFeatures: any;\n  activeGroupFeaturesRotate: any;\n  activeGroupFeature: any;\n  invalidNameError = false;\n  existingNameError = false;\n  hazmapperLink: string;\n  foundFilePaths = [];\n  groupToAdd: TagGroup;\n  public activeProject: Project;\n\n  constructor(\n    private projectsService: ProjectsService,\n    private geoDataService: GeoDataService,\n    private bsModalService: BsModalService,\n    private groupsService: GroupsService,\n    private formsService: FormsService,\n    private authService: AuthService,\n    private readonly cdr: ChangeDetectorRef,\n    private filesService: TapisFilesService,\n    private router: Router,\n    private dialog: MatDialog,\n    private scrollService: ScrollService,\n    private notificationsService: NotificationsService,\n    private featureService: FeatureService\n  ) {}\n\n  ngOnInit() {\n    this.filesService.getState();\n\n    this.groupsService.groupToAdd.subscribe((next) => {\n      console.log(next)\n      this.groupToAdd = next;\n    });\n\n    this.featureService.features$.subscribe((fc: FeatureCollection) => {\n      this.features = fc;\n\n      if (this.features != undefined) {\n        this.featureList = fc.features.filter(\n          (feature: Feature) =>\n            feature.assets.length &&\n            feature.initialAsset() &&\n            feature.featureType() === 'image'\n        );\n      }\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n      this.groupsExist = next && next.size ? true : false;\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n\n    combineLatest(\n      this.geoDataService.activeGroup,\n      this.geoDataService.groupsFeatures\n    ).subscribe(([grp, grpFts]) => {\n      this.activeGroup = grp;\n      this.groupsFeatures = grpFts;\n      if (grp && grpFts) {\n        this.activeGroupFeatures = grpFts.get(grp.name);\n        if (this.activeGroupFeatures) {\n          this.activeGroupFeaturesRotate = [...this.activeGroupFeatures];\n        }\n      }\n    });\n\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n    });\n\n    this.geoDataService.activeFeature.subscribe((next) => {\n      this.activeFeature = next;\n    });\n\n    this.notificationsService.notifications.subscribe((next) => {\n      const hasSuccessNotification = next.some(\n        (note) => note.status === 'success'\n      );\n      const hasFailureNotification = next.some(\n        (note) => note.status === 'error'\n      );\n      if (hasSuccessNotification) {\n        this.geoDataService.getFeatures(this.selectedProject.id);\n      }\n      if (hasFailureNotification) {\n        next.forEach((item) => {\n          // Compiles a list of all necessary files to import via the alt method\n          // The substring from 0 to 16 contains the phrase \"Error importing\", everything after this is the file path\n          if (\n            item.message.substring(0, 16) == 'Error importing ' &&\n            !this.foundFilePaths.some(\n              (filePath) => filePath === item.message.substring(16)\n            )\n          ) {\n            const path = item.message.substring(16);\n            this.geoDataService.uploadNewFeature(\n              this.selectedProject.id,\n              this.createBlankFeature(),\n              path\n            );\n            this.foundFilePaths.push(path);\n          }\n        });\n        this.geoDataService.getFeatures(this.selectedProject.id);\n      }\n    });\n\n    this.authService.currentUser.subscribe((next) => (this.currentUser = next));\n\n    this.projectsService.getProjects();\n    this.projectsService.projects.subscribe((projects) => {\n      this.projects = projects;\n\n      if (this.projects.length) {\n        let lastProj;\n        // try {\n        //   //restores view to the last visited project from local storage\n        //   lastProj = JSON.parse(window.localStorage.getItem('lastProj'));\n        //   // console.log(lastProj);\n        // } catch (error) {\n        //   lastProj = this.projectsService.setActiveProject(this.projects[0]);\n        // }\n\n        lastProj = this.projectsService.setActiveProject(this.projects[0]);\n\n        // If lastProj is null, then there is no project saved, or can be found, default to the first project in the list\n        if (lastProj == 'none' || lastProj == null) {\n          lastProj = this.projects[0];\n        }\n\n        this.projectsService.setActiveProject(lastProj);\n      }\n\n      this.groupsService.selectedImages.subscribe((next) => {\n        this.selectedImages = next;\n      });\n\n      this.groupsService.showTagger.subscribe((next) => {\n        this.showTagger = next;\n      });\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.selectedProject = next;\n      this.getDataForProject(this.selectedProject);\n      // retrieves uuid for project, formats result into a link to that Hazmapper map\n      this.hazmapperLink =\n        'https://hazmapper.tacc.utexas.edu/hazmapper/project/' + next.uuid;\n    });\n\n    this.geoDataService.mapMouseLocation.pipe(skip(1)).subscribe((next) => {\n      this.mapMouseLocation = next;\n    });\n  }\n\n  ngAfterViewChecked() {\n    this.cdr.detectChanges();\n  }\n\n\n  clearAll() {\n    this.groupsService.unselectAllImages();\n  }\n\n  compareGroup(a, b) {\n    return a.name === b.name;\n  }\n\n  changeGroupToAdd(ev: any) {\n    this.groupsService.setGroupToAdd(ev.value);\n  }\n\n  selectProject(p: Project): void {\n    this.projectsService.setActiveProject(p);\n    this.getDataForProject(p);\n  }\n\n  getDataForProject(p: Project): void {\n    this.geoDataService.getFeatures(p.id);\n    this.geoDataService.getOverlays(p.id);\n    this.geoDataService.getPointClouds(p.id);\n  }\n\n  openFilePicker() {\n    // Refreshes the list of found paths used in importing images without Geo tagging\n    this.foundFilePaths = [];\n    const modal = this.dialog.open(ModalFileBrowserComponent);\n    modal.afterClosed().subscribe((files: Array<RemoteFile>) => {\n      if (files != null) {\n        this.geoDataService.importFileFromTapis(this.selectedProject.id, files);\n      }\n    });\n  }\n\n  // Creates a feature with a long/lat value of 0,0 and no associated image. Used in alternate image inport\n  // I think if we want a placeholder image, we can add it here.\n  createBlankFeature() {\n    const blankFeature: Feature = {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [0, 0],\n      },\n      properties: {},\n    };\n    return blankFeature;\n  }\n\n  openDownloadSelector(fileName: string) {\n    const modal = this.dialog.open(ModalDownloadSelectorComponent);\n    let path: Array<string>;\n    modal.afterClosed().subscribe((passbackData: Array<string>) => {\n      path = passbackData;\n      this.saveFile(path[3] == '.json', true, path[0], path[1], path[2]);\n    });\n  }\n\n  openCreateProjectModal() {\n    this.dialog.open(ModalCreateProjectComponent, {\n      height: '400px',\n      width: '600px',\n    });\n  }\n\n  openShareProjectModal() {\n    this.dialog.open(ModalShareProjectComponent, {\n      height: '400px',\n      width: '600px',\n    });\n  }\n\n  openProjectModal(project) {\n    const modal = this.dialog.open(ModalCurrentProjectComponent, {\n      height: '400px',\n      width: '600px',\n      data: {\n        id: project.id,\n        name: project.name,\n        description: project.description,\n        uuid: project.uuid,\n      },\n    });\n\n    modal.afterClosed().subscribe((passbackData: Array<string>) => {\n      this.projectsService.setActiveProject(this.projects[0]);\n    });\n  }\n\n  addGroup(name: string) {\n    this.groupName = name;\n    if (!name || 0 === name.length) {\n      this.invalidNameError = true;\n      this.existingNameError = false;\n    } else if (this.groups.get(name)) {\n      this.invalidNameError = false;\n      this.existingNameError = true;\n    } else {\n      this.invalidNameError = false;\n      this.existingNameError = false;\n      const newGroup = this.geoDataService.createNewGroup(\n        this.selectedProject.id,\n        this.selectedImages,\n        name\n      );\n      this.dialog.closeAll();\n      this.groupsService.unselectAllImages();\n    }\n  }\n\n\n  addToGroup(group: TagGroup) {\n    this.geoDataService.createGroupFeatures(\n      this.activeProject.id,\n      this.selectedImages,\n      this.groups.get(group.name)\n    );\n    this.groupsService.unselectAllImages();\n    this.scrollService.setScrollRestored(true);\n  }\n  openAddGroupModal(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  toggleTagger() {\n    if (!this.showTagger) {\n      this.scrollService.setScrollRestored(true);\n\n      const [initialGroupName] = this.groupsFeatures.keys();\n      const activeGroupFeatures = this.groupsFeatures.get(initialGroupName);\n      const activeGroup = this.groups.get(initialGroupName);\n      this.geoDataService.setActiveGroup(activeGroup);\n\n      this.groupsService.setShowTagGenerator(false);\n      this.groupsService.unselectAllImages();\n    } else {\n      this.scrollService.setScrollPosition();\n    }\n\n    this.groupsService.toggleTagger();\n  }\n\n  getAssetDisplay() {\n    return this.activeGroupFeature.featureShortPath();\n  }\n\n  otherPath(dir: boolean) {\n    if (dir) {\n      this.activeGroupFeaturesRotate.push(\n        this.activeGroupFeaturesRotate.shift()\n      );\n    } else {\n      this.activeGroupFeaturesRotate.unshift(\n        this.activeGroupFeaturesRotate.pop()\n      );\n    }\n    this.activeGroupFeature = this.activeGroupFeaturesRotate[0];\n    this.geoDataService.setActiveGroupFeature(this.activeGroupFeature);\n  }\n\n  // saves project as a CSV file by first organizing a JSON or a CSV and converting it. Saves to either MyData or local\n  // I apologize in advance for this mess of a function -Ben\n  // This really needs to be split into something like 3 separate functions\n  saveFile(\n    isJSON: Boolean,\n    forExport: Boolean = false,\n    systemID = '',\n    path = '',\n    fileName\n  ) {\n    let CSVHolder = 'FeatureID,longitude,latitude,src';\n    let JSONHolder: String = '';\n    let projID = '';\n    let tagsPresent = true;\n    let headerComplete = false; // If true, then the full csv header info has been compiled\n    let headerTagOptions = 0; // Controls how many tagOption columns are in the final CSV\n\n    this.featureList.forEach((element) => {\n      // Retrieves project ID for building a filename\n      projID = element.project_id;\n\n      // retrieves longitude and latitude values as an array\n      const coordinates = element.geometry.coordinates;\n\n      // creates image source URL from environment and cleans up URL to a usable link\n      let featureSource =\n        environment.apiUrl + '/assets/' + element.assets[0].path;\n      featureSource = featureSource.replace(/([^:])(\\/{2,})/g, '$1/');\n\n      // Grabs group data\n      // Group data can be accessed from the feature, through the properties element\n      // If the image doesn't have a group, a placeholder is given\n      // NOTE: future group properties can be accessed in the same way\n      let group, styles, tag;\n      try {\n        try {\n          group = element.properties.group;\n        } catch {\n          group = [\n            {\n              color: '#000000',\n              name: 'N/A',\n              icon: 'fa-house-damage',\n            },\n          ];\n        }\n\n        try {\n          styles = element.properties.style;\n        } catch {\n          styles = [];\n        }\n\n        try {\n          tag = element.properties.tag;\n        } catch {\n          tag = [];\n        }\n\n        // If groups are present on the data, add header data\n        if (group.length > 0 && !headerComplete) {\n          CSVHolder += ',groupName,groupColor,groupIcon';\n        }\n\n        // Check if the tag var has any data, if so, add new lines to the header\n        if (tag != undefined && tagsPresent && !headerComplete) {\n          // Add a few more lines to the holder to accomodate tags\n          CSVHolder += ',Icon,Color,tagType,tagSelection';\n          tag.forEach((tag) => {\n            let tempTagOptionNum = 0;\n            tag.options.forEach((option) => {\n              tempTagOptionNum++;\n              if (tempTagOptionNum > headerTagOptions) {\n                CSVHolder += ',tagOption';\n                headerTagOptions = tempTagOptionNum;\n              }\n            });\n          });\n          if (!headerComplete) {\n            CSVHolder += '\\r\\n';\n            tagsPresent = false;\n            headerComplete = true;\n          }\n        } else if (!headerComplete) {\n          // If not, indent the last line.\n          CSVHolder += '\\r\\n';\n          headerComplete = true;\n        }\n      } catch (error) {}\n\n      if (isJSON) {\n        // Compile the data it into a JSON\n        JSONHolder +=\n          this.compileJSON(\n            coordinates,\n            element.id,\n            featureSource,\n            group,\n            tag,\n            styles\n          ) + ', \\n';\n      } else {\n        // Compiles the attributes into a CSV format\n        // If there is no groups for the feature, output without group info\n        if (group == undefined) {\n          // Indents CSV header.\n          CSVHolder += '\\r\\n';\n          // Compiles data to a line of a CSV, and adds it to a growing full CSV file\n          // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n          const tempCSV =\n            element.id +\n            ',' +\n            coordinates[0] +\n            ',' +\n            coordinates[1] +\n            ',' +\n            featureSource +\n            '\\r\\n';\n          CSVHolder += tempCSV;\n        } else {\n          group.forEach((group) => {\n            // If tags exist, try to add each tag to the CSV\n            if (tag != undefined) {\n              try {\n                tag.forEach((tag) => {\n                  // If the tag is in the group, compile a row\n                  // TODO: If a group doesn't have a tag, it doesn't get printed at all\n                  if (true) {\n                    // (tag.groupName === group.name) {\n                    // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n                    let tempCSV =\n                      element.id +\n                      ',' +\n                      coordinates[0] +\n                      ',' +\n                      coordinates[1] +\n                      ',' +\n                      featureSource +\n                      ',' +\n                      // groupName\t\t\tgroupColor\t\t\tgroupIcon\t\t   Icon\t\t\t\t\t Color\n                      group.name +\n                      ',' +\n                      group.color +\n                      ',' +\n                      group.icon +\n                      ',' +\n                      styles.faIcon +\n                      ',' +\n                      styles.color +\n                      ',' +\n                      // tagType\t\t\ttagOption(This is repeated a lot)\n                      tag.type +\n                      ',' +\n                      tag.extra[0].option;\n                    tag.options.forEach((option) => {\n                      // Save each option in the tag to the CSV\n                      // Adds just the label to the CSV, we can reconstruct the key from that.\n                      tempCSV += ',' + option.label;\n                    });\n                    tempCSV += '\\r\\n';\n                    // And adds it to a growing full CSV file\n                    CSVHolder += tempCSV;\n                  }\n                });\n              } catch {\n                try {\n                  // If the above fails, attempt to construct a line with group data\n                  // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n                  const tempCSV =\n                    element.id +\n                    ',' +\n                    coordinates[0] +\n                    ',' +\n                    coordinates[1] +\n                    ',' +\n                    featureSource +\n                    ',' +\n                    // groupName\t\t\tgroupColor\t\t\tgroupIcon\n                    group.name +\n                    ',' +\n                    group.color +\n                    ',' +\n                    group.icon +\n                    '\\r\\n';\n                  CSVHolder += tempCSV;\n                } catch (error) {\n                  // If all else fails, It writes no data on an error, so output the groupless data\n                  // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n                  const tempCSV =\n                    element.id +\n                    ',' +\n                    coordinates[0] +\n                    ',' +\n                    coordinates[1] +\n                    ',' +\n                    featureSource +\n                    '\\r\\n';\n                  CSVHolder += tempCSV;\n                }\n              }\n            } else {\n              // Compiles data to a line of a CSV\n              // \t\t\t  featureID\t\t\t Longitude\t\t\t\tLatitude\t\t\t   src\n              const tempCSV =\n                element.id +\n                ',' +\n                coordinates[0] +\n                ',' +\n                coordinates[1] +\n                ',' +\n                featureSource +\n                ',' +\n                // groupName\t\t\tgroupColor\t\t\tgroupIcon\n                group.name +\n                ',' +\n                group.color +\n                ',' +\n                group.icon +\n                '\\r\\n';\n              // And adds it to a growing full CSV file\n              CSVHolder += tempCSV;\n            }\n          });\n        }\n      }\n    });\n    let content;\n    let extension;\n    // determine whether the file is wanted as a JSON or a CSV\n    if (isJSON) {\n      content = JSONHolder;\n      extension = '.json';\n    } else {\n      content = CSVHolder;\n      extension = '.csv';\n    }\n\n    // If the function is marked for export to Design Safe, route through export, otherwise, download the file\n    if (forExport) {\n      fileName == ''\n        ? (fileName = projID + extension)\n        : (fileName += extension);\n      this.filesService.export(systemID, path, fileName, extension, content);\n    } else {\n      this.download(content, extension, projID);\n    }\n  }\n\n  compileJSON(\n    coordinates,\n    featureID,\n    featureSource: string,\n    groups = [],\n    tags = [],\n    style\n  ) {\n    let compiledJSON = '';\n    let transferJSON;\n\n    // Add the most basic information to the compiled JSON\n    transferJSON = {\n      longitude: coordinates[0],\n      latitude: coordinates[1],\n      src: featureSource,\n    };\n    compiledJSON += JSON.stringify(transferJSON);\n\n    if (groups.length != 0) {\n      groups.forEach((group) => {\n        // At this point, group info should be added,\n        // If tags are set to a default value, there are none present, compile without tag information\n        transferJSON = {\n          groupName: group.name,\n          groupColor: group.color,\n        };\n        compiledJSON += JSON.stringify(transferJSON);\n        if (tags.length > 0) {\n          // Compile a JSON with full tag information\n          tags.forEach((tag) => {\n            if (tag.feature == featureID) {\n              transferJSON = {\n                icon: style.faIcon,\n                'icon color': style.color,\n                'tag name': tag.label,\n                'tag type': tag.type,\n                'tag selection': tag.extra[0].option,\n              };\n              compiledJSON += JSON.stringify(transferJSON);\n            }\n          });\n        }\n      });\n    }\n    // If the above failed, compile the minimum JSON\n    if (compiledJSON == '') {\n      transferJSON = {\n        longitude: coordinates[0],\n        latitude: coordinates[1],\n        src: featureSource,\n      };\n      compiledJSON += JSON.stringify(transferJSON);\n    }\n    return compiledJSON;\n  }\n\n  download(content, extension, projID) {\n    // Creates a download link in typescript through a blob\n    const blob = new Blob(['\\ufeff' + content], {\n      type: 'text/csv;charset=utf-8;',\n    });\n    const download = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    const filename = 'taggit-proj-' + projID;\n\n    // checks if the browser is Safari or otherwise, if so open download in new window\n    // Its a quirk of those browsers that they don't allow same-page downloads\n    if (\n      navigator.userAgent.indexOf('Safari') != -1 &&\n      navigator.userAgent.indexOf('Chrome') == -1\n    ) {\n      download.setAttribute('target', '_blank');\n    }\n    // Sets up the link, and simulates a click\n    download.setAttribute('href', url);\n    download.setAttribute('download', filename + extension);\n    download.style.visibility = 'hidden';\n    document.body.appendChild(download);\n    download.click();\n    document.body.removeChild(download);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { AuthService } from './services/authentication.service';\nimport { environment } from '../environments/environment';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((err) => {\n        if (err.status === 401) {\n          // auto logout if 401 response returned from api\n          this.authService.logout();\n          location.reload();\n        }\n\n        const error = err.error.message || err.statusText;\n        return throwError(error);\n      })\n    );\n  }\n}\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n  constructor(private authSvc: AuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.indexOf('https://agave.designsafe-ci.org') > -1) {\n      if (this.authSvc.isLoggedIn()) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: 'Bearer ' + this.authSvc.userToken.token,\n          },\n        });\n      }\n    }\n    // we put the JWT on the request to our geoapi API because it is not behind ws02 if in local dev\n    // and if user is logged in\n    if (\n      request.url.indexOf('http://localhost') > -1 &&\n      this.authSvc.isLoggedIn()\n    ) {\n      // add header\n      request = request.clone({\n        setHeaders: {\n          'X-JWT-Assertion-designsafe': environment.jwt,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import {\n  AfterViewChecked,\n  Component,\n  OnInit,\n  Renderer2,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { GeoDataService } from '../../services/geo-data.service';\nimport {\n  FeatureAsset,\n  Feature,\n  Project,\n  FeatureCollection,\n  TagGroup,\n} from '../../models/models';\nimport { AppEnvironment, environment } from '../../../environments/environment';\nimport { ProjectsService } from '../../services/projects.service';\nimport { ScrollService } from 'src/app/services/scroll.service';\nimport { GroupsService } from '../../services/groups.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { startWith } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ModalCreateProjectComponent } from '../modal-create-project/modal-create-project.component';\nimport { FeatureService } from 'src/app/services/feature.service';\n\n@Component({\n  selector: 'app-image-gallery',\n  templateUrl: './image-gallery.component.html',\n  styleUrls: ['./image-gallery.component.scss'],\n})\nexport class ImageGalleryComponent implements OnInit, AfterViewChecked {\n  environment: AppEnvironment;\n\n  public projects: Project[];\n  groupName: string;\n  showTagger = false;\n  scrolling = false;\n  scrollStatus: string;\n  imagesExist: boolean;\n  projectsExist: boolean;\n  featureList: Array<any> = [];\n  featureListScroll: Array<any>;\n  scrollSum = 15;\n  activeGroup: TagGroup;\n  activeFeature: Feature;\n  activeGroupFeature: Feature;\n  // activeFeatureNum: number;\n  featurePath: string;\n  loaded: boolean;\n  groupsFeatures: Map<string, any>;\n  groups: Map<string, any>;\n\n  constructor(\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService,\n    private groupsService: GroupsService,\n    private readonly cdr: ChangeDetectorRef,\n    private renderer: Renderer2,\n    private spinner: NgxSpinnerService,\n    private dialog: MatDialog,\n    private scrollService: ScrollService,\n    private featureService: FeatureService\n  ) {}\n\n  ngAfterViewChecked() {\n    if (this.scrollService.scrollRestored) {\n      this.scrollService.scroll();\n    }\n    this.cdr.detectChanges();\n  }\n\n  ngOnInit() {\n    this.environment = environment;\n\n    this.geoDataService.loaded.subscribe(\n      (e) => {\n        this.loaded = e;\n      },\n      (error) => {\n        this.projectsExist = false;\n      }\n    );\n\n    this.featureService.features$.subscribe((fc: any) => {\n      if (fc) {\n        if (fc.features.length > 0) {\n          this.imagesExist = true;\n          this.featureList = fc.features.filter((feature) => {\n            try {\n              return (\n                feature.initialAsset() && feature.featureType() === 'image'\n              );\n            } catch (error) {\n              // If a feature has no asset, it ends up in this catch\n              console.error(error);\n              // After outputting the error, add an \"image not found\" placeholder,\n              // Allowing users to still select their errored import\n              // Note that this doesn't really work!\n              feature.assets.push({ path: '../../images/Image-not-found.png' });\n              return false;\n            }\n          });\n          this.featureListScroll = this.featureList.slice(0, this.scrollSum);\n        } else {\n          this.imagesExist = false;\n        }\n      }\n    });\n\n    this.projectsService.projects.subscribe((projects) => {\n      this.projects = projects;\n      if (this.projects.length) {\n        this.projectsExist = true;\n      } else {\n        this.projectsExist = false;\n      }\n    });\n\n    this.geoDataService.groupsFeatures.subscribe((next) => {\n      this.groupsFeatures = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.geoDataService.activeFeature.subscribe((next) => {\n      if (next) {\n        this.activeFeature = next;\n      }\n    });\n\n    this.geoDataService.activeGroup.subscribe((next: TagGroup) => {\n      this.activeGroup = next;\n    });\n\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.groupsService.showTagger.subscribe((next) => {\n      this.showTagger = next;\n      this.scrollStatus = next ? 'success' : 'danger';\n    });\n  }\n\n  getPath() {\n    return (\n      this.environment.apiUrl +\n      '/assets/' +\n      this.activeGroupFeature.assets[0].path.replace(/([^:])(\\/{2,})/g, '$1/')\n    );\n  }\n\n  appendSum() {\n    if (this.featureList.length != 0) {\n      if (this.scrollSum == this.featureList.length) {\n        this.spinner.hide();\n        this.scrolling = false;\n        return;\n      }\n      // If scrollSum is larger than the length of the feature list, curtail it to just be the length\n      if (this.scrollSum > this.featureList.length) {\n        this.scrollSum = this.featureList.length;\n      }\n    }\n    this.featureListScroll = this.featureList.slice(0, this.scrollSum);\n    setTimeout(() => {\n      this.spinner.hide();\n      this.scrolling = false;\n    }, 1300);\n  }\n\n  onScroll() {\n    if (!this.scrolling) {\n      this.spinner.show();\n      this.scrollSum += 10;\n      this.appendSum();\n      this.scrolling = true;\n    }\n  }\n\n  openCreateProjectModal() {\n    this.dialog.open(ModalCreateProjectComponent, {\n      height: '400px',\n      width: '600px',\n    });\n  }\n}\n","import { Component, Input, OnInit, TemplateRef } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { BsModalRef } from 'ngx-foundation/modal/bs-modal-ref.service';\nimport { FeatureService } from 'src/app/services/feature.service';\nimport { ScrollService } from 'src/app/services/scroll.service';\nimport { AppEnvironment, environment } from '../../../environments/environment';\nimport { Feature, Project, TagGroup } from '../../models/models';\nimport { GeoDataService } from '../../services/geo-data.service';\nimport { GroupsService } from '../../services/groups.service';\nimport { ProjectsService } from '../../services/projects.service';\n\n@Component({\n  selector: 'app-image-box',\n  templateUrl: './image-box.component.html',\n  styleUrls: ['./image-box.component.scss'],\n})\nexport class ImageBoxComponent implements OnInit {\n  @Input() feature: any;\n  environment: AppEnvironment;\n  featureSource: string;\n  featurePath: string;\n  status = false; // Controls the whether or not an image box is selected or not\n  imageSelected = 'img-unselected'; // Controls the whether or not an image box is selected or not\n  hasGroup = false;\n  colors: Array<string> = [];\n  groups: Map<string, TagGroup>;\n  coordinates: Array<any>;\n  containingGroupList: Array<any>;\n  selectedImages: Array<any>;\n  modalRef: BsModalRef;\n  groupToAdd: TagGroup;\n\n  public activeProject: Project;\n\n  constructor(\n    private geoDataService: GeoDataService,\n    private groupsService: GroupsService,\n    private projectsService: ProjectsService,\n    private dialog: MatDialog,\n    private scrollService: ScrollService,\n    private featureService: FeatureService\n  ) {}\n\n  ngOnInit() {\n    // TODO: put this in models\n    this.environment = environment;\n    let featureSource: string;\n    if (this.feature.assets[0].path != '../../images/Image-not-found.png') {\n      featureSource =\n        this.environment.apiUrl + '/assets/' + this.feature.assets[0].path;\n    } else {\n      featureSource = this.feature.assets[0].path;\n    }\n    featureSource = featureSource.replace(/([^:])(\\/{2,})/g, '$1/');\n    this.featureSource = featureSource;\n    this.coordinates = this.feature.geometry.coordinates;\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.groupsService.selectedImages.subscribe((next) => {\n      this.selectedImages = next;\n      this.imageSelected = this.groupsService.imageSelected(this.feature)\n        ? 'img-selected'\n        : 'img-unselected';\n    });\n\n    this.groupsService.groupToAdd.subscribe((next) => {\n      this.groupToAdd = next;\n    });\n\n    this.featurePath = this.feature.featurePath();\n  }\n\n  imageSelect() {\n    this.groupsService.toggleImageSelect(this.feature);\n  }\n\n  compareGroup(a, b) {\n    return a.name === b.name;\n  }\n\n  imageZoom(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  imageDelete() {\n    const featureService = this.featureService;\n    this.selectedImages.forEach(function (value) {\n      featureService.deleteFeature(value);\n    });\n    this.groupsService.unselectAllImages();\n    this.scrollService.setScrollRestored(true);\n  }\n\n  openModal(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  openPreserveScrollModal(template: TemplateRef<any>) {\n    this.scrollService.setScrollPosition();\n    this.dialog.open(template);\n  }\n\n  deleteFromGroup(feature: Feature, group: TagGroup) {\n    this.geoDataService.deleteGroupFeatures(\n      this.activeProject.id,\n      [feature],\n      group\n    );\n  }\n\n  openImageAddModal(template: TemplateRef<any>) {\n    this.scrollService.setScrollPosition();\n    this.dialog.open(template);\n  }\n\n  changeGroupToAdd(ev: any) {\n    this.groupsService.setGroupToAdd(ev.value);\n  }\n\n  addGroup(group: TagGroup) {\n    this.geoDataService.createGroupFeatures(\n      this.activeProject.id,\n      [this.feature],\n      this.groups.get(group.name)\n    );\n    this.groupsService.unselectAllImages();\n    this.scrollService.setScrollRestored(true);\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { GroupForm } from 'src/app/models/models';\n\n@Component({\n  selector: 'app-form-generator',\n  templateUrl: './form-generator.component.html',\n  styleUrls: ['./form-generator.component.scss'],\n})\nexport class FormGeneratorComponent implements OnInit {\n  constructor() {}\n  @Input() form: GroupForm;\n  @Output() newValue: EventEmitter<any> = new EventEmitter<any>();\n  checked = false;\n  colorArray: Array<string> = [];\n  values = [];\n\n  name = new FormControl('');\n\n  ngOnInit() {\n    this.generateColors();\n  }\n\n  // Generates a key:value list of colors ranging from green (#00FF00) to red (#FF0000) based on passed in info\n  generateColors() {\n    let itemCount = this.form.options.length;\n    let isOdd = false;\n    if (itemCount % 2 === 1) {\n      // if there are an odd number of items in the collection, mark it and decriment the counter\n      isOdd = true;\n      itemCount--;\n    }\n    // Subtract 2 from item count (first entry is always green, #00FF00, last entry is always red, #FF0000\n    // Then half the item count, and use it to divide 255, this gives the amount we have to increment the colors\n    itemCount = (itemCount - 2) / 2;\n    let incrementVal = Math.floor(255 / itemCount);\n    if (incrementVal === 255) {\n      incrementVal = Math.floor(incrementVal / 2);\n    }\n    this.colorArray.push('#00FF00');\n    let baseNum = 0;\n    let temp: string;\n    // First loop, counts up from zero towards 255\n    for (let index = 0; index < itemCount; index++) {\n      baseNum = baseNum + incrementVal;\n      temp = baseNum.toString(16);\n      this.colorArray.push(`#${temp}FF00`);\n    }\n    // if there is an odd number of selections, push full yellow as a midpoint in the gradient\n    if (isOdd) {\n      this.colorArray.push('#FFFF00');\n    }\n    baseNum = 255; // Resets baseNum to 255 for the count down\n    // Second loop, counts down from 255 towards zero\n    for (let index = 0; index < itemCount; index++) {\n      baseNum = baseNum - incrementVal;\n      temp = baseNum.toString(16);\n      if (temp.length != 2) {\n        temp = '0' + temp;\n      }\n      this.colorArray.push(`#FF${temp}00`);\n    }\n    // Finally, pushes the color code for red onto the stack for the last entry\n    this.colorArray.push('#FF0000');\n  }\n\n  setValue(formValue) {\n    this.newValue.emit(formValue);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { GroupsService } from '../../services/groups.service';\n\n@Component({\n  selector: 'app-side-bar',\n  templateUrl: './side-bar.component.html',\n  styleUrls: ['./side-bar.component.scss'],\n})\nexport class SideBarComponent implements OnInit {\n  showTagGenerator = false;\n\n  constructor(private groupsService: GroupsService) {}\n\n  ngOnInit() {\n    this.groupsService.showTagGenerator.subscribe((next) => {\n      this.showTagGenerator = next;\n    });\n  }\n}\n","export const groupIcons: Array<any> = [\n  { id: 'fa-house-damage', unicode: '&#xf6f1; house-damage' },\n  { id: 'fa-car', unicode: '&#xf1b9; car' },\n  { id: 'fa-tree', unicode: '&#xf1bb; tree' },\n\n  { id: 'fa-school', unicode: '&#xf549; school' },\n  { id: 'fa-archway', unicode: '&#xf557; archway' },\n  { id: 'fa-building', unicode: '&#xf1ad; building' },\n  { id: 'fa-bus', unicode: '&#xf207; bus' },\n  { id: 'fa-church', unicode: '&#xf51d; church' },\n\n  { id: 'fa-helicopter', unicode: '&#xf533; helicopter' },\n  { id: 'fa-hospital-alt', unicode: '&#xf47d; hospital' },\n  { id: 'fa-hotel', unicode: '&#xf594; hotel' },\n  { id: 'fa-igloo', unicode: '&#xf7ae; igloo' },\n  { id: 'fa-motorcycle', unicode: '&#xf21c; motorcycle' },\n  { id: 'fa-place-of-worship', unicode: '&#xf67f; place-of-worship' },\n  { id: 'fa-plane', unicode: '&#xf072; plane' },\n  { id: 'fa-school', unicode: '&#xf549; school' },\n\n  { id: 'fa-rocket', unicode: '&#xf135; rocket' },\n  { id: 'fa-ship', unicode: '&#xf21a; ship' },\n  { id: 'fa-shopping-cart', unicode: '&#xf07a; shopping-cart' },\n  { id: 'fa-shuttle-van', unicode: '&#xf5b6; shuttle-van' },\n  { id: 'fa-monument', unicode: '&#xf5a6; monument' },\n  { id: 'fa-store', unicode: '&#xf54e; store' },\n\n  { id: 'fa-subway', unicode: '&#xf239; subway' },\n  { id: 'fa-taxi', unicode: '&#xf1ba; taxi' },\n  { id: 'fa-train', unicode: '&#xf238; train' },\n  { id: 'fa-truck', unicode: '&#xf0d1; truck' },\n  { id: 'fa-truck-pickup', unicode: '&#xf63c; truck-pickup' },\n  { id: 'fa-university', unicode: '&#xf19c; university' },\n  { id: 'fa-warehouse', unicode: '&#xf494; warehouse' },\n  { id: 'fa-bolt', unicode: '&#xf0e7; bolt' },\n];\n","import { Component, OnInit, OnDestroy, TemplateRef } from '@angular/core';\nimport { Project, TagGroup } from '../../../models/models';\nimport { ProjectsService } from '../../../services/projects.service';\nimport { FormsService } from '../../../services/forms.service';\nimport { GroupsService } from '../../../services/groups.service';\nimport { GeoDataService } from '../../../services/geo-data.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Subscription } from 'rxjs';\nimport { FeatureService } from 'src/app/services/feature.service';\n\nimport { groupIcons } from 'src/app/utils/groups';\n\n@Component({\n  selector: 'app-select-group',\n  templateUrl: './select-group.component.html',\n  styleUrls: ['./select-group.component.scss'],\n})\nexport class SelectGroupComponent implements OnInit, OnDestroy {\n  groups$: Subscription;\n  activeGroup$: Subscription;\n\n  public selectedProject: Project;\n\n  iconList = groupIcons;\n  selectedIcon = 'fa-house-damage';\n\n  selectedGroup: TagGroup;\n\n  activeGroup: TagGroup;\n  groups: Map<string, TagGroup>;\n  groupsFeatures: Map<string, any>;\n\n  showTagger: boolean;\n  showSubitem = true;\n\n  constructor(\n    private groupsService: GroupsService,\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService,\n    private dialog: MatDialog\n  ) {}\n\n  ngOnInit() {\n    this.projectsService.activeProject.subscribe((next) => {\n      this.selectedProject = next;\n    });\n\n    this.groups$ = this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.geoDataService.groupsFeatures.subscribe((next) => {\n      this.groupsFeatures = next;\n    });\n\n    this.activeGroup$ = this.geoDataService.activeGroup.subscribe((next) => {\n      this.activeGroup = next;\n      if (!next) {\n        this.groupsService.toggleTagger();\n      }\n    });\n  }\n\n  selectGroupForm(group: TagGroup) {\n    this.geoDataService.setActiveGroup(group);\n  }\n\n  openRenameOptionModal(template: TemplateRef<any>) {\n    this.dialog.open(template);\n  }\n\n  // TODO: ensure ui is updated from getFeatures()\n  deleteGroup(group: TagGroup) {\n    const features = this.groupsFeatures.get(group.name);\n    this.geoDataService.deleteGroupFeatures(\n      this.selectedProject.id,\n      features,\n      group\n    );\n  }\n\n  openRenameModal(template: TemplateRef<any>, group: TagGroup) {\n    this.selectedGroup = group;\n    this.dialog.open(template);\n  }\n\n  openIconSelection(template: TemplateRef<any>, group: TagGroup) {\n    this.selectedGroup = group;\n    this.selectedIcon = group.icon;\n    this.dialog.open(template);\n  }\n\n  saveIcon(icon: string) {\n    this.geoDataService.reiconGroup(\n      this.selectedProject.id,\n      this.groupsFeatures.get(this.selectedGroup.name),\n      this.groups.get(this.selectedGroup.name),\n      icon\n    );\n\n    this.dialog.closeAll();\n  }\n\n  isChecked(name: string) {\n    if (this.activeGroup && this.activeGroup.name === name) {\n      return 'checked';\n    } else {\n      return '';\n    }\n  }\n\n  renameGroup(name: string) {\n    this.geoDataService.renameGroup(\n      this.selectedProject.id,\n      this.groupsFeatures.get(this.selectedGroup.name),\n      this.groups.get(this.selectedGroup.name),\n      name\n    );\n\n    this.dialog.closeAll();\n  }\n\n  expandPanel() {\n    this.showSubitem = !this.showSubitem;\n  }\n\n  ngOnDestroy() {\n    this.groups$.unsubscribe();\n    this.activeGroup$.unsubscribe();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Project, TagGroup } from '../../../models/models';\nimport { ProjectsService } from '../../../services/projects.service';\nimport { GeoDataService } from '../../../services/geo-data.service';\nimport { FormsService } from '../../../services/forms.service';\nimport { Feature } from '@turf/turf';\n\n@Component({\n  selector: 'app-select-image',\n  templateUrl: './select-image.component.html',\n  styleUrls: ['./select-image.component.scss'],\n})\nexport class SelectImageComponent implements OnInit {\n  public activeProject: Project;\n  private groups: Map<string, TagGroup>;\n  activeGroup: TagGroup;\n  activeGroupFeature: Feature;\n  showSubitem = true;\n  groupsFeatures: Map<string, any>;\n\n  constructor(\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService\n  ) {}\n\n  ngOnInit() {\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n\n    this.geoDataService.groups.subscribe((next) => {\n      this.groups = next;\n    });\n\n    this.geoDataService.activeGroup.subscribe((next) => {\n      this.activeGroup = next;\n    });\n\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n    });\n\n    this.geoDataService.groupsFeatures.subscribe((next) => {\n      this.groupsFeatures = next;\n      if (next && this.activeGroup) {\n        const groupFeatures = this.groupsFeatures.get(this.activeGroup.name);\n        if (groupFeatures) {\n          if (!groupFeatures.some((f) => f.id === this.activeGroupFeature.id)) {\n            this.geoDataService.setActiveGroupFeature(groupFeatures[0]);\n          }\n        } else {\n          const [nextGroup] = this.groups.values();\n          if (nextGroup) {\n            this.geoDataService.setActiveGroup(nextGroup);\n          } else {\n            this.geoDataService.setActiveGroup(null);\n          }\n        }\n      }\n    });\n  }\n\n  getActiveFeatures() {\n    if (this.activeGroup) {\n      const groupFeatures = this.groupsFeatures.get(this.activeGroup.name);\n      const group = this.groups.get(this.activeGroup.name);\n      if (group) {\n        return groupFeatures;\n      } else {\n        const [nextGroup] = this.groups.values();\n        if (nextGroup) {\n          this.geoDataService.setActiveGroup(nextGroup);\n          return this.groupsFeatures.get(nextGroup.name);\n        } else {\n          return [];\n        }\n      }\n    } else {\n      return [];\n    }\n  }\n\n  jumpToImage(feat: Feature) {\n    this.geoDataService.setActiveGroupFeature(feat);\n  }\n\n  isActiveFeature(feature: Feature) {\n    return this.activeGroupFeature.id === feature.id;\n  }\n\n  deleteFeature(feat: any) {\n    this.geoDataService.deleteGroupFeatures(\n      this.activeProject.id,\n      [feat],\n      this.groups.get(this.activeGroup.name)\n    );\n  }\n\n  getFeaturePath(feat: any) {\n    return feat.featureShortPath();\n  }\n\n  expandPanel() {\n    this.showSubitem = !this.showSubitem;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { GroupForm } from 'src/app/models/models';\n\n@Component({\n  selector: 'app-form-fields',\n  templateUrl: './form-fields.component.html',\n})\nexport class FormFieldsComponent implements OnInit {\n  field: any;\n  form: GroupForm;\n\n  constructor() {}\n\n  // This file and the HTML connected to this is useless so don't worry about it\n  ngOnInit() {}\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { FeatureService } from 'src/app/services/feature.service';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { GroupsService } from 'src/app/services/groups.service';\nimport { Feature, GroupForm, Project, TagGroup } from 'src/app/models/models';\nimport { ProjectsService } from 'src/app/services/projects.service';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\n\n@Component({\n  selector: 'app-form-checkbox',\n  templateUrl: 'form-checkbox.component.html',\n})\nexport class FormCheckBoxComponent {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any;\n  @Input() form: GroupForm;\n  value: any[] = [];\n  activeGroupFeature: Feature;\n  activeGroup: TagGroup;\n  private activeProject: Project;\n\n  constructor(\n    private formsService: FormsService,\n    private groupsService: GroupsService,\n    private geoDataService: GeoDataService,\n    private projectsService: ProjectsService,\n    private featureService: FeatureService\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.formValue.emit({ id: this.form.id, value: this.value });\n    });\n\n    this.geoDataService.activeGroup.subscribe((next) => {\n      this.activeGroup = next;\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n  }\n\n  isChecked(opt) {\n    return this.value.some((val) => val.label === opt.label);\n  }\n\n  selected(e: any, option: any) {\n    this.value = this.value.filter((opt) => opt.label !== option.label);\n    if (e.target.checked) {\n      this.value.push(option);\n    }\n    this.formValue.emit({ id: this.form.id, value: this.value });\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { GroupsService } from 'src/app/services/groups.service';\nimport { Feature, GroupForm } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\n\n@Component({\n  selector: 'app-form-dropdown',\n  templateUrl: './form-dropdown.component.html',\n})\nexport class FormDropDownComponent {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any = {};\n  @Input() form: GroupForm;\n  value: string;\n\n  constructor(\n    private formsService: FormsService,\n    private geoDataService: GeoDataService\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.formValue.emit({ id: this.form.id, value: this.value });\n    });\n  }\n\n  updateCheckedTag() {\n    this.formValue.emit({ id: this.form.id, value: this.value });\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { GroupForm } from 'src/app/models/models';\n\n@Component({\n  selector: 'app-form-file',\n  templateUrl: './form-file.component.html',\n  styleUrls: ['./form-file.component.scss'],\n})\nexport class FormFileComponent {\n  field: any = {};\n  form: GroupForm;\n\n  constructor() {}\n\n  ngOnChange() {\n    console.log(this.field.value);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { GroupForm } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\n\n@Component({\n  selector: 'app-form-radio',\n  templateUrl: './form-radio.component.html',\n})\nexport class FormRadioComponent {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any = {};\n  @Input() form: GroupForm;\n  @Input() label: String;\n  public value: string;\n\n  constructor(\n    private formsService: FormsService,\n    private geoDataService: GeoDataService\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.formValue.emit({ id: this.form.id, value: this.value });\n    });\n  }\n\n  updateCheckedTag() {\n    this.formValue.emit({ id: this.form.id, value: this.value });\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { Feature, GroupForm, Project, TagGroup } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\n\n@Component({\n  selector: 'app-form-textbox',\n  templateUrl: './form-textbox.component.html',\n})\nexport class FormTextBoxComponent {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any = {};\n  @Input() form: GroupForm;\n  value = '';\n\n  constructor(\n    private formsService: FormsService,\n    private geoDataService: GeoDataService\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.formValue.emit({ id: this.form.id, value: this.value });\n    });\n  }\n\n  updateValue() {\n    this.formValue.emit({ id: this.form.id, value: this.value });\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { FormsService } from 'src/app/services/forms.service';\nimport { Feature, Project, GroupForm, TagGroup } from 'src/app/models/models';\nimport { GeoDataService } from 'src/app/services/geo-data.service';\nimport { ProjectsService } from 'src/app/services/projects.service';\n\n@Component({\n  selector: 'app-form-color',\n  templateUrl: './form-color.component.html',\n  styleUrls: ['./form-color.component.scss'],\n})\nexport class FormColorComponent implements OnInit {\n  @Output() formValue: EventEmitter<any> = new EventEmitter<any>();\n  @Input() field: any = {};\n  @Input() form: GroupForm;\n  @Input() color: string;\n  @Input() label: String;\n\n  public chosenTag: string;\n  public activeProject: Project;\n  public activeGroup: TagGroup;\n  public activeGroupFeature: Feature;\n  public chosenColor = '#ffffff';\n  value: any = {};\n\n  constructor(\n    private formsService: FormsService,\n    private projectsService: ProjectsService,\n    private geoDataService: GeoDataService\n  ) {}\n\n  ngOnInit() {\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.value = this.formsService.getTagValue(next, this.form);\n      this.chosenTag = this.value.label;\n      this.formValue.emit({ id: this.form.id, value: this.value });\n    });\n\n    this.projectsService.activeProject.subscribe((next) => {\n      this.activeProject = next;\n    });\n\n    this.geoDataService.activeGroup.subscribe((next: TagGroup) => {\n      this.activeGroup = next;\n    });\n\n    this.geoDataService.activeGroupFeature.subscribe((next) => {\n      this.activeGroupFeature = next;\n    });\n  }\n\n  updateCheckedTag() {\n    this.value = this.form.options.find((opt) => opt.label === this.chosenTag);\n    this.formsService.saveStyles(\n      this.activeProject.id,\n      [this.activeGroupFeature],\n      this.activeGroup,\n      this.value.color\n    );\n    this.formValue.emit({ id: this.form.id, value: this.value });\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n// CommonModule for dynamic field\nimport { APP_BASE_HREF, CommonModule } from '@angular/common';\n\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { NgxSpinnerModule } from 'ngx-spinner';\nimport { ModalModule, BsDropdownModule, AccordionModule } from 'ngx-foundation';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { NgxMasonryModule } from 'ngx-masonry';\nimport { ToastrModule } from 'ngx-toastr';\n\nimport { FileSizeModule } from 'ngx-filesize';\nimport { ApiModule } from 'ng-tapis';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { MapComponent } from './components/map/map.component';\nimport { MainComponent } from './components/main/main.component';\nimport { NotFoundComponent } from './components/notfound/notfound.component';\nimport { ControlBarComponent } from './components/control-bar/control-bar.component';\nimport { AuthService } from './services/authentication.service';\nimport { CallbackComponent } from './components/callback/callback.component';\nimport { AuthInterceptor, TokenInterceptor } from './app.interceptors';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { ModalFileBrowserComponent } from './components/modal-file-browser/modal-file-browser.component';\nimport { environment } from '../environments/environment';\nimport { ImageGalleryComponent } from './components/image-gallery/image-gallery.component';\n// import { TaggerComponent } from './components/tagger/tagger.component';\n// import { PresetGeneratorComponent } from './components/preset-generator/preset-generator.component';\nimport { ImageBoxComponent } from './components/image-box/image-box.component';\nimport { FormGeneratorComponent } from './components/side-bar/tag-images/form-generator/form-generator.component';\nimport { SideBarComponent } from './components/side-bar/side-bar.component';\n// import { ImageListComponent } from './components/image-list/image-list.component';\nimport { SelectGroupComponent } from './components/side-bar/select-group/select-group.component';\nimport { SelectImageComponent } from './components/side-bar/select-image/select-image.component';\nimport { TagGeneratorComponent } from './components/side-bar/tag-generator/tag-generator.component';\nimport { TagImagesComponent } from './components/side-bar/tag-images/tag-images.component';\nimport { ModalCreateProjectComponent } from './components/modal-create-project/modal-create-project.component';\nimport { ModalCurrentProjectComponent } from './components/modal-current-project/modal-current-project.component';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { MatProgressBar } from '@angular/material';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { ModalDownloadSelectorComponent } from './components/modal-download-selector/modal-download-selector.component';\nimport { FormFieldsComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-fields.component';\nimport { FormCheckBoxComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-checkbox/form-checkbox.component';\nimport { FormDropDownComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-dropdown/form-dropdown.component';\nimport { FormFileComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-file/form-file.component';\nimport { FormRadioComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-radio/form-radio.component';\nimport { FormTextBoxComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-textbox/form-textbox.component';\nimport { FormColorComponent } from './components/side-bar/tag-images/form-generator/form-fields/form-color/form-color.component';\nimport { ModalShareProjectComponent } from './components/modal-share-project/modal-share-project.component';\nimport { MatCardModule } from '@angular/material/card';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MapComponent,\n    NotFoundComponent,\n    MainComponent,\n    ControlBarComponent,\n    CallbackComponent,\n    ModalFileBrowserComponent,\n    ImageGalleryComponent,\n    // TaggerComponent,\n    // PresetGeneratorComponent,\n    ImageBoxComponent,\n    FormGeneratorComponent,\n    SideBarComponent,\n    // ImageListComponent,\n    SelectGroupComponent,\n    SelectImageComponent,\n    TagGeneratorComponent,\n    TagImagesComponent,\n    ModalCreateProjectComponent,\n    ModalCurrentProjectComponent,\n    MatProgressBar,\n    ModalDownloadSelectorComponent,\n    FormFieldsComponent,\n    FormCheckBoxComponent,\n    FormDropDownComponent,\n    FormFileComponent,\n    FormRadioComponent,\n    FormTextBoxComponent,\n    ModalShareProjectComponent,\n    FormColorComponent,\n  ],\n  imports: [\n    // this is for the ng-tapis library\n    ApiModule.forRoot({ rootUrl: 'https://agave.designsafe-ci.org/' }),\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    InfiniteScrollModule,\n    NgxSpinnerModule,\n    NgxMasonryModule,\n    ToastrModule.forRoot(),\n    ModalModule.forRoot(),\n    MatMenuModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatTooltipModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatIconModule,\n    AccordionModule.forRoot(),\n    ReactiveFormsModule,\n    FormsModule,\n    FileSizeModule,\n    BsDropdownModule.forRoot(),\n    CommonModule,\n    MatProgressSpinnerModule,\n    ScrollingModule,\n    MatTreeModule,\n    MatSnackBarModule,\n    MatCardModule,\n  ],\n  providers: [\n    AuthService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      multi: true,\n      useClass: AuthInterceptor,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      multi: true,\n      useClass: TokenInterceptor,\n    },\n    {\n      provide: APP_BASE_HREF,\n      useValue: environment.baseHref,\n    },\n  ],\n  bootstrap: [AppComponent],\n  entryComponents: [\n    ModalFileBrowserComponent,\n    ModalDownloadSelectorComponent,\n    ModalCreateProjectComponent,\n    ModalCurrentProjectComponent,\n    ModalShareProjectComponent,\n  ],\n})\nexport class AppModule {}\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n","export default \"<div class=\\\"tag-forms\\\">\\n  <div class=\\\"subitem-title\\\" (click)=\\\"expandPanel()\\\">\\n    <span> Tag Images </span>\\n    <span>\\n      <span\\n        style=\\\"cursor: pointer\\\"\\n        (click)=\\\"showTagGenerator()\\\"\\n        matTooltip=\\\"Add New Tag Form\\\"\\n        style=\\\"cursor: pointer; margin-right: 10px\\\"\\n        matTooltipPosition=\\\"above\\\"\\n      >\\n        <i class=\\\"fas fa-plus\\\"></i>\\n      </span>\\n    </span>\\n  </div>\\n  <!-- subitem-title -->\\n\\n  <div *ngIf=\\\"showSubitem\\\" class=\\\"subitem\\\">\\n    <div class=\\\"subitem-scroll\\\">\\n      <div *ngFor=\\\"let form of formList\\\">\\n        <div class=\\\"form-item-container\\\">\\n          <div class=\\\"name-group\\\">{{ form.label }} ({{ form.type }})</div>\\n          <div class=\\\"button-group\\\">\\n            <div (click)=\\\"deleteForm(form)\\\">\\n              <i\\n                class=\\\"fas fa-minus\\\"\\n                matTooltip=\\\"Delete\\\"\\n                matTooltipPosition=\\\"above\\\"\\n                style=\\\"cursor: pointer\\\"\\n              >\\n              </i>\\n            </div>\\n            <!-- delete button -->\\n\\n            <div (click)=\\\"openRenameOptionModal(renameFormItemModal)\\\">\\n              <i\\n                class=\\\"fas fa-edit\\\"\\n                matTooltip=\\\"Rename\\\"\\n                matTooltipPosition=\\\"above\\\"\\n                style=\\\"cursor: pointer\\\"\\n              >\\n              </i>\\n            </div>\\n\\n            <ng-template #renameFormItemModal>\\n              <input\\n                matInput\\n                #formItemRename\\n                [(ngModel)]=\\\"newTagValue\\\"\\n                value=\\\"{{ form.label }}\\\"\\n                placeholder=\\\"Rename Form Item\\\"\\n                (keyup.enter)=\\\"renameForm(form)\\\"\\n              />\\n              <br />\\n              <br />\\n              <div class=\\\"button-group\\\">\\n                <button\\n                  matDialogClose\\n                  mat-raised-button\\n                  color=\\\"primary\\\"\\n                  (click)=\\\"renameForm(form.label)\\\"\\n                >\\n                  Rename\\n                </button>\\n                <button matDialogClose mat-button>Cancel</button>\\n              </div>\\n            </ng-template>\\n            <!-- rename modal -->\\n          </div>\\n          <!-- button group -->\\n        </div>\\n        <!-- form-item-container -->\\n        <app-form-generator\\n          (newValue)=\\\"setValue($event)\\\"\\n          [form]=\\\"form\\\"\\n        ></app-form-generator>\\n      </div>\\n      <div *ngIf=\\\"formList && formList.length\\\">\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"saveTags()\\\">\\n          Save\\n        </button>\\n      </div>\\n    </div>\\n    <!-- subitem scroll -->\\n  </div>\\n  <!--subitem -->\\n</div>\\n<!-- tag-forms -->\\n\"","export default \"<div>\\n  <div [ngSwitch]=\\\"form.type\\\" class=\\\"form-controls\\\">\\n    <ng-container *ngSwitchCase=\\\"'text'\\\">\\n      <app-form-textbox\\n        (formValue)=\\\"setValue($event)\\\"\\n        [field]=\\\"form.options\\\"\\n        [form]=\\\"form\\\"\\n      ></app-form-textbox>\\n    </ng-container>\\n\\n    <ng-container *ngSwitchCase=\\\"'dropdown'\\\">\\n      <app-form-dropdown\\n        (formValue)=\\\"setValue($event)\\\"\\n        [field]=\\\"form.options\\\"\\n        [form]=\\\"form\\\"\\n      ></app-form-dropdown>\\n    </ng-container>\\n\\n    <ng-container *ngSwitchCase=\\\"'radio'\\\">\\n      <app-form-radio\\n        (formValue)=\\\"setValue($event)\\\"\\n        [field]=\\\"opt\\\"\\n        [form]=\\\"form\\\"\\n        label=\\\"{{ form.label }}\\\"\\n      ></app-form-radio>\\n    </ng-container>\\n\\n    <ng-container *ngSwitchCase=\\\"'checkbox'\\\">\\n      <app-form-checkbox\\n        (formValue)=\\\"setValue($event)\\\"\\n        [form]=\\\"form\\\"\\n      ></app-form-checkbox>\\n    </ng-container>\\n\\n    <ng-container *ngSwitchCase=\\\"'color'\\\">\\n      <app-form-color\\n        (formValue)=\\\"setValue($event)\\\"\\n        [field]=\\\"opt\\\"\\n        [form]=\\\"form\\\"\\n        label=\\\"{{ form.label }}\\\"\\n        [color]=\\\"colorArray[form.options.indexOf(opt)]\\\"\\n      ></app-form-color>\\n    </ng-container>\\n  </div>\\n</div>\\n\""]}